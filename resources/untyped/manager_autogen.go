// Code generated by generate-untyped-resources. DO NOT EDIT.

package untyped

import (
	"context"
	"net/http"

	"github.com/vast-data/go-vast-client/core"
)

// ManagerAuthorizedStatusWithContext_GET
// method: GET
// url: /managers/authorized_status/
// summary: Get authorized status for a user
func (m *Manager) ManagerAuthorizedStatusWithContext_GET(ctx context.Context, params core.Params) (core.Record, error) {
	resourcePath := "/managers/authorized_status/"
	result, err := core.Request[core.Record](ctx, m, http.MethodGet, resourcePath, params, nil)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// ManagerAuthorizedStatus_GET
// method: GET
// url: /managers/authorized_status/
// summary: Get authorized status for a user
func (m *Manager) ManagerAuthorizedStatus_GET(params core.Params) (core.Record, error) {
	return m.ManagerAuthorizedStatusWithContext_GET(m.Rest.GetCtx(), params)
}

// ManagerPasswordWithContext_PATCH
// method: PATCH
// url: /managers/password/
// summary: Change user's password
//
// Parameters:
//   - password (body): New password.
func (m *Manager) ManagerPasswordWithContext_PATCH(ctx context.Context, password string) error {
	resourcePath := "/managers/password/"
	body := core.Params{}
	body["password"] = password
	_, err := core.Request[core.EmptyRecord](ctx, m, http.MethodPatch, resourcePath, nil, body)
	return err

}

// ManagerPassword_PATCH
// method: PATCH
// url: /managers/password/
// summary: Change user's password
//
// Parameters:
//   - password (body): New password.
func (m *Manager) ManagerPassword_PATCH(password string) error {
	return m.ManagerPasswordWithContext_PATCH(m.Rest.GetCtx(), password)
}

// ManagerUnlockWithContext_PATCH
// method: PATCH
// url: /managers/{id}/unlock/
// summary: Unlock a Manager
//
// Parameters:
//   - isTemporaryPassword (body): Sets the password to be temporary. Expiration of temporary passwords is controlled by the tmp_pwd_expiration_timeout setting, which you can modify and retrieve through the /vms/{id}/pwd_settings/ path.
//   - password (body): The manager's (new) password.
func (m *Manager) ManagerUnlockWithContext_PATCH(ctx context.Context, id any, isTemporaryPassword bool, password string) error {
	resourcePath := core.BuildResourcePathWithID("managers", id, "unlock")
	body := core.Params{}
	if isTemporaryPassword != false {
		body["is_temporary_password"] = isTemporaryPassword
	}
	if password != "" {
		body["password"] = password
	}
	_, err := core.Request[core.EmptyRecord](ctx, m, http.MethodPatch, resourcePath, nil, body)
	return err

}

// ManagerUnlock_PATCH
// method: PATCH
// url: /managers/{id}/unlock/
// summary: Unlock a Manager
//
// Parameters:
//   - isTemporaryPassword (body): Sets the password to be temporary. Expiration of temporary passwords is controlled by the tmp_pwd_expiration_timeout setting, which you can modify and retrieve through the /vms/{id}/pwd_settings/ path.
//   - password (body): The manager's (new) password.
func (m *Manager) ManagerUnlock_PATCH(id any, isTemporaryPassword bool, password string) error {
	return m.ManagerUnlockWithContext_PATCH(m.Rest.GetCtx(), id, isTemporaryPassword, password)
}
