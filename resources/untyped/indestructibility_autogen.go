// Code generated by generate-untyped-resources. DO NOT EDIT.

package untyped

import (
	"context"
	"net/http"

	"github.com/vast-data/go-vast-client/core"
)

// IndestructibilityGenerateTokenWithContext_PATCH
// method: PATCH
// url: /indestructibility/{id}/generate_token/
// summary: Generate Indestructibility Token
//
// Parameters:
//   - indestructibilityPasswd (body): Request parameter
func (i *Indestructibility) IndestructibilityGenerateTokenWithContext_PATCH(ctx context.Context, id any, indestructibilityPasswd string) (core.Record, error) {
	resourcePath := core.BuildResourcePathWithID("indestructibility", id, "generate_token")
	body := core.Params{}
	if indestructibilityPasswd != "" {
		body["indestructibility_passwd"] = indestructibilityPasswd
	}
	result, err := core.Request[core.Record](ctx, i, http.MethodPatch, resourcePath, nil, body)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// IndestructibilityGenerateToken_PATCH
// method: PATCH
// url: /indestructibility/{id}/generate_token/
// summary: Generate Indestructibility Token
//
// Parameters:
//   - indestructibilityPasswd (body): Request parameter
func (i *Indestructibility) IndestructibilityGenerateToken_PATCH(id any, indestructibilityPasswd string) (core.Record, error) {
	return i.IndestructibilityGenerateTokenWithContext_PATCH(i.Rest.GetCtx(), id, indestructibilityPasswd)
}

// IndestructibilityResetPasswdWithContext_PATCH
// method: PATCH
// url: /indestructibility/{id}/reset_passwd/
// summary: Reset Indestructibility Password
func (i *Indestructibility) IndestructibilityResetPasswdWithContext_PATCH(ctx context.Context, id any, body core.Params) (core.Record, error) {
	resourcePath := core.BuildResourcePathWithID("indestructibility", id, "reset_passwd")
	result, err := core.Request[core.Record](ctx, i, http.MethodPatch, resourcePath, nil, body)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// IndestructibilityResetPasswd_PATCH
// method: PATCH
// url: /indestructibility/{id}/reset_passwd/
// summary: Reset Indestructibility Password
func (i *Indestructibility) IndestructibilityResetPasswd_PATCH(id any, body core.Params) (core.Record, error) {
	return i.IndestructibilityResetPasswdWithContext_PATCH(i.Rest.GetCtx(), id, body)
}

// IndestructibilityUnlockWithContext_PATCH
// method: PATCH
// url: /indestructibility/{id}/unlock/
// summary: Unlock Indestructibility
//
// Parameters:
//   - challengeToken (body): A challenge token, provided by Support. To obtain a challenge token, first generate an indestructibility token and provide it to Support with any additional identifying details required by Support.
func (i *Indestructibility) IndestructibilityUnlockWithContext_PATCH(ctx context.Context, id any, challengeToken string) (core.Record, error) {
	resourcePath := core.BuildResourcePathWithID("indestructibility", id, "unlock")
	body := core.Params{}
	if challengeToken != "" {
		body["challenge_token"] = challengeToken
	}
	result, err := core.Request[core.Record](ctx, i, http.MethodPatch, resourcePath, nil, body)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// IndestructibilityUnlock_PATCH
// method: PATCH
// url: /indestructibility/{id}/unlock/
// summary: Unlock Indestructibility
//
// Parameters:
//   - challengeToken (body): A challenge token, provided by Support. To obtain a challenge token, first generate an indestructibility token and provide it to Support with any additional identifying details required by Support.
func (i *Indestructibility) IndestructibilityUnlock_PATCH(id any, challengeToken string) (core.Record, error) {
	return i.IndestructibilityUnlockWithContext_PATCH(i.Rest.GetCtx(), id, challengeToken)
}
