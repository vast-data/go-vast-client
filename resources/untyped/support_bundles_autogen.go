// Code generated by generate-untyped-resources. DO NOT EDIT.

package untyped

import (
	"context"
	"net/http"
	"time"

	"github.com/vast-data/go-vast-client/core"
)

// SupportBundlesDownloadWithContext_GET
// method: GET
// url: /supportbundles/{id}/download/
// summary: Download a Support Bundle
func (s *SupportBundles) SupportBundlesDownloadWithContext_GET(ctx context.Context, id any, params core.Params) (core.Record, error) {
	resourcePath := core.BuildResourcePathWithID("supportbundles", id, "download")
	result, err := core.Request[core.Record](ctx, s, http.MethodGet, resourcePath, params, nil)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// SupportBundlesDownload_GET
// method: GET
// url: /supportbundles/{id}/download/
// summary: Download a Support Bundle
func (s *SupportBundles) SupportBundlesDownload_GET(id any, params core.Params) (core.Record, error) {
	return s.SupportBundlesDownloadWithContext_GET(s.Rest.GetCtx(), id, params)
}

// SupportBundlesUploadWithContext_PATCH
// method: PATCH
// url: /supportbundles/{id}/upload/
// summary: Upload Support Bundle to AWS S3.
//
// Parameters:
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (s *SupportBundles) SupportBundlesUploadWithContext_PATCH(ctx context.Context, id any, body core.Params, waitTimeout time.Duration) (*AsyncResult, error) {
	resourcePath := core.BuildResourcePathWithID("supportbundles", id, "upload")
	result, err := core.Request[core.Record](ctx, s, http.MethodPatch, resourcePath, nil, body)
	if err != nil {
		return nil, err
	}

	asyncResult, _, err := MaybeWaitAsyncResultWithContext(ctx, result, s.Rest, waitTimeout)
	return asyncResult, err

}

// SupportBundlesUpload_PATCH
// method: PATCH
// url: /supportbundles/{id}/upload/
// summary: Upload Support Bundle to AWS S3.
//
// Parameters:
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (s *SupportBundles) SupportBundlesUpload_PATCH(id any, body core.Params, waitTimeout time.Duration) (*AsyncResult, error) {
	return s.SupportBundlesUploadWithContext_PATCH(s.Rest.GetCtx(), id, body, waitTimeout)
}
