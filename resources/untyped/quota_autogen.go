// Code generated by generate-untyped-resources. DO NOT EDIT.

package untyped

import (
	"context"
	"net/http"

	"github.com/vast-data/go-vast-client/core"
)

// QuotaRecalcStopWithContext_PATCH
// method: PATCH
// url: /quotas/recalc_stop/
// summary: Stop recalculation flow for all quotas
func (q *Quota) QuotaRecalcStopWithContext_PATCH(ctx context.Context, body core.Params) error {
	resourcePath := "/quotas/recalc_stop/"
	_, err := core.Request[core.EmptyRecord](ctx, q, http.MethodPatch, resourcePath, nil, body)
	return err

}

// QuotaRecalcStop_PATCH
// method: PATCH
// url: /quotas/recalc_stop/
// summary: Stop recalculation flow for all quotas
func (q *Quota) QuotaRecalcStop_PATCH(body core.Params) error {
	return q.QuotaRecalcStopWithContext_PATCH(q.Rest.GetCtx(), body)
}

// QuotaRecalcWithContext_PATCH
// method: PATCH
// url: /quotas/recalc/
// summary: Start recalculation flow all quotas
func (q *Quota) QuotaRecalcWithContext_PATCH(ctx context.Context, body core.Params) error {
	resourcePath := "/quotas/recalc/"
	_, err := core.Request[core.EmptyRecord](ctx, q, http.MethodPatch, resourcePath, nil, body)
	return err

}

// QuotaRecalc_PATCH
// method: PATCH
// url: /quotas/recalc/
// summary: Start recalculation flow all quotas
func (q *Quota) QuotaRecalc_PATCH(body core.Params) error {
	return q.QuotaRecalcWithContext_PATCH(q.Rest.GetCtx(), body)
}

// QuotaRefreshUserQuotasWithContext_PATCH
// method: PATCH
// url: /quotas/{id}/refresh_user_quotas/
// summary: Refresh a Quota's User Quotas
func (q *Quota) QuotaRefreshUserQuotasWithContext_PATCH(ctx context.Context, id any, body core.Params) error {
	resourcePath := core.BuildResourcePathWithID("quotas", id, "refresh_user_quotas")
	_, err := core.Request[core.EmptyRecord](ctx, q, http.MethodPatch, resourcePath, nil, body)
	return err

}

// QuotaRefreshUserQuotas_PATCH
// method: PATCH
// url: /quotas/{id}/refresh_user_quotas/
// summary: Refresh a Quota's User Quotas
func (q *Quota) QuotaRefreshUserQuotas_PATCH(id any, body core.Params) error {
	return q.QuotaRefreshUserQuotasWithContext_PATCH(q.Rest.GetCtx(), id, body)
}

// QuotaResetGracePeriodWithContext_PATCH
// method: PATCH
// url: /quotas/{id}/reset_grace_period/
// summary: Reset the grace period countdown after soft limit is exceeded
func (q *Quota) QuotaResetGracePeriodWithContext_PATCH(ctx context.Context, id any, body core.Params) error {
	resourcePath := core.BuildResourcePathWithID("quotas", id, "reset_grace_period")
	_, err := core.Request[core.EmptyRecord](ctx, q, http.MethodPatch, resourcePath, nil, body)
	return err

}

// QuotaResetGracePeriod_PATCH
// method: PATCH
// url: /quotas/{id}/reset_grace_period/
// summary: Reset the grace period countdown after soft limit is exceeded
func (q *Quota) QuotaResetGracePeriod_PATCH(id any, body core.Params) error {
	return q.QuotaResetGracePeriodWithContext_PATCH(q.Rest.GetCtx(), id, body)
}
