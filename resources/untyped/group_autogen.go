// Code generated by generate-untyped-resources. DO NOT EDIT.

package untyped

import (
	"context"
	"net/http"

	"github.com/vast-data/go-vast-client/core"
)

// GroupNamesWithContext_GET
// method: GET
// url: /groups/names/
// summary: Find Group by prefix and domain details
func (g *Group) GroupNamesWithContext_GET(ctx context.Context, params core.Params) (core.Record, error) {
	resourcePath := "/groups/names/"
	result, err := core.Request[core.Record](ctx, g, http.MethodGet, resourcePath, params, nil)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GroupNames_GET
// method: GET
// url: /groups/names/
// summary: Find Group by prefix and domain details
func (g *Group) GroupNames_GET(params core.Params) (core.Record, error) {
	return g.GroupNamesWithContext_GET(g.Rest.GetCtx(), params)
}

// GroupQueryWithContext_GET
// method: GET
// url: /groups/query/
// summary: Query Group
func (g *Group) GroupQueryWithContext_GET(ctx context.Context, params core.Params) (core.Record, error) {
	resourcePath := "/groups/query/"
	result, err := core.Request[core.Record](ctx, g, http.MethodGet, resourcePath, params, nil)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GroupQuery_GET
// method: GET
// url: /groups/query/
// summary: Query Group
func (g *Group) GroupQuery_GET(params core.Params) (core.Record, error) {
	return g.GroupQueryWithContext_GET(g.Rest.GetCtx(), params)
}

// GroupQueryWithContext_PATCH
// method: PATCH
// url: /groups/query/
// summary: Modify non-Local Group
func (g *Group) GroupQueryWithContext_PATCH(ctx context.Context, body core.Params) (core.Record, error) {
	resourcePath := "/groups/query/"
	result, err := core.Request[core.Record](ctx, g, http.MethodPatch, resourcePath, nil, body)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GroupQuery_PATCH
// method: PATCH
// url: /groups/query/
// summary: Modify non-Local Group
func (g *Group) GroupQuery_PATCH(body core.Params) (core.Record, error) {
	return g.GroupQueryWithContext_PATCH(g.Rest.GetCtx(), body)
}
