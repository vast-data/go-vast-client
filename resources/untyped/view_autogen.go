// Code generated by generate-untyped-resources. DO NOT EDIT.

package untyped

import (
	"context"
	"net/http"
	"time"

	"github.com/vast-data/go-vast-client/core"
)

// ViewCheckPermissionsTemplatesWithContext_POST
// method: POST
// url: /views/{id}/check_permissions_templates/
// summary: Check Permissions Templates Before Bulk Permission Update
func (v *View) ViewCheckPermissionsTemplatesWithContext_POST(ctx context.Context, id any, body core.Params) (core.Record, error) {
	resourcePath := core.BuildResourcePathWithID("views", id, "check_permissions_templates")
	result, err := core.Request[core.Record](ctx, v, http.MethodPost, resourcePath, nil, body)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// ViewCheckPermissionsTemplates_POST
// method: POST
// url: /views/{id}/check_permissions_templates/
// summary: Check Permissions Templates Before Bulk Permission Update
func (v *View) ViewCheckPermissionsTemplates_POST(id any, body core.Params) (core.Record, error) {
	return v.ViewCheckPermissionsTemplatesWithContext_POST(v.Rest.GetCtx(), id, body)
}

// ViewCloseSmbHandleWithContext_DELETE
// method: DELETE
// url: /views/close_smb_handle/
// summary: Close open SMB filehandles
func (v *View) ViewCloseSmbHandleWithContext_DELETE(ctx context.Context, params core.Params) (core.Record, error) {
	resourcePath := "/views/close_smb_handle/"
	result, err := core.Request[core.Record](ctx, v, http.MethodDelete, resourcePath, params, nil)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// ViewCloseSmbHandle_DELETE
// method: DELETE
// url: /views/close_smb_handle/
// summary: Close open SMB filehandles
func (v *View) ViewCloseSmbHandle_DELETE(params core.Params) (core.Record, error) {
	return v.ViewCloseSmbHandleWithContext_DELETE(v.Rest.GetCtx(), params)
}

// ViewLegalHoldWithContext_GET
// method: GET
// url: /views/{id}/legal_hold/
// summary: Get legal hold
func (v *View) ViewLegalHoldWithContext_GET(ctx context.Context, id any, params core.Params) (core.Record, error) {
	resourcePath := core.BuildResourcePathWithID("views", id, "legal_hold")
	result, err := core.Request[core.Record](ctx, v, http.MethodGet, resourcePath, params, nil)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// ViewLegalHold_GET
// method: GET
// url: /views/{id}/legal_hold/
// summary: Get legal hold
func (v *View) ViewLegalHold_GET(id any, params core.Params) (core.Record, error) {
	return v.ViewLegalHoldWithContext_GET(v.Rest.GetCtx(), id, params)
}

// ViewLegalHoldWithContext_PATCH
// method: PATCH
// url: /views/{id}/legal_hold/
// summary: Change legal hold
//
// Parameters:
//   - legalHoldPath (body): Path to set/unset
//   - value (body): True to set, False to unset
func (v *View) ViewLegalHoldWithContext_PATCH(ctx context.Context, id any, legalHoldPath string, value bool) (core.Record, error) {
	resourcePath := core.BuildResourcePathWithID("views", id, "legal_hold")
	body := core.Params{}
	body["legal_hold_path"] = legalHoldPath
	body["value"] = value
	result, err := core.Request[core.Record](ctx, v, http.MethodPatch, resourcePath, nil, body)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// ViewLegalHold_PATCH
// method: PATCH
// url: /views/{id}/legal_hold/
// summary: Change legal hold
//
// Parameters:
//   - legalHoldPath (body): Path to set/unset
//   - value (body): True to set, False to unset
func (v *View) ViewLegalHold_PATCH(id any, legalHoldPath string, value bool) (core.Record, error) {
	return v.ViewLegalHoldWithContext_PATCH(v.Rest.GetCtx(), id, legalHoldPath, value)
}

// ViewListOpenSmbHandlesWithContext_GET
// method: GET
// url: /views/list_open_smb_handles/
// summary: Query open SMB filehandles
func (v *View) ViewListOpenSmbHandlesWithContext_GET(ctx context.Context, params core.Params) (core.Record, error) {
	resourcePath := "/views/list_open_smb_handles/"
	result, err := core.Request[core.Record](ctx, v, http.MethodGet, resourcePath, params, nil)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// ViewListOpenSmbHandles_GET
// method: GET
// url: /views/list_open_smb_handles/
// summary: Query open SMB filehandles
func (v *View) ViewListOpenSmbHandles_GET(params core.Params) (core.Record, error) {
	return v.ViewListOpenSmbHandlesWithContext_GET(v.Rest.GetCtx(), params)
}

// ViewListSeamlessPeersWithContext_GET
// method: GET
// url: /views/list_seamless_peers/
// summary: Get a list of available seamless peers
func (v *View) ViewListSeamlessPeersWithContext_GET(ctx context.Context, params core.Params) (core.RecordSet, error) {
	resourcePath := "/views/list_seamless_peers/"
	result, err := core.Request[core.RecordSet](ctx, v, http.MethodGet, resourcePath, params, nil)
	if err != nil {
		return nil, err
	}
	return result, nil

}

// ViewListSeamlessPeers_GET
// method: GET
// url: /views/list_seamless_peers/
// summary: Get a list of available seamless peers
func (v *View) ViewListSeamlessPeers_GET(params core.Params) (core.RecordSet, error) {
	return v.ViewListSeamlessPeersWithContext_GET(v.Rest.GetCtx(), params)
}

// ViewPermissionsRepairWithContext_DELETE
// method: DELETE
// url: /views/{id}/permissions_repair/
// summary: Stop Bulk Permission Update
func (v *View) ViewPermissionsRepairWithContext_DELETE(ctx context.Context, id any, params core.Params) (core.Record, error) {
	resourcePath := core.BuildResourcePathWithID("views", id, "permissions_repair")
	result, err := core.Request[core.Record](ctx, v, http.MethodDelete, resourcePath, params, nil)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// ViewPermissionsRepair_DELETE
// method: DELETE
// url: /views/{id}/permissions_repair/
// summary: Stop Bulk Permission Update
func (v *View) ViewPermissionsRepair_DELETE(id any, params core.Params) (core.Record, error) {
	return v.ViewPermissionsRepairWithContext_DELETE(v.Rest.GetCtx(), id, params)
}

// ViewPermissionsRepairWithContext_POST
// method: POST
// url: /views/{id}/permissions_repair/
// summary: Start Bulk Permission Update
//
// Parameters:
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (v *View) ViewPermissionsRepairWithContext_POST(ctx context.Context, id any, body core.Params, waitTimeout time.Duration) (*AsyncResult, error) {
	resourcePath := core.BuildResourcePathWithID("views", id, "permissions_repair")
	result, err := core.Request[core.Record](ctx, v, http.MethodPost, resourcePath, nil, body)
	if err != nil {
		return nil, err
	}

	return MaybeWaitAsyncResultWithContext(ctx, result, v.Rest, waitTimeout)

}

// ViewPermissionsRepair_POST
// method: POST
// url: /views/{id}/permissions_repair/
// summary: Start Bulk Permission Update
//
// Parameters:
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (v *View) ViewPermissionsRepair_POST(id any, body core.Params, waitTimeout time.Duration) (*AsyncResult, error) {
	return v.ViewPermissionsRepairWithContext_POST(v.Rest.GetCtx(), id, body, waitTimeout)
}
