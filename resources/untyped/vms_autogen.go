// Code generated by generate-untyped-resources. DO NOT EDIT.

package untyped

import (
	"context"
	"net/http"
	"time"

	"github.com/vast-data/go-vast-client/core"
)

// VmsConfiguredIdpsWithContext_GET
// method: GET
// url: /vms/{id}/configured_idps/
// summary: Return Configured SAML Identify Providers (IdPs)
func (v *Vms) VmsConfiguredIdpsWithContext_GET(ctx context.Context, id any, params core.Params) (core.RecordSet, error) {
	resourcePath := core.BuildResourcePathWithID("vms", id, "configured_idps")
	result, err := core.Request[core.RecordSet](ctx, v, http.MethodGet, resourcePath, params, nil)
	if err != nil {
		return nil, err
	}
	return result, nil

}

// VmsConfiguredIdps_GET
// method: GET
// url: /vms/{id}/configured_idps/
// summary: Return Configured SAML Identify Providers (IdPs)
func (v *Vms) VmsConfiguredIdps_GET(id any, params core.Params) (core.RecordSet, error) {
	return v.VmsConfiguredIdpsWithContext_GET(v.Rest.GetCtx(), id, params)
}

// VmsLoginBannerWithContext_GET
// method: GET
// url: /vms/{id}/login_banner/
// summary: Return VMS login banner (Authentication Not Required)
func (v *Vms) VmsLoginBannerWithContext_GET(ctx context.Context, id any, params core.Params) (core.Record, error) {
	resourcePath := core.BuildResourcePathWithID("vms", id, "login_banner")
	result, err := core.Request[core.Record](ctx, v, http.MethodGet, resourcePath, params, nil)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// VmsLoginBanner_GET
// method: GET
// url: /vms/{id}/login_banner/
// summary: Return VMS login banner (Authentication Not Required)
func (v *Vms) VmsLoginBanner_GET(id any, params core.Params) (core.Record, error) {
	return v.VmsLoginBannerWithContext_GET(v.Rest.GetCtx(), id, params)
}

// VmsNetworkSettingsSummaryWithContext_POST
// method: POST
// url: /vms/{id}/network_settings_summary/
// summary: Preview summary of changes to the network settings of VMS
func (v *Vms) VmsNetworkSettingsSummaryWithContext_POST(ctx context.Context, id any, body core.Params) (core.Record, error) {
	resourcePath := core.BuildResourcePathWithID("vms", id, "network_settings_summary")
	result, err := core.Request[core.Record](ctx, v, http.MethodPost, resourcePath, nil, body)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// VmsNetworkSettingsSummary_POST
// method: POST
// url: /vms/{id}/network_settings_summary/
// summary: Preview summary of changes to the network settings of VMS
func (v *Vms) VmsNetworkSettingsSummary_POST(id any, body core.Params) (core.Record, error) {
	return v.VmsNetworkSettingsSummaryWithContext_POST(v.Rest.GetCtx(), id, body)
}

// VmsNetworkSettingsWithContext_GET
// method: GET
// url: /vms/{id}/network_settings/
// summary: Return the network settings of VMS
func (v *Vms) VmsNetworkSettingsWithContext_GET(ctx context.Context, id any, params core.Params) (core.Record, error) {
	resourcePath := core.BuildResourcePathWithID("vms", id, "network_settings")
	result, err := core.Request[core.Record](ctx, v, http.MethodGet, resourcePath, params, nil)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// VmsNetworkSettings_GET
// method: GET
// url: /vms/{id}/network_settings/
// summary: Return the network settings of VMS
func (v *Vms) VmsNetworkSettings_GET(id any, params core.Params) (core.Record, error) {
	return v.VmsNetworkSettingsWithContext_GET(v.Rest.GetCtx(), id, params)
}

// VmsNetworkSettingsWithContext_PATCH
// method: PATCH
// url: /vms/{id}/network_settings/
// summary: Modify the network settings of VMS
//
// Parameters:
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (v *Vms) VmsNetworkSettingsWithContext_PATCH(ctx context.Context, id any, body core.Params, waitTimeout time.Duration) (*AsyncResult, error) {
	resourcePath := core.BuildResourcePathWithID("vms", id, "network_settings")
	result, err := core.Request[core.Record](ctx, v, http.MethodPatch, resourcePath, nil, body)
	if err != nil {
		return nil, err
	}

	asyncResult, _, err := MaybeWaitAsyncResultWithContext(ctx, result, v.Rest, waitTimeout)
	return asyncResult, err

}

// VmsNetworkSettings_PATCH
// method: PATCH
// url: /vms/{id}/network_settings/
// summary: Modify the network settings of VMS
//
// Parameters:
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (v *Vms) VmsNetworkSettings_PATCH(id any, body core.Params, waitTimeout time.Duration) (*AsyncResult, error) {
	return v.VmsNetworkSettingsWithContext_PATCH(v.Rest.GetCtx(), id, body, waitTimeout)
}

// VmsPwdSettingsWithContext_GET
// method: GET
// url: /vms/{id}/pwd_settings/
// summary: Return password settings of VMS
func (v *Vms) VmsPwdSettingsWithContext_GET(ctx context.Context, id any, params core.Params) (core.Record, error) {
	resourcePath := core.BuildResourcePathWithID("vms", id, "pwd_settings")
	result, err := core.Request[core.Record](ctx, v, http.MethodGet, resourcePath, params, nil)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// VmsPwdSettings_GET
// method: GET
// url: /vms/{id}/pwd_settings/
// summary: Return password settings of VMS
func (v *Vms) VmsPwdSettings_GET(id any, params core.Params) (core.Record, error) {
	return v.VmsPwdSettingsWithContext_GET(v.Rest.GetCtx(), id, params)
}

// VmsPwdSettingsWithContext_PATCH
// method: PATCH
// url: /vms/{id}/pwd_settings/
// summary: Modify password settings of VMS
func (v *Vms) VmsPwdSettingsWithContext_PATCH(ctx context.Context, id any, body core.Params) (core.Record, error) {
	resourcePath := core.BuildResourcePathWithID("vms", id, "pwd_settings")
	result, err := core.Request[core.Record](ctx, v, http.MethodPatch, resourcePath, nil, body)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// VmsPwdSettings_PATCH
// method: PATCH
// url: /vms/{id}/pwd_settings/
// summary: Modify password settings of VMS
func (v *Vms) VmsPwdSettings_PATCH(id any, body core.Params) (core.Record, error) {
	return v.VmsPwdSettingsWithContext_PATCH(v.Rest.GetCtx(), id, body)
}

// VmsRemoveClientCertificateWithContext_PATCH
// method: PATCH
// url: /vms/{id}/remove_client_certificate/
// summary: Remove VMS SSL Client Certificate
func (v *Vms) VmsRemoveClientCertificateWithContext_PATCH(ctx context.Context, id any, body core.Params) (core.Record, error) {
	resourcePath := core.BuildResourcePathWithID("vms", id, "remove_client_certificate")
	result, err := core.Request[core.Record](ctx, v, http.MethodPatch, resourcePath, nil, body)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// VmsRemoveClientCertificate_PATCH
// method: PATCH
// url: /vms/{id}/remove_client_certificate/
// summary: Remove VMS SSL Client Certificate
func (v *Vms) VmsRemoveClientCertificate_PATCH(id any, body core.Params) (core.Record, error) {
	return v.VmsRemoveClientCertificateWithContext_PATCH(v.Rest.GetCtx(), id, body)
}

// VmsResetCertificateWithContext_PATCH
// method: PATCH
// url: /vms/{id}/reset_certificate/
// summary: Reset VMS SSL Certificate to Default
func (v *Vms) VmsResetCertificateWithContext_PATCH(ctx context.Context, id any, body core.Params) (core.Record, error) {
	resourcePath := core.BuildResourcePathWithID("vms", id, "reset_certificate")
	result, err := core.Request[core.Record](ctx, v, http.MethodPatch, resourcePath, nil, body)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// VmsResetCertificate_PATCH
// method: PATCH
// url: /vms/{id}/reset_certificate/
// summary: Reset VMS SSL Certificate to Default
func (v *Vms) VmsResetCertificate_PATCH(id any, body core.Params) (core.Record, error) {
	return v.VmsResetCertificateWithContext_PATCH(v.Rest.GetCtx(), id, body)
}

// VmsResetSslCiphersWithContext_PATCH
// method: PATCH
// url: /vms/{id}/reset_ssl_ciphers/
// summary: Reset VMS SSL Ciphers to Default
func (v *Vms) VmsResetSslCiphersWithContext_PATCH(ctx context.Context, id any, body core.Params) (core.Record, error) {
	resourcePath := core.BuildResourcePathWithID("vms", id, "reset_ssl_ciphers")
	result, err := core.Request[core.Record](ctx, v, http.MethodPatch, resourcePath, nil, body)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// VmsResetSslCiphers_PATCH
// method: PATCH
// url: /vms/{id}/reset_ssl_ciphers/
// summary: Reset VMS SSL Ciphers to Default
func (v *Vms) VmsResetSslCiphers_PATCH(id any, body core.Params) (core.Record, error) {
	return v.VmsResetSslCiphersWithContext_PATCH(v.Rest.GetCtx(), id, body)
}

// VmsSamlConfigWithContext_DELETE
// method: DELETE
// url: /vms/{id}/saml_config/
// summary: Delete SAML configuration for a specific IdP
func (v *Vms) VmsSamlConfigWithContext_DELETE(ctx context.Context, id any, params core.Params) (core.Record, error) {
	resourcePath := core.BuildResourcePathWithID("vms", id, "saml_config")
	result, err := core.Request[core.Record](ctx, v, http.MethodDelete, resourcePath, params, nil)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// VmsSamlConfig_DELETE
// method: DELETE
// url: /vms/{id}/saml_config/
// summary: Delete SAML configuration for a specific IdP
func (v *Vms) VmsSamlConfig_DELETE(id any, params core.Params) (core.Record, error) {
	return v.VmsSamlConfigWithContext_DELETE(v.Rest.GetCtx(), id, params)
}

// VmsSamlConfigWithContext_GET
// method: GET
// url: /vms/{id}/saml_config/
// summary: Returns a SAML configuration for a specified IdP.
func (v *Vms) VmsSamlConfigWithContext_GET(ctx context.Context, id any, params core.Params) (core.Record, error) {
	resourcePath := core.BuildResourcePathWithID("vms", id, "saml_config")
	result, err := core.Request[core.Record](ctx, v, http.MethodGet, resourcePath, params, nil)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// VmsSamlConfig_GET
// method: GET
// url: /vms/{id}/saml_config/
// summary: Returns a SAML configuration for a specified IdP.
func (v *Vms) VmsSamlConfig_GET(id any, params core.Params) (core.Record, error) {
	return v.VmsSamlConfigWithContext_GET(v.Rest.GetCtx(), id, params)
}

// VmsSamlConfigWithContext_PATCH
// method: PATCH
// url: /vms/{id}/saml_config/
// summary: Remove SP sign response or assertions request from an IdP
func (v *Vms) VmsSamlConfigWithContext_PATCH(ctx context.Context, id any, body core.Params) (core.Record, error) {
	resourcePath := core.BuildResourcePathWithID("vms", id, "saml_config")
	result, err := core.Request[core.Record](ctx, v, http.MethodPatch, resourcePath, nil, body)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// VmsSamlConfig_PATCH
// method: PATCH
// url: /vms/{id}/saml_config/
// summary: Remove SP sign response or assertions request from an IdP
func (v *Vms) VmsSamlConfig_PATCH(id any, body core.Params) (core.Record, error) {
	return v.VmsSamlConfigWithContext_PATCH(v.Rest.GetCtx(), id, body)
}

// VmsSamlConfigWithContext_POST
// method: POST
// url: /vms/{id}/saml_config/
// summary: Modify or Create a SAML configuration for a specific IdP.
func (v *Vms) VmsSamlConfigWithContext_POST(ctx context.Context, id any, body core.Params) (core.Record, error) {
	resourcePath := core.BuildResourcePathWithID("vms", id, "saml_config")
	result, err := core.Request[core.Record](ctx, v, http.MethodPost, resourcePath, nil, body)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// VmsSamlConfig_POST
// method: POST
// url: /vms/{id}/saml_config/
// summary: Modify or Create a SAML configuration for a specific IdP.
func (v *Vms) VmsSamlConfig_POST(id any, body core.Params) (core.Record, error) {
	return v.VmsSamlConfigWithContext_POST(v.Rest.GetCtx(), id, body)
}

// VmsSetCertificateWithContext_PATCH
// method: PATCH
// url: /vms/{id}/set_certificate/
// summary: Install SSL certificate and key on VMS
//
// Parameters:
//   - sslCertificate (body): The SSL Certificate file content, including the BEGIN CERTIFICATE and END CERTIFICATE lines
//   - sslKeyfile (body): The SSL private key file content, include the BEGIN PRIVATE KEY and END PRIVATE KEY lines
func (v *Vms) VmsSetCertificateWithContext_PATCH(ctx context.Context, id any, sslCertificate string, sslKeyfile string) (core.Record, error) {
	resourcePath := core.BuildResourcePathWithID("vms", id, "set_certificate")
	body := core.Params{}
	if sslCertificate != "" {
		body["ssl_certificate"] = sslCertificate
	}
	if sslKeyfile != "" {
		body["ssl_keyfile"] = sslKeyfile
	}
	result, err := core.Request[core.Record](ctx, v, http.MethodPatch, resourcePath, nil, body)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// VmsSetCertificate_PATCH
// method: PATCH
// url: /vms/{id}/set_certificate/
// summary: Install SSL certificate and key on VMS
//
// Parameters:
//   - sslCertificate (body): The SSL Certificate file content, including the BEGIN CERTIFICATE and END CERTIFICATE lines
//   - sslKeyfile (body): The SSL private key file content, include the BEGIN PRIVATE KEY and END PRIVATE KEY lines
func (v *Vms) VmsSetCertificate_PATCH(id any, sslCertificate string, sslKeyfile string) (core.Record, error) {
	return v.VmsSetCertificateWithContext_PATCH(v.Rest.GetCtx(), id, sslCertificate, sslKeyfile)
}

// VmsSetClientCertificateWithContext_PATCH
// method: PATCH
// url: /vms/{id}/set_client_certificate/
// summary: Install SSL certificate and key on VMS
//
// Parameters:
//   - sslClientCertificate (body): SSL Client Certificate file content (can be root), including the BEGIN CERTIFICATE and END CERTIFICATE lines
//   - sslClientKeyfile (body): SSL client private key file content, include the BEGIN PRIVATE KEY and END PRIVATE KEY lines
func (v *Vms) VmsSetClientCertificateWithContext_PATCH(ctx context.Context, id any, sslClientCertificate string, sslClientKeyfile string) (core.Record, error) {
	resourcePath := core.BuildResourcePathWithID("vms", id, "set_client_certificate")
	body := core.Params{}
	if sslClientCertificate != "" {
		body["ssl_client_certificate"] = sslClientCertificate
	}
	if sslClientKeyfile != "" {
		body["ssl_client_keyfile"] = sslClientKeyfile
	}
	result, err := core.Request[core.Record](ctx, v, http.MethodPatch, resourcePath, nil, body)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// VmsSetClientCertificate_PATCH
// method: PATCH
// url: /vms/{id}/set_client_certificate/
// summary: Install SSL certificate and key on VMS
//
// Parameters:
//   - sslClientCertificate (body): SSL Client Certificate file content (can be root), including the BEGIN CERTIFICATE and END CERTIFICATE lines
//   - sslClientKeyfile (body): SSL client private key file content, include the BEGIN PRIVATE KEY and END PRIVATE KEY lines
func (v *Vms) VmsSetClientCertificate_PATCH(id any, sslClientCertificate string, sslClientKeyfile string) (core.Record, error) {
	return v.VmsSetClientCertificateWithContext_PATCH(v.Rest.GetCtx(), id, sslClientCertificate, sslClientKeyfile)
}

// VmsSetMaxApiTokensPerUserWithContext_PATCH
// method: PATCH
// url: /vms/{id}/set_max_api_tokens_per_user/
// summary: Set max API tokens per user
//
// Parameters:
//   - maxApiTokensPerUser (body): Maximum number of API tokens per user
func (v *Vms) VmsSetMaxApiTokensPerUserWithContext_PATCH(ctx context.Context, id any, maxApiTokensPerUser int64) (core.Record, error) {
	resourcePath := core.BuildResourcePathWithID("vms", id, "set_max_api_tokens_per_user")
	body := core.Params{}
	if maxApiTokensPerUser != 0 {
		body["max_api_tokens_per_user"] = maxApiTokensPerUser
	}
	result, err := core.Request[core.Record](ctx, v, http.MethodPatch, resourcePath, nil, body)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// VmsSetMaxApiTokensPerUser_PATCH
// method: PATCH
// url: /vms/{id}/set_max_api_tokens_per_user/
// summary: Set max API tokens per user
//
// Parameters:
//   - maxApiTokensPerUser (body): Maximum number of API tokens per user
func (v *Vms) VmsSetMaxApiTokensPerUser_PATCH(id any, maxApiTokensPerUser int64) (core.Record, error) {
	return v.VmsSetMaxApiTokensPerUserWithContext_PATCH(v.Rest.GetCtx(), id, maxApiTokensPerUser)
}

// VmsSetSslCiphersWithContext_PATCH
// method: PATCH
// url: /vms/{id}/set_ssl_ciphers/
// summary: Set SSL ciphers use by VMS
//
// Parameters:
//   - sslCiphers (body): SSL Ciphers, e.g. AES256+EECDH:AES256+EDH:!aNULL:!SHA1:!SHA256:!SHA384
func (v *Vms) VmsSetSslCiphersWithContext_PATCH(ctx context.Context, id any, sslCiphers string) (core.Record, error) {
	resourcePath := core.BuildResourcePathWithID("vms", id, "set_ssl_ciphers")
	body := core.Params{}
	if sslCiphers != "" {
		body["ssl_ciphers"] = sslCiphers
	}
	result, err := core.Request[core.Record](ctx, v, http.MethodPatch, resourcePath, nil, body)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// VmsSetSslCiphers_PATCH
// method: PATCH
// url: /vms/{id}/set_ssl_ciphers/
// summary: Set SSL ciphers use by VMS
//
// Parameters:
//   - sslCiphers (body): SSL Ciphers, e.g. AES256+EECDH:AES256+EDH:!aNULL:!SHA1:!SHA256:!SHA384
func (v *Vms) VmsSetSslCiphers_PATCH(id any, sslCiphers string) (core.Record, error) {
	return v.VmsSetSslCiphersWithContext_PATCH(v.Rest.GetCtx(), id, sslCiphers)
}

// VmsSetSslPortWithContext_PATCH
// method: PATCH
// url: /vms/{id}/set_ssl_port/
// summary: Change VMS SSL Port
//
// Parameters:
//   - sslPort (body): SSL port number
func (v *Vms) VmsSetSslPortWithContext_PATCH(ctx context.Context, id any, sslPort int64) (core.Record, error) {
	resourcePath := core.BuildResourcePathWithID("vms", id, "set_ssl_port")
	body := core.Params{}
	if sslPort != 0 {
		body["ssl_port"] = sslPort
	}
	result, err := core.Request[core.Record](ctx, v, http.MethodPatch, resourcePath, nil, body)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// VmsSetSslPort_PATCH
// method: PATCH
// url: /vms/{id}/set_ssl_port/
// summary: Change VMS SSL Port
//
// Parameters:
//   - sslPort (body): SSL port number
func (v *Vms) VmsSetSslPort_PATCH(id any, sslPort int64) (core.Record, error) {
	return v.VmsSetSslPortWithContext_PATCH(v.Rest.GetCtx(), id, sslPort)
}

// VmsToggleMaintenanceModeWithContext_PATCH
// method: PATCH
// url: /vms/{id}/toggle_maintenance_mode/
// summary: Toggle maintenance mode
//
// Parameters:
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (v *Vms) VmsToggleMaintenanceModeWithContext_PATCH(ctx context.Context, id any, body core.Params, waitTimeout time.Duration) (*AsyncResult, error) {
	resourcePath := core.BuildResourcePathWithID("vms", id, "toggle_maintenance_mode")
	result, err := core.Request[core.Record](ctx, v, http.MethodPatch, resourcePath, nil, body)
	if err != nil {
		return nil, err
	}

	asyncResult, _, err := MaybeWaitAsyncResultWithContext(ctx, result, v.Rest, waitTimeout)
	return asyncResult, err

}

// VmsToggleMaintenanceMode_PATCH
// method: PATCH
// url: /vms/{id}/toggle_maintenance_mode/
// summary: Toggle maintenance mode
//
// Parameters:
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (v *Vms) VmsToggleMaintenanceMode_PATCH(id any, body core.Params, waitTimeout time.Duration) (*AsyncResult, error) {
	return v.VmsToggleMaintenanceModeWithContext_PATCH(v.Rest.GetCtx(), id, body, waitTimeout)
}
