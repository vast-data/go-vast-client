// Code generated by generate-untyped-resources. DO NOT EDIT.

package untyped

import (
	"context"
	"net/http"
	"time"

	"github.com/vast-data/go-vast-client/core"
)

// BlockHostBulkWithContext_DELETE
// method: DELETE
// url: /blockhosts/bulk/
// summary: Delete a Bulk Of Hosts
func (b *BlockHost) BlockHostBulkWithContext_DELETE(ctx context.Context, params core.Params) error {
	resourcePath := "/blockhosts/bulk/"
	_, err := core.Request[core.EmptyRecord](ctx, b, http.MethodDelete, resourcePath, params, nil)
	return err

}

// BlockHostBulk_DELETE
// method: DELETE
// url: /blockhosts/bulk/
// summary: Delete a Bulk Of Hosts
func (b *BlockHost) BlockHostBulk_DELETE(params core.Params) error {
	return b.BlockHostBulkWithContext_DELETE(b.Rest.GetCtx(), params)
}

// BlockHostSetVolumesWithContext_PATCH
// method: PATCH
// url: /blockhosts/{id}/set_volumes/
// summary: Mapping a block host to volumes.
//
// Parameters:
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (b *BlockHost) BlockHostSetVolumesWithContext_PATCH(ctx context.Context, id any, body core.Params, waitTimeout time.Duration) (*AsyncResult, error) {
	resourcePath := core.BuildResourcePathWithID("blockhosts", id, "set_volumes")
	result, err := core.Request[core.Record](ctx, b, http.MethodPatch, resourcePath, nil, body)
	if err != nil {
		return nil, err
	}
	// Create async task from result
	task := asyncResultFromRecord(ctx, result, b.Rest)
	// If waitTimeout is 0, return task immediately without waiting (async background operation)
	if waitTimeout == 0 {
		return task, nil
	}
	// Wait for task completion with the specified timeout
	if _, err := task.Wait(waitTimeout); err != nil {
		return task, err
	}
	return task, nil

}

// BlockHostSetVolumes_PATCH
// method: PATCH
// url: /blockhosts/{id}/set_volumes/
// summary: Mapping a block host to volumes.
//
// Parameters:
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (b *BlockHost) BlockHostSetVolumes_PATCH(id any, body core.Params, waitTimeout time.Duration) (*AsyncResult, error) {
	return b.BlockHostSetVolumesWithContext_PATCH(b.Rest.GetCtx(), id, body, waitTimeout)
}

// BlockHostUpdateVolumesWithContext_PATCH
// method: PATCH
// url: /blockhosts/{id}/update_volumes/
// summary: Update Mapping of Block Host to Volumes
//
// Parameters:
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (b *BlockHost) BlockHostUpdateVolumesWithContext_PATCH(ctx context.Context, id any, body core.Params, waitTimeout time.Duration) (*AsyncResult, error) {
	resourcePath := core.BuildResourcePathWithID("blockhosts", id, "update_volumes")
	result, err := core.Request[core.Record](ctx, b, http.MethodPatch, resourcePath, nil, body)
	if err != nil {
		return nil, err
	}
	// Create async task from result
	task := asyncResultFromRecord(ctx, result, b.Rest)
	// If waitTimeout is 0, return task immediately without waiting (async background operation)
	if waitTimeout == 0 {
		return task, nil
	}
	// Wait for task completion with the specified timeout
	if _, err := task.Wait(waitTimeout); err != nil {
		return task, err
	}
	return task, nil

}

// BlockHostUpdateVolumes_PATCH
// method: PATCH
// url: /blockhosts/{id}/update_volumes/
// summary: Update Mapping of Block Host to Volumes
//
// Parameters:
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (b *BlockHost) BlockHostUpdateVolumes_PATCH(id any, body core.Params, waitTimeout time.Duration) (*AsyncResult, error) {
	return b.BlockHostUpdateVolumesWithContext_PATCH(b.Rest.GetCtx(), id, body, waitTimeout)
}
