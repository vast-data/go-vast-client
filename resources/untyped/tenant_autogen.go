// Code generated by generate-untyped-resources. DO NOT EDIT.

package untyped

import (
	"context"
	"net/http"

	"github.com/vast-data/go-vast-client/core"
)

// TenantClientIpRangesWithContext_PATCH
// method: PATCH
// url: /tenants/{id}/client_ip_ranges/
// summary: Update tenant Client IP ranges
func (t *Tenant) TenantClientIpRangesWithContext_PATCH(ctx context.Context, id any, body core.Params) (core.Record, error) {
	resourcePath := core.BuildResourcePathWithID("tenants", id, "client_ip_ranges")
	result, err := core.Request[core.Record](ctx, t, http.MethodPatch, resourcePath, nil, body)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// TenantClientIpRanges_PATCH
// method: PATCH
// url: /tenants/{id}/client_ip_ranges/
// summary: Update tenant Client IP ranges
func (t *Tenant) TenantClientIpRanges_PATCH(id any, body core.Params) (core.Record, error) {
	return t.TenantClientIpRangesWithContext_PATCH(t.Rest.GetCtx(), id, body)
}

// TenantClientMetricsWithContext_GET
// method: GET
// url: /tenants/{id}/client_metrics/
// summary: get tenant client metrics settings
func (t *Tenant) TenantClientMetricsWithContext_GET(ctx context.Context, id any, params core.Params) (core.Record, error) {
	resourcePath := core.BuildResourcePathWithID("tenants", id, "client_metrics")
	result, err := core.Request[core.Record](ctx, t, http.MethodGet, resourcePath, params, nil)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// TenantClientMetrics_GET
// method: GET
// url: /tenants/{id}/client_metrics/
// summary: get tenant client metrics settings
func (t *Tenant) TenantClientMetrics_GET(id any, params core.Params) (core.Record, error) {
	return t.TenantClientMetricsWithContext_GET(t.Rest.GetCtx(), id, params)
}

// TenantClientMetricsWithContext_PATCH
// method: PATCH
// url: /tenants/{id}/client_metrics/
// summary: Update Tenant Client Metrics Settings
func (t *Tenant) TenantClientMetricsWithContext_PATCH(ctx context.Context, id any, body core.Params) (core.Record, error) {
	resourcePath := core.BuildResourcePathWithID("tenants", id, "client_metrics")
	result, err := core.Request[core.Record](ctx, t, http.MethodPatch, resourcePath, nil, body)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// TenantClientMetrics_PATCH
// method: PATCH
// url: /tenants/{id}/client_metrics/
// summary: Update Tenant Client Metrics Settings
func (t *Tenant) TenantClientMetrics_PATCH(id any, body core.Params) (core.Record, error) {
	return t.TenantClientMetricsWithContext_PATCH(t.Rest.GetCtx(), id, body)
}

// TenantConfiguredIdpWithContext_GET
// method: GET
// url: /tenants/configured_idp/
// summary: Return Configured Identity Provider for Tenant
func (t *Tenant) TenantConfiguredIdpWithContext_GET(ctx context.Context, params core.Params) (core.Record, error) {
	resourcePath := "/tenants/configured_idp/"
	result, err := core.Request[core.Record](ctx, t, http.MethodGet, resourcePath, params, nil)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// TenantConfiguredIdp_GET
// method: GET
// url: /tenants/configured_idp/
// summary: Return Configured Identity Provider for Tenant
func (t *Tenant) TenantConfiguredIdp_GET(params core.Params) (core.Record, error) {
	return t.TenantConfiguredIdpWithContext_GET(t.Rest.GetCtx(), params)
}

// TenantDeactivateEncryptionGroupWithContext_POST
// method: POST
// url: /tenants/{id}/deactivate_encryption_group/
// summary: Deactivate tenant's encryption group.
func (t *Tenant) TenantDeactivateEncryptionGroupWithContext_POST(ctx context.Context, id any, body core.Params) error {
	resourcePath := core.BuildResourcePathWithID("tenants", id, "deactivate_encryption_group")
	_, err := core.Request[core.Record](ctx, t, http.MethodPost, resourcePath, nil, body)
	return err

}

// TenantDeactivateEncryptionGroup_POST
// method: POST
// url: /tenants/{id}/deactivate_encryption_group/
// summary: Deactivate tenant's encryption group.
func (t *Tenant) TenantDeactivateEncryptionGroup_POST(id any, body core.Params) error {
	return t.TenantDeactivateEncryptionGroupWithContext_POST(t.Rest.GetCtx(), id, body)
}

// TenantIsOperationHealthyWithContext_POST
// method: POST
// url: /tenants/{id}/is_operation_healthy/
// summary: Check whether an operation may be successfully performed
func (t *Tenant) TenantIsOperationHealthyWithContext_POST(ctx context.Context, id any, body core.Params) (core.Record, error) {
	resourcePath := core.BuildResourcePathWithID("tenants", id, "is_operation_healthy")
	result, err := core.Request[core.Record](ctx, t, http.MethodPost, resourcePath, nil, body)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// TenantIsOperationHealthy_POST
// method: POST
// url: /tenants/{id}/is_operation_healthy/
// summary: Check whether an operation may be successfully performed
func (t *Tenant) TenantIsOperationHealthy_POST(id any, body core.Params) (core.Record, error) {
	return t.TenantIsOperationHealthyWithContext_POST(t.Rest.GetCtx(), id, body)
}

// TenantNfs4DelegWithContext_DELETE
// method: DELETE
// url: /tenants/{id}/nfs4_deleg/
// summary: Remove NFSv4 delegation
func (t *Tenant) TenantNfs4DelegWithContext_DELETE(ctx context.Context, id any, params core.Params) error {
	resourcePath := core.BuildResourcePathWithID("tenants", id, "nfs4_deleg")
	_, err := core.Request[core.Record](ctx, t, http.MethodDelete, resourcePath, params, nil)
	return err

}

// TenantNfs4Deleg_DELETE
// method: DELETE
// url: /tenants/{id}/nfs4_deleg/
// summary: Remove NFSv4 delegation
func (t *Tenant) TenantNfs4Deleg_DELETE(id any, params core.Params) error {
	return t.TenantNfs4DelegWithContext_DELETE(t.Rest.GetCtx(), id, params)
}

// TenantNfs4DelegsWithContext_GET
// method: GET
// url: /tenants/{id}/nfs4_delegs/
// summary: Query list of NFSv4 delegations
func (t *Tenant) TenantNfs4DelegsWithContext_GET(ctx context.Context, id any, params core.Params) (core.Record, error) {
	resourcePath := core.BuildResourcePathWithID("tenants", id, "nfs4_delegs")
	result, err := core.Request[core.Record](ctx, t, http.MethodGet, resourcePath, params, nil)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// TenantNfs4Delegs_GET
// method: GET
// url: /tenants/{id}/nfs4_delegs/
// summary: Query list of NFSv4 delegations
func (t *Tenant) TenantNfs4Delegs_GET(id any, params core.Params) (core.Record, error) {
	return t.TenantNfs4DelegsWithContext_GET(t.Rest.GetCtx(), id, params)
}

// TenantReinstateEncryptionGroupWithContext_POST
// method: POST
// url: /tenants/{id}/reinstate_encryption_group/
// summary: Reinstate tenant's encryption group.
func (t *Tenant) TenantReinstateEncryptionGroupWithContext_POST(ctx context.Context, id any, body core.Params) error {
	resourcePath := core.BuildResourcePathWithID("tenants", id, "reinstate_encryption_group")
	_, err := core.Request[core.Record](ctx, t, http.MethodPost, resourcePath, nil, body)
	return err

}

// TenantReinstateEncryptionGroup_POST
// method: POST
// url: /tenants/{id}/reinstate_encryption_group/
// summary: Reinstate tenant's encryption group.
func (t *Tenant) TenantReinstateEncryptionGroup_POST(id any, body core.Params) error {
	return t.TenantReinstateEncryptionGroupWithContext_POST(t.Rest.GetCtx(), id, body)
}

// TenantRemoteObjectsWithContext_GET
// method: GET
// url: /tenants/remote_objects/
// summary: Return Details of Remote Tenants
func (t *Tenant) TenantRemoteObjectsWithContext_GET(ctx context.Context, params core.Params) (core.RecordSet, error) {
	resourcePath := "/tenants/remote_objects/"
	result, err := core.Request[core.RecordSet](ctx, t, http.MethodGet, resourcePath, params, nil)
	if err != nil {
		return nil, err
	}
	return result, nil

}

// TenantRemoteObjects_GET
// method: GET
// url: /tenants/remote_objects/
// summary: Return Details of Remote Tenants
func (t *Tenant) TenantRemoteObjects_GET(params core.Params) (core.RecordSet, error) {
	return t.TenantRemoteObjectsWithContext_GET(t.Rest.GetCtx(), params)
}

// TenantRevokeEncryptionGroupWithContext_POST
// method: POST
// url: /tenants/{id}/revoke_encryption_group/
// summary: Revoke tenant's encryption group.
func (t *Tenant) TenantRevokeEncryptionGroupWithContext_POST(ctx context.Context, id any, body core.Params) error {
	resourcePath := core.BuildResourcePathWithID("tenants", id, "revoke_encryption_group")
	_, err := core.Request[core.Record](ctx, t, http.MethodPost, resourcePath, nil, body)
	return err

}

// TenantRevokeEncryptionGroup_POST
// method: POST
// url: /tenants/{id}/revoke_encryption_group/
// summary: Revoke tenant's encryption group.
func (t *Tenant) TenantRevokeEncryptionGroup_POST(id any, body core.Params) error {
	return t.TenantRevokeEncryptionGroupWithContext_POST(t.Rest.GetCtx(), id, body)
}

// TenantRotateEncryptionGroupKeyWithContext_POST
// method: POST
// url: /tenants/{id}/rotate_encryption_group_key/
// summary: Rotate tenant's encryption group key.
func (t *Tenant) TenantRotateEncryptionGroupKeyWithContext_POST(ctx context.Context, id any, body core.Params) error {
	resourcePath := core.BuildResourcePathWithID("tenants", id, "rotate_encryption_group_key")
	_, err := core.Request[core.Record](ctx, t, http.MethodPost, resourcePath, nil, body)
	return err

}

// TenantRotateEncryptionGroupKey_POST
// method: POST
// url: /tenants/{id}/rotate_encryption_group_key/
// summary: Rotate tenant's encryption group key.
func (t *Tenant) TenantRotateEncryptionGroupKey_POST(id any, body core.Params) error {
	return t.TenantRotateEncryptionGroupKeyWithContext_POST(t.Rest.GetCtx(), id, body)
}

// TenantSameEncryptionGroupTenantsWithContext_GET
// method: GET
// url: /tenants/{id}/same_encryption_group_tenants/
// summary: Get tenants with the same encryption group
func (t *Tenant) TenantSameEncryptionGroupTenantsWithContext_GET(ctx context.Context, id any, params core.Params) (core.RecordSet, error) {
	resourcePath := core.BuildResourcePathWithID("tenants", id, "same_encryption_group_tenants")
	result, err := core.Request[core.RecordSet](ctx, t, http.MethodGet, resourcePath, params, nil)
	if err != nil {
		return nil, err
	}
	return result, nil

}

// TenantSameEncryptionGroupTenants_GET
// method: GET
// url: /tenants/{id}/same_encryption_group_tenants/
// summary: Get tenants with the same encryption group
func (t *Tenant) TenantSameEncryptionGroupTenants_GET(id any, params core.Params) (core.RecordSet, error) {
	return t.TenantSameEncryptionGroupTenantsWithContext_GET(t.Rest.GetCtx(), id, params)
}

// TenantVippoolIpRangesWithContext_GET
// method: GET
// url: /tenants/{id}/vippool_ip_ranges/
// summary: Get tenant VIP pools IP ranges
func (t *Tenant) TenantVippoolIpRangesWithContext_GET(ctx context.Context, id any, params core.Params) (core.Record, error) {
	resourcePath := core.BuildResourcePathWithID("tenants", id, "vippool_ip_ranges")
	result, err := core.Request[core.Record](ctx, t, http.MethodGet, resourcePath, params, nil)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// TenantVippoolIpRanges_GET
// method: GET
// url: /tenants/{id}/vippool_ip_ranges/
// summary: Get tenant VIP pools IP ranges
func (t *Tenant) TenantVippoolIpRanges_GET(id any, params core.Params) (core.Record, error) {
	return t.TenantVippoolIpRangesWithContext_GET(t.Rest.GetCtx(), id, params)
}
