// Code generated by generate-untyped-resources. DO NOT EDIT.

package untyped

import (
	"context"
	"net/http"

	"github.com/vast-data/go-vast-client/core"
)

// SchemaDeleteWithContext_DELETE
// method: DELETE
// url: /schemas/delete/
// summary: Delete Schema
//
// Parameters:
//   - databaseName (body): Name of the Database
//   - name (body): Name of the object
//   - tenantId (body): Tenant ID
func (s *Schema) SchemaDeleteWithContext_DELETE(ctx context.Context, databaseName string, name string, tenantId int64) error {
	resourcePath := "/schemas/delete/"
	body := core.Params{}
	body["database_name"] = databaseName
	body["name"] = name
	if tenantId != 0 {
		body["tenant_id"] = tenantId
	}
	_, err := core.Request[core.Record](ctx, s, http.MethodDelete, resourcePath, nil, body)
	return err

}

// SchemaDelete_DELETE
// method: DELETE
// url: /schemas/delete/
// summary: Delete Schema
//
// Parameters:
//   - databaseName (body): Name of the Database
//   - name (body): Name of the object
//   - tenantId (body): Tenant ID
func (s *Schema) SchemaDelete_DELETE(databaseName string, name string, tenantId int64) error {
	return s.SchemaDeleteWithContext_DELETE(s.Rest.GetCtx(), databaseName, name, tenantId)
}

// SchemaRenameWithContext_PATCH
// method: PATCH
// url: /schemas/rename/
// summary: Rename a database schema
func (s *Schema) SchemaRenameWithContext_PATCH(ctx context.Context, body core.Params) error {
	resourcePath := "/schemas/rename/"
	_, err := core.Request[core.Record](ctx, s, http.MethodPatch, resourcePath, nil, body)
	return err

}

// SchemaRename_PATCH
// method: PATCH
// url: /schemas/rename/
// summary: Rename a database schema
func (s *Schema) SchemaRename_PATCH(body core.Params) error {
	return s.SchemaRenameWithContext_PATCH(s.Rest.GetCtx(), body)
}

// SchemaShowWithContext_GET
// method: GET
// url: /schemas/show/
// summary: Show a Database Schema
func (s *Schema) SchemaShowWithContext_GET(ctx context.Context, params core.Params) (core.Record, error) {
	resourcePath := "/schemas/show/"
	result, err := core.Request[core.Record](ctx, s, http.MethodGet, resourcePath, params, nil)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// SchemaShow_GET
// method: GET
// url: /schemas/show/
// summary: Show a Database Schema
func (s *Schema) SchemaShow_GET(params core.Params) (core.Record, error) {
	return s.SchemaShowWithContext_GET(s.Rest.GetCtx(), params)
}
