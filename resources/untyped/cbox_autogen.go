// Code generated by generate-untyped-resources. DO NOT EDIT.

package untyped

import (
	"context"
	"net/http"
	"time"

	"github.com/vast-data/go-vast-client/core"
)

// CboxControlLedWithContext_PATCH
// method: PATCH
// url: /cboxes/{id}/control_led/
// summary: Control CBox LEDs
//
// Parameters:
//   - control (body): LED state
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (c *Cbox) CboxControlLedWithContext_PATCH(ctx context.Context, id any, control string, waitTimeout time.Duration) (*AsyncResult, error) {
	resourcePath := core.BuildResourcePathWithID("cboxes", id, "control_led")
	body := core.Params{}
	if control != "" {
		body["control"] = control
	}
	result, err := core.Request[core.Record](ctx, c, http.MethodPatch, resourcePath, nil, body)
	if err != nil {
		return nil, err
	}
	if result.Empty() {
		return nil, nil
	}
	// Create async task from result
	task := asyncResultFromRecord(ctx, result, c.Rest)
	// If waitTimeout is 0, return task immediately without waiting (async background operation)
	if waitTimeout == 0 {
		return task, nil
	}
	// Wait for task completion with the specified timeout
	if _, err := task.Wait(waitTimeout); err != nil {
		return task, err
	}
	return task, nil

}

// CboxControlLed_PATCH
// method: PATCH
// url: /cboxes/{id}/control_led/
// summary: Control CBox LEDs
//
// Parameters:
//   - control (body): LED state
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (c *Cbox) CboxControlLed_PATCH(id any, control string, waitTimeout time.Duration) (*AsyncResult, error) {
	return c.CboxControlLedWithContext_PATCH(c.Rest.GetCtx(), id, control, waitTimeout)
}

// CboxRefreshUidWithContext_PATCH
// method: PATCH
// url: /cboxes/{id}/refresh_uid/
// summary: Refreshes cbox uid to match it's cnodes chassis serial
func (c *Cbox) CboxRefreshUidWithContext_PATCH(ctx context.Context, id any, body core.Params) (core.Record, error) {
	resourcePath := core.BuildResourcePathWithID("cboxes", id, "refresh_uid")
	result, err := core.Request[core.Record](ctx, c, http.MethodPatch, resourcePath, nil, body)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// CboxRefreshUid_PATCH
// method: PATCH
// url: /cboxes/{id}/refresh_uid/
// summary: Refreshes cbox uid to match it's cnodes chassis serial
func (c *Cbox) CboxRefreshUid_PATCH(id any, body core.Params) (core.Record, error) {
	return c.CboxRefreshUidWithContext_PATCH(c.Rest.GetCtx(), id, body)
}
