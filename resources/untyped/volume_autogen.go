// Code generated by generate-untyped-resources. DO NOT EDIT.

package untyped

import (
	"context"
	"net/http"
	"time"

	"github.com/vast-data/go-vast-client/core"
)

// VolumeBulkWithContext_DELETE
// method: DELETE
// url: /volumes/bulk/
// summary: Delete a Bulk Of Block Storage Volumes
func (v *Volume) VolumeBulkWithContext_DELETE(ctx context.Context, params core.Params) error {
	resourcePath := "/volumes/bulk/"
	_, err := core.Request[core.EmptyRecord](ctx, v, http.MethodDelete, resourcePath, params, nil)
	return err

}

// VolumeBulk_DELETE
// method: DELETE
// url: /volumes/bulk/
// summary: Delete a Bulk Of Block Storage Volumes
func (v *Volume) VolumeBulk_DELETE(params core.Params) error {
	return v.VolumeBulkWithContext_DELETE(v.Rest.GetCtx(), params)
}

// VolumeFetchCapacityWithContext_GET
// method: GET
// url: /volumes/{id}/fetch_capacity/
// summary: Fetches Capacity Usage of Block Storage Volume
func (v *Volume) VolumeFetchCapacityWithContext_GET(ctx context.Context, id any, params core.Params) (core.Record, error) {
	resourcePath := core.BuildResourcePathWithID("volumes", id, "fetch_capacity")
	result, err := core.Request[core.Record](ctx, v, http.MethodGet, resourcePath, params, nil)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// VolumeFetchCapacity_GET
// method: GET
// url: /volumes/{id}/fetch_capacity/
// summary: Fetches Capacity Usage of Block Storage Volume
func (v *Volume) VolumeFetchCapacity_GET(id any, params core.Params) (core.Record, error) {
	return v.VolumeFetchCapacityWithContext_GET(v.Rest.GetCtx(), id, params)
}

// VolumeGetSnapshotsWithContext_GET
// method: GET
// url: /volumes/{id}/get_snapshots/
// summary: Return Snapshots (IDs) of a Volume.
func (v *Volume) VolumeGetSnapshotsWithContext_GET(ctx context.Context, id any, params core.Params) (core.RecordSet, error) {
	resourcePath := core.BuildResourcePathWithID("volumes", id, "get_snapshots")
	result, err := core.Request[core.RecordSet](ctx, v, http.MethodGet, resourcePath, params, nil)
	if err != nil {
		return nil, err
	}
	return result, nil

}

// VolumeGetSnapshots_GET
// method: GET
// url: /volumes/{id}/get_snapshots/
// summary: Return Snapshots (IDs) of a Volume.
func (v *Volume) VolumeGetSnapshots_GET(id any, params core.Params) (core.RecordSet, error) {
	return v.VolumeGetSnapshotsWithContext_GET(v.Rest.GetCtx(), id, params)
}

// VolumeSetHostsWithContext_PATCH
// method: PATCH
// url: /volumes/{id}/set_hosts/
// summary: Map a Volume to Block Hosts
//
// Parameters:
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (v *Volume) VolumeSetHostsWithContext_PATCH(ctx context.Context, id any, body core.Params, waitTimeout time.Duration) (*AsyncResult, error) {
	resourcePath := core.BuildResourcePathWithID("volumes", id, "set_hosts")
	result, err := core.Request[core.Record](ctx, v, http.MethodPatch, resourcePath, nil, body)
	if err != nil {
		return nil, err
	}
	if result.Empty() {
		return nil, nil
	}
	// Create async task from result
	task := asyncResultFromRecord(ctx, result, v.Rest)
	// If waitTimeout is 0, return task immediately without waiting (async background operation)
	if waitTimeout == 0 {
		return task, nil
	}
	// Wait for task completion with the specified timeout
	if _, err := task.Wait(waitTimeout); err != nil {
		return task, err
	}
	return task, nil

}

// VolumeSetHosts_PATCH
// method: PATCH
// url: /volumes/{id}/set_hosts/
// summary: Map a Volume to Block Hosts
//
// Parameters:
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (v *Volume) VolumeSetHosts_PATCH(id any, body core.Params, waitTimeout time.Duration) (*AsyncResult, error) {
	return v.VolumeSetHostsWithContext_PATCH(v.Rest.GetCtx(), id, body, waitTimeout)
}

// VolumeUpdateHostsWithContext_PATCH
// method: PATCH
// url: /volumes/{id}/update_hosts/
// summary: Update Mapping of a Volume to Block Hosts
//
// Parameters:
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (v *Volume) VolumeUpdateHostsWithContext_PATCH(ctx context.Context, id any, body core.Params, waitTimeout time.Duration) (*AsyncResult, error) {
	resourcePath := core.BuildResourcePathWithID("volumes", id, "update_hosts")
	result, err := core.Request[core.Record](ctx, v, http.MethodPatch, resourcePath, nil, body)
	if err != nil {
		return nil, err
	}
	if result.Empty() {
		return nil, nil
	}
	// Create async task from result
	task := asyncResultFromRecord(ctx, result, v.Rest)
	// If waitTimeout is 0, return task immediately without waiting (async background operation)
	if waitTimeout == 0 {
		return task, nil
	}
	// Wait for task completion with the specified timeout
	if _, err := task.Wait(waitTimeout); err != nil {
		return task, err
	}
	return task, nil

}

// VolumeUpdateHosts_PATCH
// method: PATCH
// url: /volumes/{id}/update_hosts/
// summary: Update Mapping of a Volume to Block Hosts
//
// Parameters:
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (v *Volume) VolumeUpdateHosts_PATCH(id any, body core.Params, waitTimeout time.Duration) (*AsyncResult, error) {
	return v.VolumeUpdateHostsWithContext_PATCH(v.Rest.GetCtx(), id, body, waitTimeout)
}
