// Code generated by generate-untyped-resources. DO NOT EDIT.

package untyped

import (
	"context"
	"net/http"
	"time"

	"github.com/vast-data/go-vast-client/core"
)

// UserAccessKeysWithContext_DELETE
// method: DELETE
// url: /users/{id}/access_keys/
// summary: Remove S3 Access Key Pair (Local User)
//
// Parameters:
//   - accessKey (body): The access key to remove
func (u *User) UserAccessKeysWithContext_DELETE(ctx context.Context, id any, accessKey string) error {
	resourcePath := core.BuildResourcePathWithID("users", id, "access_keys")
	body := core.Params{}
	body["access_key"] = accessKey
	_, err := core.Request[core.EmptyRecord](ctx, u, http.MethodDelete, resourcePath, nil, body)
	return err

}

// UserAccessKeys_DELETE
// method: DELETE
// url: /users/{id}/access_keys/
// summary: Remove S3 Access Key Pair (Local User)
//
// Parameters:
//   - accessKey (body): The access key to remove
func (u *User) UserAccessKeys_DELETE(id any, accessKey string) error {
	return u.UserAccessKeysWithContext_DELETE(u.Rest.GetCtx(), id, accessKey)
}

// UserAccessKeysWithContext_PATCH
// method: PATCH
// url: /users/{id}/access_keys/
// summary: Enable/Disable S3 Access Key Pair (Local User)
//
// Parameters:
//   - accessKey (body): The access key to enable
//   - enabled (body): Set to true to enable access key pair. Set to false to disable access key pair
func (u *User) UserAccessKeysWithContext_PATCH(ctx context.Context, id any, accessKey string, enabled bool) error {
	resourcePath := core.BuildResourcePathWithID("users", id, "access_keys")
	body := core.Params{}
	body["access_key"] = accessKey
	body["enabled"] = enabled
	_, err := core.Request[core.EmptyRecord](ctx, u, http.MethodPatch, resourcePath, nil, body)
	return err

}

// UserAccessKeys_PATCH
// method: PATCH
// url: /users/{id}/access_keys/
// summary: Enable/Disable S3 Access Key Pair (Local User)
//
// Parameters:
//   - accessKey (body): The access key to enable
//   - enabled (body): Set to true to enable access key pair. Set to false to disable access key pair
func (u *User) UserAccessKeys_PATCH(id any, accessKey string, enabled bool) error {
	return u.UserAccessKeysWithContext_PATCH(u.Rest.GetCtx(), id, accessKey, enabled)
}

// UserAccessKeysWithContext_POST
// method: POST
// url: /users/{id}/access_keys/
// summary: Generate S3 Access Key Pair (Local User)
//
// Parameters:
//   - tenantId (body): Tenant ID
func (u *User) UserAccessKeysWithContext_POST(ctx context.Context, id any, tenantId int64) (core.Record, error) {
	resourcePath := core.BuildResourcePathWithID("users", id, "access_keys")
	body := core.Params{}
	if tenantId != 0 {
		body["tenant_id"] = tenantId
	}
	result, err := core.Request[core.Record](ctx, u, http.MethodPost, resourcePath, nil, body)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// UserAccessKeys_POST
// method: POST
// url: /users/{id}/access_keys/
// summary: Generate S3 Access Key Pair (Local User)
//
// Parameters:
//   - tenantId (body): Tenant ID
func (u *User) UserAccessKeys_POST(id any, tenantId int64) (core.Record, error) {
	return u.UserAccessKeysWithContext_POST(u.Rest.GetCtx(), id, tenantId)
}

// UserCopyWithContext_POST
// method: POST
// url: /users/copy/
// summary: Copy Users with S3 Keys from one Local Provider to Another
//
// Parameters:
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (u *User) UserCopyWithContext_POST(ctx context.Context, body core.Params, waitTimeout time.Duration) (*AsyncResult, error) {
	resourcePath := "/users/copy/"
	result, err := core.Request[core.Record](ctx, u, http.MethodPost, resourcePath, nil, body)
	if err != nil {
		return nil, err
	}
	// Create async task from result
	task := asyncResultFromRecord(ctx, result, u.Rest)
	// If waitTimeout is 0, return task immediately without waiting (async background operation)
	if waitTimeout == 0 {
		return task, nil
	}
	// Wait for task completion with the specified timeout
	if _, err := task.Wait(waitTimeout); err != nil {
		return task, err
	}
	return task, nil

}

// UserCopy_POST
// method: POST
// url: /users/copy/
// summary: Copy Users with S3 Keys from one Local Provider to Another
//
// Parameters:
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (u *User) UserCopy_POST(body core.Params, waitTimeout time.Duration) (*AsyncResult, error) {
	return u.UserCopyWithContext_POST(u.Rest.GetCtx(), body, waitTimeout)
}

// UserNamesWithContext_GET
// method: GET
// url: /users/names/
// summary: Find User by prefix and domain details
func (u *User) UserNamesWithContext_GET(ctx context.Context, params core.Params) (core.Record, error) {
	resourcePath := "/users/names/"
	result, err := core.Request[core.Record](ctx, u, http.MethodGet, resourcePath, params, nil)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// UserNames_GET
// method: GET
// url: /users/names/
// summary: Find User by prefix and domain details
func (u *User) UserNames_GET(params core.Params) (core.Record, error) {
	return u.UserNamesWithContext_GET(u.Rest.GetCtx(), params)
}

// UserNonLocalKeysWithContext_DELETE
// method: DELETE
// url: /users/non_local_keys/
// summary: Remove S3 Access Key Pair (Non-Local User)
func (u *User) UserNonLocalKeysWithContext_DELETE(ctx context.Context, params core.Params) error {
	resourcePath := "/users/non_local_keys/"
	_, err := core.Request[core.EmptyRecord](ctx, u, http.MethodDelete, resourcePath, params, nil)
	return err

}

// UserNonLocalKeys_DELETE
// method: DELETE
// url: /users/non_local_keys/
// summary: Remove S3 Access Key Pair (Non-Local User)
func (u *User) UserNonLocalKeys_DELETE(params core.Params) error {
	return u.UserNonLocalKeysWithContext_DELETE(u.Rest.GetCtx(), params)
}

// UserNonLocalKeysWithContext_PATCH
// method: PATCH
// url: /users/non_local_keys/
// summary: Enable or Disable S3 Access Key Pair (Non-Local User)
func (u *User) UserNonLocalKeysWithContext_PATCH(ctx context.Context, body core.Params) error {
	resourcePath := "/users/non_local_keys/"
	_, err := core.Request[core.EmptyRecord](ctx, u, http.MethodPatch, resourcePath, nil, body)
	return err

}

// UserNonLocalKeys_PATCH
// method: PATCH
// url: /users/non_local_keys/
// summary: Enable or Disable S3 Access Key Pair (Non-Local User)
func (u *User) UserNonLocalKeys_PATCH(body core.Params) error {
	return u.UserNonLocalKeysWithContext_PATCH(u.Rest.GetCtx(), body)
}

// UserNonLocalKeysWithContext_POST
// method: POST
// url: /users/non_local_keys/
// summary: Generate S3 Access Key Pair (Non-Local User)
func (u *User) UserNonLocalKeysWithContext_POST(ctx context.Context, body core.Params) (core.Record, error) {
	resourcePath := "/users/non_local_keys/"
	result, err := core.Request[core.Record](ctx, u, http.MethodPost, resourcePath, nil, body)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// UserNonLocalKeys_POST
// method: POST
// url: /users/non_local_keys/
// summary: Generate S3 Access Key Pair (Non-Local User)
func (u *User) UserNonLocalKeys_POST(body core.Params) (core.Record, error) {
	return u.UserNonLocalKeysWithContext_POST(u.Rest.GetCtx(), body)
}

// UserQueryWithContext_GET
// method: GET
// url: /users/query/
// summary: Query User
func (u *User) UserQueryWithContext_GET(ctx context.Context, params core.Params) (core.Record, error) {
	resourcePath := "/users/query/"
	result, err := core.Request[core.Record](ctx, u, http.MethodGet, resourcePath, params, nil)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// UserQuery_GET
// method: GET
// url: /users/query/
// summary: Query User
func (u *User) UserQuery_GET(params core.Params) (core.Record, error) {
	return u.UserQueryWithContext_GET(u.Rest.GetCtx(), params)
}

// UserQueryWithContext_PATCH
// method: PATCH
// url: /users/query/
// summary: Modify non-Local User
func (u *User) UserQueryWithContext_PATCH(ctx context.Context, body core.Params) (core.Record, error) {
	resourcePath := "/users/query/"
	result, err := core.Request[core.Record](ctx, u, http.MethodPatch, resourcePath, nil, body)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// UserQuery_PATCH
// method: PATCH
// url: /users/query/
// summary: Modify non-Local User
func (u *User) UserQuery_PATCH(body core.Params) (core.Record, error) {
	return u.UserQueryWithContext_PATCH(u.Rest.GetCtx(), body)
}

// UserRefreshWithContext_PATCH
// method: PATCH
// url: /users/refresh/
// summary: Refresh User
func (u *User) UserRefreshWithContext_PATCH(ctx context.Context, body core.Params) (core.Record, error) {
	resourcePath := "/users/refresh/"
	result, err := core.Request[core.Record](ctx, u, http.MethodPatch, resourcePath, nil, body)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// UserRefresh_PATCH
// method: PATCH
// url: /users/refresh/
// summary: Refresh User
func (u *User) UserRefresh_PATCH(body core.Params) (core.Record, error) {
	return u.UserRefreshWithContext_PATCH(u.Rest.GetCtx(), body)
}

// UserTenantDataWithContext_GET
// method: GET
// url: /users/{id}/tenant_data/
// summary: Get tenant data for a User
func (u *User) UserTenantDataWithContext_GET(ctx context.Context, id any, params core.Params) (core.Record, error) {
	resourcePath := core.BuildResourcePathWithID("users", id, "tenant_data")
	result, err := core.Request[core.Record](ctx, u, http.MethodGet, resourcePath, params, nil)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// UserTenantData_GET
// method: GET
// url: /users/{id}/tenant_data/
// summary: Get tenant data for a User
func (u *User) UserTenantData_GET(id any, params core.Params) (core.Record, error) {
	return u.UserTenantDataWithContext_GET(u.Rest.GetCtx(), id, params)
}

// UserTenantDataWithContext_PATCH
// method: PATCH
// url: /users/{id}/tenant_data/
// summary: Update Tenant Data for a User
func (u *User) UserTenantDataWithContext_PATCH(ctx context.Context, id any, body core.Params) (core.Record, error) {
	resourcePath := core.BuildResourcePathWithID("users", id, "tenant_data")
	result, err := core.Request[core.Record](ctx, u, http.MethodPatch, resourcePath, nil, body)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// UserTenantData_PATCH
// method: PATCH
// url: /users/{id}/tenant_data/
// summary: Update Tenant Data for a User
func (u *User) UserTenantData_PATCH(id any, body core.Params) (core.Record, error) {
	return u.UserTenantDataWithContext_PATCH(u.Rest.GetCtx(), id, body)
}
