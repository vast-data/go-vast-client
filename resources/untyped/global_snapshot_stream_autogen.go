// Code generated by generate-untyped-resources. DO NOT EDIT.

package untyped

import (
	"context"
	"net/http"
	"time"

	"github.com/vast-data/go-vast-client/core"
)

// GlobalSnapshotStreamPauseWithContext_PATCH
// method: PATCH
// url: /globalsnapstreams/{id}/pause/
// summary: Pause a Global Snapshot Stream
//
// Parameters:
//   - enabled (body): Enabled
func (g *GlobalSnapshotStream) GlobalSnapshotStreamPauseWithContext_PATCH(ctx context.Context, id any, enabled bool) (core.Record, error) {
	resourcePath := core.BuildResourcePathWithID("globalsnapstreams", id, "pause")
	body := core.Params{}
	if enabled != false {
		body["enabled"] = enabled
	}
	result, err := core.Request[core.Record](ctx, g, http.MethodPatch, resourcePath, nil, body)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GlobalSnapshotStreamPause_PATCH
// method: PATCH
// url: /globalsnapstreams/{id}/pause/
// summary: Pause a Global Snapshot Stream
//
// Parameters:
//   - enabled (body): Enabled
func (g *GlobalSnapshotStream) GlobalSnapshotStreamPause_PATCH(id any, enabled bool) (core.Record, error) {
	return g.GlobalSnapshotStreamPauseWithContext_PATCH(g.Rest.GetCtx(), id, enabled)
}

// GlobalSnapshotStreamResumeWithContext_PATCH
// method: PATCH
// url: /globalsnapstreams/{id}/resume/
// summary: Resume a Global Snapshot Stream
//
// Parameters:
//   - enabled (body): Enabled
func (g *GlobalSnapshotStream) GlobalSnapshotStreamResumeWithContext_PATCH(ctx context.Context, id any, enabled bool) (core.Record, error) {
	resourcePath := core.BuildResourcePathWithID("globalsnapstreams", id, "resume")
	body := core.Params{}
	if enabled != false {
		body["enabled"] = enabled
	}
	result, err := core.Request[core.Record](ctx, g, http.MethodPatch, resourcePath, nil, body)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// GlobalSnapshotStreamResume_PATCH
// method: PATCH
// url: /globalsnapstreams/{id}/resume/
// summary: Resume a Global Snapshot Stream
//
// Parameters:
//   - enabled (body): Enabled
func (g *GlobalSnapshotStream) GlobalSnapshotStreamResume_PATCH(id any, enabled bool) (core.Record, error) {
	return g.GlobalSnapshotStreamResumeWithContext_PATCH(g.Rest.GetCtx(), id, enabled)
}

// GlobalSnapshotStreamStopWithContext_PATCH
// method: PATCH
// url: /globalsnapstreams/{id}/stop/
// summary: Stop a Global Snapshot Stream
//
// Parameters:
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (g *GlobalSnapshotStream) GlobalSnapshotStreamStopWithContext_PATCH(ctx context.Context, id any, body core.Params, waitTimeout time.Duration) (*AsyncResult, error) {
	resourcePath := core.BuildResourcePathWithID("globalsnapstreams", id, "stop")
	result, err := core.Request[core.Record](ctx, g, http.MethodPatch, resourcePath, nil, body)
	if err != nil {
		return nil, err
	}

	return MaybeWaitAsyncResultWithContext(ctx, result, g.Rest, waitTimeout)

}

// GlobalSnapshotStreamStop_PATCH
// method: PATCH
// url: /globalsnapstreams/{id}/stop/
// summary: Stop a Global Snapshot Stream
//
// Parameters:
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (g *GlobalSnapshotStream) GlobalSnapshotStreamStop_PATCH(id any, body core.Params, waitTimeout time.Duration) (*AsyncResult, error) {
	return g.GlobalSnapshotStreamStopWithContext_PATCH(g.Rest.GetCtx(), id, body, waitTimeout)
}
