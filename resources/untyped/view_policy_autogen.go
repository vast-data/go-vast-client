// Code generated by generate-untyped-resources. DO NOT EDIT.

package untyped

import (
	"context"
	"net/http"

	"github.com/vast-data/go-vast-client/core"
)

// ViewPolicyRefreshNetgroupsWithContext_PATCH
// method: PATCH
// url: /viewpolicies/{id}/refresh_netgroups/
// summary: refresh View policy netgroups
func (v *ViewPolicy) ViewPolicyRefreshNetgroupsWithContext_PATCH(ctx context.Context, id any, body core.Params) error {
	resourcePath := core.BuildResourcePathWithID("viewpolicies", id, "refresh_netgroups")
	_, err := core.Request[core.EmptyRecord](ctx, v, http.MethodPatch, resourcePath, nil, body)
	return err

}

// ViewPolicyRefreshNetgroups_PATCH
// method: PATCH
// url: /viewpolicies/{id}/refresh_netgroups/
// summary: refresh View policy netgroups
func (v *ViewPolicy) ViewPolicyRefreshNetgroups_PATCH(id any, body core.Params) error {
	return v.ViewPolicyRefreshNetgroupsWithContext_PATCH(v.Rest.GetCtx(), id, body)
}

// ViewPolicyRemoteMappingWithContext_DELETE
// method: DELETE
// url: /viewpolicies/{id}/remote_mapping/
//
// Parameters:
//   - peer (body): Peer name
func (v *ViewPolicy) ViewPolicyRemoteMappingWithContext_DELETE(ctx context.Context, id any, peer string) error {
	resourcePath := core.BuildResourcePathWithID("viewpolicies", id, "remote_mapping")
	body := core.Params{}
	if peer != "" {
		body["peer"] = peer
	}
	_, err := core.Request[core.EmptyRecord](ctx, v, http.MethodDelete, resourcePath, nil, body)
	return err

}

// ViewPolicyRemoteMapping_DELETE
// method: DELETE
// url: /viewpolicies/{id}/remote_mapping/
//
// Parameters:
//   - peer (body): Peer name
func (v *ViewPolicy) ViewPolicyRemoteMapping_DELETE(id any, peer string) error {
	return v.ViewPolicyRemoteMappingWithContext_DELETE(v.Rest.GetCtx(), id, peer)
}

// ViewPolicyRemoteMappingWithContext_POST
// method: POST
// url: /viewpolicies/{id}/remote_mapping/
//
// Parameters:
//   - peer (body): Peer name
//   - remotePolicy (body): Remote policy name
func (v *ViewPolicy) ViewPolicyRemoteMappingWithContext_POST(ctx context.Context, id any, peer string, remotePolicy string) (core.Record, error) {
	resourcePath := core.BuildResourcePathWithID("viewpolicies", id, "remote_mapping")
	body := core.Params{}
	if peer != "" {
		body["peer"] = peer
	}
	if remotePolicy != "" {
		body["remote_policy"] = remotePolicy
	}
	result, err := core.Request[core.Record](ctx, v, http.MethodPost, resourcePath, nil, body)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// ViewPolicyRemoteMapping_POST
// method: POST
// url: /viewpolicies/{id}/remote_mapping/
//
// Parameters:
//   - peer (body): Peer name
//   - remotePolicy (body): Remote policy name
func (v *ViewPolicy) ViewPolicyRemoteMapping_POST(id any, peer string, remotePolicy string) (core.Record, error) {
	return v.ViewPolicyRemoteMappingWithContext_POST(v.Rest.GetCtx(), id, peer, remotePolicy)
}
