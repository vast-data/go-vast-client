// Code generated by generate-untyped-resources. DO NOT EDIT.

package untyped

import (
	"context"
	"net/http"
	"time"

	"github.com/vast-data/go-vast-client/core"
)

// DboxAddWithContext_POST
// method: POST
// url: /dboxes/add/
// summary: Add DBox
func (d *Dbox) DboxAddWithContext_POST(ctx context.Context, body core.Params) (core.Record, error) {
	resourcePath := "/dboxes/add/"
	result, err := core.Request[core.Record](ctx, d, http.MethodPost, resourcePath, nil, body)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// DboxAdd_POST
// method: POST
// url: /dboxes/add/
// summary: Add DBox
func (d *Dbox) DboxAdd_POST(body core.Params) (core.Record, error) {
	return d.DboxAddWithContext_POST(d.Rest.GetCtx(), body)
}

// DboxControlLedWithContext_PATCH
// method: PATCH
// url: /dboxes/{id}/control_led/
// summary: Control DBox LEDs
//
// Parameters:
//   - control (body): LED state
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (d *Dbox) DboxControlLedWithContext_PATCH(ctx context.Context, id any, control string, waitTimeout time.Duration) (*AsyncResult, error) {
	resourcePath := core.BuildResourcePathWithID("dboxes", id, "control_led")
	body := core.Params{}
	if control != "" {
		body["control"] = control
	}
	result, err := core.Request[core.Record](ctx, d, http.MethodPatch, resourcePath, nil, body)
	if err != nil {
		return nil, err
	}

	asyncResult, _, err := MaybeWaitAsyncResultWithContext(ctx, result, d.Rest, waitTimeout)
	return asyncResult, err

}

// DboxControlLed_PATCH
// method: PATCH
// url: /dboxes/{id}/control_led/
// summary: Control DBox LEDs
//
// Parameters:
//   - control (body): LED state
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (d *Dbox) DboxControlLed_PATCH(id any, control string, waitTimeout time.Duration) (*AsyncResult, error) {
	return d.DboxControlLedWithContext_PATCH(d.Rest.GetCtx(), id, control, waitTimeout)
}

// DboxResetDpI2cWithContext_PATCH
// method: PATCH
// url: /dboxes/{id}/reset_dp_i2c/
// summary: Reset dp i2c
//
// Parameters:
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (d *Dbox) DboxResetDpI2cWithContext_PATCH(ctx context.Context, id any, body core.Params, waitTimeout time.Duration) (*AsyncResult, error) {
	resourcePath := core.BuildResourcePathWithID("dboxes", id, "reset_dp_i2c")
	result, err := core.Request[core.Record](ctx, d, http.MethodPatch, resourcePath, nil, body)
	if err != nil {
		return nil, err
	}

	asyncResult, _, err := MaybeWaitAsyncResultWithContext(ctx, result, d.Rest, waitTimeout)
	return asyncResult, err

}

// DboxResetDpI2c_PATCH
// method: PATCH
// url: /dboxes/{id}/reset_dp_i2c/
// summary: Reset dp i2c
//
// Parameters:
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (d *Dbox) DboxResetDpI2c_PATCH(id any, body core.Params, waitTimeout time.Duration) (*AsyncResult, error) {
	return d.DboxResetDpI2cWithContext_PATCH(d.Rest.GetCtx(), id, body, waitTimeout)
}
