// Code generated by generate-untyped-resources. DO NOT EDIT.

package untyped

import (
	"context"
	"net/http"

	"github.com/vast-data/go-vast-client/core"
)

// CallhomeConfigsRegisterClusterWithContext_PATCH
// method: PATCH
// url: /callhomeconfigs/{id}/register-cluster/
// summary: Register Cluster with Uplink
//
// Parameters:
//   - email (body): VAST Uplink super user login email
//   - password (body): VAST Uplink super user password
//   - token (body): VAST Uplink cluster registration token
func (c *CallhomeConfigs) CallhomeConfigsRegisterClusterWithContext_PATCH(ctx context.Context, id any, email string, password string, token string) (core.Record, error) {
	resourcePath := core.BuildResourcePathWithID("callhomeconfigs", id, "register-cluster")
	body := core.Params{}
	if email != "" {
		body["email"] = email
	}
	if password != "" {
		body["password"] = password
	}
	if token != "" {
		body["token"] = token
	}
	result, err := core.Request[core.Record](ctx, c, http.MethodPatch, resourcePath, nil, body)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// CallhomeConfigsRegisterCluster_PATCH
// method: PATCH
// url: /callhomeconfigs/{id}/register-cluster/
// summary: Register Cluster with Uplink
//
// Parameters:
//   - email (body): VAST Uplink super user login email
//   - password (body): VAST Uplink super user password
//   - token (body): VAST Uplink cluster registration token
func (c *CallhomeConfigs) CallhomeConfigsRegisterCluster_PATCH(id any, email string, password string, token string) (core.Record, error) {
	return c.CallhomeConfigsRegisterClusterWithContext_PATCH(c.Rest.GetCtx(), id, email, password, token)
}

// CallhomeConfigsSendWithContext_PATCH
// method: PATCH
// url: /callhomeconfigs/{id}/send/
// summary: Send a Call Home Message
func (c *CallhomeConfigs) CallhomeConfigsSendWithContext_PATCH(ctx context.Context, id any, body core.Params) (core.Record, error) {
	resourcePath := core.BuildResourcePathWithID("callhomeconfigs", id, "send")
	result, err := core.Request[core.Record](ctx, c, http.MethodPatch, resourcePath, nil, body)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// CallhomeConfigsSend_PATCH
// method: PATCH
// url: /callhomeconfigs/{id}/send/
// summary: Send a Call Home Message
func (c *CallhomeConfigs) CallhomeConfigsSend_PATCH(id any, body core.Params) (core.Record, error) {
	return c.CallhomeConfigsSendWithContext_PATCH(c.Rest.GetCtx(), id, body)
}
