// Code generated by generate-untyped-resources. DO NOT EDIT.

package untyped

import (
	"context"
	"net/http"
	"time"

	"github.com/vast-data/go-vast-client/core"
)

// NvramControlLedWithContext_PATCH
// method: PATCH
// url: /nvrams/{id}/control_led/
// summary: Turn SCM SLED identification LED on and off
//
// Parameters:
//   - control (body): LED state
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (n *Nvram) NvramControlLedWithContext_PATCH(ctx context.Context, id any, control string, waitTimeout time.Duration) (*AsyncResult, error) {
	resourcePath := core.BuildResourcePathWithID("nvrams", id, "control_led")
	body := core.Params{}
	if control != "" {
		body["control"] = control
	}
	result, err := core.Request[core.Record](ctx, n, http.MethodPatch, resourcePath, nil, body)
	if err != nil {
		return nil, err
	}

	asyncResult, _, err := MaybeWaitAsyncResultWithContext(ctx, result, n.Rest, waitTimeout)
	return asyncResult, err

}

// NvramControlLed_PATCH
// method: PATCH
// url: /nvrams/{id}/control_led/
// summary: Turn SCM SLED identification LED on and off
//
// Parameters:
//   - control (body): LED state
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (n *Nvram) NvramControlLed_PATCH(id any, control string, waitTimeout time.Duration) (*AsyncResult, error) {
	return n.NvramControlLedWithContext_PATCH(n.Rest.GetCtx(), id, control, waitTimeout)
}

// NvramFormatWithContext_PATCH
// method: PATCH
// url: /nvrams/{id}/format/
// summary: Format NVRAM
//
// Parameters:
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (n *Nvram) NvramFormatWithContext_PATCH(ctx context.Context, id any, body core.Params, waitTimeout time.Duration) (*AsyncResult, error) {
	resourcePath := core.BuildResourcePathWithID("nvrams", id, "format")
	result, err := core.Request[core.Record](ctx, n, http.MethodPatch, resourcePath, nil, body)
	if err != nil {
		return nil, err
	}

	asyncResult, _, err := MaybeWaitAsyncResultWithContext(ctx, result, n.Rest, waitTimeout)
	return asyncResult, err

}

// NvramFormat_PATCH
// method: PATCH
// url: /nvrams/{id}/format/
// summary: Format NVRAM
//
// Parameters:
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (n *Nvram) NvramFormat_PATCH(id any, body core.Params, waitTimeout time.Duration) (*AsyncResult, error) {
	return n.NvramFormatWithContext_PATCH(n.Rest.GetCtx(), id, body, waitTimeout)
}
