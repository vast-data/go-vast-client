// Code generated by generate-untyped-resources. DO NOT EDIT.

package untyped

import (
	"context"
	"net/http"
	"time"

	"github.com/vast-data/go-vast-client/core"
)

// CnodeAddCnodesWithContext_POST
// method: POST
// url: /cnodes/add_cnodes/
// summary: Add multiple CNodes to the cluster
//
// Parameters:
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (c *Cnode) CnodeAddCnodesWithContext_POST(ctx context.Context, body core.Params, waitTimeout time.Duration) (*AsyncResult, error) {
	resourcePath := "/cnodes/add_cnodes/"
	result, err := core.Request[core.Record](ctx, c, http.MethodPost, resourcePath, nil, body)
	if err != nil {
		return nil, err
	}
	// Create async task from result
	task := asyncResultFromRecord(ctx, result, c.Rest)
	// If waitTimeout is 0, return task immediately without waiting (async background operation)
	if waitTimeout == 0 {
		return task, nil
	}
	// Wait for task completion with the specified timeout
	if _, err := task.Wait(waitTimeout); err != nil {
		return task, err
	}
	return task, nil

}

// CnodeAddCnodes_POST
// method: POST
// url: /cnodes/add_cnodes/
// summary: Add multiple CNodes to the cluster
//
// Parameters:
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (c *Cnode) CnodeAddCnodes_POST(body core.Params, waitTimeout time.Duration) (*AsyncResult, error) {
	return c.CnodeAddCnodesWithContext_POST(c.Rest.GetCtx(), body, waitTimeout)
}

// CnodeBgpconfigWithContext_GET
// method: GET
// url: /cnodes/{id}/bgpconfig
// summary: Get BGP Configuration
func (c *Cnode) CnodeBgpconfigWithContext_GET(ctx context.Context, id any, params core.Params) (core.Record, error) {
	resourcePath := core.BuildResourcePathWithID("cnodes", id, "bgpconfig")
	result, err := core.Request[core.Record](ctx, c, http.MethodGet, resourcePath, params, nil)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// CnodeBgpconfig_GET
// method: GET
// url: /cnodes/{id}/bgpconfig
// summary: Get BGP Configuration
func (c *Cnode) CnodeBgpconfig_GET(id any, params core.Params) (core.Record, error) {
	return c.CnodeBgpconfigWithContext_GET(c.Rest.GetCtx(), id, params)
}

// CnodeBgpconfigWithContext_PATCH
// method: PATCH
// url: /cnodes/{id}/bgpconfig
// summary: Configure BGP on CNode
func (c *Cnode) CnodeBgpconfigWithContext_PATCH(ctx context.Context, id any, body core.Params) error {
	resourcePath := core.BuildResourcePathWithID("cnodes", id, "bgpconfig")
	_, err := core.Request[core.EmptyRecord](ctx, c, http.MethodPatch, resourcePath, nil, body)
	return err

}

// CnodeBgpconfig_PATCH
// method: PATCH
// url: /cnodes/{id}/bgpconfig
// summary: Configure BGP on CNode
func (c *Cnode) CnodeBgpconfig_PATCH(id any, body core.Params) error {
	return c.CnodeBgpconfigWithContext_PATCH(c.Rest.GetCtx(), id, body)
}

// CnodeControlLedWithContext_PATCH
// method: PATCH
// url: /cnodes/{id}/control_led/
// summary: Control CNode LED
//
// Parameters:
//   - control (body): LED state
func (c *Cnode) CnodeControlLedWithContext_PATCH(ctx context.Context, id any, control string) error {
	resourcePath := core.BuildResourcePathWithID("cnodes", id, "control_led")
	body := core.Params{}
	if control != "" {
		body["control"] = control
	}
	_, err := core.Request[core.EmptyRecord](ctx, c, http.MethodPatch, resourcePath, nil, body)
	return err

}

// CnodeControlLed_PATCH
// method: PATCH
// url: /cnodes/{id}/control_led/
// summary: Control CNode LED
//
// Parameters:
//   - control (body): LED state
func (c *Cnode) CnodeControlLed_PATCH(id any, control string) error {
	return c.CnodeControlLedWithContext_PATCH(c.Rest.GetCtx(), id, control)
}

// CnodeHighlightWithContext_PATCH
// method: PATCH
// url: /cnodes/{id}/highlight/
// summary: HighLight CNode
//
// Parameters:
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (c *Cnode) CnodeHighlightWithContext_PATCH(ctx context.Context, id any, body core.Params, waitTimeout time.Duration) (*AsyncResult, error) {
	resourcePath := core.BuildResourcePathWithID("cnodes", id, "highlight")
	result, err := core.Request[core.Record](ctx, c, http.MethodPatch, resourcePath, nil, body)
	if err != nil {
		return nil, err
	}
	// Create async task from result
	task := asyncResultFromRecord(ctx, result, c.Rest)
	// If waitTimeout is 0, return task immediately without waiting (async background operation)
	if waitTimeout == 0 {
		return task, nil
	}
	// Wait for task completion with the specified timeout
	if _, err := task.Wait(waitTimeout); err != nil {
		return task, err
	}
	return task, nil

}

// CnodeHighlight_PATCH
// method: PATCH
// url: /cnodes/{id}/highlight/
// summary: HighLight CNode
//
// Parameters:
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (c *Cnode) CnodeHighlight_PATCH(id any, body core.Params, waitTimeout time.Duration) (*AsyncResult, error) {
	return c.CnodeHighlightWithContext_PATCH(c.Rest.GetCtx(), id, body, waitTimeout)
}

// CnodeRenameWithContext_PATCH
// method: PATCH
// url: /cnodes/{id}/rename/
// summary: Rename CNode
//
// Parameters:
//   - name (body): New CNode name
func (c *Cnode) CnodeRenameWithContext_PATCH(ctx context.Context, id any, name string) error {
	resourcePath := core.BuildResourcePathWithID("cnodes", id, "rename")
	body := core.Params{}
	if name != "" {
		body["name"] = name
	}
	_, err := core.Request[core.EmptyRecord](ctx, c, http.MethodPatch, resourcePath, nil, body)
	return err

}

// CnodeRename_PATCH
// method: PATCH
// url: /cnodes/{id}/rename/
// summary: Rename CNode
//
// Parameters:
//   - name (body): New CNode name
func (c *Cnode) CnodeRename_PATCH(id any, name string) error {
	return c.CnodeRenameWithContext_PATCH(c.Rest.GetCtx(), id, name)
}

// CnodeSetTenantsWithContext_POST
// method: POST
// url: /cnodes/set_tenants/
// summary: Attach tenants to a CNode
//
// Parameters:
//   - id (body): CNode ID
//   - mode (body): NONE/DEDICATED/SHARED
//   - tenantIds (body): A list of tenet IDs
func (c *Cnode) CnodeSetTenantsWithContext_POST(ctx context.Context, id int64, mode string, tenantIds string) error {
	resourcePath := "/cnodes/set_tenants/"
	body := core.Params{}
	body["id"] = id
	body["mode"] = mode
	body["tenant_ids"] = tenantIds
	_, err := core.Request[core.EmptyRecord](ctx, c, http.MethodPost, resourcePath, nil, body)
	return err

}

// CnodeSetTenants_POST
// method: POST
// url: /cnodes/set_tenants/
// summary: Attach tenants to a CNode
//
// Parameters:
//   - id (body): CNode ID
//   - mode (body): NONE/DEDICATED/SHARED
//   - tenantIds (body): A list of tenet IDs
func (c *Cnode) CnodeSetTenants_POST(id int64, mode string, tenantIds string) error {
	return c.CnodeSetTenantsWithContext_POST(c.Rest.GetCtx(), id, mode, tenantIds)
}
