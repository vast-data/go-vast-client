// Code generated by generate-untyped-resources. DO NOT EDIT.

package untyped

import (
	"context"
	"net/http"

	"github.com/vast-data/go-vast-client/core"
)

// FolderCreateFolderWithContext_POST
// method: POST
// url: /folders/create_folder/
// summary: Create Folder
func (f *Folder) FolderCreateFolderWithContext_POST(ctx context.Context, body core.Params) (core.Record, error) {
	resourcePath := "/folders/create_folder/"
	result, err := core.Request[core.Record](ctx, f, http.MethodPost, resourcePath, nil, body)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// FolderCreateFolder_POST
// method: POST
// url: /folders/create_folder/
// summary: Create Folder
func (f *Folder) FolderCreateFolder_POST(body core.Params) (core.Record, error) {
	return f.FolderCreateFolderWithContext_POST(f.Rest.GetCtx(), body)
}

// FolderDeleteFolderWithContext_DELETE
// method: DELETE
// url: /folders/delete_folder/
// summary: Delete Folder
//
// Parameters:
//   - path (body): Folder path to delete
//   - tenantId (body): Tenant ID
func (f *Folder) FolderDeleteFolderWithContext_DELETE(ctx context.Context, path string, tenantId int64) (core.Record, error) {
	resourcePath := "/folders/delete_folder/"
	body := core.Params{}
	body["path"] = path
	if tenantId != 0 {
		body["tenant_id"] = tenantId
	}
	result, err := core.Request[core.Record](ctx, f, http.MethodDelete, resourcePath, nil, body)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// FolderDeleteFolder_DELETE
// method: DELETE
// url: /folders/delete_folder/
// summary: Delete Folder
//
// Parameters:
//   - path (body): Folder path to delete
//   - tenantId (body): Tenant ID
func (f *Folder) FolderDeleteFolder_DELETE(path string, tenantId int64) (core.Record, error) {
	return f.FolderDeleteFolderWithContext_DELETE(f.Rest.GetCtx(), path, tenantId)
}

// FolderModifyFolderWithContext_PATCH
// method: PATCH
// url: /folders/modify_folder/
// summary: Modify Folder
func (f *Folder) FolderModifyFolderWithContext_PATCH(ctx context.Context, body core.Params) (core.Record, error) {
	resourcePath := "/folders/modify_folder/"
	result, err := core.Request[core.Record](ctx, f, http.MethodPatch, resourcePath, nil, body)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// FolderModifyFolder_PATCH
// method: PATCH
// url: /folders/modify_folder/
// summary: Modify Folder
func (f *Folder) FolderModifyFolder_PATCH(body core.Params) (core.Record, error) {
	return f.FolderModifyFolderWithContext_PATCH(f.Rest.GetCtx(), body)
}

// FolderReadOnlyWithContext_DELETE
// method: DELETE
// url: /folders/read_only/
// summary: Unlock Read-Only Folder
//
// Parameters:
//   - path (body): Path
//   - tenantId (body): Tenant ID
func (f *Folder) FolderReadOnlyWithContext_DELETE(ctx context.Context, path string, tenantId int64) error {
	resourcePath := "/folders/read_only/"
	body := core.Params{}
	body["path"] = path
	body["tenant_id"] = tenantId
	_, err := core.Request[core.Record](ctx, f, http.MethodDelete, resourcePath, nil, body)
	return err

}

// FolderReadOnly_DELETE
// method: DELETE
// url: /folders/read_only/
// summary: Unlock Read-Only Folder
//
// Parameters:
//   - path (body): Path
//   - tenantId (body): Tenant ID
func (f *Folder) FolderReadOnly_DELETE(path string, tenantId int64) error {
	return f.FolderReadOnlyWithContext_DELETE(f.Rest.GetCtx(), path, tenantId)
}

// FolderReadOnlyWithContext_GET
// method: GET
// url: /folders/read_only/
// summary: Return Details of Read-Only Folder
func (f *Folder) FolderReadOnlyWithContext_GET(ctx context.Context, params core.Params) (core.Record, error) {
	resourcePath := "/folders/read_only/"
	result, err := core.Request[core.Record](ctx, f, http.MethodGet, resourcePath, params, nil)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// FolderReadOnly_GET
// method: GET
// url: /folders/read_only/
// summary: Return Details of Read-Only Folder
func (f *Folder) FolderReadOnly_GET(params core.Params) (core.Record, error) {
	return f.FolderReadOnlyWithContext_GET(f.Rest.GetCtx(), params)
}

// FolderReadOnlyWithContext_POST
// method: POST
// url: /folders/read_only/
// summary: Make a Folder Read-Only
//
// Parameters:
//   - path (body): Path
//   - tenantId (body): Tenant ID
func (f *Folder) FolderReadOnlyWithContext_POST(ctx context.Context, path string, tenantId int64) (core.Record, error) {
	resourcePath := "/folders/read_only/"
	body := core.Params{}
	body["path"] = path
	body["tenant_id"] = tenantId
	result, err := core.Request[core.Record](ctx, f, http.MethodPost, resourcePath, nil, body)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// FolderReadOnly_POST
// method: POST
// url: /folders/read_only/
// summary: Make a Folder Read-Only
//
// Parameters:
//   - path (body): Path
//   - tenantId (body): Tenant ID
func (f *Folder) FolderReadOnly_POST(path string, tenantId int64) (core.Record, error) {
	return f.FolderReadOnlyWithContext_POST(f.Rest.GetCtx(), path, tenantId)
}

// FolderStatPathWithContext_POST
// method: POST
// url: /folders/stat_path/
// summary: Get Owning User and Group for a Path
//
// Parameters:
//   - path (body): Path
//   - tenantId (body): Tenant ID
func (f *Folder) FolderStatPathWithContext_POST(ctx context.Context, path string, tenantId int64) (core.Record, error) {
	resourcePath := "/folders/stat_path/"
	body := core.Params{}
	body["path"] = path
	body["tenant_id"] = tenantId
	result, err := core.Request[core.Record](ctx, f, http.MethodPost, resourcePath, nil, body)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// FolderStatPath_POST
// method: POST
// url: /folders/stat_path/
// summary: Get Owning User and Group for a Path
//
// Parameters:
//   - path (body): Path
//   - tenantId (body): Tenant ID
func (f *Folder) FolderStatPath_POST(path string, tenantId int64) (core.Record, error) {
	return f.FolderStatPathWithContext_POST(f.Rest.GetCtx(), path, tenantId)
}
