// Code generated by generate-untyped-resources. DO NOT EDIT.

package untyped

import (
	"context"
	"net/http"
	"time"

	"github.com/vast-data/go-vast-client/core"
)

// EboxAddWithContext_POST
// method: POST
// url: /eboxes/add/
// summary: Add EBox
//
// Parameters:
//   - enodeIp (body): Specify the internal bond IP of ENode.
//   - clusterId (body): The cluster ID
func (e *Ebox) EboxAddWithContext_POST(ctx context.Context, enodeIp string, clusterId int64) (core.Record, error) {
	resourcePath := "/eboxes/add/"
	body := core.Params{}
	body["enode_ip"] = enodeIp
	if clusterId != 0 {
		body["cluster_id"] = clusterId
	}
	result, err := core.Request[core.Record](ctx, e, http.MethodPost, resourcePath, nil, body)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// EboxAdd_POST
// method: POST
// url: /eboxes/add/
// summary: Add EBox
//
// Parameters:
//   - enodeIp (body): Specify the internal bond IP of ENode.
//   - clusterId (body): The cluster ID
func (e *Ebox) EboxAdd_POST(enodeIp string, clusterId int64) (core.Record, error) {
	return e.EboxAddWithContext_POST(e.Rest.GetCtx(), enodeIp, clusterId)
}

// EboxControlLedWithContext_PATCH
// method: PATCH
// url: /eboxes/{id}/control_led/
// summary: Control EBox LEDs
//
// Parameters:
//   - control (body): LED state
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (e *Ebox) EboxControlLedWithContext_PATCH(ctx context.Context, id any, control string, waitTimeout time.Duration) (*AsyncResult, error) {
	resourcePath := core.BuildResourcePathWithID("eboxes", id, "control_led")
	body := core.Params{}
	if control != "" {
		body["control"] = control
	}
	result, err := core.Request[core.Record](ctx, e, http.MethodPatch, resourcePath, nil, body)
	if err != nil {
		return nil, err
	}

	return MaybeWaitAsyncResultWithContext(ctx, result, e.Rest, waitTimeout)

}

// EboxControlLed_PATCH
// method: PATCH
// url: /eboxes/{id}/control_led/
// summary: Control EBox LEDs
//
// Parameters:
//   - control (body): LED state
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (e *Ebox) EboxControlLed_PATCH(id any, control string, waitTimeout time.Duration) (*AsyncResult, error) {
	return e.EboxControlLedWithContext_PATCH(e.Rest.GetCtx(), id, control, waitTimeout)
}
