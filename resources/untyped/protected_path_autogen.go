// Code generated by generate-untyped-resources. DO NOT EDIT.

package untyped

import (
	"context"
	"net/http"

	"github.com/vast-data/go-vast-client/core"
)

// ProtectedPathAddStreamWithContext_PATCH
// method: PATCH
// url: /protectedpaths/{id}/add_stream/
// summary: Add a Replication Stream to a Protected Path
func (p *ProtectedPath) ProtectedPathAddStreamWithContext_PATCH(ctx context.Context, id any, body core.Params) (core.Record, error) {
	resourcePath := core.BuildResourcePathWithID("protectedpaths", id, "add_stream")
	result, err := core.Request[core.Record](ctx, p, http.MethodPatch, resourcePath, nil, body)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// ProtectedPathAddStream_PATCH
// method: PATCH
// url: /protectedpaths/{id}/add_stream/
// summary: Add a Replication Stream to a Protected Path
func (p *ProtectedPath) ProtectedPathAddStream_PATCH(id any, body core.Params) (core.Record, error) {
	return p.ProtectedPathAddStreamWithContext_PATCH(p.Rest.GetCtx(), id, body)
}

// ProtectedPathCommitWithContext_PATCH
// method: PATCH
// url: /protectedpaths/{id}/commit/
// summary: Commit a Restored Protected Path
func (p *ProtectedPath) ProtectedPathCommitWithContext_PATCH(ctx context.Context, id any, body core.Params) (core.Record, error) {
	resourcePath := core.BuildResourcePathWithID("protectedpaths", id, "commit")
	result, err := core.Request[core.Record](ctx, p, http.MethodPatch, resourcePath, nil, body)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// ProtectedPathCommit_PATCH
// method: PATCH
// url: /protectedpaths/{id}/commit/
// summary: Commit a Restored Protected Path
func (p *ProtectedPath) ProtectedPathCommit_PATCH(id any, body core.Params) (core.Record, error) {
	return p.ProtectedPathCommitWithContext_PATCH(p.Rest.GetCtx(), id, body)
}

// ProtectedPathForceFailoverWithContext_PATCH
// method: PATCH
// url: /protectedpaths/{id}/force_failover/
// summary: Force failover on a protected path
func (p *ProtectedPath) ProtectedPathForceFailoverWithContext_PATCH(ctx context.Context, id any, body core.Params) (core.Record, error) {
	resourcePath := core.BuildResourcePathWithID("protectedpaths", id, "force_failover")
	result, err := core.Request[core.Record](ctx, p, http.MethodPatch, resourcePath, nil, body)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// ProtectedPathForceFailover_PATCH
// method: PATCH
// url: /protectedpaths/{id}/force_failover/
// summary: Force failover on a protected path
func (p *ProtectedPath) ProtectedPathForceFailover_PATCH(id any, body core.Params) (core.Record, error) {
	return p.ProtectedPathForceFailoverWithContext_PATCH(p.Rest.GetCtx(), id, body)
}

// ProtectedPathModifyMemberWithContext_PATCH
// method: PATCH
// url: /protectedpaths/{id}/modify_member/
// summary: Modify Capability of a Replication Stream that Belongs to a Protected Path
//
// Parameters:
//   - capabilities (body): The type of protection capability to apply to the stream. If ASYNC_REPLICATION, the stream replicates the path from source peer to destination peer periodically. If SYNC_REPLICATION, the stream replicates the path from source peer to destination peer continuously.
//   - streamId (body): The ID of a stream that belongs to the protected path
//   - sourceMemberCapabilities (body): Source member capabilities
func (p *ProtectedPath) ProtectedPathModifyMemberWithContext_PATCH(ctx context.Context, id any, capabilities string, streamId string, sourceMemberCapabilities string) (core.Record, error) {
	resourcePath := core.BuildResourcePathWithID("protectedpaths", id, "modify_member")
	body := core.Params{}
	body["capabilities"] = capabilities
	body["stream_id"] = streamId
	if sourceMemberCapabilities != "" {
		body["source_member_capabilities"] = sourceMemberCapabilities
	}
	result, err := core.Request[core.Record](ctx, p, http.MethodPatch, resourcePath, nil, body)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// ProtectedPathModifyMember_PATCH
// method: PATCH
// url: /protectedpaths/{id}/modify_member/
// summary: Modify Capability of a Replication Stream that Belongs to a Protected Path
//
// Parameters:
//   - capabilities (body): The type of protection capability to apply to the stream. If ASYNC_REPLICATION, the stream replicates the path from source peer to destination peer periodically. If SYNC_REPLICATION, the stream replicates the path from source peer to destination peer continuously.
//   - streamId (body): The ID of a stream that belongs to the protected path
//   - sourceMemberCapabilities (body): Source member capabilities
func (p *ProtectedPath) ProtectedPathModifyMember_PATCH(id any, capabilities string, streamId string, sourceMemberCapabilities string) (core.Record, error) {
	return p.ProtectedPathModifyMemberWithContext_PATCH(p.Rest.GetCtx(), id, capabilities, streamId, sourceMemberCapabilities)
}

// ProtectedPathPauseWithContext_PATCH
// method: PATCH
// url: /protectedpaths/{id}/pause/
// summary: Pause Restore on a Protected Path
//
// Parameters:
//   - enabled (body): Set to False to pause snapshot restore
func (p *ProtectedPath) ProtectedPathPauseWithContext_PATCH(ctx context.Context, id any, enabled bool) (core.Record, error) {
	resourcePath := core.BuildResourcePathWithID("protectedpaths", id, "pause")
	body := core.Params{}
	if enabled != false {
		body["enabled"] = enabled
	}
	result, err := core.Request[core.Record](ctx, p, http.MethodPatch, resourcePath, nil, body)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// ProtectedPathPause_PATCH
// method: PATCH
// url: /protectedpaths/{id}/pause/
// summary: Pause Restore on a Protected Path
//
// Parameters:
//   - enabled (body): Set to False to pause snapshot restore
func (p *ProtectedPath) ProtectedPathPause_PATCH(id any, enabled bool) (core.Record, error) {
	return p.ProtectedPathPauseWithContext_PATCH(p.Rest.GetCtx(), id, enabled)
}

// ProtectedPathPrefetchPathWithContext_DELETE
// method: DELETE
// url: /protectedpaths/{id}/prefetch_path/
// summary: Delete Path Prefetch Task
//
// Parameters:
//   - stopRunningPrefetch (body): If true, stops the prefetch task running if it's still running.
//   - taskId (body): ID of the prefetch task to delete.
func (p *ProtectedPath) ProtectedPathPrefetchPathWithContext_DELETE(ctx context.Context, id any, stopRunningPrefetch bool, taskId int64) error {
	resourcePath := core.BuildResourcePathWithID("protectedpaths", id, "prefetch_path")
	body := core.Params{}
	body["stop_running_prefetch"] = stopRunningPrefetch
	body["task_id"] = taskId
	_, err := core.Request[core.EmptyRecord](ctx, p, http.MethodDelete, resourcePath, nil, body)
	return err

}

// ProtectedPathPrefetchPath_DELETE
// method: DELETE
// url: /protectedpaths/{id}/prefetch_path/
// summary: Delete Path Prefetch Task
//
// Parameters:
//   - stopRunningPrefetch (body): If true, stops the prefetch task running if it's still running.
//   - taskId (body): ID of the prefetch task to delete.
func (p *ProtectedPath) ProtectedPathPrefetchPath_DELETE(id any, stopRunningPrefetch bool, taskId int64) error {
	return p.ProtectedPathPrefetchPathWithContext_DELETE(p.Rest.GetCtx(), id, stopRunningPrefetch, taskId)
}

// ProtectedPathPrefetchPathWithContext_GET
// method: GET
// url: /protectedpaths/{id}/prefetch_path/
// summary: Return Status for Prefetch Path
func (p *ProtectedPath) ProtectedPathPrefetchPathWithContext_GET(ctx context.Context, id any, params core.Params) (core.Record, error) {
	resourcePath := core.BuildResourcePathWithID("protectedpaths", id, "prefetch_path")
	result, err := core.Request[core.Record](ctx, p, http.MethodGet, resourcePath, params, nil)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// ProtectedPathPrefetchPath_GET
// method: GET
// url: /protectedpaths/{id}/prefetch_path/
// summary: Return Status for Prefetch Path
func (p *ProtectedPath) ProtectedPathPrefetchPath_GET(id any, params core.Params) (core.Record, error) {
	return p.ProtectedPathPrefetchPathWithContext_GET(p.Rest.GetCtx(), id, params)
}

// ProtectedPathPrefetchPathWithContext_POST
// method: POST
// url: /protectedpaths/{id}/prefetch_path/
// summary: Prefetch a Path to Global Access Cache
//
// Parameters:
//   - path (body): The path on the destination peer for which to prefetch data from the equivalent source path to the global access cache. The path can be the entire protected path or a subdirectory.
//   - prefetchType (body): Whether to prefetch full data or only metadata.
func (p *ProtectedPath) ProtectedPathPrefetchPathWithContext_POST(ctx context.Context, id any, path string, prefetchType string) (core.Record, error) {
	resourcePath := core.BuildResourcePathWithID("protectedpaths", id, "prefetch_path")
	body := core.Params{}
	body["path"] = path
	body["prefetch_type"] = prefetchType
	result, err := core.Request[core.Record](ctx, p, http.MethodPost, resourcePath, nil, body)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// ProtectedPathPrefetchPath_POST
// method: POST
// url: /protectedpaths/{id}/prefetch_path/
// summary: Prefetch a Path to Global Access Cache
//
// Parameters:
//   - path (body): The path on the destination peer for which to prefetch data from the equivalent source path to the global access cache. The path can be the entire protected path or a subdirectory.
//   - prefetchType (body): Whether to prefetch full data or only metadata.
func (p *ProtectedPath) ProtectedPathPrefetchPath_POST(id any, path string, prefetchType string) (core.Record, error) {
	return p.ProtectedPathPrefetchPathWithContext_POST(p.Rest.GetCtx(), id, path, prefetchType)
}

// ProtectedPathReattachStreamWithContext_PATCH
// method: PATCH
// url: /protectedpaths/{id}/reattach_stream/
// summary: Reattach a Stream to a Protected Path
//
// Parameters:
//   - streamId (body): The ID of the replication stream
func (p *ProtectedPath) ProtectedPathReattachStreamWithContext_PATCH(ctx context.Context, id any, streamId string) (core.Record, error) {
	resourcePath := core.BuildResourcePathWithID("protectedpaths", id, "reattach_stream")
	body := core.Params{}
	if streamId != "" {
		body["stream_id"] = streamId
	}
	result, err := core.Request[core.Record](ctx, p, http.MethodPatch, resourcePath, nil, body)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// ProtectedPathReattachStream_PATCH
// method: PATCH
// url: /protectedpaths/{id}/reattach_stream/
// summary: Reattach a Stream to a Protected Path
//
// Parameters:
//   - streamId (body): The ID of the replication stream
func (p *ProtectedPath) ProtectedPathReattachStream_PATCH(id any, streamId string) (core.Record, error) {
	return p.ProtectedPathReattachStreamWithContext_PATCH(p.Rest.GetCtx(), id, streamId)
}

// ProtectedPathRemoveStreamWithContext_PATCH
// method: PATCH
// url: /protectedpaths/{id}/remove_stream/
// summary: Remove a Stream from a Protected Path
//
// Parameters:
//   - streamId (body): The ID of the replication stream
func (p *ProtectedPath) ProtectedPathRemoveStreamWithContext_PATCH(ctx context.Context, id any, streamId string) error {
	resourcePath := core.BuildResourcePathWithID("protectedpaths", id, "remove_stream")
	body := core.Params{}
	if streamId != "" {
		body["stream_id"] = streamId
	}
	_, err := core.Request[core.EmptyRecord](ctx, p, http.MethodPatch, resourcePath, nil, body)
	return err

}

// ProtectedPathRemoveStream_PATCH
// method: PATCH
// url: /protectedpaths/{id}/remove_stream/
// summary: Remove a Stream from a Protected Path
//
// Parameters:
//   - streamId (body): The ID of the replication stream
func (p *ProtectedPath) ProtectedPathRemoveStream_PATCH(id any, streamId string) error {
	return p.ProtectedPathRemoveStreamWithContext_PATCH(p.Rest.GetCtx(), id, streamId)
}

// ProtectedPathReplicateNowWithContext_PATCH
// method: PATCH
// url: /protectedpaths/{id}/replicate_now/
// summary: Trigger Replication on all the Streams of a Protected Path
//
// Parameters:
//   - timeExpiresLocal (body): Request parameter
//   - timeExpiresTarget (body): Request parameter
func (p *ProtectedPath) ProtectedPathReplicateNowWithContext_PATCH(ctx context.Context, id any, timeExpiresLocal string, timeExpiresTarget string) (core.Record, error) {
	resourcePath := core.BuildResourcePathWithID("protectedpaths", id, "replicate_now")
	body := core.Params{}
	body["time_expires_local"] = timeExpiresLocal
	body["time_expires_target"] = timeExpiresTarget
	result, err := core.Request[core.Record](ctx, p, http.MethodPatch, resourcePath, nil, body)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// ProtectedPathReplicateNow_PATCH
// method: PATCH
// url: /protectedpaths/{id}/replicate_now/
// summary: Trigger Replication on all the Streams of a Protected Path
//
// Parameters:
//   - timeExpiresLocal (body): Request parameter
//   - timeExpiresTarget (body): Request parameter
func (p *ProtectedPath) ProtectedPathReplicateNow_PATCH(id any, timeExpiresLocal string, timeExpiresTarget string) (core.Record, error) {
	return p.ProtectedPathReplicateNowWithContext_PATCH(p.Rest.GetCtx(), id, timeExpiresLocal, timeExpiresTarget)
}

// ProtectedPathRestoreWithContext_POST
// method: POST
// url: /protectedpaths/{id}/restore/
// summary: Create a Clone to Restore a Path.
//
// Parameters:
//   - loaneeSnapshotId (body): Id of Snapshot to restore
//   - name (body): Request parameter
func (p *ProtectedPath) ProtectedPathRestoreWithContext_POST(ctx context.Context, id any, loaneeSnapshotId int64, name string) (core.Record, error) {
	resourcePath := core.BuildResourcePathWithID("protectedpaths", id, "restore")
	body := core.Params{}
	if loaneeSnapshotId != 0 {
		body["loanee_snapshot_id"] = loaneeSnapshotId
	}
	if name != "" {
		body["name"] = name
	}
	result, err := core.Request[core.Record](ctx, p, http.MethodPost, resourcePath, nil, body)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// ProtectedPathRestore_POST
// method: POST
// url: /protectedpaths/{id}/restore/
// summary: Create a Clone to Restore a Path.
//
// Parameters:
//   - loaneeSnapshotId (body): Id of Snapshot to restore
//   - name (body): Request parameter
func (p *ProtectedPath) ProtectedPathRestore_POST(id any, loaneeSnapshotId int64, name string) (core.Record, error) {
	return p.ProtectedPathRestoreWithContext_POST(p.Rest.GetCtx(), id, loaneeSnapshotId, name)
}

// ProtectedPathResumeWithContext_PATCH
// method: PATCH
// url: /protectedpaths/{id}/resume/
// summary: Resume Restore on a Protected Path
//
// Parameters:
//   - enabled (body): Set to False to resume restore
func (p *ProtectedPath) ProtectedPathResumeWithContext_PATCH(ctx context.Context, id any, enabled bool) (core.Record, error) {
	resourcePath := core.BuildResourcePathWithID("protectedpaths", id, "resume")
	body := core.Params{}
	if enabled != false {
		body["enabled"] = enabled
	}
	result, err := core.Request[core.Record](ctx, p, http.MethodPatch, resourcePath, nil, body)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// ProtectedPathResume_PATCH
// method: PATCH
// url: /protectedpaths/{id}/resume/
// summary: Resume Restore on a Protected Path
//
// Parameters:
//   - enabled (body): Set to False to resume restore
func (p *ProtectedPath) ProtectedPathResume_PATCH(id any, enabled bool) (core.Record, error) {
	return p.ProtectedPathResumeWithContext_PATCH(p.Rest.GetCtx(), id, enabled)
}

// ProtectedPathStopWithContext_PATCH
// method: PATCH
// url: /protectedpaths/{id}/stop/
// summary: Stops snapshot restore on protected path.
func (p *ProtectedPath) ProtectedPathStopWithContext_PATCH(ctx context.Context, id any, body core.Params) (core.Record, error) {
	resourcePath := core.BuildResourcePathWithID("protectedpaths", id, "stop")
	result, err := core.Request[core.Record](ctx, p, http.MethodPatch, resourcePath, nil, body)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// ProtectedPathStop_PATCH
// method: PATCH
// url: /protectedpaths/{id}/stop/
// summary: Stops snapshot restore on protected path.
func (p *ProtectedPath) ProtectedPathStop_PATCH(id any, body core.Params) (core.Record, error) {
	return p.ProtectedPathStopWithContext_PATCH(p.Rest.GetCtx(), id, body)
}

// ProtectedPathValidateWithContext_GET
// method: GET
// url: /protectedpaths/{id}/validate/
// summary: Returns validations results for Protected Path.
func (p *ProtectedPath) ProtectedPathValidateWithContext_GET(ctx context.Context, id any, params core.Params) (core.Record, error) {
	resourcePath := core.BuildResourcePathWithID("protectedpaths", id, "validate")
	result, err := core.Request[core.Record](ctx, p, http.MethodGet, resourcePath, params, nil)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// ProtectedPathValidate_GET
// method: GET
// url: /protectedpaths/{id}/validate/
// summary: Returns validations results for Protected Path.
func (p *ProtectedPath) ProtectedPathValidate_GET(id any, params core.Params) (core.Record, error) {
	return p.ProtectedPathValidateWithContext_GET(p.Rest.GetCtx(), id, params)
}
