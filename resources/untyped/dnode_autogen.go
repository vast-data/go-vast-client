// Code generated by generate-untyped-resources. DO NOT EDIT.

package untyped

import (
	"context"
	"net/http"
	"time"

	"github.com/vast-data/go-vast-client/core"
)

// DnodeControlLedWithContext_PATCH
// method: PATCH
// url: /dnodes/{id}/control_led/
// summary: Control DNode LED
//
// Parameters:
//   - control (body): LED state
func (d *Dnode) DnodeControlLedWithContext_PATCH(ctx context.Context, id any, control string) error {
	resourcePath := core.BuildResourcePathWithID("dnodes", id, "control_led")
	body := core.Params{}
	if control != "" {
		body["control"] = control
	}
	_, err := core.Request[core.Record](ctx, d, http.MethodPatch, resourcePath, nil, body)
	return err

}

// DnodeControlLed_PATCH
// method: PATCH
// url: /dnodes/{id}/control_led/
// summary: Control DNode LED
//
// Parameters:
//   - control (body): LED state
func (d *Dnode) DnodeControlLed_PATCH(id any, control string) error {
	return d.DnodeControlLedWithContext_PATCH(d.Rest.GetCtx(), id, control)
}

// DnodeHighlightWithContext_PATCH
// method: PATCH
// url: /dnodes/{id}/highlight/
// summary: Highlight DNode
//
// Parameters:
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (d *Dnode) DnodeHighlightWithContext_PATCH(ctx context.Context, id any, body core.Params, waitTimeout time.Duration) (*AsyncResult, error) {
	resourcePath := core.BuildResourcePathWithID("dnodes", id, "highlight")
	result, err := core.Request[core.Record](ctx, d, http.MethodPatch, resourcePath, nil, body)
	if err != nil {
		return nil, err
	}

	return MaybeWaitAsyncResultWithContext(ctx, result, d.Rest, waitTimeout)

}

// DnodeHighlight_PATCH
// method: PATCH
// url: /dnodes/{id}/highlight/
// summary: Highlight DNode
//
// Parameters:
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (d *Dnode) DnodeHighlight_PATCH(id any, body core.Params, waitTimeout time.Duration) (*AsyncResult, error) {
	return d.DnodeHighlightWithContext_PATCH(d.Rest.GetCtx(), id, body, waitTimeout)
}

// DnodeRenameWithContext_PATCH
// method: PATCH
// url: /dnodes/{id}/rename/
// summary: Rename DNode
//
// Parameters:
//   - name (body): New DNode name
func (d *Dnode) DnodeRenameWithContext_PATCH(ctx context.Context, id any, name string) error {
	resourcePath := core.BuildResourcePathWithID("dnodes", id, "rename")
	body := core.Params{}
	if name != "" {
		body["name"] = name
	}
	_, err := core.Request[core.Record](ctx, d, http.MethodPatch, resourcePath, nil, body)
	return err

}

// DnodeRename_PATCH
// method: PATCH
// url: /dnodes/{id}/rename/
// summary: Rename DNode
//
// Parameters:
//   - name (body): New DNode name
func (d *Dnode) DnodeRename_PATCH(id any, name string) error {
	return d.DnodeRenameWithContext_PATCH(d.Rest.GetCtx(), id, name)
}
