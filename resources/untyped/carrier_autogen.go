// Code generated by generate-untyped-resources. DO NOT EDIT.

package untyped

import (
	"context"
	"net/http"
	"time"

	"github.com/vast-data/go-vast-client/core"
)

// CarrierControlLedWithContext_PATCH
// method: PATCH
// url: /carriers/{id}/control_led/
// summary: Control Slot LED
//
// Parameters:
//   - control (body): LED state
func (c *Carrier) CarrierControlLedWithContext_PATCH(ctx context.Context, id any, control string) error {
	resourcePath := core.BuildResourcePathWithID("carriers", id, "control_led")
	body := core.Params{}
	if control != "" {
		body["control"] = control
	}
	_, err := core.Request[core.EmptyRecord](ctx, c, http.MethodPatch, resourcePath, nil, body)
	return err

}

// CarrierControlLed_PATCH
// method: PATCH
// url: /carriers/{id}/control_led/
// summary: Control Slot LED
//
// Parameters:
//   - control (body): LED state
func (c *Carrier) CarrierControlLed_PATCH(id any, control string) error {
	return c.CarrierControlLedWithContext_PATCH(c.Rest.GetCtx(), id, control)
}

// CarrierHighlightWithContext_PATCH
// method: PATCH
// url: /carriers/{id}/highlight/
// summary: Highlight the Control Slot
//
// Parameters:
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (c *Carrier) CarrierHighlightWithContext_PATCH(ctx context.Context, id any, body core.Params, waitTimeout time.Duration) (*AsyncResult, error) {
	resourcePath := core.BuildResourcePathWithID("carriers", id, "highlight")
	result, err := core.Request[core.Record](ctx, c, http.MethodPatch, resourcePath, nil, body)
	if err != nil {
		return nil, err
	}
	if result.Empty() {
		return nil, nil
	}
	// Create async task from result
	task := asyncResultFromRecord(ctx, result, c.Rest)
	// If waitTimeout is 0, return task immediately without waiting (async background operation)
	if waitTimeout == 0 {
		return task, nil
	}
	// Wait for task completion with the specified timeout
	if _, err := task.Wait(waitTimeout); err != nil {
		return task, err
	}
	return task, nil

}

// CarrierHighlight_PATCH
// method: PATCH
// url: /carriers/{id}/highlight/
// summary: Highlight the Control Slot
//
// Parameters:
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (c *Carrier) CarrierHighlight_PATCH(id any, body core.Params, waitTimeout time.Duration) (*AsyncResult, error) {
	return c.CarrierHighlightWithContext_PATCH(c.Rest.GetCtx(), id, body, waitTimeout)
}

// CarrierResetPciWithContext_PATCH
// method: PATCH
// url: /carriers/{id}/reset_pci/
// summary: Power Cycles a Slot
//
// Parameters:
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (c *Carrier) CarrierResetPciWithContext_PATCH(ctx context.Context, id any, body core.Params, waitTimeout time.Duration) (*AsyncResult, error) {
	resourcePath := core.BuildResourcePathWithID("carriers", id, "reset_pci")
	result, err := core.Request[core.Record](ctx, c, http.MethodPatch, resourcePath, nil, body)
	if err != nil {
		return nil, err
	}
	if result.Empty() {
		return nil, nil
	}
	// Create async task from result
	task := asyncResultFromRecord(ctx, result, c.Rest)
	// If waitTimeout is 0, return task immediately without waiting (async background operation)
	if waitTimeout == 0 {
		return task, nil
	}
	// Wait for task completion with the specified timeout
	if _, err := task.Wait(waitTimeout); err != nil {
		return task, err
	}
	return task, nil

}

// CarrierResetPci_PATCH
// method: PATCH
// url: /carriers/{id}/reset_pci/
// summary: Power Cycles a Slot
//
// Parameters:
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (c *Carrier) CarrierResetPci_PATCH(id any, body core.Params, waitTimeout time.Duration) (*AsyncResult, error) {
	return c.CarrierResetPciWithContext_PATCH(c.Rest.GetCtx(), id, body, waitTimeout)
}
