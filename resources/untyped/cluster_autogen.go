// Code generated by generate-untyped-resources. DO NOT EDIT.

package untyped

import (
	"context"
	"net/http"
	"time"

	"github.com/vast-data/go-vast-client/core"
)

// ClusterAddBoxesWithContext_PATCH
// method: PATCH
// url: /clusters/add_boxes/
// summary: Start Add Boxes procedure
//
// Parameters:
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (c *Cluster) ClusterAddBoxesWithContext_PATCH(ctx context.Context, body core.Params, waitTimeout time.Duration) (*AsyncResult, error) {
	resourcePath := "/clusters/add_boxes/"
	result, err := core.Request[core.Record](ctx, c, http.MethodPatch, resourcePath, nil, body)
	if err != nil {
		return nil, err
	}

	return MaybeWaitAsyncResultWithContext(ctx, result, c.Rest, waitTimeout)

}

// ClusterAddBoxes_PATCH
// method: PATCH
// url: /clusters/add_boxes/
// summary: Start Add Boxes procedure
//
// Parameters:
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (c *Cluster) ClusterAddBoxes_PATCH(body core.Params, waitTimeout time.Duration) (*AsyncResult, error) {
	return c.ClusterAddBoxesWithContext_PATCH(c.Rest.GetCtx(), body, waitTimeout)
}

// ClusterAddEkmWithContext_POST
// method: POST
// url: /clusters/{id}/add_ekm/
// summary: Add EKM
func (c *Cluster) ClusterAddEkmWithContext_POST(ctx context.Context, id any, body core.Params) error {
	resourcePath := core.BuildResourcePathWithID("clusters", id, "add_ekm")
	_, err := core.Request[core.Record](ctx, c, http.MethodPost, resourcePath, nil, body)
	return err

}

// ClusterAddEkm_POST
// method: POST
// url: /clusters/{id}/add_ekm/
// summary: Add EKM
func (c *Cluster) ClusterAddEkm_POST(id any, body core.Params) error {
	return c.ClusterAddEkmWithContext_POST(c.Rest.GetCtx(), id, body)
}

// ClusterAdvancedWithContext_GET
// method: GET
// url: /clusters/{id}/advanced/
// summary: Aggregated information about the cluster
func (c *Cluster) ClusterAdvancedWithContext_GET(ctx context.Context, id any, params core.Params) (core.Record, error) {
	resourcePath := core.BuildResourcePathWithID("clusters", id, "advanced")
	result, err := core.Request[core.Record](ctx, c, http.MethodGet, resourcePath, params, nil)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// ClusterAdvanced_GET
// method: GET
// url: /clusters/{id}/advanced/
// summary: Aggregated information about the cluster
func (c *Cluster) ClusterAdvanced_GET(id any, params core.Params) (core.Record, error) {
	return c.ClusterAdvancedWithContext_GET(c.Rest.GetCtx(), id, params)
}

// ClusterAuditingWithContext_GET
// method: GET
// url: /clusters/{id}/auditing/
// summary: Show Cluster Audit Settings
func (c *Cluster) ClusterAuditingWithContext_GET(ctx context.Context, id any, params core.Params) (core.Record, error) {
	resourcePath := core.BuildResourcePathWithID("clusters", id, "auditing")
	result, err := core.Request[core.Record](ctx, c, http.MethodGet, resourcePath, params, nil)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// ClusterAuditing_GET
// method: GET
// url: /clusters/{id}/auditing/
// summary: Show Cluster Audit Settings
func (c *Cluster) ClusterAuditing_GET(id any, params core.Params) (core.Record, error) {
	return c.ClusterAuditingWithContext_GET(c.Rest.GetCtx(), id, params)
}

// ClusterAuditingWithContext_PATCH
// method: PATCH
// url: /clusters/{id}/auditing/
// summary: Modify Cluster Audit Settings
func (c *Cluster) ClusterAuditingWithContext_PATCH(ctx context.Context, id any, body core.Params) (core.Record, error) {
	resourcePath := core.BuildResourcePathWithID("clusters", id, "auditing")
	result, err := core.Request[core.Record](ctx, c, http.MethodPatch, resourcePath, nil, body)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// ClusterAuditing_PATCH
// method: PATCH
// url: /clusters/{id}/auditing/
// summary: Modify Cluster Audit Settings
func (c *Cluster) ClusterAuditing_PATCH(id any, body core.Params) (core.Record, error) {
	return c.ClusterAuditingWithContext_PATCH(c.Rest.GetCtx(), id, body)
}

// ClusterBgpTableWithContext_GET
// method: GET
// url: /clusters/bgp_table/
// summary: Return BGP Connections Table
func (c *Cluster) ClusterBgpTableWithContext_GET(ctx context.Context, params core.Params) (core.Record, error) {
	resourcePath := "/clusters/bgp_table/"
	result, err := core.Request[core.Record](ctx, c, http.MethodGet, resourcePath, params, nil)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// ClusterBgpTable_GET
// method: GET
// url: /clusters/bgp_table/
// summary: Return BGP Connections Table
func (c *Cluster) ClusterBgpTable_GET(params core.Params) (core.Record, error) {
	return c.ClusterBgpTableWithContext_GET(c.Rest.GetCtx(), params)
}

// ClusterBlockProvidersWithContext_PATCH
// method: PATCH
// url: /clusters/block_providers/
// summary: Block Authentication Providers
//
// Parameters:
//   - blocked (body): Request parameter
func (c *Cluster) ClusterBlockProvidersWithContext_PATCH(ctx context.Context, blocked bool) (core.Record, error) {
	resourcePath := "/clusters/block_providers/"
	body := core.Params{}
	if blocked != false {
		body["blocked"] = blocked
	}
	result, err := core.Request[core.Record](ctx, c, http.MethodPatch, resourcePath, nil, body)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// ClusterBlockProviders_PATCH
// method: PATCH
// url: /clusters/block_providers/
// summary: Block Authentication Providers
//
// Parameters:
//   - blocked (body): Request parameter
func (c *Cluster) ClusterBlockProviders_PATCH(blocked bool) (core.Record, error) {
	return c.ClusterBlockProvidersWithContext_PATCH(c.Rest.GetCtx(), blocked)
}

// ClusterCeleryQueueWithContext_GET
// method: GET
// url: /clusters/{id}/celery_queue/
// summary: List celery queue
func (c *Cluster) ClusterCeleryQueueWithContext_GET(ctx context.Context, id any, params core.Params) (core.Record, error) {
	resourcePath := core.BuildResourcePathWithID("clusters", id, "celery_queue")
	result, err := core.Request[core.Record](ctx, c, http.MethodGet, resourcePath, params, nil)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// ClusterCeleryQueue_GET
// method: GET
// url: /clusters/{id}/celery_queue/
// summary: List celery queue
func (c *Cluster) ClusterCeleryQueue_GET(id any, params core.Params) (core.Record, error) {
	return c.ClusterCeleryQueueWithContext_GET(c.Rest.GetCtx(), id, params)
}

// ClusterCeleryRemoveQueuedTaskWithContext_DELETE
// method: DELETE
// url: /clusters/{id}/celery_remove_queued_task/
// summary: Delete all tasks of a specific name from the celery queue
func (c *Cluster) ClusterCeleryRemoveQueuedTaskWithContext_DELETE(ctx context.Context, id any, params core.Params) error {
	resourcePath := core.BuildResourcePathWithID("clusters", id, "celery_remove_queued_task")
	_, err := core.Request[core.Record](ctx, c, http.MethodDelete, resourcePath, params, nil)
	return err

}

// ClusterCeleryRemoveQueuedTask_DELETE
// method: DELETE
// url: /clusters/{id}/celery_remove_queued_task/
// summary: Delete all tasks of a specific name from the celery queue
func (c *Cluster) ClusterCeleryRemoveQueuedTask_DELETE(id any, params core.Params) error {
	return c.ClusterCeleryRemoveQueuedTaskWithContext_DELETE(c.Rest.GetCtx(), id, params)
}

// ClusterCeleryReservedWithContext_GET
// method: GET
// url: /clusters/{id}/celery_reserved/
// summary: List celery reserved queue
func (c *Cluster) ClusterCeleryReservedWithContext_GET(ctx context.Context, id any, params core.Params) (core.Record, error) {
	resourcePath := core.BuildResourcePathWithID("clusters", id, "celery_reserved")
	result, err := core.Request[core.Record](ctx, c, http.MethodGet, resourcePath, params, nil)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// ClusterCeleryReserved_GET
// method: GET
// url: /clusters/{id}/celery_reserved/
// summary: List celery reserved queue
func (c *Cluster) ClusterCeleryReserved_GET(id any, params core.Params) (core.Record, error) {
	return c.ClusterCeleryReservedWithContext_GET(c.Rest.GetCtx(), id, params)
}

// ClusterCeleryScheduledWithContext_GET
// method: GET
// url: /clusters/{id}/celery_scheduled/
// summary: List celery scheduled queue
func (c *Cluster) ClusterCeleryScheduledWithContext_GET(ctx context.Context, id any, params core.Params) (core.Record, error) {
	resourcePath := core.BuildResourcePathWithID("clusters", id, "celery_scheduled")
	result, err := core.Request[core.Record](ctx, c, http.MethodGet, resourcePath, params, nil)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// ClusterCeleryScheduled_GET
// method: GET
// url: /clusters/{id}/celery_scheduled/
// summary: List celery scheduled queue
func (c *Cluster) ClusterCeleryScheduled_GET(id any, params core.Params) (core.Record, error) {
	return c.ClusterCeleryScheduledWithContext_GET(c.Rest.GetCtx(), id, params)
}

// ClusterCeleryStatusWithContext_GET
// method: GET
// url: /clusters/{id}/celery_status/
// summary: Show the full celery stats
func (c *Cluster) ClusterCeleryStatusWithContext_GET(ctx context.Context, id any, params core.Params) (core.Record, error) {
	resourcePath := core.BuildResourcePathWithID("clusters", id, "celery_status")
	result, err := core.Request[core.Record](ctx, c, http.MethodGet, resourcePath, params, nil)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// ClusterCeleryStatus_GET
// method: GET
// url: /clusters/{id}/celery_status/
// summary: Show the full celery stats
func (c *Cluster) ClusterCeleryStatus_GET(id any, params core.Params) (core.Record, error) {
	return c.ClusterCeleryStatusWithContext_GET(c.Rest.GetCtx(), id, params)
}

// ClusterCloseProtocolHandleWithContext_DELETE
// method: DELETE
// url: /clusters/close_protocol_handle/
// summary: Close open protocol filehandles
func (c *Cluster) ClusterCloseProtocolHandleWithContext_DELETE(ctx context.Context, params core.Params) (core.Record, error) {
	resourcePath := "/clusters/close_protocol_handle/"
	result, err := core.Request[core.Record](ctx, c, http.MethodDelete, resourcePath, params, nil)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// ClusterCloseProtocolHandle_DELETE
// method: DELETE
// url: /clusters/close_protocol_handle/
// summary: Close open protocol filehandles
func (c *Cluster) ClusterCloseProtocolHandle_DELETE(params core.Params) (core.Record, error) {
	return c.ClusterCloseProtocolHandleWithContext_DELETE(c.Rest.GetCtx(), params)
}

// ClusterDboxMigrationStatusWithContext_GET
// method: GET
// url: /clusters/dbox_migration_status/
// summary: DBox migration status
func (c *Cluster) ClusterDboxMigrationStatusWithContext_GET(ctx context.Context, params core.Params) (core.Record, error) {
	resourcePath := "/clusters/dbox_migration_status/"
	result, err := core.Request[core.Record](ctx, c, http.MethodGet, resourcePath, params, nil)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// ClusterDboxMigrationStatus_GET
// method: GET
// url: /clusters/dbox_migration_status/
// summary: DBox migration status
func (c *Cluster) ClusterDboxMigrationStatus_GET(params core.Params) (core.Record, error) {
	return c.ClusterDboxMigrationStatusWithContext_GET(c.Rest.GetCtx(), params)
}

// ClusterDboxMigrationUpdateSourceTargetWithContext_GET
// method: GET
// url: /clusters/dbox_migration_update_source_target/
// summary: Dbox migration update source target info
func (c *Cluster) ClusterDboxMigrationUpdateSourceTargetWithContext_GET(ctx context.Context, params core.Params) (core.Record, error) {
	resourcePath := "/clusters/dbox_migration_update_source_target/"
	result, err := core.Request[core.Record](ctx, c, http.MethodGet, resourcePath, params, nil)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// ClusterDboxMigrationUpdateSourceTarget_GET
// method: GET
// url: /clusters/dbox_migration_update_source_target/
// summary: Dbox migration update source target info
func (c *Cluster) ClusterDboxMigrationUpdateSourceTarget_GET(params core.Params) (core.Record, error) {
	return c.ClusterDboxMigrationUpdateSourceTargetWithContext_GET(c.Rest.GetCtx(), params)
}

// ClusterDboxMigrationUpdateSourceTargetWithContext_PATCH
// method: PATCH
// url: /clusters/dbox_migration_update_source_target/
// summary: Dbox migration update source target
func (c *Cluster) ClusterDboxMigrationUpdateSourceTargetWithContext_PATCH(ctx context.Context, body core.Params) (core.Record, error) {
	resourcePath := "/clusters/dbox_migration_update_source_target/"
	result, err := core.Request[core.Record](ctx, c, http.MethodPatch, resourcePath, nil, body)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// ClusterDboxMigrationUpdateSourceTarget_PATCH
// method: PATCH
// url: /clusters/dbox_migration_update_source_target/
// summary: Dbox migration update source target
func (c *Cluster) ClusterDboxMigrationUpdateSourceTarget_PATCH(body core.Params) (core.Record, error) {
	return c.ClusterDboxMigrationUpdateSourceTargetWithContext_PATCH(c.Rest.GetCtx(), body)
}

// ClusterDboxMigrationValidateStateWithContext_GET
// method: GET
// url: /clusters/dbox_migration_validate_state/
// summary: DBox migration validate state
func (c *Cluster) ClusterDboxMigrationValidateStateWithContext_GET(ctx context.Context, params core.Params) (core.Record, error) {
	resourcePath := "/clusters/dbox_migration_validate_state/"
	result, err := core.Request[core.Record](ctx, c, http.MethodGet, resourcePath, params, nil)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// ClusterDboxMigrationValidateState_GET
// method: GET
// url: /clusters/dbox_migration_validate_state/
// summary: DBox migration validate state
func (c *Cluster) ClusterDboxMigrationValidateState_GET(params core.Params) (core.Record, error) {
	return c.ClusterDboxMigrationValidateStateWithContext_GET(c.Rest.GetCtx(), params)
}

// ClusterDboxMigrationValidateWithContext_GET
// method: GET
// url: /clusters/dbox_migration_validate/
// summary: DBox migration validate
func (c *Cluster) ClusterDboxMigrationValidateWithContext_GET(ctx context.Context, params core.Params) (core.Record, error) {
	resourcePath := "/clusters/dbox_migration_validate/"
	result, err := core.Request[core.Record](ctx, c, http.MethodGet, resourcePath, params, nil)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// ClusterDboxMigrationValidate_GET
// method: GET
// url: /clusters/dbox_migration_validate/
// summary: DBox migration validate
func (c *Cluster) ClusterDboxMigrationValidate_GET(params core.Params) (core.Record, error) {
	return c.ClusterDboxMigrationValidateWithContext_GET(c.Rest.GetCtx(), params)
}

// ClusterDboxMigrationWithContext_POST
// method: POST
// url: /clusters/dbox_migration/
// summary: Dbox migration
func (c *Cluster) ClusterDboxMigrationWithContext_POST(ctx context.Context, body core.Params) (core.Record, error) {
	resourcePath := "/clusters/dbox_migration/"
	result, err := core.Request[core.Record](ctx, c, http.MethodPost, resourcePath, nil, body)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// ClusterDboxMigration_POST
// method: POST
// url: /clusters/dbox_migration/
// summary: Dbox migration
func (c *Cluster) ClusterDboxMigration_POST(body core.Params) (core.Record, error) {
	return c.ClusterDboxMigrationWithContext_POST(c.Rest.GetCtx(), body)
}

// ClusterDboxesTotalCapacityWithContext_GET
// method: GET
// url: /clusters/dboxes_total_capacity/
// summary: DBoxes total capacity
func (c *Cluster) ClusterDboxesTotalCapacityWithContext_GET(ctx context.Context, params core.Params) (core.Record, error) {
	resourcePath := "/clusters/dboxes_total_capacity/"
	result, err := core.Request[core.Record](ctx, c, http.MethodGet, resourcePath, params, nil)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// ClusterDboxesTotalCapacity_GET
// method: GET
// url: /clusters/dboxes_total_capacity/
// summary: DBoxes total capacity
func (c *Cluster) ClusterDboxesTotalCapacity_GET(params core.Params) (core.Record, error) {
	return c.ClusterDboxesTotalCapacityWithContext_GET(c.Rest.GetCtx(), params)
}

// ClusterDeleteFolderWithContext_DELETE
// method: DELETE
// url: /clusters/{id}/delete_folder/
// summary: Delete Cluster Folder
//
// Parameters:
//   - path (body): Folder path to delete
//   - tenantId (body): Tenant ID
func (c *Cluster) ClusterDeleteFolderWithContext_DELETE(ctx context.Context, id any, path string, tenantId int64) error {
	resourcePath := core.BuildResourcePathWithID("clusters", id, "delete_folder")
	body := core.Params{}
	body["path"] = path
	if tenantId != 0 {
		body["tenant_id"] = tenantId
	}
	_, err := core.Request[core.Record](ctx, c, http.MethodDelete, resourcePath, nil, body)
	return err

}

// ClusterDeleteFolder_DELETE
// method: DELETE
// url: /clusters/{id}/delete_folder/
// summary: Delete Cluster Folder
//
// Parameters:
//   - path (body): Folder path to delete
//   - tenantId (body): Tenant ID
func (c *Cluster) ClusterDeleteFolder_DELETE(id any, path string, tenantId int64) error {
	return c.ClusterDeleteFolderWithContext_DELETE(c.Rest.GetCtx(), id, path, tenantId)
}

// ClusterExpandWithContext_POST
// method: POST
// url: /clusters/{id}/expand/
// summary: Expand Cluster
//
// Parameters:
//   - devicesMock (body): Devices Mock for NVRAM section layout (only for loopback)
//   - nvramSectionLayout (body): NVRAM section layout
//   - skipLayoutValidation (body): skip layout validation
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (c *Cluster) ClusterExpandWithContext_POST(ctx context.Context, id any, devicesMock string, nvramSectionLayout string, skipLayoutValidation string, waitTimeout time.Duration) (*AsyncResult, error) {
	resourcePath := core.BuildResourcePathWithID("clusters", id, "expand")
	body := core.Params{}
	if devicesMock != "" {
		body["devices_mock"] = devicesMock
	}
	if nvramSectionLayout != "" {
		body["nvram_section_layout"] = nvramSectionLayout
	}
	if skipLayoutValidation != "" {
		body["skip_layout_validation"] = skipLayoutValidation
	}
	result, err := core.Request[core.Record](ctx, c, http.MethodPost, resourcePath, nil, body)
	if err != nil {
		return nil, err
	}

	return MaybeWaitAsyncResultWithContext(ctx, result, c.Rest, waitTimeout)

}

// ClusterExpand_POST
// method: POST
// url: /clusters/{id}/expand/
// summary: Expand Cluster
//
// Parameters:
//   - devicesMock (body): Devices Mock for NVRAM section layout (only for loopback)
//   - nvramSectionLayout (body): NVRAM section layout
//   - skipLayoutValidation (body): skip layout validation
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (c *Cluster) ClusterExpand_POST(id any, devicesMock string, nvramSectionLayout string, skipLayoutValidation string, waitTimeout time.Duration) (*AsyncResult, error) {
	return c.ClusterExpandWithContext_POST(c.Rest.GetCtx(), id, devicesMock, nvramSectionLayout, skipLayoutValidation, waitTimeout)
}

// ClusterGenerateUnfreezeTokenWithContext_POST
// method: POST
// url: /clusters/{id}/generate_unfreeze_token/
// summary: Generate Token to Unlock Indestructibility
//
// Parameters:
//   - password (body): Unfreeze password
func (c *Cluster) ClusterGenerateUnfreezeTokenWithContext_POST(ctx context.Context, id any, password string) (core.Record, error) {
	resourcePath := core.BuildResourcePathWithID("clusters", id, "generate_unfreeze_token")
	body := core.Params{}
	body["password"] = password
	result, err := core.Request[core.Record](ctx, c, http.MethodPost, resourcePath, nil, body)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// ClusterGenerateUnfreezeToken_POST
// method: POST
// url: /clusters/{id}/generate_unfreeze_token/
// summary: Generate Token to Unlock Indestructibility
//
// Parameters:
//   - password (body): Unfreeze password
func (c *Cluster) ClusterGenerateUnfreezeToken_POST(id any, password string) (core.Record, error) {
	return c.ClusterGenerateUnfreezeTokenWithContext_POST(c.Rest.GetCtx(), id, password)
}

// ClusterGetShardExpansionStatusWithContext_GET
// method: GET
// url: /clusters/get_shard_expansion_status/
// summary: System shard expansion status
func (c *Cluster) ClusterGetShardExpansionStatusWithContext_GET(ctx context.Context, params core.Params) (core.Record, error) {
	resourcePath := "/clusters/get_shard_expansion_status/"
	result, err := core.Request[core.Record](ctx, c, http.MethodGet, resourcePath, params, nil)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// ClusterGetShardExpansionStatus_GET
// method: GET
// url: /clusters/get_shard_expansion_status/
// summary: System shard expansion status
func (c *Cluster) ClusterGetShardExpansionStatus_GET(params core.Params) (core.Record, error) {
	return c.ClusterGetShardExpansionStatusWithContext_GET(c.Rest.GetCtx(), params)
}

// ClusterGetSnapshotedPathsWithContext_GET
// method: GET
// url: /clusters/get_snapshoted_paths/
// summary: Return Paths that have Snapshots
func (c *Cluster) ClusterGetSnapshotedPathsWithContext_GET(ctx context.Context, params core.Params) (core.Record, error) {
	resourcePath := "/clusters/get_snapshoted_paths/"
	result, err := core.Request[core.Record](ctx, c, http.MethodGet, resourcePath, params, nil)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// ClusterGetSnapshotedPaths_GET
// method: GET
// url: /clusters/get_snapshoted_paths/
// summary: Return Paths that have Snapshots
func (c *Cluster) ClusterGetSnapshotedPaths_GET(params core.Params) (core.Record, error) {
	return c.ClusterGetSnapshotedPathsWithContext_GET(c.Rest.GetCtx(), params)
}

// ClusterListCloneSnapshotedPathsRemoteWithContext_GET
// method: GET
// url: /clusters/list_clone_snapshoted_paths_remote/
// summary: List snapshots on a remote replication peer
func (c *Cluster) ClusterListCloneSnapshotedPathsRemoteWithContext_GET(ctx context.Context, params core.Params) (core.Record, error) {
	resourcePath := "/clusters/list_clone_snapshoted_paths_remote/"
	result, err := core.Request[core.Record](ctx, c, http.MethodGet, resourcePath, params, nil)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// ClusterListCloneSnapshotedPathsRemote_GET
// method: GET
// url: /clusters/list_clone_snapshoted_paths_remote/
// summary: List snapshots on a remote replication peer
func (c *Cluster) ClusterListCloneSnapshotedPathsRemote_GET(params core.Params) (core.Record, error) {
	return c.ClusterListCloneSnapshotedPathsRemoteWithContext_GET(c.Rest.GetCtx(), params)
}

// ClusterListOpenProtocolHandlesWithContext_GET
// method: GET
// url: /clusters/list_open_protocol_handles/
// summary: Query open protocol filehandles
func (c *Cluster) ClusterListOpenProtocolHandlesWithContext_GET(ctx context.Context, params core.Params) (core.Record, error) {
	resourcePath := "/clusters/list_open_protocol_handles/"
	result, err := core.Request[core.Record](ctx, c, http.MethodGet, resourcePath, params, nil)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// ClusterListOpenProtocolHandles_GET
// method: GET
// url: /clusters/list_open_protocol_handles/
// summary: Query open protocol filehandles
func (c *Cluster) ClusterListOpenProtocolHandles_GET(params core.Params) (core.Record, error) {
	return c.ClusterListOpenProtocolHandlesWithContext_GET(c.Rest.GetCtx(), params)
}

// ClusterListPrefetchPathsInfoWithContext_GET
// method: GET
// url: /clusters/list_prefetch_paths_info/
// summary: List Prefetch Path Information
func (c *Cluster) ClusterListPrefetchPathsInfoWithContext_GET(ctx context.Context, params core.Params) (core.Record, error) {
	resourcePath := "/clusters/list_prefetch_paths_info/"
	result, err := core.Request[core.Record](ctx, c, http.MethodGet, resourcePath, params, nil)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// ClusterListPrefetchPathsInfo_GET
// method: GET
// url: /clusters/list_prefetch_paths_info/
// summary: List Prefetch Path Information
func (c *Cluster) ClusterListPrefetchPathsInfo_GET(params core.Params) (core.Record, error) {
	return c.ClusterListPrefetchPathsInfoWithContext_GET(c.Rest.GetCtx(), params)
}

// ClusterListSmbClientConnectionsWithContext_GET
// method: GET
// url: /clusters/list_smb_client_connections/
// summary: Query SMB client connections
func (c *Cluster) ClusterListSmbClientConnectionsWithContext_GET(ctx context.Context, params core.Params) (core.Record, error) {
	resourcePath := "/clusters/list_smb_client_connections/"
	result, err := core.Request[core.Record](ctx, c, http.MethodGet, resourcePath, params, nil)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// ClusterListSmbClientConnections_GET
// method: GET
// url: /clusters/list_smb_client_connections/
// summary: Query SMB client connections
func (c *Cluster) ClusterListSmbClientConnections_GET(params core.Params) (core.Record, error) {
	return c.ClusterListSmbClientConnectionsWithContext_GET(c.Rest.GetCtx(), params)
}

// ClusterListSmbOpenFilesWithContext_GET
// method: GET
// url: /clusters/list_smb_open_files/
// summary: Query SMB open files
func (c *Cluster) ClusterListSmbOpenFilesWithContext_GET(ctx context.Context, params core.Params) (core.Record, error) {
	resourcePath := "/clusters/list_smb_open_files/"
	result, err := core.Request[core.Record](ctx, c, http.MethodGet, resourcePath, params, nil)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// ClusterListSmbOpenFiles_GET
// method: GET
// url: /clusters/list_smb_open_files/
// summary: Query SMB open files
func (c *Cluster) ClusterListSmbOpenFiles_GET(params core.Params) (core.Record, error) {
	return c.ClusterListSmbOpenFilesWithContext_GET(c.Rest.GetCtx(), params)
}

// ClusterListSnapshotedPathsRemoteWithContext_GET
// method: GET
// url: /clusters/list_snapshoted_paths_remote/
// summary: List snapshoted paths on remote target
func (c *Cluster) ClusterListSnapshotedPathsRemoteWithContext_GET(ctx context.Context, params core.Params) (core.Record, error) {
	resourcePath := "/clusters/list_snapshoted_paths_remote/"
	result, err := core.Request[core.Record](ctx, c, http.MethodGet, resourcePath, params, nil)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// ClusterListSnapshotedPathsRemote_GET
// method: GET
// url: /clusters/list_snapshoted_paths_remote/
// summary: List snapshoted paths on remote target
func (c *Cluster) ClusterListSnapshotedPathsRemote_GET(params core.Params) (core.Record, error) {
	return c.ClusterListSnapshotedPathsRemoteWithContext_GET(c.Rest.GetCtx(), params)
}

// ClusterListTenantsRemoteWithContext_GET
// method: GET
// url: /clusters/list_tenants_remote/
// summary: List tenants on remote target
func (c *Cluster) ClusterListTenantsRemoteWithContext_GET(ctx context.Context, params core.Params) (core.Record, error) {
	resourcePath := "/clusters/list_tenants_remote/"
	result, err := core.Request[core.Record](ctx, c, http.MethodGet, resourcePath, params, nil)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// ClusterListTenantsRemote_GET
// method: GET
// url: /clusters/list_tenants_remote/
// summary: List tenants on remote target
func (c *Cluster) ClusterListTenantsRemote_GET(params core.Params) (core.Record, error) {
	return c.ClusterListTenantsRemoteWithContext_GET(c.Rest.GetCtx(), params)
}

// ClusterLocksWithContext_POST
// method: POST
// url: /clusters/{id}/locks/
// summary: List NLM Locks
func (c *Cluster) ClusterLocksWithContext_POST(ctx context.Context, id any, body core.Params) (core.RecordSet, error) {
	resourcePath := core.BuildResourcePathWithID("clusters", id, "locks")
	result, err := core.Request[core.RecordSet](ctx, c, http.MethodPost, resourcePath, nil, body)
	if err != nil {
		return nil, err
	}
	return result, nil

}

// ClusterLocks_POST
// method: POST
// url: /clusters/{id}/locks/
// summary: List NLM Locks
func (c *Cluster) ClusterLocks_POST(id any, body core.Params) (core.RecordSet, error) {
	return c.ClusterLocksWithContext_POST(c.Rest.GetCtx(), id, body)
}

// ClusterNotifyNewVersionWithContext_POST
// method: POST
// url: /clusters/{id}/notify_new_version/
// summary: Notify of New Version Available for Download
func (c *Cluster) ClusterNotifyNewVersionWithContext_POST(ctx context.Context, id any, body core.Params) (core.Record, error) {
	resourcePath := core.BuildResourcePathWithID("clusters", id, "notify_new_version")
	result, err := core.Request[core.Record](ctx, c, http.MethodPost, resourcePath, nil, body)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// ClusterNotifyNewVersion_POST
// method: POST
// url: /clusters/{id}/notify_new_version/
// summary: Notify of New Version Available for Download
func (c *Cluster) ClusterNotifyNewVersion_POST(id any, body core.Params) (core.Record, error) {
	return c.ClusterNotifyNewVersionWithContext_POST(c.Rest.GetCtx(), id, body)
}

// ClusterPreUpgradeValidationExceptionsWithContext_GET
// method: GET
// url: /clusters/{id}/pre_upgrade_validation_exceptions/
// summary: Run Pre-Upgrade Validation
func (c *Cluster) ClusterPreUpgradeValidationExceptionsWithContext_GET(ctx context.Context, id any, params core.Params) (core.Record, error) {
	resourcePath := core.BuildResourcePathWithID("clusters", id, "pre_upgrade_validation_exceptions")
	result, err := core.Request[core.Record](ctx, c, http.MethodGet, resourcePath, params, nil)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// ClusterPreUpgradeValidationExceptions_GET
// method: GET
// url: /clusters/{id}/pre_upgrade_validation_exceptions/
// summary: Run Pre-Upgrade Validation
func (c *Cluster) ClusterPreUpgradeValidationExceptions_GET(id any, params core.Params) (core.Record, error) {
	return c.ClusterPreUpgradeValidationExceptionsWithContext_GET(c.Rest.GetCtx(), id, params)
}

// ClusterReleaseRecursiveLocksWithContext_DELETE
// method: DELETE
// url: /clusters/{id}/release_recursive_locks/
// summary: Deletes NLM Locks Recursively
//
// Parameters:
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (c *Cluster) ClusterReleaseRecursiveLocksWithContext_DELETE(ctx context.Context, id any, params core.Params, waitTimeout time.Duration) (*AsyncResult, error) {
	resourcePath := core.BuildResourcePathWithID("clusters", id, "release_recursive_locks")
	result, err := core.Request[core.Record](ctx, c, http.MethodDelete, resourcePath, params, nil)
	if err != nil {
		return nil, err
	}

	return MaybeWaitAsyncResultWithContext(ctx, result, c.Rest, waitTimeout)

}

// ClusterReleaseRecursiveLocks_DELETE
// method: DELETE
// url: /clusters/{id}/release_recursive_locks/
// summary: Deletes NLM Locks Recursively
//
// Parameters:
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (c *Cluster) ClusterReleaseRecursiveLocks_DELETE(id any, params core.Params, waitTimeout time.Duration) (*AsyncResult, error) {
	return c.ClusterReleaseRecursiveLocksWithContext_DELETE(c.Rest.GetCtx(), id, params, waitTimeout)
}

// ClusterResumeDeployWithContext_PATCH
// method: PATCH
// url: /clusters/{id}/resume_deploy/
// summary: Resume failed deploy
func (c *Cluster) ClusterResumeDeployWithContext_PATCH(ctx context.Context, id any, body core.Params) (core.Record, error) {
	resourcePath := core.BuildResourcePathWithID("clusters", id, "resume_deploy")
	result, err := core.Request[core.Record](ctx, c, http.MethodPatch, resourcePath, nil, body)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// ClusterResumeDeploy_PATCH
// method: PATCH
// url: /clusters/{id}/resume_deploy/
// summary: Resume failed deploy
func (c *Cluster) ClusterResumeDeploy_PATCH(id any, body core.Params) (core.Record, error) {
	return c.ClusterResumeDeployWithContext_PATCH(c.Rest.GetCtx(), id, body)
}

// ClusterRotateMasterEncryptionGroupKeyWithContext_POST
// method: POST
// url: /clusters/rotate_master_encryption_group_key/
// summary: Rotate master encryption group key.
func (c *Cluster) ClusterRotateMasterEncryptionGroupKeyWithContext_POST(ctx context.Context, body core.Params) error {
	resourcePath := "/clusters/rotate_master_encryption_group_key/"
	_, err := core.Request[core.Record](ctx, c, http.MethodPost, resourcePath, nil, body)
	return err

}

// ClusterRotateMasterEncryptionGroupKey_POST
// method: POST
// url: /clusters/rotate_master_encryption_group_key/
// summary: Rotate master encryption group key.
func (c *Cluster) ClusterRotateMasterEncryptionGroupKey_POST(body core.Params) error {
	return c.ClusterRotateMasterEncryptionGroupKeyWithContext_POST(c.Rest.GetCtx(), body)
}

// ClusterRpcWithContext_PATCH
// method: PATCH
// url: /clusters/{id}/rpc/
// summary: This endpoint runs cluster rpc.
//
// Parameters:
//   - rpc (body): rpc name to execute
//   - moduleType (body): Module type for the commander connection
//   - params (body): params for rpc call
func (c *Cluster) ClusterRpcWithContext_PATCH(ctx context.Context, id any, rpc string, moduleType string, params string) (core.Record, error) {
	resourcePath := core.BuildResourcePathWithID("clusters", id, "rpc")
	body := core.Params{}
	body["rpc"] = rpc
	if moduleType != "" {
		body["module_type"] = moduleType
	}
	if params != "" {
		body["params"] = params
	}
	result, err := core.Request[core.Record](ctx, c, http.MethodPatch, resourcePath, nil, body)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// ClusterRpc_PATCH
// method: PATCH
// url: /clusters/{id}/rpc/
// summary: This endpoint runs cluster rpc.
//
// Parameters:
//   - rpc (body): rpc name to execute
//   - moduleType (body): Module type for the commander connection
//   - params (body): params for rpc call
func (c *Cluster) ClusterRpc_PATCH(id any, rpc string, moduleType string, params string) (core.Record, error) {
	return c.ClusterRpcWithContext_PATCH(c.Rest.GetCtx(), id, rpc, moduleType, params)
}

// ClusterRunHardwareCheckWithContext_PATCH
// method: PATCH
// url: /clusters/run_hardware_check/
// summary: Run Hardware Validations
//
// Parameters:
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (c *Cluster) ClusterRunHardwareCheckWithContext_PATCH(ctx context.Context, body core.Params, waitTimeout time.Duration) (*AsyncResult, error) {
	resourcePath := "/clusters/run_hardware_check/"
	result, err := core.Request[core.Record](ctx, c, http.MethodPatch, resourcePath, nil, body)
	if err != nil {
		return nil, err
	}

	return MaybeWaitAsyncResultWithContext(ctx, result, c.Rest, waitTimeout)

}

// ClusterRunHardwareCheck_PATCH
// method: PATCH
// url: /clusters/run_hardware_check/
// summary: Run Hardware Validations
//
// Parameters:
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (c *Cluster) ClusterRunHardwareCheck_PATCH(body core.Params, waitTimeout time.Duration) (*AsyncResult, error) {
	return c.ClusterRunHardwareCheckWithContext_PATCH(c.Rest.GetCtx(), body, waitTimeout)
}

// ClusterSetCertificatesWithContext_POST
// method: POST
// url: /clusters/{id}/set_certificates/
// summary: Update EKM certificates
func (c *Cluster) ClusterSetCertificatesWithContext_POST(ctx context.Context, id any, body core.Params) error {
	resourcePath := core.BuildResourcePathWithID("clusters", id, "set_certificates")
	_, err := core.Request[core.Record](ctx, c, http.MethodPost, resourcePath, nil, body)
	return err

}

// ClusterSetCertificates_POST
// method: POST
// url: /clusters/{id}/set_certificates/
// summary: Update EKM certificates
func (c *Cluster) ClusterSetCertificates_POST(id any, body core.Params) error {
	return c.ClusterSetCertificatesWithContext_POST(c.Rest.GetCtx(), id, body)
}

// ClusterSetDriveFwUpgradeWithContext_POST
// method: POST
// url: /clusters/{id}/set_drive_fw_upgrade/
// summary: Set true/false to upgrade non-active drives fw
//
// Parameters:
//   - enabled (body): Enable/disable flag
func (c *Cluster) ClusterSetDriveFwUpgradeWithContext_POST(ctx context.Context, id any, enabled bool) (core.Record, error) {
	resourcePath := core.BuildResourcePathWithID("clusters", id, "set_drive_fw_upgrade")
	body := core.Params{}
	body["enabled"] = enabled
	result, err := core.Request[core.Record](ctx, c, http.MethodPost, resourcePath, nil, body)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// ClusterSetDriveFwUpgrade_POST
// method: POST
// url: /clusters/{id}/set_drive_fw_upgrade/
// summary: Set true/false to upgrade non-active drives fw
//
// Parameters:
//   - enabled (body): Enable/disable flag
func (c *Cluster) ClusterSetDriveFwUpgrade_POST(id any, enabled bool) (core.Record, error) {
	return c.ClusterSetDriveFwUpgradeWithContext_POST(c.Rest.GetCtx(), id, enabled)
}

// ClusterSetPasswordWithContext_PATCH
// method: PATCH
// url: /clusters/{id}/set_password/
// summary: Change Cluster Passwords
//
// Parameters:
//   - password (body): The new given password
//   - username (body): The given username for password change
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (c *Cluster) ClusterSetPasswordWithContext_PATCH(ctx context.Context, id any, password string, username string, waitTimeout time.Duration) (*AsyncResult, error) {
	resourcePath := core.BuildResourcePathWithID("clusters", id, "set_password")
	body := core.Params{}
	body["password"] = password
	body["username"] = username
	result, err := core.Request[core.Record](ctx, c, http.MethodPatch, resourcePath, nil, body)
	if err != nil {
		return nil, err
	}

	return MaybeWaitAsyncResultWithContext(ctx, result, c.Rest, waitTimeout)

}

// ClusterSetPassword_PATCH
// method: PATCH
// url: /clusters/{id}/set_password/
// summary: Change Cluster Passwords
//
// Parameters:
//   - password (body): The new given password
//   - username (body): The given username for password change
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (c *Cluster) ClusterSetPassword_PATCH(id any, password string, username string, waitTimeout time.Duration) (*AsyncResult, error) {
	return c.ClusterSetPasswordWithContext_PATCH(c.Rest.GetCtx(), id, password, username, waitTimeout)
}

// ClusterShardExpandWithContext_POST
// method: POST
// url: /clusters/shard_expand/
// summary: Shard expansion
func (c *Cluster) ClusterShardExpandWithContext_POST(ctx context.Context, body core.Params) (core.Record, error) {
	resourcePath := "/clusters/shard_expand/"
	result, err := core.Request[core.Record](ctx, c, http.MethodPost, resourcePath, nil, body)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// ClusterShardExpand_POST
// method: POST
// url: /clusters/shard_expand/
// summary: Shard expansion
func (c *Cluster) ClusterShardExpand_POST(body core.Params) (core.Record, error) {
	return c.ClusterShardExpandWithContext_POST(c.Rest.GetCtx(), body)
}

// ClusterStopUpgradeWithContext_POST
// method: POST
// url: /clusters/{id}/stop_upgrade/
// summary: Stop Running Upgrade
//
// Parameters:
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (c *Cluster) ClusterStopUpgradeWithContext_POST(ctx context.Context, id any, body core.Params, waitTimeout time.Duration) (*AsyncResult, error) {
	resourcePath := core.BuildResourcePathWithID("clusters", id, "stop_upgrade")
	result, err := core.Request[core.Record](ctx, c, http.MethodPost, resourcePath, nil, body)
	if err != nil {
		return nil, err
	}

	return MaybeWaitAsyncResultWithContext(ctx, result, c.Rest, waitTimeout)

}

// ClusterStopUpgrade_POST
// method: POST
// url: /clusters/{id}/stop_upgrade/
// summary: Stop Running Upgrade
//
// Parameters:
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (c *Cluster) ClusterStopUpgrade_POST(id any, body core.Params, waitTimeout time.Duration) (*AsyncResult, error) {
	return c.ClusterStopUpgradeWithContext_POST(c.Rest.GetCtx(), id, body, waitTimeout)
}

// ClusterSystemSettingsWithContext_PATCH
// method: PATCH
// url: /clusters/{id}/system_settings/
// summary: Set Cluster System Settings
//
// Parameters:
//   - settings (body): system settings to modify
func (c *Cluster) ClusterSystemSettingsWithContext_PATCH(ctx context.Context, id any, settings string) error {
	resourcePath := core.BuildResourcePathWithID("clusters", id, "system_settings")
	body := core.Params{}
	body["settings"] = settings
	_, err := core.Request[core.Record](ctx, c, http.MethodPatch, resourcePath, nil, body)
	return err

}

// ClusterSystemSettings_PATCH
// method: PATCH
// url: /clusters/{id}/system_settings/
// summary: Set Cluster System Settings
//
// Parameters:
//   - settings (body): system settings to modify
func (c *Cluster) ClusterSystemSettings_PATCH(id any, settings string) error {
	return c.ClusterSystemSettingsWithContext_PATCH(c.Rest.GetCtx(), id, settings)
}

// ClusterUnfreezeWithContext_POST
// method: POST
// url: /clusters/{id}/unfreeze/
// summary: Unfreeze Cluster
//
// Parameters:
//   - token (body): Token
func (c *Cluster) ClusterUnfreezeWithContext_POST(ctx context.Context, id any, token string) error {
	resourcePath := core.BuildResourcePathWithID("clusters", id, "unfreeze")
	body := core.Params{}
	body["token"] = token
	_, err := core.Request[core.Record](ctx, c, http.MethodPost, resourcePath, nil, body)
	return err

}

// ClusterUnfreeze_POST
// method: POST
// url: /clusters/{id}/unfreeze/
// summary: Unfreeze Cluster
//
// Parameters:
//   - token (body): Token
func (c *Cluster) ClusterUnfreeze_POST(id any, token string) error {
	return c.ClusterUnfreezeWithContext_POST(c.Rest.GetCtx(), id, token)
}

// ClusterUpgradeOptaneWithContext_POST
// method: POST
// url: /clusters/{id}/upgrade_optane/
// summary: Upgrade Optane NVRAM
//
// Parameters:
//   - force (body): Force upgrade regardless of version
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (c *Cluster) ClusterUpgradeOptaneWithContext_POST(ctx context.Context, id any, force bool, waitTimeout time.Duration) (*AsyncResult, error) {
	resourcePath := core.BuildResourcePathWithID("clusters", id, "upgrade_optane")
	body := core.Params{}
	if force != false {
		body["force"] = force
	}
	result, err := core.Request[core.Record](ctx, c, http.MethodPost, resourcePath, nil, body)
	if err != nil {
		return nil, err
	}

	return MaybeWaitAsyncResultWithContext(ctx, result, c.Rest, waitTimeout)

}

// ClusterUpgradeOptane_POST
// method: POST
// url: /clusters/{id}/upgrade_optane/
// summary: Upgrade Optane NVRAM
//
// Parameters:
//   - force (body): Force upgrade regardless of version
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (c *Cluster) ClusterUpgradeOptane_POST(id any, force bool, waitTimeout time.Duration) (*AsyncResult, error) {
	return c.ClusterUpgradeOptaneWithContext_POST(c.Rest.GetCtx(), id, force, waitTimeout)
}

// ClusterUpgradeSsdWithContext_POST
// method: POST
// url: /clusters/{id}/upgrade_ssd/
// summary: Upgrade SSD
//
// Parameters:
//   - force (body): Forces upgrade regardless of version
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (c *Cluster) ClusterUpgradeSsdWithContext_POST(ctx context.Context, id any, force bool, waitTimeout time.Duration) (*AsyncResult, error) {
	resourcePath := core.BuildResourcePathWithID("clusters", id, "upgrade_ssd")
	body := core.Params{}
	if force != false {
		body["force"] = force
	}
	result, err := core.Request[core.Record](ctx, c, http.MethodPost, resourcePath, nil, body)
	if err != nil {
		return nil, err
	}

	return MaybeWaitAsyncResultWithContext(ctx, result, c.Rest, waitTimeout)

}

// ClusterUpgradeSsd_POST
// method: POST
// url: /clusters/{id}/upgrade_ssd/
// summary: Upgrade SSD
//
// Parameters:
//   - force (body): Forces upgrade regardless of version
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (c *Cluster) ClusterUpgradeSsd_POST(id any, force bool, waitTimeout time.Duration) (*AsyncResult, error) {
	return c.ClusterUpgradeSsdWithContext_POST(c.Rest.GetCtx(), id, force, waitTimeout)
}

// ClusterUpgradeWithoutFileWithContext_POST
// method: POST
// url: /clusters/{id}/upgrade_without_file/
// summary: Upgrade Cluster from Pre-Uploaded Bundle
//
// Parameters:
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (c *Cluster) ClusterUpgradeWithoutFileWithContext_POST(ctx context.Context, id any, body core.Params, waitTimeout time.Duration) (*AsyncResult, error) {
	resourcePath := core.BuildResourcePathWithID("clusters", id, "upgrade_without_file")
	result, err := core.Request[core.Record](ctx, c, http.MethodPost, resourcePath, nil, body)
	if err != nil {
		return nil, err
	}

	return MaybeWaitAsyncResultWithContext(ctx, result, c.Rest, waitTimeout)

}

// ClusterUpgradeWithoutFile_POST
// method: POST
// url: /clusters/{id}/upgrade_without_file/
// summary: Upgrade Cluster from Pre-Uploaded Bundle
//
// Parameters:
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (c *Cluster) ClusterUpgradeWithoutFile_POST(id any, body core.Params, waitTimeout time.Duration) (*AsyncResult, error) {
	return c.ClusterUpgradeWithoutFileWithContext_POST(c.Rest.GetCtx(), id, body, waitTimeout)
}

// ClusterUpgradeWithContext_PATCH
// method: PATCH
// url: /clusters/{id}/upgrade/
// summary: Upgrade Cluster
//
// Parameters:
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (c *Cluster) ClusterUpgradeWithContext_PATCH(ctx context.Context, id any, body core.Params, waitTimeout time.Duration) (*AsyncResult, error) {
	resourcePath := core.BuildResourcePathWithID("clusters", id, "upgrade")
	result, err := core.Request[core.Record](ctx, c, http.MethodPatch, resourcePath, nil, body)
	if err != nil {
		return nil, err
	}

	return MaybeWaitAsyncResultWithContext(ctx, result, c.Rest, waitTimeout)

}

// ClusterUpgrade_PATCH
// method: PATCH
// url: /clusters/{id}/upgrade/
// summary: Upgrade Cluster
//
// Parameters:
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (c *Cluster) ClusterUpgrade_PATCH(id any, body core.Params, waitTimeout time.Duration) (*AsyncResult, error) {
	return c.ClusterUpgradeWithContext_PATCH(c.Rest.GetCtx(), id, body, waitTimeout)
}

// ClusterUploadFromS3WithContext_POST
// method: POST
// url: /clusters/{id}/upload_from_s3/
// summary: Upload Upgrade Bundle from S3 URL
//
// Parameters:
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (c *Cluster) ClusterUploadFromS3WithContext_POST(ctx context.Context, id any, body core.Params, waitTimeout time.Duration) (*AsyncResult, error) {
	resourcePath := core.BuildResourcePathWithID("clusters", id, "upload_from_s3")
	result, err := core.Request[core.Record](ctx, c, http.MethodPost, resourcePath, nil, body)
	if err != nil {
		return nil, err
	}

	return MaybeWaitAsyncResultWithContext(ctx, result, c.Rest, waitTimeout)

}

// ClusterUploadFromS3_POST
// method: POST
// url: /clusters/{id}/upload_from_s3/
// summary: Upload Upgrade Bundle from S3 URL
//
// Parameters:
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (c *Cluster) ClusterUploadFromS3_POST(id any, body core.Params, waitTimeout time.Duration) (*AsyncResult, error) {
	return c.ClusterUploadFromS3WithContext_POST(c.Rest.GetCtx(), id, body, waitTimeout)
}

// ClusterVastDbWithContext_GET
// method: GET
// url: /clusters/{id}/vast_db/
// summary: Show Cluster Vast DB Settings
func (c *Cluster) ClusterVastDbWithContext_GET(ctx context.Context, id any, params core.Params) (core.Record, error) {
	resourcePath := core.BuildResourcePathWithID("clusters", id, "vast_db")
	result, err := core.Request[core.Record](ctx, c, http.MethodGet, resourcePath, params, nil)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// ClusterVastDb_GET
// method: GET
// url: /clusters/{id}/vast_db/
// summary: Show Cluster Vast DB Settings
func (c *Cluster) ClusterVastDb_GET(id any, params core.Params) (core.Record, error) {
	return c.ClusterVastDbWithContext_GET(c.Rest.GetCtx(), id, params)
}

// ClusterVastDbWithContext_PATCH
// method: PATCH
// url: /clusters/{id}/vast_db/
// summary: Modify Cluster Vast DB Settings
//
// Parameters:
//   - vastDbSplits (body): The number of splits used for query_data scanning speed. Default 8.
//   - vastDbSubSplits (body): The number of sub-splits used for query_data scanning speed. Default 8.
func (c *Cluster) ClusterVastDbWithContext_PATCH(ctx context.Context, id any, vastDbSplits int64, vastDbSubSplits int64) (core.Record, error) {
	resourcePath := core.BuildResourcePathWithID("clusters", id, "vast_db")
	body := core.Params{}
	if vastDbSplits != 0 {
		body["vast_db_splits"] = vastDbSplits
	}
	if vastDbSubSplits != 0 {
		body["vast_db_sub_splits"] = vastDbSubSplits
	}
	result, err := core.Request[core.Record](ctx, c, http.MethodPatch, resourcePath, nil, body)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// ClusterVastDb_PATCH
// method: PATCH
// url: /clusters/{id}/vast_db/
// summary: Modify Cluster Vast DB Settings
//
// Parameters:
//   - vastDbSplits (body): The number of splits used for query_data scanning speed. Default 8.
//   - vastDbSubSplits (body): The number of sub-splits used for query_data scanning speed. Default 8.
func (c *Cluster) ClusterVastDb_PATCH(id any, vastDbSplits int64, vastDbSubSplits int64) (core.Record, error) {
	return c.ClusterVastDbWithContext_PATCH(c.Rest.GetCtx(), id, vastDbSplits, vastDbSubSplits)
}

// ClusterVsettingsWithContext_DELETE
// method: DELETE
// url: /clusters/{id}/vsettings/
// summary: Delete Cluster VSetting by key
//
// Parameters:
//   - key (body): vsetting key
func (c *Cluster) ClusterVsettingsWithContext_DELETE(ctx context.Context, id any, key string) error {
	resourcePath := core.BuildResourcePathWithID("clusters", id, "vsettings")
	body := core.Params{}
	body["key"] = key
	_, err := core.Request[core.Record](ctx, c, http.MethodDelete, resourcePath, nil, body)
	return err

}

// ClusterVsettings_DELETE
// method: DELETE
// url: /clusters/{id}/vsettings/
// summary: Delete Cluster VSetting by key
//
// Parameters:
//   - key (body): vsetting key
func (c *Cluster) ClusterVsettings_DELETE(id any, key string) error {
	return c.ClusterVsettingsWithContext_DELETE(c.Rest.GetCtx(), id, key)
}

// ClusterVsettingsWithContext_GET
// method: GET
// url: /clusters/{id}/vsettings/
// summary: Show or list cluster vsettings
func (c *Cluster) ClusterVsettingsWithContext_GET(ctx context.Context, id any, params core.Params) (core.Record, error) {
	resourcePath := core.BuildResourcePathWithID("clusters", id, "vsettings")
	result, err := core.Request[core.Record](ctx, c, http.MethodGet, resourcePath, params, nil)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// ClusterVsettings_GET
// method: GET
// url: /clusters/{id}/vsettings/
// summary: Show or list cluster vsettings
func (c *Cluster) ClusterVsettings_GET(id any, params core.Params) (core.Record, error) {
	return c.ClusterVsettingsWithContext_GET(c.Rest.GetCtx(), id, params)
}

// ClusterVsettingsWithContext_PATCH
// method: PATCH
// url: /clusters/{id}/vsettings/
// summary: Modify Cluster VSettings
func (c *Cluster) ClusterVsettingsWithContext_PATCH(ctx context.Context, id any, body core.Params) error {
	resourcePath := core.BuildResourcePathWithID("clusters", id, "vsettings")
	_, err := core.Request[core.Record](ctx, c, http.MethodPatch, resourcePath, nil, body)
	return err

}

// ClusterVsettings_PATCH
// method: PATCH
// url: /clusters/{id}/vsettings/
// summary: Modify Cluster VSettings
func (c *Cluster) ClusterVsettings_PATCH(id any, body core.Params) error {
	return c.ClusterVsettingsWithContext_PATCH(c.Rest.GetCtx(), id, body)
}

// ClusterWipeWithContext_POST
// method: POST
// url: /clusters/wipe/
// summary: Stop Cluster s/w on All Nodes
//
// Parameters:
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (c *Cluster) ClusterWipeWithContext_POST(ctx context.Context, body core.Params, waitTimeout time.Duration) (*AsyncResult, error) {
	resourcePath := "/clusters/wipe/"
	result, err := core.Request[core.Record](ctx, c, http.MethodPost, resourcePath, nil, body)
	if err != nil {
		return nil, err
	}

	return MaybeWaitAsyncResultWithContext(ctx, result, c.Rest, waitTimeout)

}

// ClusterWipe_POST
// method: POST
// url: /clusters/wipe/
// summary: Stop Cluster s/w on All Nodes
//
// Parameters:
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (c *Cluster) ClusterWipe_POST(body core.Params, waitTimeout time.Duration) (*AsyncResult, error) {
	return c.ClusterWipeWithContext_POST(c.Rest.GetCtx(), body, waitTimeout)
}
