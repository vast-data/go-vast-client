// Code generated by generate-typed-resources. DO NOT EDIT.
// Template: CREATE|LIST|READ|UPDATE|DELETE

package typed

import (
	"context"

	"github.com/vast-data/go-vast-client/core"
)

// -----------------------------------------------------
// RESOURCE TYPE
// -----------------------------------------------------

// Switch represents a typed resource for switch operations
type Switch struct {
	*core.TypedVastResource
}

// -----------------------------------------------------
// SEARCH PARAMS
// -----------------------------------------------------

// SwitchSearchParams represents the search parameters for Switch operations
type SwitchSearchParams struct {
	Guid  string `json:"guid,omitempty" yaml:"guid,omitempty" required:"false" doc:""`
	Name  string `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:"Switch hostname"`
	State string `json:"state,omitempty" yaml:"state,omitempty" required:"false" doc:"Filter by switch state"`

	// RawData allows passing arbitrary search parameters as key-value pairs.
	//
	// Use this field when you need query parameters that are not covered by the typed fields above.
	// This is particularly useful for:
	//   - Dynamic filter operations (e.g., "path__contains", "name__icontains")
	//   - Django-style query filters
	//   - Custom backend-specific parameters
	//
	// Example:
	//   params := &SwitchSearchParams{
	//       RawData: core.Params{"path__contains": "/foo", "name__icontains": "bar"},
	//   }
	//
	// Note: You can use either the typed fields or RawData, or combine both.
	RawData core.Params `json:"-" yaml:"-"`
}

// -----------------------------------------------------
// REQUEST BODY
// -----------------------------------------------------

// SwitchRequestBody represents the request body for Switch operations
type SwitchRequestBody struct {
	Ip       string `json:"ip,omitempty" yaml:"ip,omitempty" required:"false" doc:"Switch IP"`
	Password string `json:"password,omitempty" yaml:"password,omitempty" required:"false" doc:"Switch password"`
	Username string `json:"username,omitempty" yaml:"username,omitempty" required:"false" doc:"Switch username"`
}

// -----------------------------------------------------
// MODELS
// -----------------------------------------------------

// SwitchDetailsModel represents the detailed model returned by GET/List operations
// Type alias to component definition: #/components/schemas/Switch
type SwitchDetailsModel = Component_Switch

// SwitchUpsertModel represents the model returned by Create/Update operations
// Type alias to component definition: #/components/schemas/Switch
type SwitchUpsertModel = Component_Switch

// -----------------------------------------------------
// LIST
// -----------------------------------------------------

// List retrieves multiple switchs with typed request/response
// summary: List Switches
func (r *Switch) List(req *SwitchSearchParams) ([]*SwitchDetailsModel, error) {
	return r.ListWithContext(r.Untyped.GetCtx(), req)
}

// ListWithContext retrieves multiple switchs with typed request/response using provided context
// summary: List Switches
func (r *Switch) ListWithContext(ctx context.Context, req *SwitchSearchParams) ([]*SwitchDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.GetResourceMap()[r.GetResourceType()].ListWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response []*SwitchDetailsModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// Get retrieves a single switch with typed request/response
// summary: List Switches
func (r *Switch) Get(req *SwitchSearchParams) (*SwitchDetailsModel, error) {
	return r.GetWithContext(r.Untyped.GetCtx(), req)
}

// GetWithContext retrieves a single switch with typed request/response using provided context
// summary: List Switches
func (r *Switch) GetWithContext(ctx context.Context, req *SwitchSearchParams) (*SwitchDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response SwitchDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// READ
// -----------------------------------------------------

// GetById retrieves a single switch by ID
// summary: Return Details of a Switch
func (r *Switch) GetById(id any) (*SwitchDetailsModel, error) {
	return r.GetByIdWithContext(r.Untyped.GetCtx(), id)
}

// GetByIdWithContext retrieves a single switch by ID using provided context
// summary: Return Details of a Switch
func (r *Switch) GetByIdWithContext(ctx context.Context, id any) (*SwitchDetailsModel, error) {
	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetByIdWithContext(ctx, id)
	if err != nil {
		return nil, err
	}

	var response SwitchDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// CREATE
// -----------------------------------------------------

// Create creates a new switch with typed request/response
// summary: Add Switch
func (r *Switch) Create(req *SwitchRequestBody) (*SwitchUpsertModel, error) {
	return r.CreateWithContext(r.Untyped.GetCtx(), req)
}

// CreateWithContext creates a new switch with typed request/response using provided context
// summary: Add Switch
func (r *Switch) CreateWithContext(ctx context.Context, req *SwitchRequestBody) (*SwitchUpsertModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].CreateWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response SwitchUpsertModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// UPDATE
// -----------------------------------------------------

// Update updates an existing switch with typed request/response
func (r *Switch) Update(id any, req *SwitchRequestBody) (*SwitchUpsertModel, error) {
	return r.UpdateWithContext(r.Untyped.GetCtx(), id, req)
}

// UpdateWithContext updates an existing switch with typed request/response using provided context
func (r *Switch) UpdateWithContext(ctx context.Context, id any, req *SwitchRequestBody) (*SwitchUpsertModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].UpdateWithContext(ctx, id, params)
	if err != nil {
		return nil, err
	}

	var response SwitchUpsertModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// DELETE
// -----------------------------------------------------

// Delete deletes a switch with search parameters
func (r *Switch) Delete(req *SwitchSearchParams) error {
	return r.DeleteWithContext(r.Untyped.GetCtx(), req)
}

// DeleteWithContext deletes a switch with search parameters using provided context
func (r *Switch) DeleteWithContext(ctx context.Context, req *SwitchSearchParams) error {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return err
	}
	_, err = r.Untyped.GetResourceMap()[r.GetResourceType()].DeleteWithContext(ctx, params, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteById deletes a switch by ID
// summary: Delete Switch
//
// Parameters:
//   - id: Switch ID
func (r *Switch) DeleteById(id any) error {
	return r.DeleteByIdWithContext(r.Untyped.GetCtx(), id)
}

// DeleteByIdWithContext deletes a switch by ID using provided context
// summary: Delete Switch
//
// Parameters:
//   - id: Switch ID
func (r *Switch) DeleteByIdWithContext(ctx context.Context, id any) error {
	_, err := r.Untyped.GetResourceMap()[r.GetResourceType()].DeleteByIdWithContext(ctx, id, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// -----------------------------------------------------
// ENSURE
// -----------------------------------------------------

// Ensure ensures a switch exists with typed response
func (r *Switch) Ensure(searchParams *SwitchSearchParams, body *SwitchRequestBody) (*SwitchUpsertModel, error) {
	return r.EnsureWithContext(r.Untyped.GetCtx(), searchParams, body)
}

// EnsureWithContext ensures a switch exists with typed response using provided context
func (r *Switch) EnsureWithContext(ctx context.Context, searchParams *SwitchSearchParams, body *SwitchRequestBody) (*SwitchUpsertModel, error) {
	searchParamsConverted, err := core.NewParamsFromStruct(searchParams)
	if err != nil {
		return nil, err
	}
	bodyConverted, err := core.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].EnsureWithContext(ctx, searchParamsConverted, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response SwitchUpsertModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Exists checks if a switch exists
func (r *Switch) Exists(req *SwitchSearchParams) (bool, error) {
	return r.ExistsWithContext(r.Untyped.GetCtx(), req)
}

// ExistsWithContext checks if a switch exists using provided context
func (r *Switch) ExistsWithContext(ctx context.Context, req *SwitchSearchParams) (bool, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].ExistsWithContext(ctx, params)
}

// MustExists checks if a switch exists and panics if not
func (r *Switch) MustExists(req *SwitchSearchParams) bool {
	return r.MustExistsWithContext(r.Untyped.GetCtx(), req)
}

// MustExistsWithContext checks if a switch exists and panics if not using provided context
func (r *Switch) MustExistsWithContext(ctx context.Context, req *SwitchSearchParams) bool {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].MustExistsWithContext(ctx, params)
}
