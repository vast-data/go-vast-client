// Code generated by generate-typed-resources. DO NOT EDIT.
// Template: CREATE|LIST|READ|UPDATE|DELETE

package typed

import (
	"context"
	"net/http"

	"github.com/vast-data/go-vast-client/core"
)

// -----------------------------------------------------
// RESOURCE TYPE
// -----------------------------------------------------

// Manager represents a typed resource for manager operations
type Manager struct {
	*core.TypedVastResource
}

// -----------------------------------------------------
// SEARCH PARAMS
// -----------------------------------------------------

// ManagerSearchParams represents the search parameters for Manager operations
type ManagerSearchParams struct {
	Guid     string `json:"guid,omitempty" yaml:"guid,omitempty" required:"false" doc:""`
	TenantId int64  `json:"tenant_id,omitempty" yaml:"tenant_id,omitempty" required:"false" doc:"Tenant ID"`
	Username string `json:"username,omitempty" yaml:"username,omitempty" required:"false" doc:"Filter by username"`

	// RawData allows passing arbitrary search parameters as key-value pairs.
	//
	// Use this field when you need query parameters that are not covered by the typed fields above.
	// This is particularly useful for:
	//   - Dynamic filter operations (e.g., "path__contains", "name__icontains")
	//   - Django-style query filters
	//   - Custom backend-specific parameters
	//
	// Example:
	//   params := &ManagerSearchParams{
	//       RawData: core.Params{"path__contains": "/foo", "name__icontains": "bar"},
	//   }
	//
	// Note: You can use either the typed fields or RawData, or combine both.
	RawData core.Params `json:"-" yaml:"-"`
}

// -----------------------------------------------------
// REQUEST BODY
// -----------------------------------------------------

// ManagerRequestBody represents the request body for Manager operations
type ManagerRequestBody struct {
	Password                   string    `json:"password,omitempty" yaml:"password,omitempty" required:"true" doc:"Manager's password"`
	Roles                      *[]int64  `json:"roles,omitempty" yaml:"roles,omitempty" required:"true" doc:"Joins manager to specified roles. Specify as an array of role IDs, separated by commas."`
	Username                   string    `json:"username,omitempty" yaml:"username,omitempty" required:"true" doc:"Manager's user name"`
	FirstName                  string    `json:"first_name,omitempty" yaml:"first_name,omitempty" required:"false" doc:"Manager's first name"`
	IsTemporaryPassword        bool      `json:"is_temporary_password,omitempty" yaml:"is_temporary_password,omitempty" required:"false" doc:"Sets the password to be temporary. Expiration of temporary passwords is controlled by the tmp_pwd_expiration_timeout setting, which you can modify and retrieve through the /vms/{id}/pwd_settings/ path."`
	LastName                   string    `json:"last_name,omitempty" yaml:"last_name,omitempty" required:"false" doc:"Manager's last name"`
	PasswordExpirationDisabled bool      `json:"password_expiration_disabled,omitempty" yaml:"password_expiration_disabled,omitempty" required:"false" doc:"Password expiration is disabled"`
	PermissionsList            *[]string `json:"permissions_list,omitempty" yaml:"permissions_list,omitempty" required:"false" doc:"Specify permissions list as an array of permission codenames in the format PERMISSION-REALM. To list permission codenames, run /permissions/get."`
	TenantId                   int64     `json:"tenant_id,omitempty" yaml:"tenant_id,omitempty" required:"false" doc:"Tenant ID. If user_type is TENANT_ADMIN, specify the ID of the tenant to which to grant admin access."`
	UserType                   string    `json:"user_type,omitempty" yaml:"user_type,omitempty" required:"false" doc:"Manager user type. SUPER_ADMIN aka 'cluster admin' = VMS manager users who can log into the cluster VMS to manage the cluster. TENANT_ADMIN=VMS manager users who can log into a specific tenant's VMS to manage that tenant."`
}

// -----------------------------------------------------
// MODELS
// -----------------------------------------------------

// ManagerDetailsModel represents the detailed model returned by GET/List operations
// Type alias to component definition: #/components/schemas/Manager
type ManagerDetailsModel = Component_Manager

// ManagerUpsertModel represents the model returned by Create/Update operations
// Type alias to component definition: #/components/schemas/Manager
type ManagerUpsertModel = Component_Manager

// -----------------------------------------------------
// LIST
// -----------------------------------------------------

// List retrieves multiple managers with typed request/response
// summary: List Managers (VMS Users)
func (r *Manager) List(req *ManagerSearchParams) ([]*ManagerDetailsModel, error) {
	return r.ListWithContext(r.Untyped.GetCtx(), req)
}

// ListWithContext retrieves multiple managers with typed request/response using provided context
// summary: List Managers (VMS Users)
func (r *Manager) ListWithContext(ctx context.Context, req *ManagerSearchParams) ([]*ManagerDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.GetResourceMap()[r.GetResourceType()].ListWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response []*ManagerDetailsModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// Get retrieves a single manager with typed request/response
// summary: List Managers (VMS Users)
func (r *Manager) Get(req *ManagerSearchParams) (*ManagerDetailsModel, error) {
	return r.GetWithContext(r.Untyped.GetCtx(), req)
}

// GetWithContext retrieves a single manager with typed request/response using provided context
// summary: List Managers (VMS Users)
func (r *Manager) GetWithContext(ctx context.Context, req *ManagerSearchParams) (*ManagerDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response ManagerDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// READ
// -----------------------------------------------------

// GetById retrieves a single manager by ID
// summary: Return Details of a Manager (VMS User)
func (r *Manager) GetById(id any) (*ManagerDetailsModel, error) {
	return r.GetByIdWithContext(r.Untyped.GetCtx(), id)
}

// GetByIdWithContext retrieves a single manager by ID using provided context
// summary: Return Details of a Manager (VMS User)
func (r *Manager) GetByIdWithContext(ctx context.Context, id any) (*ManagerDetailsModel, error) {
	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetByIdWithContext(ctx, id)
	if err != nil {
		return nil, err
	}

	var response ManagerDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// CREATE
// -----------------------------------------------------

// Create creates a new manager with typed request/response
// summary: Create Manager (VMS User)
func (r *Manager) Create(req *ManagerRequestBody) (*ManagerUpsertModel, error) {
	return r.CreateWithContext(r.Untyped.GetCtx(), req)
}

// CreateWithContext creates a new manager with typed request/response using provided context
// summary: Create Manager (VMS User)
func (r *Manager) CreateWithContext(ctx context.Context, req *ManagerRequestBody) (*ManagerUpsertModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].CreateWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response ManagerUpsertModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// UPDATE
// -----------------------------------------------------

// Update updates an existing manager with typed request/response
func (r *Manager) Update(id any, req *ManagerRequestBody) (*ManagerUpsertModel, error) {
	return r.UpdateWithContext(r.Untyped.GetCtx(), id, req)
}

// UpdateWithContext updates an existing manager with typed request/response using provided context
func (r *Manager) UpdateWithContext(ctx context.Context, id any, req *ManagerRequestBody) (*ManagerUpsertModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].UpdateWithContext(ctx, id, params)
	if err != nil {
		return nil, err
	}

	var response ManagerUpsertModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// DELETE
// -----------------------------------------------------

// Delete deletes a manager with search parameters
func (r *Manager) Delete(req *ManagerSearchParams) error {
	return r.DeleteWithContext(r.Untyped.GetCtx(), req)
}

// DeleteWithContext deletes a manager with search parameters using provided context
func (r *Manager) DeleteWithContext(ctx context.Context, req *ManagerSearchParams) error {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return err
	}
	_, err = r.Untyped.GetResourceMap()[r.GetResourceType()].DeleteWithContext(ctx, params, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteById deletes a manager by ID
// summary: Delete Manager
func (r *Manager) DeleteById(id any) error {
	return r.DeleteByIdWithContext(r.Untyped.GetCtx(), id)
}

// DeleteByIdWithContext deletes a manager by ID using provided context
// summary: Delete Manager
func (r *Manager) DeleteByIdWithContext(ctx context.Context, id any) error {
	_, err := r.Untyped.GetResourceMap()[r.GetResourceType()].DeleteByIdWithContext(ctx, id, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// -----------------------------------------------------
// ENSURE
// -----------------------------------------------------

// Ensure ensures a manager exists with typed response
func (r *Manager) Ensure(searchParams *ManagerSearchParams, body *ManagerRequestBody) (*ManagerUpsertModel, error) {
	return r.EnsureWithContext(r.Untyped.GetCtx(), searchParams, body)
}

// EnsureWithContext ensures a manager exists with typed response using provided context
func (r *Manager) EnsureWithContext(ctx context.Context, searchParams *ManagerSearchParams, body *ManagerRequestBody) (*ManagerUpsertModel, error) {
	searchParamsConverted, err := core.NewParamsFromStruct(searchParams)
	if err != nil {
		return nil, err
	}
	bodyConverted, err := core.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].EnsureWithContext(ctx, searchParamsConverted, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response ManagerUpsertModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Exists checks if a manager exists
func (r *Manager) Exists(req *ManagerSearchParams) (bool, error) {
	return r.ExistsWithContext(r.Untyped.GetCtx(), req)
}

// ExistsWithContext checks if a manager exists using provided context
func (r *Manager) ExistsWithContext(ctx context.Context, req *ManagerSearchParams) (bool, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].ExistsWithContext(ctx, params)
}

// MustExists checks if a manager exists and panics if not
func (r *Manager) MustExists(req *ManagerSearchParams) bool {
	return r.MustExistsWithContext(r.Untyped.GetCtx(), req)
}

// MustExistsWithContext checks if a manager exists and panics if not using provided context
func (r *Manager) MustExistsWithContext(ctx context.Context, req *ManagerSearchParams) bool {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].MustExistsWithContext(ctx, params)
}

// -----------------------------------------------------
// EXTRA METHODS
// -----------------------------------------------------

// ManagerAuthorizedStatus_GET_Body represents the request body for ManagerAuthorizedStatus
type ManagerAuthorizedStatus_GET_Body struct {
	Action     string `json:"action,omitempty" yaml:"action,omitempty" required:"false" doc:""`
	BucketName string `json:"bucket_name,omitempty" yaml:"bucket_name,omitempty" required:"false" doc:""`
	LeadingVid int64  `json:"leading_vid,omitempty" yaml:"leading_vid,omitempty" required:"false" doc:""`
	ObjectPath string `json:"object_path,omitempty" yaml:"object_path,omitempty" required:"false" doc:""`
	OwnerVid   int64  `json:"owner_vid,omitempty" yaml:"owner_vid,omitempty" required:"false" doc:""`
	TenantId   int64  `json:"tenant_id,omitempty" yaml:"tenant_id,omitempty" required:"false" doc:"Filter by tenant. Specify tenant ID."`
}

// ManagerAuthorizedStatus_GET_Model represents the response model for ManagerAuthorizedStatus
type ManagerAuthorizedStatus_GET_Model struct {
	Code string `json:"code,omitempty" yaml:"code,omitempty" required:"false" doc:""`
}

// ManagerAuthorizedStatusWithContext_GET
// method: GET
// url: /managers/authorized_status/
// summary: Get authorized status for a user
func (r *Manager) ManagerAuthorizedStatusWithContext_GET(ctx context.Context, params *ManagerAuthorizedStatus_GET_Body) (*ManagerAuthorizedStatus_GET_Model, error) {
	resourcePath := "/managers/authorized_status/"

	reqParams, err := core.NewParamsFromStruct(params)
	if err != nil {
		return nil, err
	}
	var reqBody core.Params

	record, err := core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodGet, resourcePath, reqParams, reqBody)
	if err != nil {
		return nil, err
	}

	var response ManagerAuthorizedStatus_GET_Model
	if err := record.Fill(&response); err != nil {
		return nil, err
	}
	return &response, nil

}

// ManagerAuthorizedStatus_GET
// method: GET
// url: /managers/authorized_status/
// summary: Get authorized status for a user
func (r *Manager) ManagerAuthorizedStatus_GET(params *ManagerAuthorizedStatus_GET_Body) (*ManagerAuthorizedStatus_GET_Model, error) {
	return r.ManagerAuthorizedStatusWithContext_GET(r.Untyped.GetCtx(), params)
}

// ManagerPasswordWithContext_PATCH
// method: PATCH
// url: /managers/password/
// summary: Change user's password
//
// Parameters:
//   - password (body): New password.
func (r *Manager) ManagerPasswordWithContext_PATCH(ctx context.Context, password string) error {
	resourcePath := "/managers/password/"

	var reqParams core.Params
	reqBody := core.Params{}
	reqBody["password"] = password

	_, err := core.Request[core.EmptyRecord](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodPatch, resourcePath, reqParams, reqBody)
	return err

}

// ManagerPassword_PATCH
// method: PATCH
// url: /managers/password/
// summary: Change user's password
//
// Parameters:
//   - password (body): New password.
func (r *Manager) ManagerPassword_PATCH(password string) error {
	return r.ManagerPasswordWithContext_PATCH(r.Untyped.GetCtx(), password)
}

// ManagerUnlockWithContext_PATCH
// method: PATCH
// url: /managers/{id}/unlock/
// summary: Unlock a Manager
//
// Parameters:
//   - isTemporaryPassword (body): Sets the password to be temporary. Expiration of temporary passwords is controlled by the tmp_pwd_expiration_timeout setting, which you can modify and retrieve through the /vms/{id}/pwd_settings/ path.
//   - password (body): The manager's (new) password.
func (r *Manager) ManagerUnlockWithContext_PATCH(ctx context.Context, id any, isTemporaryPassword bool, password string) error {
	resourcePath := core.BuildResourcePathWithID("managers", id, "unlock")

	var reqParams core.Params
	reqBody := core.Params{}
	if isTemporaryPassword {
		reqBody["is_temporary_password"] = isTemporaryPassword
	}
	if password != "" {
		reqBody["password"] = password
	}

	_, err := core.Request[core.EmptyRecord](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodPatch, resourcePath, reqParams, reqBody)
	return err

}

// ManagerUnlock_PATCH
// method: PATCH
// url: /managers/{id}/unlock/
// summary: Unlock a Manager
//
// Parameters:
//   - isTemporaryPassword (body): Sets the password to be temporary. Expiration of temporary passwords is controlled by the tmp_pwd_expiration_timeout setting, which you can modify and retrieve through the /vms/{id}/pwd_settings/ path.
//   - password (body): The manager's (new) password.
func (r *Manager) ManagerUnlock_PATCH(id any, isTemporaryPassword bool, password string) error {
	return r.ManagerUnlockWithContext_PATCH(r.Untyped.GetCtx(), id, isTemporaryPassword, password)
}
