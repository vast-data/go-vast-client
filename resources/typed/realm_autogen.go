// Code generated by generate-typed-resources. DO NOT EDIT.
// Template: CREATE|LIST|READ|DELETE

package typed

import (
	"context"

	"github.com/vast-data/go-vast-client/core"
)

// -----------------------------------------------------
// RESOURCE TYPE
// -----------------------------------------------------

// Realm represents a typed resource for realm operations
type Realm struct {
	*core.TypedVastResource
}

// -----------------------------------------------------
// SEARCH PARAMS
// -----------------------------------------------------

// RealmSearchParams represents the search parameters for Realm operations
type RealmSearchParams struct {
	Name     string `json:"name,omitempty" yaml:"name,omitempty" required:"true" doc:"The name of the realm"`
	Guid     string `json:"guid,omitempty" yaml:"guid,omitempty" required:"false" doc:""`
	TenantId int64  `json:"tenant_id,omitempty" yaml:"tenant_id,omitempty" required:"false" doc:"Tenant ID"`

	// RawData allows passing arbitrary search parameters as key-value pairs.
	//
	// Use this field when you need query parameters that are not covered by the typed fields above.
	// This is particularly useful for:
	//   - Dynamic filter operations (e.g., "path__contains", "name__icontains")
	//   - Django-style query filters
	//   - Custom backend-specific parameters
	//
	// Example:
	//   params := &RealmSearchParams{
	//       RawData: core.Params{"path__contains": "/foo", "name__icontains": "bar"},
	//   }
	//
	// Note: You can use either the typed fields or RawData, or combine both.
	RawData core.Params `json:"-" yaml:"-"`
}

// -----------------------------------------------------
// REQUEST BODY
// -----------------------------------------------------

// RealmRequestBody represents the request body for Realm operations
type RealmRequestBody struct {
	Name        string    `json:"name,omitempty" yaml:"name,omitempty" required:"true" doc:"Realm name"`
	ObjectTypes *[]string `json:"object_types,omitempty" yaml:"object_types,omitempty" required:"false" doc:""`
	TenantId    int64     `json:"tenant_id,omitempty" yaml:"tenant_id,omitempty" required:"false" doc:"Tenant ID"`
}

// -----------------------------------------------------
// MODELS
// -----------------------------------------------------

// RealmDetailsModel represents the detailed model returned by GET/List operations
// Type alias to component definition: #/components/schemas/Realm
type RealmDetailsModel = Component_Realm

// RealmUpsertModel represents the model returned by Create/Update operations
// Type alias to component definition: #/components/schemas/Realm
type RealmUpsertModel = Component_Realm

// -----------------------------------------------------
// LIST
// -----------------------------------------------------

// List retrieves multiple realms with typed request/response
// summary: List Realms
func (r *Realm) List(req *RealmSearchParams) ([]*RealmDetailsModel, error) {
	return r.ListWithContext(r.Untyped.GetCtx(), req)
}

// ListWithContext retrieves multiple realms with typed request/response using provided context
// summary: List Realms
func (r *Realm) ListWithContext(ctx context.Context, req *RealmSearchParams) ([]*RealmDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.GetResourceMap()[r.GetResourceType()].ListWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response []*RealmDetailsModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// Get retrieves a single realm with typed request/response
// summary: List Realms
func (r *Realm) Get(req *RealmSearchParams) (*RealmDetailsModel, error) {
	return r.GetWithContext(r.Untyped.GetCtx(), req)
}

// GetWithContext retrieves a single realm with typed request/response using provided context
// summary: List Realms
func (r *Realm) GetWithContext(ctx context.Context, req *RealmSearchParams) (*RealmDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response RealmDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// READ
// -----------------------------------------------------

// GetById retrieves a single realm by ID
// summary: Return Details of a Realm.
func (r *Realm) GetById(id any) (*RealmDetailsModel, error) {
	return r.GetByIdWithContext(r.Untyped.GetCtx(), id)
}

// GetByIdWithContext retrieves a single realm by ID using provided context
// summary: Return Details of a Realm.
func (r *Realm) GetByIdWithContext(ctx context.Context, id any) (*RealmDetailsModel, error) {
	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetByIdWithContext(ctx, id)
	if err != nil {
		return nil, err
	}

	var response RealmDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// CREATE
// -----------------------------------------------------

// Create creates a new realm with typed request/response
// summary: Create Realm
func (r *Realm) Create(req *RealmRequestBody) (*RealmUpsertModel, error) {
	return r.CreateWithContext(r.Untyped.GetCtx(), req)
}

// CreateWithContext creates a new realm with typed request/response using provided context
// summary: Create Realm
func (r *Realm) CreateWithContext(ctx context.Context, req *RealmRequestBody) (*RealmUpsertModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].CreateWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response RealmUpsertModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// DELETE
// -----------------------------------------------------

// Delete deletes a realm with search parameters
func (r *Realm) Delete(req *RealmSearchParams) error {
	return r.DeleteWithContext(r.Untyped.GetCtx(), req)
}

// DeleteWithContext deletes a realm with search parameters using provided context
func (r *Realm) DeleteWithContext(ctx context.Context, req *RealmSearchParams) error {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return err
	}
	_, err = r.Untyped.GetResourceMap()[r.GetResourceType()].DeleteWithContext(ctx, params, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteById deletes a realm by ID
// summary: Delete Realm
//
// Parameters:
//   - id: Realm ID
func (r *Realm) DeleteById(id any) error {
	return r.DeleteByIdWithContext(r.Untyped.GetCtx(), id)
}

// DeleteByIdWithContext deletes a realm by ID using provided context
// summary: Delete Realm
//
// Parameters:
//   - id: Realm ID
func (r *Realm) DeleteByIdWithContext(ctx context.Context, id any) error {
	_, err := r.Untyped.GetResourceMap()[r.GetResourceType()].DeleteByIdWithContext(ctx, id, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// -----------------------------------------------------
// ENSURE
// -----------------------------------------------------

// Ensure ensures a realm exists with typed response
func (r *Realm) Ensure(searchParams *RealmSearchParams, body *RealmRequestBody) (*RealmUpsertModel, error) {
	return r.EnsureWithContext(r.Untyped.GetCtx(), searchParams, body)
}

// EnsureWithContext ensures a realm exists with typed response using provided context
func (r *Realm) EnsureWithContext(ctx context.Context, searchParams *RealmSearchParams, body *RealmRequestBody) (*RealmUpsertModel, error) {
	searchParamsConverted, err := core.NewParamsFromStruct(searchParams)
	if err != nil {
		return nil, err
	}
	bodyConverted, err := core.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].EnsureWithContext(ctx, searchParamsConverted, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response RealmUpsertModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Exists checks if a realm exists
func (r *Realm) Exists(req *RealmSearchParams) (bool, error) {
	return r.ExistsWithContext(r.Untyped.GetCtx(), req)
}

// ExistsWithContext checks if a realm exists using provided context
func (r *Realm) ExistsWithContext(ctx context.Context, req *RealmSearchParams) (bool, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].ExistsWithContext(ctx, params)
}

// MustExists checks if a realm exists and panics if not
func (r *Realm) MustExists(req *RealmSearchParams) bool {
	return r.MustExistsWithContext(r.Untyped.GetCtx(), req)
}

// MustExistsWithContext checks if a realm exists and panics if not using provided context
func (r *Realm) MustExistsWithContext(ctx context.Context, req *RealmSearchParams) bool {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].MustExistsWithContext(ctx, params)
}

// -----------------------------------------------------
// GENERATION ISSUES
// -----------------------------------------------------
//   - Extra method PATCH /realms/{id}/assign/ skipped: PATCH /realms/{id}/assign/ - No response schema defined in OpenAPI spec. Error: no valid schema found in PATCH response (200/201/202/204) for resource /realms/{id}/assign/
//   - Extra method PATCH /realms/{id}/unassign/ skipped: PATCH /realms/{id}/unassign/ - No response schema defined in OpenAPI spec. Error: no valid schema found in PATCH response (200/201/202/204) for resource /realms/{id}/unassign/
//   - UPDATE operation excluded: PATCH/PUT /realms/{id}/ has no response schema and doesn't return 204 NO CONTENT
