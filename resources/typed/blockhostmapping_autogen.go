// Code generated by generate-typed-resources. DO NOT EDIT.
// Template: EXTRA_METHODS_ONLY

package typed

import (
	"context"
	"net/http"
	"time"

	"github.com/vast-data/go-vast-client/core"
	"github.com/vast-data/go-vast-client/resources/untyped"
)

// BlockHostMapping provides typed access to BlockHostMapping extra methods
type BlockHostMapping struct {
	*core.TypedVastResource
}

// -----------------------------------------------------
// EXTRA METHODS
// -----------------------------------------------------

// BlockHostMappingBulkBody_PairsToAddByPathItem represents a nested type for BlockHostMapping extra method body
type BlockHostMappingBulkBody_PairsToAddByPathItem struct {
	HostId         int64  `json:"host_id,omitempty" yaml:"host_id,omitempty" required:"true" doc:"ID of a block host"`
	VolumeFullPath string `json:"volume_full_path,omitempty" yaml:"volume_full_path,omitempty" required:"true" doc:"Full path of the volume."`
}

// BlockHostMappingBulkBody_PairsToAddItem represents a nested type for BlockHostMapping extra method body
type BlockHostMappingBulkBody_PairsToAddItem struct {
	HostId   int64 `json:"host_id,omitempty" yaml:"host_id,omitempty" required:"true" doc:"ID of a block host"`
	VolumeId int64 `json:"volume_id,omitempty" yaml:"volume_id,omitempty" required:"true" doc:"ID of a volume"`
}

// BlockHostMappingBulkBody_PairsToRemoveByPathItem represents a nested type for BlockHostMapping extra method body
type BlockHostMappingBulkBody_PairsToRemoveByPathItem struct {
	HostId         int64  `json:"host_id,omitempty" yaml:"host_id,omitempty" required:"true" doc:"ID of a block host"`
	VolumeFullPath string `json:"volume_full_path,omitempty" yaml:"volume_full_path,omitempty" required:"true" doc:"Full path of the volume."`
}

// BlockHostMappingBulkBody_PairsToRemoveItem represents a nested type for BlockHostMapping extra method body
type BlockHostMappingBulkBody_PairsToRemoveItem struct {
	HostId   int64 `json:"host_id,omitempty" yaml:"host_id,omitempty" required:"true" doc:"ID of a block host"`
	VolumeId int64 `json:"volume_id,omitempty" yaml:"volume_id,omitempty" required:"true" doc:"ID of a volume"`
}

// BlockHostMappingBulk_PATCH_Body represents the request body for BlockHostMappingBulk
type BlockHostMappingBulk_PATCH_Body struct {
	PairsToAdd          *[]BlockHostMappingBulkBody_PairsToAddItem          `json:"pairs_to_add,omitempty" yaml:"pairs_to_add,omitempty" required:"false" doc:""`
	PairsToAddByPath    *[]BlockHostMappingBulkBody_PairsToAddByPathItem    `json:"pairs_to_add_by_path,omitempty" yaml:"pairs_to_add_by_path,omitempty" required:"false" doc:""`
	PairsToRemove       *[]BlockHostMappingBulkBody_PairsToRemoveItem       `json:"pairs_to_remove,omitempty" yaml:"pairs_to_remove,omitempty" required:"false" doc:""`
	PairsToRemoveByPath *[]BlockHostMappingBulkBody_PairsToRemoveByPathItem `json:"pairs_to_remove_by_path,omitempty" yaml:"pairs_to_remove_by_path,omitempty" required:"false" doc:""`
	SnapshotId          int64                                               `json:"snapshot_id,omitempty" yaml:"snapshot_id,omitempty" required:"false" doc:""`
}

// BlockHostMappingBulkWithContext_PATCH
// method: PATCH
// url: /blockmappings/bulk/
// summary: Map Block Hosts to Volumes
//
// Parameters:
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (r *BlockHostMapping) BlockHostMappingBulkWithContext_PATCH(ctx context.Context, body *BlockHostMappingBulk_PATCH_Body, waitTimeout time.Duration) (*untyped.AsyncResult, error) {
	resourcePath := "/blockmappings/bulk/"

	var reqParams core.Params
	reqBody, err := core.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	result, err := core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodPatch, resourcePath, reqParams, reqBody)
	if err != nil {
		return nil, err
	}

	asyncResult, _, err := untyped.MaybeWaitAsyncResultWithContext(ctx, result, r.Untyped, waitTimeout)
	return asyncResult, err

}

// BlockHostMappingBulk_PATCH
// method: PATCH
// url: /blockmappings/bulk/
// summary: Map Block Hosts to Volumes
//
// Parameters:
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (r *BlockHostMapping) BlockHostMappingBulk_PATCH(body *BlockHostMappingBulk_PATCH_Body, waitTimeout time.Duration) (*untyped.AsyncResult, error) {
	return r.BlockHostMappingBulkWithContext_PATCH(r.Untyped.GetCtx(), body, waitTimeout)
}
