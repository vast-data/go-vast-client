// Code generated by generate-typed-resources. DO NOT EDIT.
// Template: CREATE|LIST|READ|UPDATE|DELETE

package typed

import (
	"context"
	"net/http"

	"github.com/vast-data/go-vast-client/core"
)

// -----------------------------------------------------
// RESOURCE TYPE
// -----------------------------------------------------

// Rack represents a typed resource for rack operations
type Rack struct {
	*core.TypedVastResource
}

// -----------------------------------------------------
// SEARCH PARAMS
// -----------------------------------------------------

// RackSearchParams represents the search parameters for Rack operations
type RackSearchParams struct {
	Name string `json:"name,omitempty" yaml:"name,omitempty" required:"true" doc:""`
	Guid string `json:"guid,omitempty" yaml:"guid,omitempty" required:"false" doc:""`

	// RawData allows passing arbitrary search parameters as key-value pairs.
	//
	// Use this field when you need query parameters that are not covered by the typed fields above.
	// This is particularly useful for:
	//   - Dynamic filter operations (e.g., "path__contains", "name__icontains")
	//   - Django-style query filters
	//   - Custom backend-specific parameters
	//
	// Example:
	//   params := &RackSearchParams{
	//       RawData: core.Params{"path__contains": "/foo", "name__icontains": "bar"},
	//   }
	//
	// Note: You can use either the typed fields or RawData, or combine both.
	RawData core.Params `json:"-" yaml:"-"`
}

// -----------------------------------------------------
// REQUEST BODY
// -----------------------------------------------------

// RackRequestBody represents the request body for Rack operations
type RackRequestBody struct {
	Name          string    `json:"name,omitempty" yaml:"name,omitempty" required:"true" doc:"Rack name"`
	Description   string    `json:"description,omitempty" yaml:"description,omitempty" required:"false" doc:""`
	IpRange       *[]string `json:"ip_range,omitempty" yaml:"ip_range,omitempty" required:"false" doc:""`
	NumberOfUnits int64     `json:"number_of_units,omitempty" yaml:"number_of_units,omitempty" required:"false" doc:""`
	RackUnit      string    `json:"rack_unit,omitempty" yaml:"rack_unit,omitempty" required:"false" doc:""`
	Row           string    `json:"row,omitempty" yaml:"row,omitempty" required:"false" doc:""`
}

// -----------------------------------------------------
// MODELS
// -----------------------------------------------------

// RackDetailsModel represents the detailed model returned by GET/List operations
// Type alias to component definition: #/components/schemas/Rack
type RackDetailsModel = Component_Rack

// RackUpsertModel represents the model returned by Create/Update operations
// Type alias to component definition: #/components/schemas/AsyncRack
type RackUpsertModel = Component_AsyncRack

// -----------------------------------------------------
// LIST
// -----------------------------------------------------

// List retrieves multiple racks with typed request/response
// summary: Get all existing Racks
func (r *Rack) List(req *RackSearchParams) ([]*RackDetailsModel, error) {
	return r.ListWithContext(r.Untyped.GetCtx(), req)
}

// ListWithContext retrieves multiple racks with typed request/response using provided context
// summary: Get all existing Racks
func (r *Rack) ListWithContext(ctx context.Context, req *RackSearchParams) ([]*RackDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.GetResourceMap()[r.GetResourceType()].ListWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response []*RackDetailsModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// Get retrieves a single rack with typed request/response
// summary: Get all existing Racks
func (r *Rack) Get(req *RackSearchParams) (*RackDetailsModel, error) {
	return r.GetWithContext(r.Untyped.GetCtx(), req)
}

// GetWithContext retrieves a single rack with typed request/response using provided context
// summary: Get all existing Racks
func (r *Rack) GetWithContext(ctx context.Context, req *RackSearchParams) (*RackDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response RackDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// READ
// -----------------------------------------------------

// GetById retrieves a single rack by ID
// summary: Return Details of a Rack
func (r *Rack) GetById(id any) (*RackDetailsModel, error) {
	return r.GetByIdWithContext(r.Untyped.GetCtx(), id)
}

// GetByIdWithContext retrieves a single rack by ID using provided context
// summary: Return Details of a Rack
func (r *Rack) GetByIdWithContext(ctx context.Context, id any) (*RackDetailsModel, error) {
	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetByIdWithContext(ctx, id)
	if err != nil {
		return nil, err
	}

	var response RackDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// CREATE
// -----------------------------------------------------

// Create creates a new rack with typed request/response
// summary: Create a Rack
func (r *Rack) Create(req *RackRequestBody) (*RackUpsertModel, error) {
	return r.CreateWithContext(r.Untyped.GetCtx(), req)
}

// CreateWithContext creates a new rack with typed request/response using provided context
// summary: Create a Rack
func (r *Rack) CreateWithContext(ctx context.Context, req *RackRequestBody) (*RackUpsertModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].CreateWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response RackUpsertModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// UPDATE
// -----------------------------------------------------

// Update updates an existing rack with typed request/response
func (r *Rack) Update(id any, req *RackRequestBody) (*RackUpsertModel, error) {
	return r.UpdateWithContext(r.Untyped.GetCtx(), id, req)
}

// UpdateWithContext updates an existing rack with typed request/response using provided context
func (r *Rack) UpdateWithContext(ctx context.Context, id any, req *RackRequestBody) (*RackUpsertModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].UpdateWithContext(ctx, id, params)
	if err != nil {
		return nil, err
	}

	var response RackUpsertModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// DELETE
// -----------------------------------------------------

// Delete deletes a rack with search parameters
func (r *Rack) Delete(req *RackSearchParams) error {
	return r.DeleteWithContext(r.Untyped.GetCtx(), req)
}

// DeleteWithContext deletes a rack with search parameters using provided context
func (r *Rack) DeleteWithContext(ctx context.Context, req *RackSearchParams) error {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return err
	}
	_, err = r.Untyped.GetResourceMap()[r.GetResourceType()].DeleteWithContext(ctx, params, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteById deletes a rack by ID
// summary: Delete a Rack
func (r *Rack) DeleteById(id any) error {
	return r.DeleteByIdWithContext(r.Untyped.GetCtx(), id)
}

// DeleteByIdWithContext deletes a rack by ID using provided context
// summary: Delete a Rack
func (r *Rack) DeleteByIdWithContext(ctx context.Context, id any) error {
	_, err := r.Untyped.GetResourceMap()[r.GetResourceType()].DeleteByIdWithContext(ctx, id, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// -----------------------------------------------------
// ENSURE
// -----------------------------------------------------

// Ensure ensures a rack exists with typed response
func (r *Rack) Ensure(searchParams *RackSearchParams, body *RackRequestBody) (*RackUpsertModel, error) {
	return r.EnsureWithContext(r.Untyped.GetCtx(), searchParams, body)
}

// EnsureWithContext ensures a rack exists with typed response using provided context
func (r *Rack) EnsureWithContext(ctx context.Context, searchParams *RackSearchParams, body *RackRequestBody) (*RackUpsertModel, error) {
	searchParamsConverted, err := core.NewParamsFromStruct(searchParams)
	if err != nil {
		return nil, err
	}
	bodyConverted, err := core.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].EnsureWithContext(ctx, searchParamsConverted, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response RackUpsertModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Exists checks if a rack exists
func (r *Rack) Exists(req *RackSearchParams) (bool, error) {
	return r.ExistsWithContext(r.Untyped.GetCtx(), req)
}

// ExistsWithContext checks if a rack exists using provided context
func (r *Rack) ExistsWithContext(ctx context.Context, req *RackSearchParams) (bool, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].ExistsWithContext(ctx, params)
}

// MustExists checks if a rack exists and panics if not
func (r *Rack) MustExists(req *RackSearchParams) bool {
	return r.MustExistsWithContext(r.Untyped.GetCtx(), req)
}

// MustExistsWithContext checks if a rack exists and panics if not using provided context
func (r *Rack) MustExistsWithContext(ctx context.Context, req *RackSearchParams) bool {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].MustExistsWithContext(ctx, params)
}

// -----------------------------------------------------
// EXTRA METHODS
// -----------------------------------------------------

// RackAddBoxesBody_CboxItem represents a nested type for Rack extra method body
type RackAddBoxesBody_CboxItem struct {
	Id        int64  `json:"id,omitempty" yaml:"id,omitempty" required:"true" doc:""`
	RackIndex int64  `json:"rack_index,omitempty" yaml:"rack_index,omitempty" required:"false" doc:""`
	RackUnit  string `json:"rack_unit,omitempty" yaml:"rack_unit,omitempty" required:"false" doc:""`
}

// RackAddBoxesBody_DboxItem represents a nested type for Rack extra method body
type RackAddBoxesBody_DboxItem struct {
	Id        int64  `json:"id,omitempty" yaml:"id,omitempty" required:"true" doc:""`
	RackIndex int64  `json:"rack_index,omitempty" yaml:"rack_index,omitempty" required:"false" doc:""`
	RackUnit  string `json:"rack_unit,omitempty" yaml:"rack_unit,omitempty" required:"false" doc:""`
}

// RackAddBoxes_POST_Body represents the request body for RackAddBoxes
type RackAddBoxes_POST_Body struct {
	Cbox *[]RackAddBoxesBody_CboxItem `json:"cbox,omitempty" yaml:"cbox,omitempty" required:"false" doc:""`
	Dbox *[]RackAddBoxesBody_DboxItem `json:"dbox,omitempty" yaml:"dbox,omitempty" required:"false" doc:""`
}

// RackAddBoxesWithContext_POST
// method: POST
// url: /racks/{id}/add_boxes/
// summary: Add Boxes to a Rack
func (r *Rack) RackAddBoxesWithContext_POST(ctx context.Context, id any, body *RackAddBoxes_POST_Body) error {
	resourcePath := core.BuildResourcePathWithID("racks", id, "add_boxes")

	var reqParams core.Params
	reqBody, err := core.NewParamsFromStruct(body)
	if err != nil {
		return err
	}

	_, err = core.Request[core.EmptyRecord](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodPost, resourcePath, reqParams, reqBody)
	return err

}

// RackAddBoxes_POST
// method: POST
// url: /racks/{id}/add_boxes/
// summary: Add Boxes to a Rack
func (r *Rack) RackAddBoxes_POST(id any, body *RackAddBoxes_POST_Body) error {
	return r.RackAddBoxesWithContext_POST(r.Untyped.GetCtx(), id, body)
}

// RackBgpconfig_POST_Body represents the request body for RackBgpconfig
type RackBgpconfig_POST_Body struct {
	IpRanges     *[]string `json:"ip_ranges,omitempty" yaml:"ip_ranges,omitempty" required:"false" doc:""`
	IpsRepresent string    `json:"ips_represent,omitempty" yaml:"ips_represent,omitempty" required:"false" doc:"IP address representation (odd/even)"`
	SelfAsn      string    `json:"self_asn,omitempty" yaml:"self_asn,omitempty" required:"false" doc:"ASN"`
	SubnetBits   int64     `json:"subnet_bits,omitempty" yaml:"subnet_bits,omitempty" required:"false" doc:"Subnet bits"`
}

// RackBgpconfigWithContext_POST
// method: POST
// url: /racks/{id}/bgpconfig/
// summary: Configure BGP on Rack
func (r *Rack) RackBgpconfigWithContext_POST(ctx context.Context, id any, body *RackBgpconfig_POST_Body) error {
	resourcePath := core.BuildResourcePathWithID("racks", id, "bgpconfig")

	var reqParams core.Params
	reqBody, err := core.NewParamsFromStruct(body)
	if err != nil {
		return err
	}

	_, err = core.Request[core.EmptyRecord](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodPost, resourcePath, reqParams, reqBody)
	return err

}

// RackBgpconfig_POST
// method: POST
// url: /racks/{id}/bgpconfig/
// summary: Configure BGP on Rack
func (r *Rack) RackBgpconfig_POST(id any, body *RackBgpconfig_POST_Body) error {
	return r.RackBgpconfigWithContext_POST(r.Untyped.GetCtx(), id, body)
}

// RackControlLedWithContext_PATCH
// method: PATCH
// url: /racks/{id}/control_led/
// summary: Control Rack Boxes LED
//
// Parameters:
//   - control (body): LED state
func (r *Rack) RackControlLedWithContext_PATCH(ctx context.Context, id any, control string) error {
	resourcePath := core.BuildResourcePathWithID("racks", id, "control_led")

	var reqParams core.Params
	reqBody := core.Params{}
	if control != "" {
		reqBody["control"] = control
	}

	_, err := core.Request[core.EmptyRecord](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodPatch, resourcePath, reqParams, reqBody)
	return err

}

// RackControlLed_PATCH
// method: PATCH
// url: /racks/{id}/control_led/
// summary: Control Rack Boxes LED
//
// Parameters:
//   - control (body): LED state
func (r *Rack) RackControlLed_PATCH(id any, control string) error {
	return r.RackControlLedWithContext_PATCH(r.Untyped.GetCtx(), id, control)
}

// RackRenameWithContext_PATCH
// method: PATCH
// url: /racks/{id}/rename/
// summary: Rename Rack
//
// Parameters:
//   - name (body): New Rack name
func (r *Rack) RackRenameWithContext_PATCH(ctx context.Context, id any, name string) error {
	resourcePath := core.BuildResourcePathWithID("racks", id, "rename")

	var reqParams core.Params
	reqBody := core.Params{}
	if name != "" {
		reqBody["name"] = name
	}

	_, err := core.Request[core.EmptyRecord](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodPatch, resourcePath, reqParams, reqBody)
	return err

}

// RackRename_PATCH
// method: PATCH
// url: /racks/{id}/rename/
// summary: Rename Rack
//
// Parameters:
//   - name (body): New Rack name
func (r *Rack) RackRename_PATCH(id any, name string) error {
	return r.RackRenameWithContext_PATCH(r.Untyped.GetCtx(), id, name)
}
