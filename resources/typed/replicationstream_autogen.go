// Code generated by generate-typed-resources. DO NOT EDIT.
// Template: CREATE|LIST|READ|DELETE

package typed

import (
	"context"

	"github.com/vast-data/go-vast-client/core"
)

// -----------------------------------------------------
// RESOURCE TYPE
// -----------------------------------------------------

// ReplicationStream represents a typed resource for replicationstream operations
type ReplicationStream struct {
	*core.TypedVastResource
}

// -----------------------------------------------------
// SEARCH PARAMS
// -----------------------------------------------------

// ReplicationStreamSearchParams represents the search parameters for ReplicationStream operations
type ReplicationStreamSearchParams struct {
	Enabled   string `json:"enabled,omitempty" yaml:"enabled,omitempty" required:"false" doc:"start/pause replication stream"`
	Guid      string `json:"guid,omitempty" yaml:"guid,omitempty" required:"false" doc:"guid"`
	Name      string `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:""`
	Ordering  string `json:"ordering,omitempty" yaml:"ordering,omitempty" required:"false" doc:"orders by some field"`
	SourceDir string `json:"source_dir,omitempty" yaml:"source_dir,omitempty" required:"false" doc:""`
	State     string `json:"state,omitempty" yaml:"state,omitempty" required:"false" doc:""`

	// RawData allows passing arbitrary search parameters as key-value pairs.
	//
	// Use this field when you need query parameters that are not covered by the typed fields above.
	// This is particularly useful for:
	//   - Dynamic filter operations (e.g., "path__contains", "name__icontains")
	//   - Django-style query filters
	//   - Custom backend-specific parameters
	//
	// Example:
	//   params := &ReplicationStreamSearchParams{
	//       RawData: core.Params{"path__contains": "/foo", "name__icontains": "bar"},
	//   }
	//
	// Note: You can use either the typed fields or RawData, or combine both.
	RawData core.Params `json:"-" yaml:"-"`
}

// -----------------------------------------------------
// REQUEST BODY
// -----------------------------------------------------

// ReplicationStreamRequestBody represents the request body for ReplicationStream operations
type ReplicationStreamRequestBody struct {
	Name                  string  `json:"name,omitempty" yaml:"name,omitempty" required:"true" doc:""`
	Enabled               bool    `json:"enabled,omitempty" yaml:"enabled,omitempty" required:"false" doc:"Enable/pause replication stream"`
	IsManualPriorityScore bool    `json:"is_manual_priority_score,omitempty" yaml:"is_manual_priority_score,omitempty" required:"false" doc:"Indicates whether the priority score is set manually by a user."`
	PolicyId              string  `json:"policy_id,omitempty" yaml:"policy_id,omitempty" required:"false" doc:"replication policy id"`
	PriorityScore         float64 `json:"priority_score,omitempty" yaml:"priority_score,omitempty" required:"false" doc:"Indicates how close replication is to missing its RPO in relation to their current interval. A lower score means a higher priority."`
	ProtectedPathId       string  `json:"protected_path_id,omitempty" yaml:"protected_path_id,omitempty" required:"false" doc:"protected path id"`
	ProtectionPolicyId    string  `json:"protection_policy_id,omitempty" yaml:"protection_policy_id,omitempty" required:"false" doc:"Protection policy id"`
	RemoteTenantGuid      string  `json:"remote_tenant_guid,omitempty" yaml:"remote_tenant_guid,omitempty" required:"false" doc:"Remote tenant GUID of the remote path. If none given, the default tenant will be set"`
	SourceDir             string  `json:"source_dir,omitempty" yaml:"source_dir,omitempty" required:"false" doc:"Path to replicate"`
	TargetExportedDir     string  `json:"target_exported_dir,omitempty" yaml:"target_exported_dir,omitempty" required:"false" doc:"path to replicate to"`
	TenantId              float64 `json:"tenant_id,omitempty" yaml:"tenant_id,omitempty" required:"false" doc:"Local tenant ID of the local path. If none given, the default tenant will be set"`
}

// -----------------------------------------------------
// MODELS
// -----------------------------------------------------

// ReplicationStreamDetailsModel represents the detailed model returned by GET/List operations
// Type alias to component definition: #/components/schemas/ReplicationStream
type ReplicationStreamDetailsModel = Component_ReplicationStream

// ReplicationStreamUpsertModel represents the model returned by Create/Update operations
// Type alias to component definition: #/components/schemas/ReplicationStream
type ReplicationStreamUpsertModel = Component_ReplicationStream

// -----------------------------------------------------
// LIST
// -----------------------------------------------------

// List retrieves multiple replicationstreams with typed request/response
// summary: List Replication Streams
func (r *ReplicationStream) List(req *ReplicationStreamSearchParams) ([]*ReplicationStreamDetailsModel, error) {
	return r.ListWithContext(r.Untyped.GetCtx(), req)
}

// ListWithContext retrieves multiple replicationstreams with typed request/response using provided context
// summary: List Replication Streams
func (r *ReplicationStream) ListWithContext(ctx context.Context, req *ReplicationStreamSearchParams) ([]*ReplicationStreamDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.GetResourceMap()[r.GetResourceType()].ListWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response []*ReplicationStreamDetailsModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// Get retrieves a single replicationstream with typed request/response
// summary: List Replication Streams
func (r *ReplicationStream) Get(req *ReplicationStreamSearchParams) (*ReplicationStreamDetailsModel, error) {
	return r.GetWithContext(r.Untyped.GetCtx(), req)
}

// GetWithContext retrieves a single replicationstream with typed request/response using provided context
// summary: List Replication Streams
func (r *ReplicationStream) GetWithContext(ctx context.Context, req *ReplicationStreamSearchParams) (*ReplicationStreamDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response ReplicationStreamDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// READ
// -----------------------------------------------------

// GetById retrieves a single replicationstream by ID
// summary: Return Details of a Replication Stream
func (r *ReplicationStream) GetById(id any) (*ReplicationStreamDetailsModel, error) {
	return r.GetByIdWithContext(r.Untyped.GetCtx(), id)
}

// GetByIdWithContext retrieves a single replicationstream by ID using provided context
// summary: Return Details of a Replication Stream
func (r *ReplicationStream) GetByIdWithContext(ctx context.Context, id any) (*ReplicationStreamDetailsModel, error) {
	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetByIdWithContext(ctx, id)
	if err != nil {
		return nil, err
	}

	var response ReplicationStreamDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// CREATE
// -----------------------------------------------------

// Create creates a new replicationstream with typed request/response
// summary: Create Replication Stream
func (r *ReplicationStream) Create(req *ReplicationStreamRequestBody) (*ReplicationStreamUpsertModel, error) {
	return r.CreateWithContext(r.Untyped.GetCtx(), req)
}

// CreateWithContext creates a new replicationstream with typed request/response using provided context
// summary: Create Replication Stream
func (r *ReplicationStream) CreateWithContext(ctx context.Context, req *ReplicationStreamRequestBody) (*ReplicationStreamUpsertModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].CreateWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response ReplicationStreamUpsertModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// DELETE
// -----------------------------------------------------

// Delete deletes a replicationstream with search parameters
func (r *ReplicationStream) Delete(req *ReplicationStreamSearchParams) error {
	return r.DeleteWithContext(r.Untyped.GetCtx(), req)
}

// DeleteWithContext deletes a replicationstream with search parameters using provided context
func (r *ReplicationStream) DeleteWithContext(ctx context.Context, req *ReplicationStreamSearchParams) error {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return err
	}
	_, err = r.Untyped.GetResourceMap()[r.GetResourceType()].DeleteWithContext(ctx, params, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteById deletes a replicationstream by ID
// summary: Delete a Replication Stream
func (r *ReplicationStream) DeleteById(id any) error {
	return r.DeleteByIdWithContext(r.Untyped.GetCtx(), id)
}

// DeleteByIdWithContext deletes a replicationstream by ID using provided context
// summary: Delete a Replication Stream
func (r *ReplicationStream) DeleteByIdWithContext(ctx context.Context, id any) error {
	_, err := r.Untyped.GetResourceMap()[r.GetResourceType()].DeleteByIdWithContext(ctx, id, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// -----------------------------------------------------
// ENSURE
// -----------------------------------------------------

// Ensure ensures a replicationstream exists with typed response
func (r *ReplicationStream) Ensure(searchParams *ReplicationStreamSearchParams, body *ReplicationStreamRequestBody) (*ReplicationStreamUpsertModel, error) {
	return r.EnsureWithContext(r.Untyped.GetCtx(), searchParams, body)
}

// EnsureWithContext ensures a replicationstream exists with typed response using provided context
func (r *ReplicationStream) EnsureWithContext(ctx context.Context, searchParams *ReplicationStreamSearchParams, body *ReplicationStreamRequestBody) (*ReplicationStreamUpsertModel, error) {
	searchParamsConverted, err := core.NewParamsFromStruct(searchParams)
	if err != nil {
		return nil, err
	}
	bodyConverted, err := core.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].EnsureWithContext(ctx, searchParamsConverted, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response ReplicationStreamUpsertModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Exists checks if a replicationstream exists
func (r *ReplicationStream) Exists(req *ReplicationStreamSearchParams) (bool, error) {
	return r.ExistsWithContext(r.Untyped.GetCtx(), req)
}

// ExistsWithContext checks if a replicationstream exists using provided context
func (r *ReplicationStream) ExistsWithContext(ctx context.Context, req *ReplicationStreamSearchParams) (bool, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].ExistsWithContext(ctx, params)
}

// MustExists checks if a replicationstream exists and panics if not
func (r *ReplicationStream) MustExists(req *ReplicationStreamSearchParams) bool {
	return r.MustExistsWithContext(r.Untyped.GetCtx(), req)
}

// MustExistsWithContext checks if a replicationstream exists and panics if not using provided context
func (r *ReplicationStream) MustExistsWithContext(ctx context.Context, req *ReplicationStreamSearchParams) bool {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].MustExistsWithContext(ctx, params)
}

// -----------------------------------------------------
// GENERATION ISSUES
// -----------------------------------------------------
//   - UPDATE operation excluded: PATCH/PUT /replicationstreams/{id}/ has no response schema and doesn't return 204 NO CONTENT
