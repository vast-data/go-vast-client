// Code generated by generate-typed-resources. DO NOT EDIT.
// Template: LIST

package typed

import (
	"context"

	"github.com/vast-data/go-vast-client/core"
)

// -----------------------------------------------------
// RESOURCE TYPE
// -----------------------------------------------------

// LocalS3Key represents a typed resource for locals3key operations
type LocalS3Key struct {
	*core.TypedVastResource
}

// -----------------------------------------------------
// SEARCH PARAMS
// -----------------------------------------------------

// LocalS3KeySearchParams represents the search parameters for LocalS3Key operations
type LocalS3KeySearchParams struct {
	TenantId int64 `json:"tenant_id,omitempty" yaml:"tenant_id,omitempty" required:"false" doc:"Filter by tenant. Specify tenant ID."`
	UserId   int64 `json:"user_id,omitempty" yaml:"user_id,omitempty" required:"false" doc:"User id to filter by."`

	// RawData allows passing arbitrary search parameters as key-value pairs.
	//
	// Use this field when you need query parameters that are not covered by the typed fields above.
	// This is particularly useful for:
	//   - Dynamic filter operations (e.g., "path__contains", "name__icontains")
	//   - Django-style query filters
	//   - Custom backend-specific parameters
	//
	// Example:
	//   params := &LocalS3KeySearchParams{
	//       RawData: core.Params{"path__contains": "/foo", "name__icontains": "bar"},
	//   }
	//
	// Note: You can use either the typed fields or RawData, or combine both.
	RawData core.Params `json:"-" yaml:"-"`
}

// -----------------------------------------------------
// MODELS
// -----------------------------------------------------

// LocalS3KeyDetailsModel represents the detailed model returned by GET/List operations
// Type alias to component definition: #/components/schemas/S3Key
type LocalS3KeyDetailsModel = Component_S3Key

// -----------------------------------------------------
// LIST
// -----------------------------------------------------

// List retrieves multiple locals3keys with typed request/response
// summary: List Local S3 Keys
func (r *LocalS3Key) List(req *LocalS3KeySearchParams) ([]*LocalS3KeyDetailsModel, error) {
	return r.ListWithContext(r.Untyped.GetCtx(), req)
}

// ListWithContext retrieves multiple locals3keys with typed request/response using provided context
// summary: List Local S3 Keys
func (r *LocalS3Key) ListWithContext(ctx context.Context, req *LocalS3KeySearchParams) ([]*LocalS3KeyDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.GetResourceMap()[r.GetResourceType()].ListWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response []*LocalS3KeyDetailsModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// Get retrieves a single locals3key with typed request/response
// summary: List Local S3 Keys
func (r *LocalS3Key) Get(req *LocalS3KeySearchParams) (*LocalS3KeyDetailsModel, error) {
	return r.GetWithContext(r.Untyped.GetCtx(), req)
}

// GetWithContext retrieves a single locals3key with typed request/response using provided context
// summary: List Local S3 Keys
func (r *LocalS3Key) GetWithContext(ctx context.Context, req *LocalS3KeySearchParams) (*LocalS3KeyDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response LocalS3KeyDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Exists checks if a locals3key exists
func (r *LocalS3Key) Exists(req *LocalS3KeySearchParams) (bool, error) {
	return r.ExistsWithContext(r.Untyped.GetCtx(), req)
}

// ExistsWithContext checks if a locals3key exists using provided context
func (r *LocalS3Key) ExistsWithContext(ctx context.Context, req *LocalS3KeySearchParams) (bool, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].ExistsWithContext(ctx, params)
}

// MustExists checks if a locals3key exists and panics if not
func (r *LocalS3Key) MustExists(req *LocalS3KeySearchParams) bool {
	return r.MustExistsWithContext(r.Untyped.GetCtx(), req)
}

// MustExistsWithContext checks if a locals3key exists and panics if not using provided context
func (r *LocalS3Key) MustExistsWithContext(ctx context.Context, req *LocalS3KeySearchParams) bool {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].MustExistsWithContext(ctx, params)
}
