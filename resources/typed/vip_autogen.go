// Code generated by generate-typed-resources. DO NOT EDIT.
// Template: LIST|READ

package typed

import (
	"context"
	"fmt"
	"net/http"

	"github.com/vast-data/go-vast-client/core"
)

// -----------------------------------------------------
// RESOURCE TYPE
// -----------------------------------------------------

// Vip represents a typed resource for vip operations
type Vip struct {
	*core.TypedVastResource
}

// -----------------------------------------------------
// SEARCH PARAMS
// -----------------------------------------------------

// VipSearchParams represents the search parameters for Vip operations
type VipSearchParams struct {
	Guid string `json:"guid,omitempty" yaml:"guid,omitempty" required:"false" doc:""`
	Ip   string `json:"ip,omitempty" yaml:"ip,omitempty" required:"false" doc:"Filter by IP"`
	Name string `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:""`

	// RawData allows passing arbitrary search parameters as key-value pairs.
	//
	// Use this field when you need query parameters that are not covered by the typed fields above.
	// This is particularly useful for:
	//   - Dynamic filter operations (e.g., "path__contains", "name__icontains")
	//   - Django-style query filters
	//   - Custom backend-specific parameters
	//
	// Example:
	//   params := &VipSearchParams{
	//       RawData: core.Params{"path__contains": "/foo", "name__icontains": "bar"},
	//   }
	//
	// Note: You can use either the typed fields or RawData, or combine both.
	RawData core.Params `json:"-" yaml:"-"`
}

// -----------------------------------------------------
// MODELS
// -----------------------------------------------------

// VipDetailsModel represents the detailed model returned by GET/List operations
// Type alias to component definition: #/components/schemas/VIP
type VipDetailsModel = Component_VIP

// -----------------------------------------------------
// LIST
// -----------------------------------------------------

// List retrieves multiple vips with typed request/response
// summary: List VIPs
func (r *Vip) List(req *VipSearchParams) ([]*VipDetailsModel, error) {
	return r.ListWithContext(r.Untyped.GetCtx(), req)
}

// ListWithContext retrieves multiple vips with typed request/response using provided context
// summary: List VIPs
func (r *Vip) ListWithContext(ctx context.Context, req *VipSearchParams) ([]*VipDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.GetResourceMap()[r.GetResourceType()].ListWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response []*VipDetailsModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// Get retrieves a single vip with typed request/response
// summary: List VIPs
func (r *Vip) Get(req *VipSearchParams) (*VipDetailsModel, error) {
	return r.GetWithContext(r.Untyped.GetCtx(), req)
}

// GetWithContext retrieves a single vip with typed request/response using provided context
// summary: List VIPs
func (r *Vip) GetWithContext(ctx context.Context, req *VipSearchParams) (*VipDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response VipDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// READ
// -----------------------------------------------------

// GetById retrieves a single vip by ID
// summary: Return Details of a VIP
func (r *Vip) GetById(id any) (*VipDetailsModel, error) {
	return r.GetByIdWithContext(r.Untyped.GetCtx(), id)
}

// GetByIdWithContext retrieves a single vip by ID using provided context
// summary: Return Details of a VIP
func (r *Vip) GetByIdWithContext(ctx context.Context, id any) (*VipDetailsModel, error) {
	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetByIdWithContext(ctx, id)
	if err != nil {
		return nil, err
	}

	var response VipDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Exists checks if a vip exists
func (r *Vip) Exists(req *VipSearchParams) (bool, error) {
	return r.ExistsWithContext(r.Untyped.GetCtx(), req)
}

// ExistsWithContext checks if a vip exists using provided context
func (r *Vip) ExistsWithContext(ctx context.Context, req *VipSearchParams) (bool, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].ExistsWithContext(ctx, params)
}

// MustExists checks if a vip exists and panics if not
func (r *Vip) MustExists(req *VipSearchParams) bool {
	return r.MustExistsWithContext(r.Untyped.GetCtx(), req)
}

// MustExistsWithContext checks if a vip exists and panics if not using provided context
func (r *Vip) MustExistsWithContext(ctx context.Context, req *VipSearchParams) bool {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].MustExistsWithContext(ctx, params)
}

// -----------------------------------------------------
// EXTRA METHODS
// -----------------------------------------------------

// VipVipsItem represents a nested type for Vip extra method response
type VipVipsItem struct {
	Port int64  `json:"port,omitempty" yaml:"port,omitempty" required:"false" doc:"DB access port"`
	Vip  string `json:"vip,omitempty" yaml:"vip,omitempty" required:"false" doc:"DB access VIP"`
}

// VipVips_GET_Body represents the request body for VipVips
type VipVips_GET_Body struct {
	TenantId int64 `json:"tenant_id,omitempty" yaml:"tenant_id,omitempty" required:"false" doc:"Filter by tenant. Specify tenant ID."`
}

// VipVipsWithContext_GET
// method: GET
// url: /vastdb/vips/
// summary: Get a list of DB access VIPs
func (r *Vip) VipVipsWithContext_GET(ctx context.Context, params *VipVips_GET_Body) ([]VipVipsItem, error) {
	resourcePath := "/vastdb/vips/"

	reqParams, err := core.NewParamsFromStruct(params)
	if err != nil {
		return nil, err
	}
	var reqBody core.Params

	record, err := core.Request[core.RecordSet](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodGet, resourcePath, reqParams, reqBody)
	if err != nil {
		return nil, err
	}
	// Convert RecordSet ([]core.Record) to typed array ([]VipVipsItem)
	result := make([]VipVipsItem, len(record))
	for i, item := range record {
		if err := item.Fill(&result[i]); err != nil {
			return nil, fmt.Errorf("failed to unmarshal array item %d: %w", i, err)
		}
	}
	return result, nil

}

// VipVips_GET
// method: GET
// url: /vastdb/vips/
// summary: Get a list of DB access VIPs
func (r *Vip) VipVips_GET(params *VipVips_GET_Body) ([]VipVipsItem, error) {
	return r.VipVipsWithContext_GET(r.Untyped.GetCtx(), params)
}
