// Code generated by generate-typed-resources. DO NOT EDIT.
// Template: CREATE|LIST|READ|DELETE

package typed

import (
	"context"

	"github.com/vast-data/go-vast-client/core"
)

// -----------------------------------------------------
// RESOURCE TYPE
// -----------------------------------------------------

// Monitor represents a typed resource for monitor operations
type Monitor struct {
	*core.TypedVastResource
}

// -----------------------------------------------------
// SEARCH PARAMS
// -----------------------------------------------------

// MonitorSearchParams represents the search parameters for Monitor operations
type MonitorSearchParams struct {
	Name string `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:"Monitor name"`

	// RawData allows passing arbitrary search parameters as key-value pairs.
	//
	// Use this field when you need query parameters that are not covered by the typed fields above.
	// This is particularly useful for:
	//   - Dynamic filter operations (e.g., "path__contains", "name__icontains")
	//   - Django-style query filters
	//   - Custom backend-specific parameters
	//
	// Example:
	//   params := &MonitorSearchParams{
	//       RawData: core.Params{"path__contains": "/foo", "name__icontains": "bar"},
	//   }
	//
	// Note: You can use either the typed fields or RawData, or combine both.
	RawData core.Params `json:"-" yaml:"-"`
}

// -----------------------------------------------------
// REQUEST BODY
// -----------------------------------------------------

// MonitorRequestBody represents the request body for Monitor operations
type MonitorRequestBody struct {
	ObjectType  string `json:"object_type,omitempty" yaml:"object_type,omitempty" required:"true" doc:"The type of object to monitor."`
	Aggregation string `json:"aggregation,omitempty" yaml:"aggregation,omitempty" required:"false" doc:"If data granularity is minutes, hours or days, the data is aggregated. This parameter selects which aggregation function to use."`
	FromTime    string `json:"from_time,omitempty" yaml:"from_time,omitempty" required:"false" doc:"Start time of period to report. e.g. 2021-01-15T13:41:52Z"`
	Granularity string `json:"granularity,omitempty" yaml:"granularity,omitempty" required:"false" doc:"Data granularity: seconds (raw), minutes (five minute aggregated samples), hours (hourly aggregated samples), or days (daily aggregated samples)"`
	Name        string `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:"A name for the monitor."`
	ObjectIds   string `json:"object_ids,omitempty" yaml:"object_ids,omitempty" required:"false" doc:"Specific objects to include in the report, specified as a comma separated list of object IDs."`
	PropList    string `json:"prop_list,omitempty" yaml:"prop_list,omitempty" required:"false" doc:"A list of metrics to query. To get the full list of metrics, use GET /metrics/."`
	TimeFrame   string `json:"time_frame,omitempty" yaml:"time_frame,omitempty" required:"false" doc:"Default time frame to report over. Examples: 2h (2 hours), 1D (1 Day), 10m (10 minutes), 1M (1 month)"`
	ToTime      string `json:"to_time,omitempty" yaml:"to_time,omitempty" required:"false" doc:"End time of period to report. e.g. 2021-01-15T13:41:52Z"`
}

// -----------------------------------------------------
// MODELS
// -----------------------------------------------------

// MonitorDetailsModel represents the detailed model returned by GET/List operations
// Type alias to component definition: #/components/schemas/Monitor
type MonitorDetailsModel = Component_Monitor

// MonitorUpsertModel represents the model returned by Create/Update operations
// Type alias to component definition: #/components/schemas/Monitor
type MonitorUpsertModel = Component_Monitor

// -----------------------------------------------------
// LIST
// -----------------------------------------------------

// List retrieves multiple monitors with typed request/response
// summary: List Monitors
func (r *Monitor) List(req *MonitorSearchParams) ([]*MonitorDetailsModel, error) {
	return r.ListWithContext(r.Untyped.GetCtx(), req)
}

// ListWithContext retrieves multiple monitors with typed request/response using provided context
// summary: List Monitors
func (r *Monitor) ListWithContext(ctx context.Context, req *MonitorSearchParams) ([]*MonitorDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.GetResourceMap()[r.GetResourceType()].ListWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response []*MonitorDetailsModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// Get retrieves a single monitor with typed request/response
// summary: List Monitors
func (r *Monitor) Get(req *MonitorSearchParams) (*MonitorDetailsModel, error) {
	return r.GetWithContext(r.Untyped.GetCtx(), req)
}

// GetWithContext retrieves a single monitor with typed request/response using provided context
// summary: List Monitors
func (r *Monitor) GetWithContext(ctx context.Context, req *MonitorSearchParams) (*MonitorDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response MonitorDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// READ
// -----------------------------------------------------

// GetById retrieves a single monitor by ID
// summary: Return Details of an Analytics Report
func (r *Monitor) GetById(id any) (*MonitorDetailsModel, error) {
	return r.GetByIdWithContext(r.Untyped.GetCtx(), id)
}

// GetByIdWithContext retrieves a single monitor by ID using provided context
// summary: Return Details of an Analytics Report
func (r *Monitor) GetByIdWithContext(ctx context.Context, id any) (*MonitorDetailsModel, error) {
	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetByIdWithContext(ctx, id)
	if err != nil {
		return nil, err
	}

	var response MonitorDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// CREATE
// -----------------------------------------------------

// Create creates a new monitor with typed request/response
// summary: Create Custom Analytics Report (aka Monitor)
func (r *Monitor) Create(req *MonitorRequestBody) (*MonitorUpsertModel, error) {
	return r.CreateWithContext(r.Untyped.GetCtx(), req)
}

// CreateWithContext creates a new monitor with typed request/response using provided context
// summary: Create Custom Analytics Report (aka Monitor)
func (r *Monitor) CreateWithContext(ctx context.Context, req *MonitorRequestBody) (*MonitorUpsertModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].CreateWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response MonitorUpsertModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// DELETE
// -----------------------------------------------------

// Delete deletes a monitor with search parameters
func (r *Monitor) Delete(req *MonitorSearchParams) error {
	return r.DeleteWithContext(r.Untyped.GetCtx(), req)
}

// DeleteWithContext deletes a monitor with search parameters using provided context
func (r *Monitor) DeleteWithContext(ctx context.Context, req *MonitorSearchParams) error {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return err
	}
	_, err = r.Untyped.GetResourceMap()[r.GetResourceType()].DeleteWithContext(ctx, params, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteById deletes a monitor by ID
// summary: Delete Monitor (aka Analytics Report)
//
// Parameters:
//   - id: Monitor ID
func (r *Monitor) DeleteById(id any) error {
	return r.DeleteByIdWithContext(r.Untyped.GetCtx(), id)
}

// DeleteByIdWithContext deletes a monitor by ID using provided context
// summary: Delete Monitor (aka Analytics Report)
//
// Parameters:
//   - id: Monitor ID
func (r *Monitor) DeleteByIdWithContext(ctx context.Context, id any) error {
	_, err := r.Untyped.GetResourceMap()[r.GetResourceType()].DeleteByIdWithContext(ctx, id, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// -----------------------------------------------------
// ENSURE
// -----------------------------------------------------

// Ensure ensures a monitor exists with typed response
func (r *Monitor) Ensure(searchParams *MonitorSearchParams, body *MonitorRequestBody) (*MonitorUpsertModel, error) {
	return r.EnsureWithContext(r.Untyped.GetCtx(), searchParams, body)
}

// EnsureWithContext ensures a monitor exists with typed response using provided context
func (r *Monitor) EnsureWithContext(ctx context.Context, searchParams *MonitorSearchParams, body *MonitorRequestBody) (*MonitorUpsertModel, error) {
	searchParamsConverted, err := core.NewParamsFromStruct(searchParams)
	if err != nil {
		return nil, err
	}
	bodyConverted, err := core.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].EnsureWithContext(ctx, searchParamsConverted, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response MonitorUpsertModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Exists checks if a monitor exists
func (r *Monitor) Exists(req *MonitorSearchParams) (bool, error) {
	return r.ExistsWithContext(r.Untyped.GetCtx(), req)
}

// ExistsWithContext checks if a monitor exists using provided context
func (r *Monitor) ExistsWithContext(ctx context.Context, req *MonitorSearchParams) (bool, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].ExistsWithContext(ctx, params)
}

// MustExists checks if a monitor exists and panics if not
func (r *Monitor) MustExists(req *MonitorSearchParams) bool {
	return r.MustExistsWithContext(r.Untyped.GetCtx(), req)
}

// MustExistsWithContext checks if a monitor exists and panics if not using provided context
func (r *Monitor) MustExistsWithContext(ctx context.Context, req *MonitorSearchParams) bool {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].MustExistsWithContext(ctx, params)
}

// -----------------------------------------------------
// GENERATION ISSUES
// -----------------------------------------------------
//   - Extra method GET /monitors/ad_hoc_query/ skipped: GET /monitors/ad_hoc_query/ - Response schema contains ambiguous nested objects (objects with no properties)
//   - Extra method GET /monitors/topn/ skipped: GET /monitors/topn/ - Response schema contains ambiguous nested objects (objects with no properties)
//   - Extra method GET /monitors/{id}/query/ skipped: GET /monitors/{id}/query/ - Response schema contains ambiguous nested objects (objects with no properties)
//   - UPDATE operation excluded: PATCH/PUT /monitors/{id}/ has no response schema and doesn't return 204 NO CONTENT
