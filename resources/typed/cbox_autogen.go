// Code generated by generate-typed-resources. DO NOT EDIT.
// Template: LIST|READ|DELETE

package typed

import (
	"context"
	"net/http"
	"time"

	"github.com/vast-data/go-vast-client/core"
	"github.com/vast-data/go-vast-client/resources/untyped"
)

// -----------------------------------------------------
// RESOURCE TYPE
// -----------------------------------------------------

// Cbox represents a typed resource for cbox operations
type Cbox struct {
	*core.TypedVastResource
}

// -----------------------------------------------------
// SEARCH PARAMS
// -----------------------------------------------------

// CboxSearchParams represents the search parameters for Cbox operations
type CboxSearchParams struct {
	Name   string `json:"name,omitempty" yaml:"name,omitempty" required:"true" doc:""`
	Guid   string `json:"guid,omitempty" yaml:"guid,omitempty" required:"false" doc:""`
	RackId int64  `json:"rack_id,omitempty" yaml:"rack_id,omitempty" required:"false" doc:"Filter by Rack"`
	Uid    string `json:"uid,omitempty" yaml:"uid,omitempty" required:"false" doc:"Unique h/w identifier"`

	// RawData allows passing arbitrary search parameters as key-value pairs.
	//
	// Use this field when you need query parameters that are not covered by the typed fields above.
	// This is particularly useful for:
	//   - Dynamic filter operations (e.g., "path__contains", "name__icontains")
	//   - Django-style query filters
	//   - Custom backend-specific parameters
	//
	// Example:
	//   params := &CboxSearchParams{
	//       RawData: core.Params{"path__contains": "/foo", "name__icontains": "bar"},
	//   }
	//
	// Note: You can use either the typed fields or RawData, or combine both.
	RawData core.Params `json:"-" yaml:"-"`
}

// -----------------------------------------------------
// MODELS
// -----------------------------------------------------

// CboxDetailsModel represents the detailed model returned by GET/List operations
// Type alias to component definition: #/components/schemas/CBox
type CboxDetailsModel = Component_CBox

// -----------------------------------------------------
// LIST
// -----------------------------------------------------

// List retrieves multiple cboxs with typed request/response
// summary: List CBoxes
func (r *Cbox) List(req *CboxSearchParams) ([]*CboxDetailsModel, error) {
	return r.ListWithContext(r.Untyped.GetCtx(), req)
}

// ListWithContext retrieves multiple cboxs with typed request/response using provided context
// summary: List CBoxes
func (r *Cbox) ListWithContext(ctx context.Context, req *CboxSearchParams) ([]*CboxDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.GetResourceMap()[r.GetResourceType()].ListWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response []*CboxDetailsModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// Get retrieves a single cbox with typed request/response
// summary: List CBoxes
func (r *Cbox) Get(req *CboxSearchParams) (*CboxDetailsModel, error) {
	return r.GetWithContext(r.Untyped.GetCtx(), req)
}

// GetWithContext retrieves a single cbox with typed request/response using provided context
// summary: List CBoxes
func (r *Cbox) GetWithContext(ctx context.Context, req *CboxSearchParams) (*CboxDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response CboxDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// READ
// -----------------------------------------------------

// GetById retrieves a single cbox by ID
// summary: Return Details of a CBox
func (r *Cbox) GetById(id any) (*CboxDetailsModel, error) {
	return r.GetByIdWithContext(r.Untyped.GetCtx(), id)
}

// GetByIdWithContext retrieves a single cbox by ID using provided context
// summary: Return Details of a CBox
func (r *Cbox) GetByIdWithContext(ctx context.Context, id any) (*CboxDetailsModel, error) {
	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetByIdWithContext(ctx, id)
	if err != nil {
		return nil, err
	}

	var response CboxDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// DELETE
// -----------------------------------------------------

// Delete deletes a cbox with search parameters
func (r *Cbox) Delete(req *CboxSearchParams) error {
	return r.DeleteWithContext(r.Untyped.GetCtx(), req)
}

// DeleteWithContext deletes a cbox with search parameters using provided context
func (r *Cbox) DeleteWithContext(ctx context.Context, req *CboxSearchParams) error {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return err
	}
	_, err = r.Untyped.GetResourceMap()[r.GetResourceType()].DeleteWithContext(ctx, params, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteById deletes a cbox by ID
func (r *Cbox) DeleteById(id any) error {
	return r.DeleteByIdWithContext(r.Untyped.GetCtx(), id)
}

// DeleteByIdWithContext deletes a cbox by ID using provided context
func (r *Cbox) DeleteByIdWithContext(ctx context.Context, id any) error {
	_, err := r.Untyped.GetResourceMap()[r.GetResourceType()].DeleteByIdWithContext(ctx, id, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// Exists checks if a cbox exists
func (r *Cbox) Exists(req *CboxSearchParams) (bool, error) {
	return r.ExistsWithContext(r.Untyped.GetCtx(), req)
}

// ExistsWithContext checks if a cbox exists using provided context
func (r *Cbox) ExistsWithContext(ctx context.Context, req *CboxSearchParams) (bool, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].ExistsWithContext(ctx, params)
}

// MustExists checks if a cbox exists and panics if not
func (r *Cbox) MustExists(req *CboxSearchParams) bool {
	return r.MustExistsWithContext(r.Untyped.GetCtx(), req)
}

// MustExistsWithContext checks if a cbox exists and panics if not using provided context
func (r *Cbox) MustExistsWithContext(ctx context.Context, req *CboxSearchParams) bool {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].MustExistsWithContext(ctx, params)
}

// -----------------------------------------------------
// EXTRA METHODS
// -----------------------------------------------------

// CboxControlLedWithContext_PATCH
// method: PATCH
// url: /cboxes/{id}/control_led/
// summary: Control CBox LEDs
//
// Parameters:
//   - control (body): LED state
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (r *Cbox) CboxControlLedWithContext_PATCH(ctx context.Context, id any, control string, waitTimeout time.Duration) (*untyped.AsyncResult, error) {
	resourcePath := core.BuildResourcePathWithID("cboxes", id, "control_led")

	var reqParams core.Params
	reqBody := core.Params{}
	if control != "" {
		reqBody["control"] = control
	}

	result, err := core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodPatch, resourcePath, reqParams, reqBody)
	if err != nil {
		return nil, err
	}
	// Create async task from result
	task := untyped.NewAsyncResult(ctx, result.RecordID(), r.Untyped)
	// If waitTimeout is 0, return task immediately without waiting (async background operation)
	if waitTimeout == 0 {
		return task, nil
	}
	// Wait for task completion with the specified timeout
	if _, err := task.Wait(waitTimeout); err != nil {
		return task, err
	}
	return task, nil

}

// CboxControlLed_PATCH
// method: PATCH
// url: /cboxes/{id}/control_led/
// summary: Control CBox LEDs
//
// Parameters:
//   - control (body): LED state
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (r *Cbox) CboxControlLed_PATCH(id any, control string, waitTimeout time.Duration) (*untyped.AsyncResult, error) {
	return r.CboxControlLedWithContext_PATCH(r.Untyped.GetCtx(), id, control, waitTimeout)
}

// -----------------------------------------------------
// GENERATION ISSUES
// -----------------------------------------------------
//   - CREATE operation excluded: POST cboxes has no response schema and doesn't return 204 NO CONTENT
//   - Extra method PATCH /cboxes/{id}/refresh_uid/ skipped: PATCH /cboxes/{id}/refresh_uid/ - No response schema defined in OpenAPI spec. Error: no valid schema found in PATCH response (200/201/202) for resource /cboxes/{id}/refresh_uid/
//   - UPDATE operation excluded: PATCH/PUT /cboxes/{id}/ has no response schema and doesn't return 204 NO CONTENT
