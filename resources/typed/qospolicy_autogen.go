// Code generated by generate-typed-resources. DO NOT EDIT.
// Template: CREATE|LIST|READ|UPDATE|DELETE

package typed

import (
	"context"

	"github.com/vast-data/go-vast-client/core"
)

// -----------------------------------------------------
// RESOURCE TYPE
// -----------------------------------------------------

// QosPolicy represents a typed resource for qospolicy operations
type QosPolicy struct {
	*core.TypedVastResource
}

// -----------------------------------------------------
// SEARCH PARAMS
// -----------------------------------------------------

// QosPolicySearchParams represents the search parameters for QosPolicy operations
type QosPolicySearchParams struct {
	Name     string `json:"name,omitempty" yaml:"name,omitempty" required:"true" doc:""`
	Guid     string `json:"guid,omitempty" yaml:"guid,omitempty" required:"false" doc:"QoS Policy guid"`
	TenantId int64  `json:"tenant_id,omitempty" yaml:"tenant_id,omitempty" required:"false" doc:"Tenant ID"`

	// RawData allows passing arbitrary search parameters as key-value pairs.
	//
	// Use this field when you need query parameters that are not covered by the typed fields above.
	// This is particularly useful for:
	//   - Dynamic filter operations (e.g., "path__contains", "name__icontains")
	//   - Django-style query filters
	//   - Custom backend-specific parameters
	//
	// Example:
	//   params := &QosPolicySearchParams{
	//       RawData: core.Params{"path__contains": "/foo", "name__icontains": "bar"},
	//   }
	//
	// Note: You can use either the typed fields or RawData, or combine both.
	RawData core.Params `json:"-" yaml:"-"`
}

// -----------------------------------------------------
// REQUEST BODY
// -----------------------------------------------------

// QospolicieRequestBody_CapacityLimits represents a nested type for request body
type QospolicieRequestBody_CapacityLimits struct {
	MaxReadsBwMbpsPerGbCapacity  int64 `json:"max_reads_bw_mbps_per_gb_capacity,omitempty" yaml:"max_reads_bw_mbps_per_gb_capacity,omitempty" required:"false" doc:"Maximal amount of performance per GB to provide when there is no resource contention"`
	MaxReadsIopsPerGbCapacity    int64 `json:"max_reads_iops_per_gb_capacity,omitempty" yaml:"max_reads_iops_per_gb_capacity,omitempty" required:"false" doc:"Maximal amount of performance per GB to provide when there is no resource contention"`
	MaxWritesBwMbpsPerGbCapacity int64 `json:"max_writes_bw_mbps_per_gb_capacity,omitempty" yaml:"max_writes_bw_mbps_per_gb_capacity,omitempty" required:"false" doc:"Maximal amount of performance per GB to provide when there is no resource contention"`
	MaxWritesIopsPerGbCapacity   int64 `json:"max_writes_iops_per_gb_capacity,omitempty" yaml:"max_writes_iops_per_gb_capacity,omitempty" required:"false" doc:"Maximal amount of performance per GB to provide when there is no resource contention"`
}

// QospolicieRequestBody_CapacityTotalLimits represents a nested type for request body
type QospolicieRequestBody_CapacityTotalLimits struct {
	MaxBwMbpsPerGbCapacity int64 `json:"max_bw_mbps_per_gb_capacity,omitempty" yaml:"max_bw_mbps_per_gb_capacity,omitempty" required:"false" doc:"Maximal amount of performance per GB to provide when there is no resource contention"`
	MaxIopsPerGbCapacity   int64 `json:"max_iops_per_gb_capacity,omitempty" yaml:"max_iops_per_gb_capacity,omitempty" required:"false" doc:"Maximal amount of performance per GB to provide when there is no resource contention"`
}

// QospolicieRequestBody_StaticTotalLimits represents a nested type for request body
type QospolicieRequestBody_StaticTotalLimits struct {
	BurstBwMb     int64 `json:"burst_bw_mb,omitempty" yaml:"burst_bw_mb,omitempty" required:"false" doc:"Burst BW Mb"`
	BurstIops     int64 `json:"burst_iops,omitempty" yaml:"burst_iops,omitempty" required:"false" doc:"Burst IOPS"`
	BurstLoanIops int64 `json:"burst_loan_iops,omitempty" yaml:"burst_loan_iops,omitempty" required:"false" doc:"Burst loan IOPS"`
	BurstLoanMb   int64 `json:"burst_loan_mb,omitempty" yaml:"burst_loan_mb,omitempty" required:"false" doc:"Burst loan Mb"`
	MaxBwMbps     int64 `json:"max_bw_mbps,omitempty" yaml:"max_bw_mbps,omitempty" required:"false" doc:"Maximal BW Mb/s"`
	MaxIops       int64 `json:"max_iops,omitempty" yaml:"max_iops,omitempty" required:"false" doc:"Maximal IOPS"`
	MinBwMbps     int64 `json:"min_bw_mbps,omitempty" yaml:"min_bw_mbps,omitempty" required:"false" doc:"Minimal BW Mb/s"`
	MinIops       int64 `json:"min_iops,omitempty" yaml:"min_iops,omitempty" required:"false" doc:"Minimal IOPS"`
}

// QosPolicyRequestBody represents the request body for QosPolicy operations
type QosPolicyRequestBody struct {
	Name                string                                    `json:"name,omitempty" yaml:"name,omitempty" required:"true" doc:""`
	AttachedIamRoles    *[]int64                                  `json:"attached_iam_roles,omitempty" yaml:"attached_iam_roles,omitempty" required:"false" doc:"List of IAM Roles IDs which should be attached to that QOS Policy"`
	CapacityLimits      QospolicieRequestBody_CapacityLimits      `json:"capacity_limits,omitempty" yaml:"capacity_limits,omitempty" required:"false" doc:"Performance limits per unit of either used logical capacity or provisioned capacity, depending on the mode. Units are stated per limit. Valid values: 0-4294967296. 0 means unlimited."`
	CapacityTotalLimits QospolicieRequestBody_CapacityTotalLimits `json:"capacity_total_limits,omitempty" yaml:"capacity_total_limits,omitempty" required:"false" doc:""`
	IsDefault           bool                                      `json:"is_default,omitempty" yaml:"is_default,omitempty" required:"false" doc:"Is default User QOS Policy"`
	IsGold              bool                                      `json:"is_gold,omitempty" yaml:"is_gold,omitempty" required:"false" doc:"Grants priority QoS over views that do not have this setting enabled"`
	LimitBy             string                                    `json:"limit_by,omitempty" yaml:"limit_by,omitempty" required:"false" doc:"Parameter to limit by"`
	Mode                string                                    `json:"mode,omitempty" yaml:"mode,omitempty" required:"false" doc:"QoS provisioning mode"`
	PolicyType          string                                    `json:"policy_type,omitempty" yaml:"policy_type,omitempty" required:"false" doc:"QOS Policy type - VIEW or USER"`
	S3ConnectionsLimit  int64                                     `json:"s3_connections_limit,omitempty" yaml:"s3_connections_limit,omitempty" required:"false" doc:"Maximum number of allowed S3 connections, 0 means unlimited"`
	StaticLimits        string                                    `json:"static_limits,omitempty" yaml:"static_limits,omitempty" required:"false" doc:""`
	StaticTotalLimits   QospolicieRequestBody_StaticTotalLimits   `json:"static_total_limits,omitempty" yaml:"static_total_limits,omitempty" required:"false" doc:""`
	TenantId            int64                                     `json:"tenant_id,omitempty" yaml:"tenant_id,omitempty" required:"false" doc:"Tenant ID"`
	UseTotalLimits      bool                                      `json:"use_total_limits,omitempty" yaml:"use_total_limits,omitempty" required:"false" doc:"If true - total limits are used instead of separate read/write limits"`
}

// -----------------------------------------------------
// MODELS
// -----------------------------------------------------

// QosPolicyDetailsModel represents the detailed model returned by GET/List operations
// Type alias to component definition: #/components/schemas/QOSPolicy
type QosPolicyDetailsModel = Component_QOSPolicy

// QosPolicyUpsertModel represents the model returned by Create/Update operations
// Type alias to component definition: #/components/schemas/QOSPolicy
type QosPolicyUpsertModel = Component_QOSPolicy

// -----------------------------------------------------
// LIST
// -----------------------------------------------------

// List retrieves multiple qospolicys with typed request/response
// summary: List QoS Policies
func (r *QosPolicy) List(req *QosPolicySearchParams) ([]*QosPolicyDetailsModel, error) {
	return r.ListWithContext(r.Untyped.GetCtx(), req)
}

// ListWithContext retrieves multiple qospolicys with typed request/response using provided context
// summary: List QoS Policies
func (r *QosPolicy) ListWithContext(ctx context.Context, req *QosPolicySearchParams) ([]*QosPolicyDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.GetResourceMap()[r.GetResourceType()].ListWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response []*QosPolicyDetailsModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// Get retrieves a single qospolicy with typed request/response
// summary: List QoS Policies
func (r *QosPolicy) Get(req *QosPolicySearchParams) (*QosPolicyDetailsModel, error) {
	return r.GetWithContext(r.Untyped.GetCtx(), req)
}

// GetWithContext retrieves a single qospolicy with typed request/response using provided context
// summary: List QoS Policies
func (r *QosPolicy) GetWithContext(ctx context.Context, req *QosPolicySearchParams) (*QosPolicyDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response QosPolicyDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// READ
// -----------------------------------------------------

// GetById retrieves a single qospolicy by ID
// summary: Return Details of QoS Policy
func (r *QosPolicy) GetById(id any) (*QosPolicyDetailsModel, error) {
	return r.GetByIdWithContext(r.Untyped.GetCtx(), id)
}

// GetByIdWithContext retrieves a single qospolicy by ID using provided context
// summary: Return Details of QoS Policy
func (r *QosPolicy) GetByIdWithContext(ctx context.Context, id any) (*QosPolicyDetailsModel, error) {
	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetByIdWithContext(ctx, id)
	if err != nil {
		return nil, err
	}

	var response QosPolicyDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// CREATE
// -----------------------------------------------------

// Create creates a new qospolicy with typed request/response
// summary: Create QoS Policy
func (r *QosPolicy) Create(req *QosPolicyRequestBody) (*QosPolicyUpsertModel, error) {
	return r.CreateWithContext(r.Untyped.GetCtx(), req)
}

// CreateWithContext creates a new qospolicy with typed request/response using provided context
// summary: Create QoS Policy
func (r *QosPolicy) CreateWithContext(ctx context.Context, req *QosPolicyRequestBody) (*QosPolicyUpsertModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].CreateWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response QosPolicyUpsertModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// UPDATE
// -----------------------------------------------------

// Update updates an existing qospolicy with typed request/response
func (r *QosPolicy) Update(id any, req *QosPolicyRequestBody) (*QosPolicyUpsertModel, error) {
	return r.UpdateWithContext(r.Untyped.GetCtx(), id, req)
}

// UpdateWithContext updates an existing qospolicy with typed request/response using provided context
func (r *QosPolicy) UpdateWithContext(ctx context.Context, id any, req *QosPolicyRequestBody) (*QosPolicyUpsertModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].UpdateWithContext(ctx, id, params)
	if err != nil {
		return nil, err
	}

	var response QosPolicyUpsertModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// DELETE
// -----------------------------------------------------

// Delete deletes a qospolicy with search parameters
func (r *QosPolicy) Delete(req *QosPolicySearchParams) error {
	return r.DeleteWithContext(r.Untyped.GetCtx(), req)
}

// DeleteWithContext deletes a qospolicy with search parameters using provided context
func (r *QosPolicy) DeleteWithContext(ctx context.Context, req *QosPolicySearchParams) error {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return err
	}
	_, err = r.Untyped.GetResourceMap()[r.GetResourceType()].DeleteWithContext(ctx, params, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteById deletes a qospolicy by ID
// summary: Delete QoS Policy
func (r *QosPolicy) DeleteById(id any) error {
	return r.DeleteByIdWithContext(r.Untyped.GetCtx(), id)
}

// DeleteByIdWithContext deletes a qospolicy by ID using provided context
// summary: Delete QoS Policy
func (r *QosPolicy) DeleteByIdWithContext(ctx context.Context, id any) error {
	_, err := r.Untyped.GetResourceMap()[r.GetResourceType()].DeleteByIdWithContext(ctx, id, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// -----------------------------------------------------
// ENSURE
// -----------------------------------------------------

// Ensure ensures a qospolicy exists with typed response
func (r *QosPolicy) Ensure(searchParams *QosPolicySearchParams, body *QosPolicyRequestBody) (*QosPolicyUpsertModel, error) {
	return r.EnsureWithContext(r.Untyped.GetCtx(), searchParams, body)
}

// EnsureWithContext ensures a qospolicy exists with typed response using provided context
func (r *QosPolicy) EnsureWithContext(ctx context.Context, searchParams *QosPolicySearchParams, body *QosPolicyRequestBody) (*QosPolicyUpsertModel, error) {
	searchParamsConverted, err := core.NewParamsFromStruct(searchParams)
	if err != nil {
		return nil, err
	}
	bodyConverted, err := core.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].EnsureWithContext(ctx, searchParamsConverted, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response QosPolicyUpsertModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Exists checks if a qospolicy exists
func (r *QosPolicy) Exists(req *QosPolicySearchParams) (bool, error) {
	return r.ExistsWithContext(r.Untyped.GetCtx(), req)
}

// ExistsWithContext checks if a qospolicy exists using provided context
func (r *QosPolicy) ExistsWithContext(ctx context.Context, req *QosPolicySearchParams) (bool, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].ExistsWithContext(ctx, params)
}

// MustExists checks if a qospolicy exists and panics if not
func (r *QosPolicy) MustExists(req *QosPolicySearchParams) bool {
	return r.MustExistsWithContext(r.Untyped.GetCtx(), req)
}

// MustExistsWithContext checks if a qospolicy exists and panics if not using provided context
func (r *QosPolicy) MustExistsWithContext(ctx context.Context, req *QosPolicySearchParams) bool {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].MustExistsWithContext(ctx, params)
}
