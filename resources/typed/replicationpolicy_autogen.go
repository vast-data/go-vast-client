// Code generated by generate-typed-resources. DO NOT EDIT.
// Template: CREATE|LIST|READ|DELETE

package typed

import (
	"context"

	"github.com/vast-data/go-vast-client/core"
)

// -----------------------------------------------------
// RESOURCE TYPE
// -----------------------------------------------------

// ReplicationPolicy represents a typed resource for replicationpolicy operations
type ReplicationPolicy struct {
	*core.TypedVastResource
}

// -----------------------------------------------------
// SEARCH PARAMS
// -----------------------------------------------------

// ReplicationPolicySearchParams represents the search parameters for ReplicationPolicy operations
type ReplicationPolicySearchParams struct {
	Guid string `json:"guid,omitempty" yaml:"guid,omitempty" required:"false" doc:"unique identifier"`
	Name string `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:"Filter by replication policy name"`

	// RawData allows passing arbitrary search parameters as key-value pairs.
	//
	// Use this field when you need query parameters that are not covered by the typed fields above.
	// This is particularly useful for:
	//   - Dynamic filter operations (e.g., "path__contains", "name__icontains")
	//   - Django-style query filters
	//   - Custom backend-specific parameters
	//
	// Example:
	//   params := &ReplicationPolicySearchParams{
	//       RawData: core.Params{"path__contains": "/foo", "name__icontains": "bar"},
	//   }
	//
	// Note: You can use either the typed fields or RawData, or combine both.
	RawData core.Params `json:"-" yaml:"-"`
}

// -----------------------------------------------------
// REQUEST BODY
// -----------------------------------------------------

// ReplicationPolicyRequestBody represents the request body for ReplicationPolicy operations
type ReplicationPolicyRequestBody struct {
	Name                     string `json:"name,omitempty" yaml:"name,omitempty" required:"true" doc:""`
	ReplicationTargetId      int64  `json:"replication_target_id,omitempty" yaml:"replication_target_id,omitempty" required:"true" doc:"replication target id"`
	AwsPreferredStorage      string `json:"aws_preferred_storage,omitempty" yaml:"aws_preferred_storage,omitempty" required:"false" doc:"Amazon S3 / Amazon Glacier"`
	BandwidthLimitationRules string `json:"bandwidth_limitation_rules,omitempty" yaml:"bandwidth_limitation_rules,omitempty" required:"false" doc:"bandwith limitation rules"`
	Priority                 string `json:"priority,omitempty" yaml:"priority,omitempty" required:"false" doc:"low / normal / high"`
	ScheduleFrequency        string `json:"schedule_frequency,omitempty" yaml:"schedule_frequency,omitempty" required:"false" doc:"schedule frequency, in datetime format"`
	ScheduleStartTime        string `json:"schedule_start_time,omitempty" yaml:"schedule_start_time,omitempty" required:"false" doc:"Schedule the first restore point after the initial sync"`
}

// -----------------------------------------------------
// MODELS
// -----------------------------------------------------

// ReplicationPolicyDetailsModel represents the detailed model returned by GET/List operations
// Type alias to component definition: #/components/schemas/ReplicationPolicy
type ReplicationPolicyDetailsModel = Component_ReplicationPolicy

// ReplicationPolicyUpsertModel represents the model returned by Create/Update operations
// Type alias to component definition: #/components/schemas/ReplicationPolicy
type ReplicationPolicyUpsertModel = Component_ReplicationPolicy

// -----------------------------------------------------
// LIST
// -----------------------------------------------------

// List retrieves multiple replicationpolicys with typed request/response
// summary: List Replication Policies (deprecated from VAST Cluster 3.4)
func (r *ReplicationPolicy) List(req *ReplicationPolicySearchParams) ([]*ReplicationPolicyDetailsModel, error) {
	return r.ListWithContext(r.Untyped.GetCtx(), req)
}

// ListWithContext retrieves multiple replicationpolicys with typed request/response using provided context
// summary: List Replication Policies (deprecated from VAST Cluster 3.4)
func (r *ReplicationPolicy) ListWithContext(ctx context.Context, req *ReplicationPolicySearchParams) ([]*ReplicationPolicyDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.GetResourceMap()[r.GetResourceType()].ListWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response []*ReplicationPolicyDetailsModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// Get retrieves a single replicationpolicy with typed request/response
// summary: List Replication Policies (deprecated from VAST Cluster 3.4)
func (r *ReplicationPolicy) Get(req *ReplicationPolicySearchParams) (*ReplicationPolicyDetailsModel, error) {
	return r.GetWithContext(r.Untyped.GetCtx(), req)
}

// GetWithContext retrieves a single replicationpolicy with typed request/response using provided context
// summary: List Replication Policies (deprecated from VAST Cluster 3.4)
func (r *ReplicationPolicy) GetWithContext(ctx context.Context, req *ReplicationPolicySearchParams) (*ReplicationPolicyDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response ReplicationPolicyDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// READ
// -----------------------------------------------------

// GetById retrieves a single replicationpolicy by ID
// summary: Return Details of a Replication Policy (deprecated from VAST Cluster 3.4)
func (r *ReplicationPolicy) GetById(id any) (*ReplicationPolicyDetailsModel, error) {
	return r.GetByIdWithContext(r.Untyped.GetCtx(), id)
}

// GetByIdWithContext retrieves a single replicationpolicy by ID using provided context
// summary: Return Details of a Replication Policy (deprecated from VAST Cluster 3.4)
func (r *ReplicationPolicy) GetByIdWithContext(ctx context.Context, id any) (*ReplicationPolicyDetailsModel, error) {
	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetByIdWithContext(ctx, id)
	if err != nil {
		return nil, err
	}

	var response ReplicationPolicyDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// CREATE
// -----------------------------------------------------

// Create creates a new replicationpolicy with typed request/response
// summary: Create Replication Policy (deprecated from VAST Cluster 3.4)
func (r *ReplicationPolicy) Create(req *ReplicationPolicyRequestBody) (*ReplicationPolicyUpsertModel, error) {
	return r.CreateWithContext(r.Untyped.GetCtx(), req)
}

// CreateWithContext creates a new replicationpolicy with typed request/response using provided context
// summary: Create Replication Policy (deprecated from VAST Cluster 3.4)
func (r *ReplicationPolicy) CreateWithContext(ctx context.Context, req *ReplicationPolicyRequestBody) (*ReplicationPolicyUpsertModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].CreateWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response ReplicationPolicyUpsertModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// DELETE
// -----------------------------------------------------

// Delete deletes a replicationpolicy with search parameters
func (r *ReplicationPolicy) Delete(req *ReplicationPolicySearchParams) error {
	return r.DeleteWithContext(r.Untyped.GetCtx(), req)
}

// DeleteWithContext deletes a replicationpolicy with search parameters using provided context
func (r *ReplicationPolicy) DeleteWithContext(ctx context.Context, req *ReplicationPolicySearchParams) error {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return err
	}
	_, err = r.Untyped.GetResourceMap()[r.GetResourceType()].DeleteWithContext(ctx, params, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteById deletes a replicationpolicy by ID
// summary: Delete a Replication Policy (deprecated from VAST Cluster 3.4)
func (r *ReplicationPolicy) DeleteById(id any) error {
	return r.DeleteByIdWithContext(r.Untyped.GetCtx(), id)
}

// DeleteByIdWithContext deletes a replicationpolicy by ID using provided context
// summary: Delete a Replication Policy (deprecated from VAST Cluster 3.4)
func (r *ReplicationPolicy) DeleteByIdWithContext(ctx context.Context, id any) error {
	_, err := r.Untyped.GetResourceMap()[r.GetResourceType()].DeleteByIdWithContext(ctx, id, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// -----------------------------------------------------
// ENSURE
// -----------------------------------------------------

// Ensure ensures a replicationpolicy exists with typed response
func (r *ReplicationPolicy) Ensure(searchParams *ReplicationPolicySearchParams, body *ReplicationPolicyRequestBody) (*ReplicationPolicyUpsertModel, error) {
	return r.EnsureWithContext(r.Untyped.GetCtx(), searchParams, body)
}

// EnsureWithContext ensures a replicationpolicy exists with typed response using provided context
func (r *ReplicationPolicy) EnsureWithContext(ctx context.Context, searchParams *ReplicationPolicySearchParams, body *ReplicationPolicyRequestBody) (*ReplicationPolicyUpsertModel, error) {
	searchParamsConverted, err := core.NewParamsFromStruct(searchParams)
	if err != nil {
		return nil, err
	}
	bodyConverted, err := core.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].EnsureWithContext(ctx, searchParamsConverted, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response ReplicationPolicyUpsertModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Exists checks if a replicationpolicy exists
func (r *ReplicationPolicy) Exists(req *ReplicationPolicySearchParams) (bool, error) {
	return r.ExistsWithContext(r.Untyped.GetCtx(), req)
}

// ExistsWithContext checks if a replicationpolicy exists using provided context
func (r *ReplicationPolicy) ExistsWithContext(ctx context.Context, req *ReplicationPolicySearchParams) (bool, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].ExistsWithContext(ctx, params)
}

// MustExists checks if a replicationpolicy exists and panics if not
func (r *ReplicationPolicy) MustExists(req *ReplicationPolicySearchParams) bool {
	return r.MustExistsWithContext(r.Untyped.GetCtx(), req)
}

// MustExistsWithContext checks if a replicationpolicy exists and panics if not using provided context
func (r *ReplicationPolicy) MustExistsWithContext(ctx context.Context, req *ReplicationPolicySearchParams) bool {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].MustExistsWithContext(ctx, params)
}

// -----------------------------------------------------
// GENERATION ISSUES
// -----------------------------------------------------
//   - UPDATE operation excluded: PATCH/PUT /replicationpolicies/{id}/ has no response schema and doesn't return 204 NO CONTENT
