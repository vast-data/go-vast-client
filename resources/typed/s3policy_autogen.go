// Code generated by generate-typed-resources. DO NOT EDIT.
// Template: CREATE|LIST|READ|DELETE

package typed

import (
	"context"

	"github.com/vast-data/go-vast-client/core"
)

// -----------------------------------------------------
// RESOURCE TYPE
// -----------------------------------------------------

// S3Policy represents a typed resource for s3policy operations
type S3Policy struct {
	*core.TypedVastResource
}

// -----------------------------------------------------
// SEARCH PARAMS
// -----------------------------------------------------

// S3PolicySearchParams represents the search parameters for S3Policy operations
type S3PolicySearchParams struct {
	Name     string `json:"name,omitempty" yaml:"name,omitempty" required:"true" doc:"The name of the S3 identity policy."`
	Guid     string `json:"guid,omitempty" yaml:"guid,omitempty" required:"false" doc:""`
	TenantId int64  `json:"tenant_id,omitempty" yaml:"tenant_id,omitempty" required:"false" doc:""`

	// RawData allows passing arbitrary search parameters as key-value pairs.
	//
	// Use this field when you need query parameters that are not covered by the typed fields above.
	// This is particularly useful for:
	//   - Dynamic filter operations (e.g., "path__contains", "name__icontains")
	//   - Django-style query filters
	//   - Custom backend-specific parameters
	//
	// Example:
	//   params := &S3PolicySearchParams{
	//       RawData: core.Params{"path__contains": "/foo", "name__icontains": "bar"},
	//   }
	//
	// Note: You can use either the typed fields or RawData, or combine both.
	RawData core.Params `json:"-" yaml:"-"`
}

// -----------------------------------------------------
// REQUEST BODY
// -----------------------------------------------------

// S3PolicyRequestBody represents the request body for S3Policy operations
type S3PolicyRequestBody struct {
	Name     string `json:"name,omitempty" yaml:"name,omitempty" required:"true" doc:"A name for the S3 identity policy"`
	Policy   string `json:"policy,omitempty" yaml:"policy,omitempty" required:"true" doc:"JSON policy"`
	TenantId int64  `json:"tenant_id,omitempty" yaml:"tenant_id,omitempty" required:"false" doc:"Tenant ID"`
}

// -----------------------------------------------------
// MODELS
// -----------------------------------------------------

// S3PolicyDetailsModel represents the detailed model returned by GET/List operations
// Type alias to component definition: #/components/schemas/S3Policy
type S3PolicyDetailsModel = Component_S3Policy

// S3PolicyUpsertModel represents the model returned by Create/Update operations
// Type alias to component definition: #/components/schemas/S3Policy
type S3PolicyUpsertModel = Component_S3Policy

// -----------------------------------------------------
// LIST
// -----------------------------------------------------

// List retrieves multiple s3policys with typed request/response
// summary: List S3 policies
func (r *S3Policy) List(req *S3PolicySearchParams) ([]*S3PolicyDetailsModel, error) {
	return r.ListWithContext(r.Untyped.GetCtx(), req)
}

// ListWithContext retrieves multiple s3policys with typed request/response using provided context
// summary: List S3 policies
func (r *S3Policy) ListWithContext(ctx context.Context, req *S3PolicySearchParams) ([]*S3PolicyDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.GetResourceMap()[r.GetResourceType()].ListWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response []*S3PolicyDetailsModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// Get retrieves a single s3policy with typed request/response
// summary: List S3 policies
func (r *S3Policy) Get(req *S3PolicySearchParams) (*S3PolicyDetailsModel, error) {
	return r.GetWithContext(r.Untyped.GetCtx(), req)
}

// GetWithContext retrieves a single s3policy with typed request/response using provided context
// summary: List S3 policies
func (r *S3Policy) GetWithContext(ctx context.Context, req *S3PolicySearchParams) (*S3PolicyDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response S3PolicyDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// READ
// -----------------------------------------------------

// GetById retrieves a single s3policy by ID
// summary: Return details of an S3 identity policy
func (r *S3Policy) GetById(id any) (*S3PolicyDetailsModel, error) {
	return r.GetByIdWithContext(r.Untyped.GetCtx(), id)
}

// GetByIdWithContext retrieves a single s3policy by ID using provided context
// summary: Return details of an S3 identity policy
func (r *S3Policy) GetByIdWithContext(ctx context.Context, id any) (*S3PolicyDetailsModel, error) {
	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetByIdWithContext(ctx, id)
	if err != nil {
		return nil, err
	}

	var response S3PolicyDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// CREATE
// -----------------------------------------------------

// Create creates a new s3policy with typed request/response
// summary: Create an Identity Policy
func (r *S3Policy) Create(req *S3PolicyRequestBody) (*S3PolicyUpsertModel, error) {
	return r.CreateWithContext(r.Untyped.GetCtx(), req)
}

// CreateWithContext creates a new s3policy with typed request/response using provided context
// summary: Create an Identity Policy
func (r *S3Policy) CreateWithContext(ctx context.Context, req *S3PolicyRequestBody) (*S3PolicyUpsertModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].CreateWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response S3PolicyUpsertModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// DELETE
// -----------------------------------------------------

// Delete deletes a s3policy with search parameters
func (r *S3Policy) Delete(req *S3PolicySearchParams) error {
	return r.DeleteWithContext(r.Untyped.GetCtx(), req)
}

// DeleteWithContext deletes a s3policy with search parameters using provided context
func (r *S3Policy) DeleteWithContext(ctx context.Context, req *S3PolicySearchParams) error {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return err
	}
	_, err = r.Untyped.GetResourceMap()[r.GetResourceType()].DeleteWithContext(ctx, params, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteById deletes a s3policy by ID
// summary: Delete an S3 Identity Policy
//
// Parameters:
//   - id: The ID of the S3 identity policy.
func (r *S3Policy) DeleteById(id any) error {
	return r.DeleteByIdWithContext(r.Untyped.GetCtx(), id)
}

// DeleteByIdWithContext deletes a s3policy by ID using provided context
// summary: Delete an S3 Identity Policy
//
// Parameters:
//   - id: The ID of the S3 identity policy.
func (r *S3Policy) DeleteByIdWithContext(ctx context.Context, id any) error {
	_, err := r.Untyped.GetResourceMap()[r.GetResourceType()].DeleteByIdWithContext(ctx, id, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// -----------------------------------------------------
// ENSURE
// -----------------------------------------------------

// Ensure ensures a s3policy exists with typed response
func (r *S3Policy) Ensure(searchParams *S3PolicySearchParams, body *S3PolicyRequestBody) (*S3PolicyUpsertModel, error) {
	return r.EnsureWithContext(r.Untyped.GetCtx(), searchParams, body)
}

// EnsureWithContext ensures a s3policy exists with typed response using provided context
func (r *S3Policy) EnsureWithContext(ctx context.Context, searchParams *S3PolicySearchParams, body *S3PolicyRequestBody) (*S3PolicyUpsertModel, error) {
	searchParamsConverted, err := core.NewParamsFromStruct(searchParams)
	if err != nil {
		return nil, err
	}
	bodyConverted, err := core.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].EnsureWithContext(ctx, searchParamsConverted, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response S3PolicyUpsertModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Exists checks if a s3policy exists
func (r *S3Policy) Exists(req *S3PolicySearchParams) (bool, error) {
	return r.ExistsWithContext(r.Untyped.GetCtx(), req)
}

// ExistsWithContext checks if a s3policy exists using provided context
func (r *S3Policy) ExistsWithContext(ctx context.Context, req *S3PolicySearchParams) (bool, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].ExistsWithContext(ctx, params)
}

// MustExists checks if a s3policy exists and panics if not
func (r *S3Policy) MustExists(req *S3PolicySearchParams) bool {
	return r.MustExistsWithContext(r.Untyped.GetCtx(), req)
}

// MustExistsWithContext checks if a s3policy exists and panics if not using provided context
func (r *S3Policy) MustExistsWithContext(ctx context.Context, req *S3PolicySearchParams) bool {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].MustExistsWithContext(ctx, params)
}

// -----------------------------------------------------
// GENERATION ISSUES
// -----------------------------------------------------
//   - UPDATE operation excluded: PATCH/PUT /s3policies/{id}/ has no response schema and doesn't return 204 NO CONTENT
