// Code generated by generate-typed-resources. DO NOT EDIT.
// Template: EXTRA_METHODS_ONLY

package typed

import (
	"context"
	"fmt"
	"net/http"

	"github.com/vast-data/go-vast-client/core"
)

// VastAuditLog provides typed access to VastAuditLog extra methods
type VastAuditLog struct {
	*core.TypedVastResource
}

// -----------------------------------------------------
// EXTRA METHODS
// -----------------------------------------------------

// VastAuditLogColumnsItem represents a nested type for VastAuditLog extra method response
type VastAuditLogColumnsItem struct {
	DatabaseName string `json:"database_name,omitempty" yaml:"database_name,omitempty" required:"true" doc:"Name of the Database"`
	Name         string `json:"name,omitempty" yaml:"name,omitempty" required:"true" doc:"Name of the object"`
	RawField     string `json:"raw_field,omitempty" yaml:"raw_field,omitempty" required:"true" doc:"Raw description of column type"`
	SchemaName   string `json:"schema_name,omitempty" yaml:"schema_name,omitempty" required:"true" doc:"Name of the Schema"`
	TableName    string `json:"table_name,omitempty" yaml:"table_name,omitempty" required:"true" doc:"Name of the Table"`
}

// VastAuditLogColumnsWithContext_GET
// method: GET
// url: /vastauditlog/columns/
// summary: Returns VAST Audit Log columns
func (r *VastAuditLog) VastAuditLogColumnsWithContext_GET(ctx context.Context) ([]VastAuditLogColumnsItem, error) {
	resourcePath := "/vastauditlog/columns/"

	var reqParams core.Params
	var reqBody core.Params

	record, err := core.Request[core.RecordSet](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodGet, resourcePath, reqParams, reqBody)
	if err != nil {
		return nil, err
	}
	// Convert RecordSet ([]core.Record) to typed array ([]VastAuditLogColumnsItem)
	result := make([]VastAuditLogColumnsItem, len(record))
	for i, item := range record {
		if err := item.Fill(&result[i]); err != nil {
			return nil, fmt.Errorf("failed to unmarshal array item %d: %w", i, err)
		}
	}
	return result, nil

}

// VastAuditLogColumns_GET
// method: GET
// url: /vastauditlog/columns/
// summary: Returns VAST Audit Log columns
func (r *VastAuditLog) VastAuditLogColumns_GET() ([]VastAuditLogColumnsItem, error) {
	return r.VastAuditLogColumnsWithContext_GET(r.Untyped.GetCtx())
}

// VastAuditLogQueryData_GET_Body represents the request body for VastAuditLogQueryData
type VastAuditLogQueryData_GET_Body struct {
	Filters string `json:"filters,omitempty" yaml:"filters,omitempty" required:"false" doc:"URL-encoded JSON-string - actually an encoded mapping. Keys are column names. E.g. '{\"creation_time\": [{\"gt\": \"1727863200000\"}, {\"lt\": \"1729591200000\"}], \"atime\": [{\"gt\": \"1727776800000\", \"lt\": \"1729591200000\"}]}''. Elements within a list per column are OR'ed, elements withing a map inside a list are AND'ed."`
	Limit   int64  `json:"limit,omitempty" yaml:"limit,omitempty" required:"false" doc:""`
}

// VastAuditLogQueryDataWithContext_GET
// method: GET
// url: /vastauditlog/query_data/
// summary: Queries data based on provided params
func (r *VastAuditLog) VastAuditLogQueryDataWithContext_GET(ctx context.Context, params *VastAuditLogQueryData_GET_Body) (string, error) {
	resourcePath := "/vastauditlog/query_data/"

	reqParams, err := core.NewParamsFromStruct(params)
	if err != nil {
		return "", err
	}
	var reqBody core.Params

	record, err := core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodGet, resourcePath, reqParams, reqBody)
	if err != nil {
		return "", err
	}
	// Extract primitive response from @raw key
	if rawVal, ok := record["@raw"]; ok {
		if rawBytes, ok := rawVal.([]byte); ok {
			return string(rawBytes), nil
		}
		return fmt.Sprintf("%v", rawVal), nil
	}
	return "", fmt.Errorf("@raw key not found in response")

}

// VastAuditLogQueryData_GET
// method: GET
// url: /vastauditlog/query_data/
// summary: Queries data based on provided params
func (r *VastAuditLog) VastAuditLogQueryData_GET(params *VastAuditLogQueryData_GET_Body) (string, error) {
	return r.VastAuditLogQueryDataWithContext_GET(r.Untyped.GetCtx(), params)
}

// VastAuditLogStats_GET_Model represents the response model for VastAuditLogStats
type VastAuditLogStats_GET_Model struct {
	CountColumns int64 `json:"count_columns,omitempty" yaml:"count_columns,omitempty" required:"false" doc:""`
	CountRows    int64 `json:"count_rows,omitempty" yaml:"count_rows,omitempty" required:"false" doc:""`
}

// VastAuditLogStatsWithContext_GET
// method: GET
// url: /vastauditlog/stats/
// summary: Returns information about VAST Audit Log stats
func (r *VastAuditLog) VastAuditLogStatsWithContext_GET(ctx context.Context) (*VastAuditLogStats_GET_Model, error) {
	resourcePath := "/vastauditlog/stats/"

	var reqParams core.Params
	var reqBody core.Params

	record, err := core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodGet, resourcePath, reqParams, reqBody)
	if err != nil {
		return nil, err
	}

	var response VastAuditLogStats_GET_Model
	if err := record.Fill(&response); err != nil {
		return nil, err
	}
	return &response, nil

}

// VastAuditLogStats_GET
// method: GET
// url: /vastauditlog/stats/
// summary: Returns information about VAST Audit Log stats
func (r *VastAuditLog) VastAuditLogStats_GET() (*VastAuditLogStats_GET_Model, error) {
	return r.VastAuditLogStatsWithContext_GET(r.Untyped.GetCtx())
}

// -----------------------------------------------------
// GENERATION ISSUES
// -----------------------------------------------------
//   - CREATE operation excluded: POST vastauditlog has no response schema and doesn't return 204 NO CONTENT
