// Code generated by generate-typed-resources. DO NOT EDIT.
// Template: CREATE|LIST|READ|UPDATE|DELETE

package typed

import (
	"context"
	"net/http"

	"github.com/vast-data/go-vast-client/core"
)

// -----------------------------------------------------
// RESOURCE TYPE
// -----------------------------------------------------

// IamRole represents a typed resource for iamrole operations
type IamRole struct {
	*core.TypedVastResource
}

// -----------------------------------------------------
// SEARCH PARAMS
// -----------------------------------------------------

// IamRoleSearchParams represents the search parameters for IamRole operations
type IamRoleSearchParams struct {
	Guid string `json:"guid,omitempty" yaml:"guid,omitempty" required:"false" doc:""`
	Name string `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:""`

	// RawData allows passing arbitrary search parameters as key-value pairs.
	//
	// Use this field when you need query parameters that are not covered by the typed fields above.
	// This is particularly useful for:
	//   - Dynamic filter operations (e.g., "path__contains", "name__icontains")
	//   - Django-style query filters
	//   - Custom backend-specific parameters
	//
	// Example:
	//   params := &IamRoleSearchParams{
	//       RawData: core.Params{"path__contains": "/foo", "name__icontains": "bar"},
	//   }
	//
	// Note: You can use either the typed fields or RawData, or combine both.
	RawData core.Params `json:"-" yaml:"-"`
}

// -----------------------------------------------------
// REQUEST BODY
// -----------------------------------------------------

// IamRoleRequestBody represents the request body for IamRole operations
type IamRoleRequestBody struct {
	Name        string   `json:"name,omitempty" yaml:"name,omitempty" required:"true" doc:""`
	TrustPolicy string   `json:"trust_policy,omitempty" yaml:"trust_policy,omitempty" required:"true" doc:"JSON Policy"`
	Description string   `json:"description,omitempty" yaml:"description,omitempty" required:"false" doc:""`
	S3Policies  *[]int64 `json:"s3_policies,omitempty" yaml:"s3_policies,omitempty" required:"false" doc:"List of Identity Policy IDs"`
	TenantId    int64    `json:"tenant_id,omitempty" yaml:"tenant_id,omitempty" required:"false" doc:""`
}

// -----------------------------------------------------
// MODELS
// -----------------------------------------------------

// IamRoleDetailsModel represents the detailed model returned by GET/List operations
// Type alias to component definition: #/components/schemas/IAMRole
type IamRoleDetailsModel = Component_IAMRole

// IamRoleUpsertModel represents the model returned by Create/Update operations
// Type alias to component definition: #/components/schemas/IAMRole
type IamRoleUpsertModel = Component_IAMRole

// -----------------------------------------------------
// LIST
// -----------------------------------------------------

// List retrieves multiple iamroles with typed request/response
// summary: List Identity and Access Management Roles
func (r *IamRole) List(req *IamRoleSearchParams) ([]*IamRoleDetailsModel, error) {
	return r.ListWithContext(r.Untyped.GetCtx(), req)
}

// ListWithContext retrieves multiple iamroles with typed request/response using provided context
// summary: List Identity and Access Management Roles
func (r *IamRole) ListWithContext(ctx context.Context, req *IamRoleSearchParams) ([]*IamRoleDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.GetResourceMap()[r.GetResourceType()].ListWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response []*IamRoleDetailsModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// Get retrieves a single iamrole with typed request/response
// summary: List Identity and Access Management Roles
func (r *IamRole) Get(req *IamRoleSearchParams) (*IamRoleDetailsModel, error) {
	return r.GetWithContext(r.Untyped.GetCtx(), req)
}

// GetWithContext retrieves a single iamrole with typed request/response using provided context
// summary: List Identity and Access Management Roles
func (r *IamRole) GetWithContext(ctx context.Context, req *IamRoleSearchParams) (*IamRoleDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response IamRoleDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// READ
// -----------------------------------------------------

// GetById retrieves a single iamrole by ID
// summary: Return Details of a IAM Role
func (r *IamRole) GetById(id any) (*IamRoleDetailsModel, error) {
	return r.GetByIdWithContext(r.Untyped.GetCtx(), id)
}

// GetByIdWithContext retrieves a single iamrole by ID using provided context
// summary: Return Details of a IAM Role
func (r *IamRole) GetByIdWithContext(ctx context.Context, id any) (*IamRoleDetailsModel, error) {
	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetByIdWithContext(ctx, id)
	if err != nil {
		return nil, err
	}

	var response IamRoleDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// CREATE
// -----------------------------------------------------

// Create creates a new iamrole with typed request/response
// summary: Create IAM Role
func (r *IamRole) Create(req *IamRoleRequestBody) (*IamRoleUpsertModel, error) {
	return r.CreateWithContext(r.Untyped.GetCtx(), req)
}

// CreateWithContext creates a new iamrole with typed request/response using provided context
// summary: Create IAM Role
func (r *IamRole) CreateWithContext(ctx context.Context, req *IamRoleRequestBody) (*IamRoleUpsertModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].CreateWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response IamRoleUpsertModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// UPDATE
// -----------------------------------------------------

// Update updates an existing iamrole with typed request/response
func (r *IamRole) Update(id any, req *IamRoleRequestBody) (*IamRoleUpsertModel, error) {
	return r.UpdateWithContext(r.Untyped.GetCtx(), id, req)
}

// UpdateWithContext updates an existing iamrole with typed request/response using provided context
func (r *IamRole) UpdateWithContext(ctx context.Context, id any, req *IamRoleRequestBody) (*IamRoleUpsertModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].UpdateWithContext(ctx, id, params)
	if err != nil {
		return nil, err
	}

	var response IamRoleUpsertModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// DELETE
// -----------------------------------------------------

// Delete deletes a iamrole with search parameters
func (r *IamRole) Delete(req *IamRoleSearchParams) error {
	return r.DeleteWithContext(r.Untyped.GetCtx(), req)
}

// DeleteWithContext deletes a iamrole with search parameters using provided context
func (r *IamRole) DeleteWithContext(ctx context.Context, req *IamRoleSearchParams) error {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return err
	}
	_, err = r.Untyped.GetResourceMap()[r.GetResourceType()].DeleteWithContext(ctx, params, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteById deletes a iamrole by ID
// summary: Delete IAM Role
//
// Parameters:
//   - id: IAM Role ID
func (r *IamRole) DeleteById(id any) error {
	return r.DeleteByIdWithContext(r.Untyped.GetCtx(), id)
}

// DeleteByIdWithContext deletes a iamrole by ID using provided context
// summary: Delete IAM Role
//
// Parameters:
//   - id: IAM Role ID
func (r *IamRole) DeleteByIdWithContext(ctx context.Context, id any) error {
	_, err := r.Untyped.GetResourceMap()[r.GetResourceType()].DeleteByIdWithContext(ctx, id, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// -----------------------------------------------------
// ENSURE
// -----------------------------------------------------

// Ensure ensures a iamrole exists with typed response
func (r *IamRole) Ensure(searchParams *IamRoleSearchParams, body *IamRoleRequestBody) (*IamRoleUpsertModel, error) {
	return r.EnsureWithContext(r.Untyped.GetCtx(), searchParams, body)
}

// EnsureWithContext ensures a iamrole exists with typed response using provided context
func (r *IamRole) EnsureWithContext(ctx context.Context, searchParams *IamRoleSearchParams, body *IamRoleRequestBody) (*IamRoleUpsertModel, error) {
	searchParamsConverted, err := core.NewParamsFromStruct(searchParams)
	if err != nil {
		return nil, err
	}
	bodyConverted, err := core.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].EnsureWithContext(ctx, searchParamsConverted, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response IamRoleUpsertModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Exists checks if a iamrole exists
func (r *IamRole) Exists(req *IamRoleSearchParams) (bool, error) {
	return r.ExistsWithContext(r.Untyped.GetCtx(), req)
}

// ExistsWithContext checks if a iamrole exists using provided context
func (r *IamRole) ExistsWithContext(ctx context.Context, req *IamRoleSearchParams) (bool, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].ExistsWithContext(ctx, params)
}

// MustExists checks if a iamrole exists and panics if not
func (r *IamRole) MustExists(req *IamRoleSearchParams) bool {
	return r.MustExistsWithContext(r.Untyped.GetCtx(), req)
}

// MustExistsWithContext checks if a iamrole exists and panics if not using provided context
func (r *IamRole) MustExistsWithContext(ctx context.Context, req *IamRoleSearchParams) bool {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].MustExistsWithContext(ctx, params)
}

// -----------------------------------------------------
// EXTRA METHODS
// -----------------------------------------------------

// IamRoleCredentials_GET_Body represents the request body for IamRoleCredentials
type IamRoleCredentials_GET_Body struct {
	AccessKey string `json:"access_key,omitempty" yaml:"access_key,omitempty" required:"false" doc:""`
}

// IamRoleCredentials_GET_Model represents the response model for IamRoleCredentials
type IamRoleCredentials_GET_Model struct {
	KeyExpirationSec int64  `json:"key_expiration_sec,omitempty" yaml:"key_expiration_sec,omitempty" required:"false" doc:""`
	SessionPolicy    string `json:"session_policy,omitempty" yaml:"session_policy,omitempty" required:"false" doc:""`
	Username         string `json:"username,omitempty" yaml:"username,omitempty" required:"false" doc:""`
}

// IamRoleCredentialsWithContext_GET
// method: GET
// url: /iamroles/{id}/credentials/
// summary: Get STS credentials of specified IAM Role.
func (r *IamRole) IamRoleCredentialsWithContext_GET(ctx context.Context, id any, params *IamRoleCredentials_GET_Body) (*IamRoleCredentials_GET_Model, error) {
	resourcePath := core.BuildResourcePathWithID("iamroles", id, "credentials")

	reqParams, err := core.NewParamsFromStruct(params)
	if err != nil {
		return nil, err
	}
	var reqBody core.Params

	record, err := core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodGet, resourcePath, reqParams, reqBody)
	if err != nil {
		return nil, err
	}

	var response IamRoleCredentials_GET_Model
	if err := record.Fill(&response); err != nil {
		return nil, err
	}
	return &response, nil

}

// IamRoleCredentials_GET
// method: GET
// url: /iamroles/{id}/credentials/
// summary: Get STS credentials of specified IAM Role.
func (r *IamRole) IamRoleCredentials_GET(id any, params *IamRoleCredentials_GET_Body) (*IamRoleCredentials_GET_Model, error) {
	return r.IamRoleCredentialsWithContext_GET(r.Untyped.GetCtx(), id, params)
}
