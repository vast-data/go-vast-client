// Code generated by generate-typed-resources. DO NOT EDIT.
// Template: CREATE|LIST|READ|DELETE

package typed

import (
	"context"
	"net/http"

	"github.com/vast-data/go-vast-client/core"
)

// -----------------------------------------------------
// RESOURCE TYPE
// -----------------------------------------------------

// VpnTunnel represents a typed resource for vpntunnel operations
type VpnTunnel struct {
	*core.TypedVastResource
}

// -----------------------------------------------------
// SEARCH PARAMS
// -----------------------------------------------------

// VpnTunnelSearchParams represents the search parameters for VpnTunnel operations
type VpnTunnelSearchParams struct {

	// RawData allows passing arbitrary search parameters as key-value pairs.
	//
	// Use this field when you need query parameters that are not covered by the typed fields above.
	// This is particularly useful for:
	//   - Dynamic filter operations (e.g., "path__contains", "name__icontains")
	//   - Django-style query filters
	//   - Custom backend-specific parameters
	//
	// Example:
	//   params := &VpnTunnelSearchParams{
	//       RawData: core.Params{"path__contains": "/foo", "name__icontains": "bar"},
	//   }
	//
	// Note: You can use either the typed fields or RawData, or combine both.
	RawData core.Params `json:"-" yaml:"-"`
}

// -----------------------------------------------------
// REQUEST BODY
// -----------------------------------------------------

// VpnTunnelRequestBody represents the request body for VpnTunnel operations
type VpnTunnelRequestBody struct {
	Cnode     int64  `json:"cnode,omitempty" yaml:"cnode,omitempty" required:"true" doc:"The ID of one CNode. The tunnel will enable the support engineer to open an SSH session to the specified CNode."`
	Password  string `json:"password,omitempty" yaml:"password,omitempty" required:"true" doc:"The password for the specified VAST-Support tunnel service user"`
	Ttl       int64  `json:"ttl,omitempty" yaml:"ttl,omitempty" required:"true" doc:"The duration to allow the tunnel to remain open, in minutes"`
	Username  string `json:"username,omitempty" yaml:"username,omitempty" required:"true" doc:"A username for the VAST-Support tunnel service"`
	VpnConfig string `json:"vpn_config,omitempty" yaml:"vpn_config,omitempty" required:"false" doc:"The content of a VAST-support VPN configuration file"`
}

// -----------------------------------------------------
// MODELS
// -----------------------------------------------------

// VpnTunnelDetailsModel represents the detailed model returned by GET/List operations
// Type alias to component definition: #/components/schemas/VpnTunnel
type VpnTunnelDetailsModel = Component_VpnTunnel

// VpnTunnelUpsertModel represents the model returned by Create/Update operations
// Type alias to component definition: #/components/schemas/VpnTunnel
type VpnTunnelUpsertModel = Component_VpnTunnel

// -----------------------------------------------------
// LIST
// -----------------------------------------------------

// List retrieves multiple vpntunnels with typed request/response
// summary: List VPN Tunnels
func (r *VpnTunnel) List(req *VpnTunnelSearchParams) ([]*VpnTunnelDetailsModel, error) {
	return r.ListWithContext(r.Untyped.GetCtx(), req)
}

// ListWithContext retrieves multiple vpntunnels with typed request/response using provided context
// summary: List VPN Tunnels
func (r *VpnTunnel) ListWithContext(ctx context.Context, req *VpnTunnelSearchParams) ([]*VpnTunnelDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.GetResourceMap()[r.GetResourceType()].ListWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response []*VpnTunnelDetailsModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// Get retrieves a single vpntunnel with typed request/response
// summary: List VPN Tunnels
func (r *VpnTunnel) Get(req *VpnTunnelSearchParams) (*VpnTunnelDetailsModel, error) {
	return r.GetWithContext(r.Untyped.GetCtx(), req)
}

// GetWithContext retrieves a single vpntunnel with typed request/response using provided context
// summary: List VPN Tunnels
func (r *VpnTunnel) GetWithContext(ctx context.Context, req *VpnTunnelSearchParams) (*VpnTunnelDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response VpnTunnelDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// READ
// -----------------------------------------------------

// GetById retrieves a single vpntunnel by ID
// summary: Return Details of a VPN Tunnel
func (r *VpnTunnel) GetById(id any) (*VpnTunnelDetailsModel, error) {
	return r.GetByIdWithContext(r.Untyped.GetCtx(), id)
}

// GetByIdWithContext retrieves a single vpntunnel by ID using provided context
// summary: Return Details of a VPN Tunnel
func (r *VpnTunnel) GetByIdWithContext(ctx context.Context, id any) (*VpnTunnelDetailsModel, error) {
	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetByIdWithContext(ctx, id)
	if err != nil {
		return nil, err
	}

	var response VpnTunnelDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// CREATE
// -----------------------------------------------------

// Create creates a new vpntunnel with typed request/response
// summary: Create VPN Tunnel
func (r *VpnTunnel) Create(req *VpnTunnelRequestBody) (*VpnTunnelUpsertModel, error) {
	return r.CreateWithContext(r.Untyped.GetCtx(), req)
}

// CreateWithContext creates a new vpntunnel with typed request/response using provided context
// summary: Create VPN Tunnel
func (r *VpnTunnel) CreateWithContext(ctx context.Context, req *VpnTunnelRequestBody) (*VpnTunnelUpsertModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].CreateWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response VpnTunnelUpsertModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// DELETE
// -----------------------------------------------------

// Delete deletes a vpntunnel with search parameters
func (r *VpnTunnel) Delete(req *VpnTunnelSearchParams) error {
	return r.DeleteWithContext(r.Untyped.GetCtx(), req)
}

// DeleteWithContext deletes a vpntunnel with search parameters using provided context
func (r *VpnTunnel) DeleteWithContext(ctx context.Context, req *VpnTunnelSearchParams) error {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return err
	}
	_, err = r.Untyped.GetResourceMap()[r.GetResourceType()].DeleteWithContext(ctx, params, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteById deletes a vpntunnel by ID
// summary: Close and Delete VPN Tunnel
//
// Parameters:
//   - id: VPN tunnel ID
func (r *VpnTunnel) DeleteById(id any) error {
	return r.DeleteByIdWithContext(r.Untyped.GetCtx(), id)
}

// DeleteByIdWithContext deletes a vpntunnel by ID using provided context
// summary: Close and Delete VPN Tunnel
//
// Parameters:
//   - id: VPN tunnel ID
func (r *VpnTunnel) DeleteByIdWithContext(ctx context.Context, id any) error {
	_, err := r.Untyped.GetResourceMap()[r.GetResourceType()].DeleteByIdWithContext(ctx, id, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// -----------------------------------------------------
// ENSURE
// -----------------------------------------------------

// Ensure ensures a vpntunnel exists with typed response
func (r *VpnTunnel) Ensure(searchParams *VpnTunnelSearchParams, body *VpnTunnelRequestBody) (*VpnTunnelUpsertModel, error) {
	return r.EnsureWithContext(r.Untyped.GetCtx(), searchParams, body)
}

// EnsureWithContext ensures a vpntunnel exists with typed response using provided context
func (r *VpnTunnel) EnsureWithContext(ctx context.Context, searchParams *VpnTunnelSearchParams, body *VpnTunnelRequestBody) (*VpnTunnelUpsertModel, error) {
	searchParamsConverted, err := core.NewParamsFromStruct(searchParams)
	if err != nil {
		return nil, err
	}
	bodyConverted, err := core.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].EnsureWithContext(ctx, searchParamsConverted, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response VpnTunnelUpsertModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Exists checks if a vpntunnel exists
func (r *VpnTunnel) Exists(req *VpnTunnelSearchParams) (bool, error) {
	return r.ExistsWithContext(r.Untyped.GetCtx(), req)
}

// ExistsWithContext checks if a vpntunnel exists using provided context
func (r *VpnTunnel) ExistsWithContext(ctx context.Context, req *VpnTunnelSearchParams) (bool, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].ExistsWithContext(ctx, params)
}

// MustExists checks if a vpntunnel exists and panics if not
func (r *VpnTunnel) MustExists(req *VpnTunnelSearchParams) bool {
	return r.MustExistsWithContext(r.Untyped.GetCtx(), req)
}

// MustExistsWithContext checks if a vpntunnel exists and panics if not using provided context
func (r *VpnTunnel) MustExistsWithContext(ctx context.Context, req *VpnTunnelSearchParams) bool {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].MustExistsWithContext(ctx, params)
}

// -----------------------------------------------------
// EXTRA METHODS
// -----------------------------------------------------

// VpnTunnelDeleteAllWithContext_DELETE
// method: DELETE
// url: /vpntunnels/delete_all/
// summary: Close and Delete all available VPN Tunnels
func (r *VpnTunnel) VpnTunnelDeleteAllWithContext_DELETE(ctx context.Context) error {
	resourcePath := "/vpntunnels/delete_all/"

	var reqParams core.Params
	var reqBody core.Params

	_, err := core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodDelete, resourcePath, reqParams, reqBody)
	return err

}

// VpnTunnelDeleteAll_DELETE
// method: DELETE
// url: /vpntunnels/delete_all/
// summary: Close and Delete all available VPN Tunnels
func (r *VpnTunnel) VpnTunnelDeleteAll_DELETE() error {
	return r.VpnTunnelDeleteAllWithContext_DELETE(r.Untyped.GetCtx())
}

// -----------------------------------------------------
// GENERATION ISSUES
// -----------------------------------------------------
//   - UPDATE operation excluded: PATCH/PUT /vpntunnels/{id}/ has no response schema and doesn't return 204 NO CONTENT
