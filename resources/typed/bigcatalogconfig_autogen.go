// Code generated by generate-typed-resources. DO NOT EDIT.
// Template: LIST|READ|DELETE

package typed

import (
	"context"
	"fmt"
	"net/http"

	"github.com/vast-data/go-vast-client/core"
)

// -----------------------------------------------------
// RESOURCE TYPE
// -----------------------------------------------------

// BigCatalogConfig represents a typed resource for bigcatalogconfig operations
type BigCatalogConfig struct {
	*core.TypedVastResource
}

// -----------------------------------------------------
// SEARCH PARAMS
// -----------------------------------------------------

// BigCatalogConfigSearchParams represents the search parameters for BigCatalogConfig operations
type BigCatalogConfigSearchParams struct {
	Name     string `json:"name,omitempty" yaml:"name,omitempty" required:"true" doc:""`
	Guid     string `json:"guid,omitempty" yaml:"guid,omitempty" required:"false" doc:"unique identifier"`
	TenantId int64  `json:"tenant_id,omitempty" yaml:"tenant_id,omitempty" required:"false" doc:""`

	// RawData allows passing arbitrary search parameters as key-value pairs.
	//
	// Use this field when you need query parameters that are not covered by the typed fields above.
	// This is particularly useful for:
	//   - Dynamic filter operations (e.g., "path__contains", "name__icontains")
	//   - Django-style query filters
	//   - Custom backend-specific parameters
	//
	// Example:
	//   params := &BigCatalogConfigSearchParams{
	//       RawData: core.Params{"path__contains": "/foo", "name__icontains": "bar"},
	//   }
	//
	// Note: You can use either the typed fields or RawData, or combine both.
	RawData core.Params `json:"-" yaml:"-"`
}

// -----------------------------------------------------
// MODELS
// -----------------------------------------------------

// BigCatalogConfigDetailsModel represents the detailed model returned by GET/List operations
// Type alias to component definition: #/components/schemas/VastCatalogConfig
type BigCatalogConfigDetailsModel = Component_VastCatalogConfig

// -----------------------------------------------------
// LIST
// -----------------------------------------------------

// List retrieves multiple bigcatalogconfigs with typed request/response
// summary: List VAST Catalog Configuration
func (r *BigCatalogConfig) List(req *BigCatalogConfigSearchParams) ([]*BigCatalogConfigDetailsModel, error) {
	return r.ListWithContext(r.Untyped.GetCtx(), req)
}

// ListWithContext retrieves multiple bigcatalogconfigs with typed request/response using provided context
// summary: List VAST Catalog Configuration
func (r *BigCatalogConfig) ListWithContext(ctx context.Context, req *BigCatalogConfigSearchParams) ([]*BigCatalogConfigDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.GetResourceMap()[r.GetResourceType()].ListWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response []*BigCatalogConfigDetailsModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// Get retrieves a single bigcatalogconfig with typed request/response
// summary: List VAST Catalog Configuration
func (r *BigCatalogConfig) Get(req *BigCatalogConfigSearchParams) (*BigCatalogConfigDetailsModel, error) {
	return r.GetWithContext(r.Untyped.GetCtx(), req)
}

// GetWithContext retrieves a single bigcatalogconfig with typed request/response using provided context
// summary: List VAST Catalog Configuration
func (r *BigCatalogConfig) GetWithContext(ctx context.Context, req *BigCatalogConfigSearchParams) (*BigCatalogConfigDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response BigCatalogConfigDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// READ
// -----------------------------------------------------

// GetById retrieves a single bigcatalogconfig by ID
// summary: Return VAST Catalog Configuration
func (r *BigCatalogConfig) GetById(id any) (*BigCatalogConfigDetailsModel, error) {
	return r.GetByIdWithContext(r.Untyped.GetCtx(), id)
}

// GetByIdWithContext retrieves a single bigcatalogconfig by ID using provided context
// summary: Return VAST Catalog Configuration
func (r *BigCatalogConfig) GetByIdWithContext(ctx context.Context, id any) (*BigCatalogConfigDetailsModel, error) {
	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetByIdWithContext(ctx, id)
	if err != nil {
		return nil, err
	}

	var response BigCatalogConfigDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// DELETE
// -----------------------------------------------------

// Delete deletes a bigcatalogconfig with search parameters
func (r *BigCatalogConfig) Delete(req *BigCatalogConfigSearchParams) error {
	return r.DeleteWithContext(r.Untyped.GetCtx(), req)
}

// DeleteWithContext deletes a bigcatalogconfig with search parameters using provided context
func (r *BigCatalogConfig) DeleteWithContext(ctx context.Context, req *BigCatalogConfigSearchParams) error {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return err
	}
	_, err = r.Untyped.GetResourceMap()[r.GetResourceType()].DeleteWithContext(ctx, params, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteById deletes a bigcatalogconfig by ID
// summary: Delete VAST Catalog Configuration.
//
// Parameters:
//   - id: Vastcatalogconfig ID
func (r *BigCatalogConfig) DeleteById(id any) error {
	return r.DeleteByIdWithContext(r.Untyped.GetCtx(), id)
}

// DeleteByIdWithContext deletes a bigcatalogconfig by ID using provided context
// summary: Delete VAST Catalog Configuration.
//
// Parameters:
//   - id: Vastcatalogconfig ID
func (r *BigCatalogConfig) DeleteByIdWithContext(ctx context.Context, id any) error {
	_, err := r.Untyped.GetResourceMap()[r.GetResourceType()].DeleteByIdWithContext(ctx, id, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// Exists checks if a bigcatalogconfig exists
func (r *BigCatalogConfig) Exists(req *BigCatalogConfigSearchParams) (bool, error) {
	return r.ExistsWithContext(r.Untyped.GetCtx(), req)
}

// ExistsWithContext checks if a bigcatalogconfig exists using provided context
func (r *BigCatalogConfig) ExistsWithContext(ctx context.Context, req *BigCatalogConfigSearchParams) (bool, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].ExistsWithContext(ctx, params)
}

// MustExists checks if a bigcatalogconfig exists and panics if not
func (r *BigCatalogConfig) MustExists(req *BigCatalogConfigSearchParams) bool {
	return r.MustExistsWithContext(r.Untyped.GetCtx(), req)
}

// MustExistsWithContext checks if a bigcatalogconfig exists and panics if not using provided context
func (r *BigCatalogConfig) MustExistsWithContext(ctx context.Context, req *BigCatalogConfigSearchParams) bool {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].MustExistsWithContext(ctx, params)
}

// -----------------------------------------------------
// EXTRA METHODS
// -----------------------------------------------------

// BigCatalogConfigColumnsItem represents a nested type for BigCatalogConfig extra method response
type BigCatalogConfigColumnsItem struct {
	DatabaseName string `json:"database_name,omitempty" yaml:"database_name,omitempty" required:"true" doc:"Name of the Database"`
	Name         string `json:"name,omitempty" yaml:"name,omitempty" required:"true" doc:"Name of the object"`
	RawField     string `json:"raw_field,omitempty" yaml:"raw_field,omitempty" required:"true" doc:"Raw description of column type"`
	SchemaName   string `json:"schema_name,omitempty" yaml:"schema_name,omitempty" required:"true" doc:"Name of the Schema"`
	TableName    string `json:"table_name,omitempty" yaml:"table_name,omitempty" required:"true" doc:"Name of the Table"`
}

// BigCatalogConfigColumnsWithContext_GET
// method: GET
// url: /bigcatalogconfig/columns/
// summary: Return VAST Catalog columns
func (r *BigCatalogConfig) BigCatalogConfigColumnsWithContext_GET(ctx context.Context) ([]BigCatalogConfigColumnsItem, error) {
	resourcePath := "/bigcatalogconfig/columns/"

	var reqParams core.Params
	var reqBody core.Params

	record, err := core.Request[core.RecordSet](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodGet, resourcePath, reqParams, reqBody)
	if err != nil {
		return nil, err
	}
	// Convert RecordSet ([]core.Record) to typed array ([]BigCatalogConfigColumnsItem)
	result := make([]BigCatalogConfigColumnsItem, len(record))
	for i, item := range record {
		if err := item.Fill(&result[i]); err != nil {
			return nil, fmt.Errorf("failed to unmarshal array item %d: %w", i, err)
		}
	}
	return result, nil

}

// BigCatalogConfigColumns_GET
// method: GET
// url: /bigcatalogconfig/columns/
// summary: Return VAST Catalog columns
func (r *BigCatalogConfig) BigCatalogConfigColumns_GET() ([]BigCatalogConfigColumnsItem, error) {
	return r.BigCatalogConfigColumnsWithContext_GET(r.Untyped.GetCtx())
}

// BigCatalogConfigQueryData_GET_Body represents the request body for BigCatalogConfigQueryData
type BigCatalogConfigQueryData_GET_Body struct {
	Filters  string `json:"filters,omitempty" yaml:"filters,omitempty" required:"false" doc:"URL-encoded JSON-string - actually an encoded mapping. Keys are column names. E.g. '{\"creation_time\": [{\"gt\": \"1727863200000\"}, {\"lt\": \"1729591200000\"}], \"atime\": [{\"gt\": \"1727776800000\", \"lt\": \"1729591200000\"}]}''. Elements within a list per column are OR'ed, elements withing a map inside a list are AND'ed."`
	Limit    int64  `json:"limit,omitempty" yaml:"limit,omitempty" required:"false" doc:""`
	Path     string `json:"path,omitempty" yaml:"path,omitempty" required:"false" doc:"Target source path"`
	Snapshot string `json:"snapshot,omitempty" yaml:"snapshot,omitempty" required:"false" doc:"The name of the snapshot, the latest version is taken by default"`
	TenantId int64  `json:"tenant_id,omitempty" yaml:"tenant_id,omitempty" required:"false" doc:"Filter by tenant. Specify tenant ID."`
}

// BigCatalogConfigQueryDataWithContext_GET
// method: GET
// url: /bigcatalogconfig/query_data/
// summary: Queries data based on provided params
func (r *BigCatalogConfig) BigCatalogConfigQueryDataWithContext_GET(ctx context.Context, params *BigCatalogConfigQueryData_GET_Body) (string, error) {
	resourcePath := "/bigcatalogconfig/query_data/"

	reqParams, err := core.NewParamsFromStruct(params)
	if err != nil {
		return "", err
	}
	var reqBody core.Params

	record, err := core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodGet, resourcePath, reqParams, reqBody)
	if err != nil {
		return "", err
	}
	// Extract primitive response from @raw key
	if rawVal, ok := record["@raw"]; ok {
		if rawBytes, ok := rawVal.([]byte); ok {
			return string(rawBytes), nil
		}
		return fmt.Sprintf("%v", rawVal), nil
	}
	return "", fmt.Errorf("@raw key not found in response")

}

// BigCatalogConfigQueryData_GET
// method: GET
// url: /bigcatalogconfig/query_data/
// summary: Queries data based on provided params
func (r *BigCatalogConfig) BigCatalogConfigQueryData_GET(params *BigCatalogConfigQueryData_GET_Body) (string, error) {
	return r.BigCatalogConfigQueryDataWithContext_GET(r.Untyped.GetCtx(), params)
}

// BigCatalogConfigQueryData_POST_Body represents the request body for BigCatalogConfigQueryData
type BigCatalogConfigQueryData_POST_Body struct {
	Path     string    `json:"path,omitempty" yaml:"path,omitempty" required:"true" doc:"Target source path"`
	Fields   *[]string `json:"fields,omitempty" yaml:"fields,omitempty" required:"false" doc:"Defines which fields should be displayed"`
	Snapshot string    `json:"snapshot,omitempty" yaml:"snapshot,omitempty" required:"false" doc:"The name of the snapshot, the latest version is taken by default"`
	TenantId int64     `json:"tenant_id,omitempty" yaml:"tenant_id,omitempty" required:"false" doc:"Tenant ID"`
}

// BigCatalogConfigQueryData_POST_Model represents the response model for BigCatalogConfigQueryData
type BigCatalogConfigQueryData_POST_Model struct {
	Count    int64     `json:"count,omitempty" yaml:"count,omitempty" required:"false" doc:"Number of rows in data"`
	Next     string    `json:"next,omitempty" yaml:"next,omitempty" required:"false" doc:"Link to the next page"`
	PropList *[]string `json:"prop_list,omitempty" yaml:"prop_list,omitempty" required:"false" doc:"List of column names"`
	Results  *[]string `json:"results,omitempty" yaml:"results,omitempty" required:"false" doc:"List of query data rows"`
}

// BigCatalogConfigQueryDataWithContext_POST
// method: POST
// url: /bigcatalogconfig/query_data/
// summary: Query VAST Catalog
func (r *BigCatalogConfig) BigCatalogConfigQueryDataWithContext_POST(ctx context.Context, body *BigCatalogConfigQueryData_POST_Body) (*BigCatalogConfigQueryData_POST_Model, error) {
	resourcePath := "/bigcatalogconfig/query_data/"

	var reqParams core.Params
	reqBody, err := core.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodPost, resourcePath, reqParams, reqBody)
	if err != nil {
		return nil, err
	}

	var response BigCatalogConfigQueryData_POST_Model
	if err := record.Fill(&response); err != nil {
		return nil, err
	}
	return &response, nil

}

// BigCatalogConfigQueryData_POST
// method: POST
// url: /bigcatalogconfig/query_data/
// summary: Query VAST Catalog
func (r *BigCatalogConfig) BigCatalogConfigQueryData_POST(body *BigCatalogConfigQueryData_POST_Body) (*BigCatalogConfigQueryData_POST_Model, error) {
	return r.BigCatalogConfigQueryDataWithContext_POST(r.Untyped.GetCtx(), body)
}

// BigCatalogConfigStats_GET_Model represents the response model for BigCatalogConfigStats
type BigCatalogConfigStats_GET_Model struct {
	CountColumns int64 `json:"count_columns,omitempty" yaml:"count_columns,omitempty" required:"false" doc:""`
	CountRows    int64 `json:"count_rows,omitempty" yaml:"count_rows,omitempty" required:"false" doc:""`
}

// BigCatalogConfigStatsWithContext_GET
// method: GET
// url: /bigcatalogconfig/stats/
// summary: Return VAST Catalog Stats
func (r *BigCatalogConfig) BigCatalogConfigStatsWithContext_GET(ctx context.Context) (*BigCatalogConfigStats_GET_Model, error) {
	resourcePath := "/bigcatalogconfig/stats/"

	var reqParams core.Params
	var reqBody core.Params

	record, err := core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodGet, resourcePath, reqParams, reqBody)
	if err != nil {
		return nil, err
	}

	var response BigCatalogConfigStats_GET_Model
	if err := record.Fill(&response); err != nil {
		return nil, err
	}
	return &response, nil

}

// BigCatalogConfigStats_GET
// method: GET
// url: /bigcatalogconfig/stats/
// summary: Return VAST Catalog Stats
func (r *BigCatalogConfig) BigCatalogConfigStats_GET() (*BigCatalogConfigStats_GET_Model, error) {
	return r.BigCatalogConfigStatsWithContext_GET(r.Untyped.GetCtx())
}

// -----------------------------------------------------
// GENERATION ISSUES
// -----------------------------------------------------
//   - RequestBody skipped: Request schema is ambiguous (object with no properties) - POST bigcatalogconfig. CREATE and UPDATE operations excluded
//   - UPDATE operation excluded: PATCH/PUT /bigcatalogconfig/{id}/ has no response schema and doesn't return 204 NO CONTENT
