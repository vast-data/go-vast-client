// Code generated by generate-typed-resources. DO NOT EDIT.
// Template: LIST|READ

package typed

import (
	"context"
	"fmt"
	"net/http"

	"github.com/vast-data/go-vast-client/core"
)

// -----------------------------------------------------
// RESOURCE TYPE
// -----------------------------------------------------

// Permissions represents a typed resource for permissions operations
type Permissions struct {
	*core.TypedVastResource
}

// -----------------------------------------------------
// SEARCH PARAMS
// -----------------------------------------------------

// PermissionsSearchParams represents the search parameters for Permissions operations
type PermissionsSearchParams struct {
	Name string `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:"The permission name"`

	// RawData allows passing arbitrary search parameters as key-value pairs.
	//
	// Use this field when you need query parameters that are not covered by the typed fields above.
	// This is particularly useful for:
	//   - Dynamic filter operations (e.g., "path__contains", "name__icontains")
	//   - Django-style query filters
	//   - Custom backend-specific parameters
	//
	// Example:
	//   params := &PermissionsSearchParams{
	//       RawData: core.Params{"path__contains": "/foo", "name__icontains": "bar"},
	//   }
	//
	// Note: You can use either the typed fields or RawData, or combine both.
	RawData core.Params `json:"-" yaml:"-"`
}

// -----------------------------------------------------
// MODELS
// -----------------------------------------------------

// PermissionsDetailsModel represents the detailed model returned by GET/List operations
// Type alias to component definition: #/components/schemas/Permission
type PermissionsDetailsModel = Component_Permission

// -----------------------------------------------------
// LIST
// -----------------------------------------------------

// List retrieves multiple permissionss with typed request/response
// summary: List Permissions
func (r *Permissions) List(req *PermissionsSearchParams) ([]*PermissionsDetailsModel, error) {
	return r.ListWithContext(r.Untyped.GetCtx(), req)
}

// ListWithContext retrieves multiple permissionss with typed request/response using provided context
// summary: List Permissions
func (r *Permissions) ListWithContext(ctx context.Context, req *PermissionsSearchParams) ([]*PermissionsDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.GetResourceMap()[r.GetResourceType()].ListWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response []*PermissionsDetailsModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// Get retrieves a single permissions with typed request/response
// summary: List Permissions
func (r *Permissions) Get(req *PermissionsSearchParams) (*PermissionsDetailsModel, error) {
	return r.GetWithContext(r.Untyped.GetCtx(), req)
}

// GetWithContext retrieves a single permissions with typed request/response using provided context
// summary: List Permissions
func (r *Permissions) GetWithContext(ctx context.Context, req *PermissionsSearchParams) (*PermissionsDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response PermissionsDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// READ
// -----------------------------------------------------

// GetById retrieves a single permissions by ID
// summary: Return Permissions Details
func (r *Permissions) GetById(id any) (*PermissionsDetailsModel, error) {
	return r.GetByIdWithContext(r.Untyped.GetCtx(), id)
}

// GetByIdWithContext retrieves a single permissions by ID using provided context
// summary: Return Permissions Details
func (r *Permissions) GetByIdWithContext(ctx context.Context, id any) (*PermissionsDetailsModel, error) {
	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetByIdWithContext(ctx, id)
	if err != nil {
		return nil, err
	}

	var response PermissionsDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Exists checks if a permissions exists
func (r *Permissions) Exists(req *PermissionsSearchParams) (bool, error) {
	return r.ExistsWithContext(r.Untyped.GetCtx(), req)
}

// ExistsWithContext checks if a permissions exists using provided context
func (r *Permissions) ExistsWithContext(ctx context.Context, req *PermissionsSearchParams) (bool, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].ExistsWithContext(ctx, params)
}

// MustExists checks if a permissions exists and panics if not
func (r *Permissions) MustExists(req *PermissionsSearchParams) bool {
	return r.MustExistsWithContext(r.Untyped.GetCtx(), req)
}

// MustExistsWithContext checks if a permissions exists and panics if not using provided context
func (r *Permissions) MustExistsWithContext(ctx context.Context, req *PermissionsSearchParams) bool {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].MustExistsWithContext(ctx, params)
}

// -----------------------------------------------------
// EXTRA METHODS
// -----------------------------------------------------

// PermissionsObjectsItem represents a nested type for Permissions extra method response
type PermissionsObjectsItem struct {
	ManagerId   int64  `json:"manager_id,omitempty" yaml:"manager_id,omitempty" required:"false" doc:""`
	ObjectId    int64  `json:"object_id,omitempty" yaml:"object_id,omitempty" required:"false" doc:""`
	ObjectType  string `json:"object_type,omitempty" yaml:"object_type,omitempty" required:"false" doc:""`
	Permissions string `json:"permissions,omitempty" yaml:"permissions,omitempty" required:"false" doc:""`
	Realm       string `json:"realm,omitempty" yaml:"realm,omitempty" required:"false" doc:""`
	RoleId      int64  `json:"role_id,omitempty" yaml:"role_id,omitempty" required:"false" doc:""`
	RoleName    string `json:"role_name,omitempty" yaml:"role_name,omitempty" required:"false" doc:""`
	Username    string `json:"username,omitempty" yaml:"username,omitempty" required:"false" doc:""`
}

// PermissionsObjects_GET_Body represents the request body for PermissionsObjects
type PermissionsObjects_GET_Body struct {
	ManagerId   string `json:"manager_id,omitempty" yaml:"manager_id,omitempty" required:"false" doc:""`
	ObjectId    string `json:"object_id,omitempty" yaml:"object_id,omitempty" required:"false" doc:""`
	ObjectType  string `json:"object_type,omitempty" yaml:"object_type,omitempty" required:"false" doc:""`
	Permissions string `json:"permissions,omitempty" yaml:"permissions,omitempty" required:"false" doc:""`
	Realm       string `json:"realm,omitempty" yaml:"realm,omitempty" required:"false" doc:""`
	RoleId      string `json:"role_id,omitempty" yaml:"role_id,omitempty" required:"false" doc:""`
}

// PermissionsObjectsWithContext_GET
// method: GET
// url: /permissions/objects/
// summary: List Object Permissions
func (r *Permissions) PermissionsObjectsWithContext_GET(ctx context.Context, params *PermissionsObjects_GET_Body) ([]PermissionsObjectsItem, error) {
	resourcePath := "/permissions/objects/"

	reqParams, err := core.NewParamsFromStruct(params)
	if err != nil {
		return nil, err
	}
	var reqBody core.Params

	record, err := core.Request[core.RecordSet](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodGet, resourcePath, reqParams, reqBody)
	if err != nil {
		return nil, err
	}
	// Convert RecordSet ([]core.Record) to typed array ([]PermissionsObjectsItem)
	result := make([]PermissionsObjectsItem, len(record))
	for i, item := range record {
		if err := item.Fill(&result[i]); err != nil {
			return nil, fmt.Errorf("failed to unmarshal array item %d: %w", i, err)
		}
	}
	return result, nil

}

// PermissionsObjects_GET
// method: GET
// url: /permissions/objects/
// summary: List Object Permissions
func (r *Permissions) PermissionsObjects_GET(params *PermissionsObjects_GET_Body) ([]PermissionsObjectsItem, error) {
	return r.PermissionsObjectsWithContext_GET(r.Untyped.GetCtx(), params)
}
