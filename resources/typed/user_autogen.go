// Code generated by generate-typed-resources. DO NOT EDIT.
// Template: CREATE|LIST|READ|DELETE

package typed

import (
	"context"
	"net/http"
	"time"

	"github.com/vast-data/go-vast-client/core"
	"github.com/vast-data/go-vast-client/resources/untyped"
)

// -----------------------------------------------------
// RESOURCE TYPE
// -----------------------------------------------------

// User represents a typed resource for user operations
type User struct {
	*core.TypedVastResource
}

// -----------------------------------------------------
// SEARCH PARAMS
// -----------------------------------------------------

// UserSearchParams represents the search parameters for User operations
type UserSearchParams struct {
	Name string `json:"name,omitempty" yaml:"name,omitempty" required:"true" doc:"The name of the user"`
	Guid string `json:"guid,omitempty" yaml:"guid,omitempty" required:"false" doc:"Global unique ID"`
	Uid  int64  `json:"uid,omitempty" yaml:"uid,omitempty" required:"false" doc:"UID"`

	// RawData allows passing arbitrary search parameters as key-value pairs.
	//
	// Use this field when you need query parameters that are not covered by the typed fields above.
	// This is particularly useful for:
	//   - Dynamic filter operations (e.g., "path__contains", "name__icontains")
	//   - Django-style query filters
	//   - Custom backend-specific parameters
	//
	// Example:
	//   params := &UserSearchParams{
	//       RawData: core.Params{"path__contains": "/foo", "name__icontains": "bar"},
	//   }
	//
	// Note: You can use either the typed fields or RawData, or combine both.
	RawData core.Params `json:"-" yaml:"-"`
}

// -----------------------------------------------------
// REQUEST BODY
// -----------------------------------------------------

// UserRequestBody represents the request body for User operations
type UserRequestBody struct {
	Name              string   `json:"name,omitempty" yaml:"name,omitempty" required:"true" doc:"User name"`
	AllowCreateBucket bool     `json:"allow_create_bucket,omitempty" yaml:"allow_create_bucket,omitempty" required:"false" doc:"Set to true to give the user permission to create S3 buckets. In case of conflict with an S3 identity policy attached to the user or to a relevant group, this setting is overridden."`
	AllowDeleteBucket bool     `json:"allow_delete_bucket,omitempty" yaml:"allow_delete_bucket,omitempty" required:"false" doc:"Set to true to give the user permission to delete S3 buckets. In case of conflict with an S3 identity policy attached to the user or to a relevant group, this setting is overridden."`
	Gids              *[]int64 `json:"gids,omitempty" yaml:"gids,omitempty" required:"false" doc:"List of group GIDs of all groups to which the user should belong."`
	LeadingGid        int64    `json:"leading_gid,omitempty" yaml:"leading_gid,omitempty" required:"false" doc:"Leading GID"`
	Local             bool     `json:"local,omitempty" yaml:"local,omitempty" required:"false" doc:"Not in use"`
	LocalProviderId   int64    `json:"local_provider_id,omitempty" yaml:"local_provider_id,omitempty" required:"false" doc:"The ID of the local provider to which to add the user"`
	Password          string   `json:"password,omitempty" yaml:"password,omitempty" required:"false" doc:"Password"`
	S3Superuser       bool     `json:"s3_superuser,omitempty" yaml:"s3_superuser,omitempty" required:"false" doc:"Set to true to give the user S3 superuser permission. In case of conflict with an S3 identity policy attached to the user or to a relevant group, this setting is overridden."`
	Uid               int64    `json:"uid,omitempty" yaml:"uid,omitempty" required:"false" doc:"NFS UID"`
}

// -----------------------------------------------------
// MODELS
// -----------------------------------------------------

// UserDetailsModel represents the detailed model returned by GET/List operations
// Type alias to component definition: #/components/schemas/User
type UserDetailsModel = Component_User

// UserUpsertModel represents the model returned by Create/Update operations
// Type alias to component definition: #/components/schemas/User
type UserUpsertModel = Component_User

// -----------------------------------------------------
// LIST
// -----------------------------------------------------

// List retrieves multiple users with typed request/response
// summary: List Users
func (r *User) List(req *UserSearchParams) ([]*UserDetailsModel, error) {
	return r.ListWithContext(r.Untyped.GetCtx(), req)
}

// ListWithContext retrieves multiple users with typed request/response using provided context
// summary: List Users
func (r *User) ListWithContext(ctx context.Context, req *UserSearchParams) ([]*UserDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.GetResourceMap()[r.GetResourceType()].ListWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response []*UserDetailsModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// Get retrieves a single user with typed request/response
// summary: List Users
func (r *User) Get(req *UserSearchParams) (*UserDetailsModel, error) {
	return r.GetWithContext(r.Untyped.GetCtx(), req)
}

// GetWithContext retrieves a single user with typed request/response using provided context
// summary: List Users
func (r *User) GetWithContext(ctx context.Context, req *UserSearchParams) (*UserDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response UserDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// READ
// -----------------------------------------------------

// GetById retrieves a single user by ID
// summary: Return Local User Details
func (r *User) GetById(id any) (*UserDetailsModel, error) {
	return r.GetByIdWithContext(r.Untyped.GetCtx(), id)
}

// GetByIdWithContext retrieves a single user by ID using provided context
// summary: Return Local User Details
func (r *User) GetByIdWithContext(ctx context.Context, id any) (*UserDetailsModel, error) {
	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetByIdWithContext(ctx, id)
	if err != nil {
		return nil, err
	}

	var response UserDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// CREATE
// -----------------------------------------------------

// Create creates a new user with typed request/response
// summary: Add User to a Local Provider
func (r *User) Create(req *UserRequestBody) (*UserUpsertModel, error) {
	return r.CreateWithContext(r.Untyped.GetCtx(), req)
}

// CreateWithContext creates a new user with typed request/response using provided context
// summary: Add User to a Local Provider
func (r *User) CreateWithContext(ctx context.Context, req *UserRequestBody) (*UserUpsertModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].CreateWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response UserUpsertModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// DELETE
// -----------------------------------------------------

// Delete deletes a user with search parameters
func (r *User) Delete(req *UserSearchParams) error {
	return r.DeleteWithContext(r.Untyped.GetCtx(), req)
}

// DeleteWithContext deletes a user with search parameters using provided context
func (r *User) DeleteWithContext(ctx context.Context, req *UserSearchParams) error {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return err
	}
	_, err = r.Untyped.GetResourceMap()[r.GetResourceType()].DeleteWithContext(ctx, params, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteById deletes a user by ID
// summary: Delete Local User
//
// Parameters:
//   - id: User ID
func (r *User) DeleteById(id any) error {
	return r.DeleteByIdWithContext(r.Untyped.GetCtx(), id)
}

// DeleteByIdWithContext deletes a user by ID using provided context
// summary: Delete Local User
//
// Parameters:
//   - id: User ID
func (r *User) DeleteByIdWithContext(ctx context.Context, id any) error {
	_, err := r.Untyped.GetResourceMap()[r.GetResourceType()].DeleteByIdWithContext(ctx, id, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// -----------------------------------------------------
// ENSURE
// -----------------------------------------------------

// Ensure ensures a user exists with typed response
func (r *User) Ensure(searchParams *UserSearchParams, body *UserRequestBody) (*UserUpsertModel, error) {
	return r.EnsureWithContext(r.Untyped.GetCtx(), searchParams, body)
}

// EnsureWithContext ensures a user exists with typed response using provided context
func (r *User) EnsureWithContext(ctx context.Context, searchParams *UserSearchParams, body *UserRequestBody) (*UserUpsertModel, error) {
	searchParamsConverted, err := core.NewParamsFromStruct(searchParams)
	if err != nil {
		return nil, err
	}
	bodyConverted, err := core.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].EnsureWithContext(ctx, searchParamsConverted, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response UserUpsertModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Exists checks if a user exists
func (r *User) Exists(req *UserSearchParams) (bool, error) {
	return r.ExistsWithContext(r.Untyped.GetCtx(), req)
}

// ExistsWithContext checks if a user exists using provided context
func (r *User) ExistsWithContext(ctx context.Context, req *UserSearchParams) (bool, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].ExistsWithContext(ctx, params)
}

// MustExists checks if a user exists and panics if not
func (r *User) MustExists(req *UserSearchParams) bool {
	return r.MustExistsWithContext(r.Untyped.GetCtx(), req)
}

// MustExistsWithContext checks if a user exists and panics if not using provided context
func (r *User) MustExistsWithContext(ctx context.Context, req *UserSearchParams) bool {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].MustExistsWithContext(ctx, params)
}

// -----------------------------------------------------
// EXTRA METHODS
// -----------------------------------------------------

// UserTenantDataModel_S3PoliciesItem represents a nested type for User extra method response
type UserTenantDataModel_S3PoliciesItem struct {
	Id   int64  `json:"id,omitempty" yaml:"id,omitempty" required:"false" doc:"Identity Policy ID"`
	Name string `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:"Identity Policy name"`
}

// UserAccessKeysWithContext_DELETE
// method: DELETE
// url: /users/{id}/access_keys/
// summary: Remove S3 Access Key Pair (Local User)
//
// Parameters:
//   - accessKey (body): The access key to remove
func (r *User) UserAccessKeysWithContext_DELETE(ctx context.Context, id any, accessKey string) error {
	resourcePath := core.BuildResourcePathWithID("users", id, "access_keys")

	var reqParams core.Params
	reqBody := core.Params{}
	reqBody["access_key"] = accessKey

	_, err := core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodDelete, resourcePath, reqParams, reqBody)
	return err

}

// UserAccessKeys_DELETE
// method: DELETE
// url: /users/{id}/access_keys/
// summary: Remove S3 Access Key Pair (Local User)
//
// Parameters:
//   - accessKey (body): The access key to remove
func (r *User) UserAccessKeys_DELETE(id any, accessKey string) error {
	return r.UserAccessKeysWithContext_DELETE(r.Untyped.GetCtx(), id, accessKey)
}

// UserAccessKeysWithContext_PATCH
// method: PATCH
// url: /users/{id}/access_keys/
// summary: Enable/Disable S3 Access Key Pair (Local User)
//
// Parameters:
//   - accessKey (body): The access key to enable
//   - enabled (body): Set to true to enable access key pair. Set to false to disable access key pair
func (r *User) UserAccessKeysWithContext_PATCH(ctx context.Context, id any, accessKey string, enabled bool) error {
	resourcePath := core.BuildResourcePathWithID("users", id, "access_keys")

	var reqParams core.Params
	reqBody := core.Params{}
	reqBody["access_key"] = accessKey
	reqBody["enabled"] = enabled

	_, err := core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodPatch, resourcePath, reqParams, reqBody)
	return err

}

// UserAccessKeys_PATCH
// method: PATCH
// url: /users/{id}/access_keys/
// summary: Enable/Disable S3 Access Key Pair (Local User)
//
// Parameters:
//   - accessKey (body): The access key to enable
//   - enabled (body): Set to true to enable access key pair. Set to false to disable access key pair
func (r *User) UserAccessKeys_PATCH(id any, accessKey string, enabled bool) error {
	return r.UserAccessKeysWithContext_PATCH(r.Untyped.GetCtx(), id, accessKey, enabled)
}

// UserAccessKeys_POST_Model represents the response model for UserAccessKeys
type UserAccessKeys_POST_Model struct {
	AccessKey string `json:"access_key,omitempty" yaml:"access_key,omitempty" required:"false" doc:"S3 access key, needed to authenticate S3 client requests"`
	SecretKey string `json:"secret_key,omitempty" yaml:"secret_key,omitempty" required:"false" doc:"S3 secret key, needed to authenticate S3 client requests"`
}

// UserAccessKeysWithContext_POST
// method: POST
// url: /users/{id}/access_keys/
// summary: Generate S3 Access Key Pair (Local User)
//
// Parameters:
//   - tenantId (body): Tenant ID
func (r *User) UserAccessKeysWithContext_POST(ctx context.Context, id any, tenantId int64) (*UserAccessKeys_POST_Model, error) {
	resourcePath := core.BuildResourcePathWithID("users", id, "access_keys")

	var reqParams core.Params
	reqBody := core.Params{}
	if tenantId != 0 {
		reqBody["tenant_id"] = tenantId
	}

	record, err := core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodPost, resourcePath, reqParams, reqBody)
	if err != nil {
		return nil, err
	}

	var response UserAccessKeys_POST_Model
	if err := record.Fill(&response); err != nil {
		return nil, err
	}
	return &response, nil

}

// UserAccessKeys_POST
// method: POST
// url: /users/{id}/access_keys/
// summary: Generate S3 Access Key Pair (Local User)
//
// Parameters:
//   - tenantId (body): Tenant ID
func (r *User) UserAccessKeys_POST(id any, tenantId int64) (*UserAccessKeys_POST_Model, error) {
	return r.UserAccessKeysWithContext_POST(r.Untyped.GetCtx(), id, tenantId)
}

// UserCopy_POST_Body represents the request body for UserCopy
type UserCopy_POST_Body struct {
	DestinationProviderId int64    `json:"destination_provider_id,omitempty" yaml:"destination_provider_id,omitempty" required:"true" doc:"ID of the local provider to which to copy users"`
	TenantId              int64    `json:"tenant_id,omitempty" yaml:"tenant_id,omitempty" required:"false" doc:"ID of the tenant to which the users belong. Required if user_ids are not provided."`
	UserIds               *[]int64 `json:"user_ids,omitempty" yaml:"user_ids,omitempty" required:"false" doc:"IDs of the users to copy. Required if tenant_id is not provided."`
}

// UserCopyWithContext_POST
// method: POST
// url: /users/copy/
// summary: Copy Users with S3 Keys from one Local Provider to Another
//
// Parameters:
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (r *User) UserCopyWithContext_POST(ctx context.Context, body *UserCopy_POST_Body, waitTimeout time.Duration) (*untyped.AsyncResult, error) {
	resourcePath := "/users/copy/"

	var reqParams core.Params
	reqBody, err := core.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	result, err := core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodPost, resourcePath, reqParams, reqBody)
	if err != nil {
		return nil, err
	}

	asyncResult, _, err := untyped.MaybeWaitAsyncResultWithContext(ctx, result, r.Untyped, waitTimeout)
	return asyncResult, err

}

// UserCopy_POST
// method: POST
// url: /users/copy/
// summary: Copy Users with S3 Keys from one Local Provider to Another
//
// Parameters:
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (r *User) UserCopy_POST(body *UserCopy_POST_Body, waitTimeout time.Duration) (*untyped.AsyncResult, error) {
	return r.UserCopyWithContext_POST(r.Untyped.GetCtx(), body, waitTimeout)
}

// UserNonLocalKeys_DELETE_Body represents the request body for UserNonLocalKeys
type UserNonLocalKeys_DELETE_Body struct {
	AccessKey string `json:"access_key,omitempty" yaml:"access_key,omitempty" required:"true" doc:"The access key"`
	Sid       string `json:"sid,omitempty" yaml:"sid,omitempty" required:"false" doc:"User SID"`
	TenantId  int64  `json:"tenant_id,omitempty" yaml:"tenant_id,omitempty" required:"false" doc:"Tenant ID"`
	Uid       int64  `json:"uid,omitempty" yaml:"uid,omitempty" required:"false" doc:"User UID"`
}

// UserNonLocalKeysWithContext_DELETE
// method: DELETE
// url: /users/non_local_keys/
// summary: Remove S3 Access Key Pair (Non-Local User)
func (r *User) UserNonLocalKeysWithContext_DELETE(ctx context.Context, body *UserNonLocalKeys_DELETE_Body) error {
	resourcePath := "/users/non_local_keys/"

	var reqParams core.Params
	reqBody, err := core.NewParamsFromStruct(body)
	if err != nil {
		return err
	}

	_, err = core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodDelete, resourcePath, reqParams, reqBody)
	return err

}

// UserNonLocalKeys_DELETE
// method: DELETE
// url: /users/non_local_keys/
// summary: Remove S3 Access Key Pair (Non-Local User)
func (r *User) UserNonLocalKeys_DELETE(body *UserNonLocalKeys_DELETE_Body) error {
	return r.UserNonLocalKeysWithContext_DELETE(r.Untyped.GetCtx(), body)
}

// UserNonLocalKeys_PATCH_Body represents the request body for UserNonLocalKeys
type UserNonLocalKeys_PATCH_Body struct {
	AccessKey string `json:"access_key,omitempty" yaml:"access_key,omitempty" required:"true" doc:"The access key"`
	Enabled   bool   `json:"enabled" yaml:"enabled" required:"true" doc:"Set to true to enable the S3 access key pair. Set to false to disable the S3 access key pair."`
	Uid       int64  `json:"uid,omitempty" yaml:"uid,omitempty" required:"true" doc:"User UID"`
	Sid       string `json:"sid,omitempty" yaml:"sid,omitempty" required:"false" doc:"User SID"`
	TenantId  int64  `json:"tenant_id,omitempty" yaml:"tenant_id,omitempty" required:"false" doc:"Tenant ID"`
}

// UserNonLocalKeysWithContext_PATCH
// method: PATCH
// url: /users/non_local_keys/
// summary: Enable or Disable S3 Access Key Pair (Non-Local User)
func (r *User) UserNonLocalKeysWithContext_PATCH(ctx context.Context, body *UserNonLocalKeys_PATCH_Body) error {
	resourcePath := "/users/non_local_keys/"

	var reqParams core.Params
	reqBody, err := core.NewParamsFromStruct(body)
	if err != nil {
		return err
	}

	_, err = core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodPatch, resourcePath, reqParams, reqBody)
	return err

}

// UserNonLocalKeys_PATCH
// method: PATCH
// url: /users/non_local_keys/
// summary: Enable or Disable S3 Access Key Pair (Non-Local User)
func (r *User) UserNonLocalKeys_PATCH(body *UserNonLocalKeys_PATCH_Body) error {
	return r.UserNonLocalKeysWithContext_PATCH(r.Untyped.GetCtx(), body)
}

// UserNonLocalKeys_POST_Body represents the request body for UserNonLocalKeys
type UserNonLocalKeys_POST_Body struct {
	LoginName string `json:"login_name,omitempty" yaml:"login_name,omitempty" required:"false" doc:"User login name"`
	Sid       string `json:"sid,omitempty" yaml:"sid,omitempty" required:"false" doc:"User SID. Required if UID is not provided"`
	TenantId  int64  `json:"tenant_id,omitempty" yaml:"tenant_id,omitempty" required:"false" doc:"Tenant ID"`
	Uid       int64  `json:"uid,omitempty" yaml:"uid,omitempty" required:"false" doc:"NFS UID. Required if SID is not provided"`
	Username  string `json:"username,omitempty" yaml:"username,omitempty" required:"false" doc:"Username"`
}

// UserNonLocalKeys_POST_Model represents the response model for UserNonLocalKeys
type UserNonLocalKeys_POST_Model struct {
	AccessKey string `json:"access_key,omitempty" yaml:"access_key,omitempty" required:"false" doc:"S3 access key, needed to authenticate S3 client requests"`
	SecretKey string `json:"secret_key,omitempty" yaml:"secret_key,omitempty" required:"false" doc:"S3 secret key, needed to authenticate S3 client requests"`
}

// UserNonLocalKeysWithContext_POST
// method: POST
// url: /users/non_local_keys/
// summary: Generate S3 Access Key Pair (Non-Local User)
func (r *User) UserNonLocalKeysWithContext_POST(ctx context.Context, body *UserNonLocalKeys_POST_Body) (*UserNonLocalKeys_POST_Model, error) {
	resourcePath := "/users/non_local_keys/"

	var reqParams core.Params
	reqBody, err := core.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodPost, resourcePath, reqParams, reqBody)
	if err != nil {
		return nil, err
	}

	var response UserNonLocalKeys_POST_Model
	if err := record.Fill(&response); err != nil {
		return nil, err
	}
	return &response, nil

}

// UserNonLocalKeys_POST
// method: POST
// url: /users/non_local_keys/
// summary: Generate S3 Access Key Pair (Non-Local User)
func (r *User) UserNonLocalKeys_POST(body *UserNonLocalKeys_POST_Body) (*UserNonLocalKeys_POST_Model, error) {
	return r.UserNonLocalKeysWithContext_POST(r.Untyped.GetCtx(), body)
}

// UserTenantData_GET_Body represents the request body for UserTenantData
type UserTenantData_GET_Body struct {
	TenantId int64 `json:"tenant_id,omitempty" yaml:"tenant_id,omitempty" required:"false" doc:"Filter by tenant. Specify tenant ID."`
}

// UserTenantData_GET_Model represents the response model for UserTenantData
type UserTenantData_GET_Model struct {
	AllowCreateBucket bool                                  `json:"allow_create_bucket,omitempty" yaml:"allow_create_bucket,omitempty" required:"false" doc:""`
	AllowDeleteBucket bool                                  `json:"allow_delete_bucket,omitempty" yaml:"allow_delete_bucket,omitempty" required:"false" doc:""`
	S3Policies        *[]UserTenantDataModel_S3PoliciesItem `json:"s3_policies,omitempty" yaml:"s3_policies,omitempty" required:"false" doc:""`
	S3PoliciesIds     *[]int64                              `json:"s3_policies_ids,omitempty" yaml:"s3_policies_ids,omitempty" required:"false" doc:""`
	S3Superuser       bool                                  `json:"s3_superuser,omitempty" yaml:"s3_superuser,omitempty" required:"false" doc:""`
}

// UserTenantDataWithContext_GET
// method: GET
// url: /users/{id}/tenant_data/
// summary: Get tenant data for a User
func (r *User) UserTenantDataWithContext_GET(ctx context.Context, id any, params *UserTenantData_GET_Body) (*UserTenantData_GET_Model, error) {
	resourcePath := core.BuildResourcePathWithID("users", id, "tenant_data")

	reqParams, err := core.NewParamsFromStruct(params)
	if err != nil {
		return nil, err
	}
	var reqBody core.Params

	record, err := core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodGet, resourcePath, reqParams, reqBody)
	if err != nil {
		return nil, err
	}

	var response UserTenantData_GET_Model
	if err := record.Fill(&response); err != nil {
		return nil, err
	}
	return &response, nil

}

// UserTenantData_GET
// method: GET
// url: /users/{id}/tenant_data/
// summary: Get tenant data for a User
func (r *User) UserTenantData_GET(id any, params *UserTenantData_GET_Body) (*UserTenantData_GET_Model, error) {
	return r.UserTenantDataWithContext_GET(r.Untyped.GetCtx(), id, params)
}

// UserTenantData_PATCH_Body represents the request body for UserTenantData
type UserTenantData_PATCH_Body struct {
	AllowCreateBucket bool     `json:"allow_create_bucket,omitempty" yaml:"allow_create_bucket,omitempty" required:"false" doc:"Grants the user permission to create S3 buckets. In case of conflict with an S3 identity policy attached to the user or to a relevant group, this setting is overridden."`
	AllowDeleteBucket bool     `json:"allow_delete_bucket,omitempty" yaml:"allow_delete_bucket,omitempty" required:"false" doc:"Grants the user permission to delete S3 buckets. In case of conflict with an S3 identity policy attached to the user or to a relevant group, this setting is overridden."`
	S3PoliciesIds     *[]int64 `json:"s3_policies_ids,omitempty" yaml:"s3_policies_ids,omitempty" required:"false" doc:"IDs of S3 policies to attach to the user"`
	S3Superuser       bool     `json:"s3_superuser,omitempty" yaml:"s3_superuser,omitempty" required:"false" doc:"Grants the user S3 super user permission, which enables the user to override S3 ACLs. In case of conflict with an S3 identity policy attached to the user or to a relevant group, this setting is overridden."`
	TenantId          int64    `json:"tenant_id,omitempty" yaml:"tenant_id,omitempty" required:"false" doc:"Tenant ID"`
}

// UserTenantData_PATCH_Model represents the response model for UserTenantData
type UserTenantData_PATCH_Model struct {
	AllowCreateBucket bool                                  `json:"allow_create_bucket,omitempty" yaml:"allow_create_bucket,omitempty" required:"false" doc:""`
	AllowDeleteBucket bool                                  `json:"allow_delete_bucket,omitempty" yaml:"allow_delete_bucket,omitempty" required:"false" doc:""`
	S3Policies        *[]UserTenantDataModel_S3PoliciesItem `json:"s3_policies,omitempty" yaml:"s3_policies,omitempty" required:"false" doc:""`
	S3PoliciesIds     *[]int64                              `json:"s3_policies_ids,omitempty" yaml:"s3_policies_ids,omitempty" required:"false" doc:""`
	S3Superuser       bool                                  `json:"s3_superuser,omitempty" yaml:"s3_superuser,omitempty" required:"false" doc:""`
}

// UserTenantDataWithContext_PATCH
// method: PATCH
// url: /users/{id}/tenant_data/
// summary: Update Tenant Data for a User
func (r *User) UserTenantDataWithContext_PATCH(ctx context.Context, id any, body *UserTenantData_PATCH_Body) (*UserTenantData_PATCH_Model, error) {
	resourcePath := core.BuildResourcePathWithID("users", id, "tenant_data")

	var reqParams core.Params
	reqBody, err := core.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodPatch, resourcePath, reqParams, reqBody)
	if err != nil {
		return nil, err
	}

	var response UserTenantData_PATCH_Model
	if err := record.Fill(&response); err != nil {
		return nil, err
	}
	return &response, nil

}

// UserTenantData_PATCH
// method: PATCH
// url: /users/{id}/tenant_data/
// summary: Update Tenant Data for a User
func (r *User) UserTenantData_PATCH(id any, body *UserTenantData_PATCH_Body) (*UserTenantData_PATCH_Model, error) {
	return r.UserTenantDataWithContext_PATCH(r.Untyped.GetCtx(), id, body)
}

// -----------------------------------------------------
// GENERATION ISSUES
// -----------------------------------------------------
//   - Extra method GET /users/names/ skipped: GET /users/names/ - Response schema contains ambiguous nested objects (objects with no properties)
//   - Extra method GET /users/query/ skipped: GET /users/query/ - Response schema contains ambiguous nested objects (objects with no properties)
//   - Extra method PATCH /users/query/ skipped: PATCH /users/query/ - No response schema defined in OpenAPI spec. Error: no valid schema found in PATCH response (200/201/202/204) for resource /users/query/
//   - Extra method PATCH /users/refresh/ skipped: PATCH /users/refresh/ - No response schema defined in OpenAPI spec. Error: no valid schema found in PATCH response (200/201/202/204) for resource /users/refresh/
//   - UPDATE operation excluded: PATCH/PUT /users/{id}/ has no response schema and doesn't return 204 NO CONTENT
