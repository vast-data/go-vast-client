// Code generated by generate-typed-resources. DO NOT EDIT.
// Template: CREATE|LIST|READ|UPDATE|DELETE

package typed

import (
	"context"
	"net/http"
	"time"

	"github.com/vast-data/go-vast-client/core"
	"github.com/vast-data/go-vast-client/resources/untyped"
)

// -----------------------------------------------------
// RESOURCE TYPE
// -----------------------------------------------------

// Cnode represents a typed resource for cnode operations
type Cnode struct {
	*core.TypedVastResource
}

// -----------------------------------------------------
// SEARCH PARAMS
// -----------------------------------------------------

// CnodeSearchParams represents the search parameters for Cnode operations
type CnodeSearchParams struct {
	ClusterId   int64  `json:"cluster_id,omitempty" yaml:"cluster_id,omitempty" required:"false" doc:""`
	ClusterName string `json:"cluster_name,omitempty" yaml:"cluster_name,omitempty" required:"false" doc:""`
	Enabled     bool   `json:"enabled,omitempty" yaml:"enabled,omitempty" required:"false" doc:"Return only enabled CNodes"`
	Guid        string `json:"guid,omitempty" yaml:"guid,omitempty" required:"false" doc:"Global unique ID"`
	Ip          string `json:"ip,omitempty" yaml:"ip,omitempty" required:"false" doc:"Filter by CNode IP"`
	Name        string `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:"Filter by CNode name"`
	State       string `json:"state,omitempty" yaml:"state,omitempty" required:"false" doc:"Filter by state"`
	VippoolId   int64  `json:"vippool_id,omitempty" yaml:"vippool_id,omitempty" required:"false" doc:""`

	// RawData allows passing arbitrary search parameters as key-value pairs.
	//
	// Use this field when you need query parameters that are not covered by the typed fields above.
	// This is particularly useful for:
	//   - Dynamic filter operations (e.g., "path__contains", "name__icontains")
	//   - Django-style query filters
	//   - Custom backend-specific parameters
	//
	// Example:
	//   params := &CnodeSearchParams{
	//       RawData: core.Params{"path__contains": "/foo", "name__icontains": "bar"},
	//   }
	//
	// Note: You can use either the typed fields or RawData, or combine both.
	RawData core.Params `json:"-" yaml:"-"`
}

// -----------------------------------------------------
// REQUEST BODY
// -----------------------------------------------------

// CnodeRequestBody represents the request body for Cnode operations
type CnodeRequestBody struct {
	Ip        string `json:"ip,omitempty" yaml:"ip,omitempty" required:"true" doc:"The bond internal IP of the new CNode."`
	ClusterId int64  `json:"cluster_id,omitempty" yaml:"cluster_id,omitempty" required:"false" doc:""`
	Cores     int64  `json:"cores,omitempty" yaml:"cores,omitempty" required:"false" doc:"The number of cores the CNode will use"`
	DpuIps    string `json:"dpu_ips,omitempty" yaml:"dpu_ips,omitempty" required:"false" doc:"A list of IPv4 addresses and IP ranges."`
	Force     bool   `json:"force,omitempty" yaml:"force,omitempty" required:"false" doc:"Force adding the CNode"`
}

// -----------------------------------------------------
// MODELS
// -----------------------------------------------------

// CnodeDetailsModel represents the detailed model returned by GET/List operations
// Type alias to component definition: #/components/schemas/CNode
type CnodeDetailsModel = Component_CNode

// CnodeUpsertModel represents the model returned by Create/Update operations
// Type alias to component definition: #/components/schemas/AsyncCNode
type CnodeUpsertModel = Component_AsyncCNode

// -----------------------------------------------------
// LIST
// -----------------------------------------------------

// List retrieves multiple cnodes with typed request/response
// summary: List Cnodes
func (r *Cnode) List(req *CnodeSearchParams) ([]*CnodeDetailsModel, error) {
	return r.ListWithContext(r.Untyped.GetCtx(), req)
}

// ListWithContext retrieves multiple cnodes with typed request/response using provided context
// summary: List Cnodes
func (r *Cnode) ListWithContext(ctx context.Context, req *CnodeSearchParams) ([]*CnodeDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.GetResourceMap()[r.GetResourceType()].ListWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response []*CnodeDetailsModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// Get retrieves a single cnode with typed request/response
// summary: List Cnodes
func (r *Cnode) Get(req *CnodeSearchParams) (*CnodeDetailsModel, error) {
	return r.GetWithContext(r.Untyped.GetCtx(), req)
}

// GetWithContext retrieves a single cnode with typed request/response using provided context
// summary: List Cnodes
func (r *Cnode) GetWithContext(ctx context.Context, req *CnodeSearchParams) (*CnodeDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response CnodeDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// READ
// -----------------------------------------------------

// GetById retrieves a single cnode by ID
// summary: Return Details of a CNode
func (r *Cnode) GetById(id any) (*CnodeDetailsModel, error) {
	return r.GetByIdWithContext(r.Untyped.GetCtx(), id)
}

// GetByIdWithContext retrieves a single cnode by ID using provided context
// summary: Return Details of a CNode
func (r *Cnode) GetByIdWithContext(ctx context.Context, id any) (*CnodeDetailsModel, error) {
	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetByIdWithContext(ctx, id)
	if err != nil {
		return nil, err
	}

	var response CnodeDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// CREATE
// -----------------------------------------------------

// Create creates a new cnode with typed request/response
// summary: Add CNode
func (r *Cnode) Create(req *CnodeRequestBody) (*CnodeUpsertModel, error) {
	return r.CreateWithContext(r.Untyped.GetCtx(), req)
}

// CreateWithContext creates a new cnode with typed request/response using provided context
// summary: Add CNode
func (r *Cnode) CreateWithContext(ctx context.Context, req *CnodeRequestBody) (*CnodeUpsertModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].CreateWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response CnodeUpsertModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// UPDATE
// -----------------------------------------------------

// Update updates an existing cnode with typed request/response
func (r *Cnode) Update(id any, req *CnodeRequestBody) (*CnodeUpsertModel, error) {
	return r.UpdateWithContext(r.Untyped.GetCtx(), id, req)
}

// UpdateWithContext updates an existing cnode with typed request/response using provided context
func (r *Cnode) UpdateWithContext(ctx context.Context, id any, req *CnodeRequestBody) (*CnodeUpsertModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].UpdateWithContext(ctx, id, params)
	if err != nil {
		return nil, err
	}

	var response CnodeUpsertModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// DELETE
// -----------------------------------------------------

// Delete deletes a cnode with search parameters
//
// Parameters:
//   - force: Force CNode removal
func (r *Cnode) Delete(req *CnodeSearchParams, force bool) error {
	return r.DeleteWithContext(r.Untyped.GetCtx(), req, force)
}

// DeleteWithContext deletes a cnode with search parameters using provided context
//
// Parameters:
//   - force: Force CNode removal
func (r *Cnode) DeleteWithContext(ctx context.Context, req *CnodeSearchParams, force bool) error {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return err
	}

	// Build DELETE query params
	deleteQueryParams := core.Params{"force": force}
	// Build DELETE body params
	var deleteBody core.Params
	_, err = r.Untyped.GetResourceMap()[r.GetResourceType()].DeleteWithContext(ctx, params, deleteQueryParams, deleteBody)
	if err != nil {
		return err
	}
	return nil
}

// DeleteById deletes a cnode by ID and returns an async task
// summary: Remove CNode
//
// Parameters:
//   - id: CNode ID
//   - force: Force CNode removal
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (r *Cnode) DeleteById(id any, force bool, waitTimeout time.Duration) (*untyped.AsyncResult, error) {
	return r.DeleteByIdWithContext(r.Untyped.GetCtx(), id, force, waitTimeout)
}

// DeleteByIdWithContext deletes a cnode by ID and returns an async task using provided context
// summary: Remove CNode
//
// Parameters:
//   - id: CNode ID
//   - force: Force CNode removal
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (r *Cnode) DeleteByIdWithContext(ctx context.Context, id any, force bool, waitTimeout time.Duration) (*untyped.AsyncResult, error) {
	// For async DELETE, call core.Request directly to get the task response
	path := core.BuildResourcePathWithID(r.Untyped.GetResourceMap()[r.GetResourceType()].GetResourcePath(), id)

	// Build DELETE query params
	deleteQueryParams := core.Params{"force": force}
	// Build DELETE body params
	var deleteBody core.Params
	record, err := core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodDelete, path, deleteQueryParams, deleteBody)
	if err != nil {
		return nil, err
	}

	asyncResult, _, err := untyped.MaybeWaitAsyncResultWithContext(ctx, record, r.Untyped, waitTimeout)
	return asyncResult, err
}

// -----------------------------------------------------
// ENSURE
// -----------------------------------------------------

// Ensure ensures a cnode exists with typed response
func (r *Cnode) Ensure(searchParams *CnodeSearchParams, body *CnodeRequestBody) (*CnodeUpsertModel, error) {
	return r.EnsureWithContext(r.Untyped.GetCtx(), searchParams, body)
}

// EnsureWithContext ensures a cnode exists with typed response using provided context
func (r *Cnode) EnsureWithContext(ctx context.Context, searchParams *CnodeSearchParams, body *CnodeRequestBody) (*CnodeUpsertModel, error) {
	searchParamsConverted, err := core.NewParamsFromStruct(searchParams)
	if err != nil {
		return nil, err
	}
	bodyConverted, err := core.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].EnsureWithContext(ctx, searchParamsConverted, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response CnodeUpsertModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Exists checks if a cnode exists
func (r *Cnode) Exists(req *CnodeSearchParams) (bool, error) {
	return r.ExistsWithContext(r.Untyped.GetCtx(), req)
}

// ExistsWithContext checks if a cnode exists using provided context
func (r *Cnode) ExistsWithContext(ctx context.Context, req *CnodeSearchParams) (bool, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].ExistsWithContext(ctx, params)
}

// MustExists checks if a cnode exists and panics if not
func (r *Cnode) MustExists(req *CnodeSearchParams) bool {
	return r.MustExistsWithContext(r.Untyped.GetCtx(), req)
}

// MustExistsWithContext checks if a cnode exists and panics if not using provided context
func (r *Cnode) MustExistsWithContext(ctx context.Context, req *CnodeSearchParams) bool {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].MustExistsWithContext(ctx, params)
}

// -----------------------------------------------------
// EXTRA METHODS
// -----------------------------------------------------

// CnodeAddCnodes_POST_Body represents the request body for CnodeAddCnodes
type CnodeAddCnodes_POST_Body struct {
	DpuIps           string `json:"dpu_ips,omitempty" yaml:"dpu_ips,omitempty" required:"true" doc:"A list of IPv4 addresses and IP ranges for DPU CNodes."`
	ClusterId        int64  `json:"cluster_id,omitempty" yaml:"cluster_id,omitempty" required:"false" doc:""`
	Cores            int64  `json:"cores,omitempty" yaml:"cores,omitempty" required:"false" doc:"The number of cores the CNode will use"`
	Force            bool   `json:"force,omitempty" yaml:"force,omitempty" required:"false" doc:"Force adding the CNode"`
	Ips              string `json:"ips,omitempty" yaml:"ips,omitempty" required:"false" doc:"A list of IPv4 addresses and IP ranges for regular CNodes."`
	NumOfVirtualDpus int64  `json:"num_of_virtual_dpus,omitempty" yaml:"num_of_virtual_dpus,omitempty" required:"false" doc:"Number of virtual DPUs to bring up on a physical CNode"`
}

// CnodeAddCnodesWithContext_POST
// method: POST
// url: /cnodes/add_cnodes/
// summary: Add multiple CNodes to the cluster
//
// Parameters:
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (r *Cnode) CnodeAddCnodesWithContext_POST(ctx context.Context, body *CnodeAddCnodes_POST_Body, waitTimeout time.Duration) (*untyped.AsyncResult, error) {
	resourcePath := "/cnodes/add_cnodes/"

	var reqParams core.Params
	reqBody, err := core.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	result, err := core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodPost, resourcePath, reqParams, reqBody)
	if err != nil {
		return nil, err
	}

	asyncResult, _, err := untyped.MaybeWaitAsyncResultWithContext(ctx, result, r.Untyped, waitTimeout)
	return asyncResult, err

}

// CnodeAddCnodes_POST
// method: POST
// url: /cnodes/add_cnodes/
// summary: Add multiple CNodes to the cluster
//
// Parameters:
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (r *Cnode) CnodeAddCnodes_POST(body *CnodeAddCnodes_POST_Body, waitTimeout time.Duration) (*untyped.AsyncResult, error) {
	return r.CnodeAddCnodesWithContext_POST(r.Untyped.GetCtx(), body, waitTimeout)
}

// CnodeBgpconfig_GET_Model represents the response model for CnodeBgpconfig
type CnodeBgpconfig_GET_Model struct {
	Enabled          bool   `json:"enabled,omitempty" yaml:"enabled,omitempty" required:"false" doc:"Enable BGP"`
	Port1PeerAddress string `json:"port1_peer_address,omitempty" yaml:"port1_peer_address,omitempty" required:"false" doc:"Port1 peer address"`
	Port1SelfAddress string `json:"port1_self_address,omitempty" yaml:"port1_self_address,omitempty" required:"false" doc:"Port1 self address"`
	Port2PeerAddress string `json:"port2_peer_address,omitempty" yaml:"port2_peer_address,omitempty" required:"false" doc:"Port2 peer address"`
	Port2SelfAddress string `json:"port2_self_address,omitempty" yaml:"port2_self_address,omitempty" required:"false" doc:"Port2 self address"`
	SelfAsn          string `json:"self_asn,omitempty" yaml:"self_asn,omitempty" required:"false" doc:"ASN"`
	SubnetBits       int64  `json:"subnet_bits,omitempty" yaml:"subnet_bits,omitempty" required:"false" doc:"Subnet bits"`
}

// CnodeBgpconfigWithContext_GET
// method: GET
// url: /cnodes/{id}/bgpconfig
// summary: Get BGP Configuration
func (r *Cnode) CnodeBgpconfigWithContext_GET(ctx context.Context, id any) (*CnodeBgpconfig_GET_Model, error) {
	resourcePath := core.BuildResourcePathWithID("cnodes", id, "bgpconfig")

	var reqParams core.Params
	var reqBody core.Params

	record, err := core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodGet, resourcePath, reqParams, reqBody)
	if err != nil {
		return nil, err
	}

	var response CnodeBgpconfig_GET_Model
	if err := record.Fill(&response); err != nil {
		return nil, err
	}
	return &response, nil

}

// CnodeBgpconfig_GET
// method: GET
// url: /cnodes/{id}/bgpconfig
// summary: Get BGP Configuration
func (r *Cnode) CnodeBgpconfig_GET(id any) (*CnodeBgpconfig_GET_Model, error) {
	return r.CnodeBgpconfigWithContext_GET(r.Untyped.GetCtx(), id)
}

// CnodeBgpconfig_PATCH_Body represents the request body for CnodeBgpconfig
type CnodeBgpconfig_PATCH_Body struct {
	Enabled          bool   `json:"enabled,omitempty" yaml:"enabled,omitempty" required:"false" doc:"Enable BGP"`
	Port1PeerAddress string `json:"port1_peer_address,omitempty" yaml:"port1_peer_address,omitempty" required:"false" doc:"Port1 peer address"`
	Port1SelfAddress string `json:"port1_self_address,omitempty" yaml:"port1_self_address,omitempty" required:"false" doc:"Port1 self address"`
	Port2PeerAddress string `json:"port2_peer_address,omitempty" yaml:"port2_peer_address,omitempty" required:"false" doc:"Port2 peer address"`
	Port2SelfAddress string `json:"port2_self_address,omitempty" yaml:"port2_self_address,omitempty" required:"false" doc:"Port2 self address"`
	SelfAsn          string `json:"self_asn,omitempty" yaml:"self_asn,omitempty" required:"false" doc:"ASN"`
	SubnetBits       int64  `json:"subnet_bits,omitempty" yaml:"subnet_bits,omitempty" required:"false" doc:"Subnet bits"`
}

// CnodeBgpconfigWithContext_PATCH
// method: PATCH
// url: /cnodes/{id}/bgpconfig
// summary: Configure BGP on CNode
func (r *Cnode) CnodeBgpconfigWithContext_PATCH(ctx context.Context, id any, body *CnodeBgpconfig_PATCH_Body) error {
	resourcePath := core.BuildResourcePathWithID("cnodes", id, "bgpconfig")

	var reqParams core.Params
	reqBody, err := core.NewParamsFromStruct(body)
	if err != nil {
		return err
	}

	_, err = core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodPatch, resourcePath, reqParams, reqBody)
	return err

}

// CnodeBgpconfig_PATCH
// method: PATCH
// url: /cnodes/{id}/bgpconfig
// summary: Configure BGP on CNode
func (r *Cnode) CnodeBgpconfig_PATCH(id any, body *CnodeBgpconfig_PATCH_Body) error {
	return r.CnodeBgpconfigWithContext_PATCH(r.Untyped.GetCtx(), id, body)
}

// CnodeControlLedWithContext_PATCH
// method: PATCH
// url: /cnodes/{id}/control_led/
// summary: Control CNode LED
//
// Parameters:
//   - control (body): LED state
func (r *Cnode) CnodeControlLedWithContext_PATCH(ctx context.Context, id any, control string) error {
	resourcePath := core.BuildResourcePathWithID("cnodes", id, "control_led")

	var reqParams core.Params
	reqBody := core.Params{}
	if control != "" {
		reqBody["control"] = control
	}

	_, err := core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodPatch, resourcePath, reqParams, reqBody)
	return err

}

// CnodeControlLed_PATCH
// method: PATCH
// url: /cnodes/{id}/control_led/
// summary: Control CNode LED
//
// Parameters:
//   - control (body): LED state
func (r *Cnode) CnodeControlLed_PATCH(id any, control string) error {
	return r.CnodeControlLedWithContext_PATCH(r.Untyped.GetCtx(), id, control)
}

// CnodeHighlightWithContext_PATCH
// method: PATCH
// url: /cnodes/{id}/highlight/
// summary: HighLight CNode
//
// Parameters:
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (r *Cnode) CnodeHighlightWithContext_PATCH(ctx context.Context, id any, waitTimeout time.Duration) (*untyped.AsyncResult, error) {
	resourcePath := core.BuildResourcePathWithID("cnodes", id, "highlight")

	var reqParams core.Params
	var reqBody core.Params

	result, err := core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodPatch, resourcePath, reqParams, reqBody)
	if err != nil {
		return nil, err
	}

	asyncResult, _, err := untyped.MaybeWaitAsyncResultWithContext(ctx, result, r.Untyped, waitTimeout)
	return asyncResult, err

}

// CnodeHighlight_PATCH
// method: PATCH
// url: /cnodes/{id}/highlight/
// summary: HighLight CNode
//
// Parameters:
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (r *Cnode) CnodeHighlight_PATCH(id any, waitTimeout time.Duration) (*untyped.AsyncResult, error) {
	return r.CnodeHighlightWithContext_PATCH(r.Untyped.GetCtx(), id, waitTimeout)
}

// CnodeRenameWithContext_PATCH
// method: PATCH
// url: /cnodes/{id}/rename/
// summary: Rename CNode
//
// Parameters:
//   - name (body): New CNode name
func (r *Cnode) CnodeRenameWithContext_PATCH(ctx context.Context, id any, name string) error {
	resourcePath := core.BuildResourcePathWithID("cnodes", id, "rename")

	var reqParams core.Params
	reqBody := core.Params{}
	if name != "" {
		reqBody["name"] = name
	}

	_, err := core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodPatch, resourcePath, reqParams, reqBody)
	return err

}

// CnodeRename_PATCH
// method: PATCH
// url: /cnodes/{id}/rename/
// summary: Rename CNode
//
// Parameters:
//   - name (body): New CNode name
func (r *Cnode) CnodeRename_PATCH(id any, name string) error {
	return r.CnodeRenameWithContext_PATCH(r.Untyped.GetCtx(), id, name)
}

// CnodeSetTenantsWithContext_POST
// method: POST
// url: /cnodes/set_tenants/
// summary: Attach tenants to a CNode
//
// Parameters:
//   - id (body): CNode ID
//   - mode (body): NONE/DEDICATED/SHARED
//   - tenantIds (body): A list of tenet IDs
func (r *Cnode) CnodeSetTenantsWithContext_POST(ctx context.Context, id int64, mode string, tenantIds string) error {
	resourcePath := "/cnodes/set_tenants/"

	var reqParams core.Params
	reqBody := core.Params{}
	reqBody["id"] = id
	reqBody["mode"] = mode
	reqBody["tenant_ids"] = tenantIds

	_, err := core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodPost, resourcePath, reqParams, reqBody)
	return err

}

// CnodeSetTenants_POST
// method: POST
// url: /cnodes/set_tenants/
// summary: Attach tenants to a CNode
//
// Parameters:
//   - id (body): CNode ID
//   - mode (body): NONE/DEDICATED/SHARED
//   - tenantIds (body): A list of tenet IDs
func (r *Cnode) CnodeSetTenants_POST(id int64, mode string, tenantIds string) error {
	return r.CnodeSetTenantsWithContext_POST(r.Untyped.GetCtx(), id, mode, tenantIds)
}
