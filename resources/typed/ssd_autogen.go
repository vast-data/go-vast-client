// Code generated by generate-typed-resources. DO NOT EDIT.
// Template: LIST|READ|UPDATE|DELETE

package typed

import (
	"context"
	"net/http"
	"time"

	"github.com/vast-data/go-vast-client/core"
	"github.com/vast-data/go-vast-client/resources/untyped"
)

// -----------------------------------------------------
// RESOURCE TYPE
// -----------------------------------------------------

// Ssd represents a typed resource for ssd operations
type Ssd struct {
	*core.TypedVastResource
}

// -----------------------------------------------------
// SEARCH PARAMS
// -----------------------------------------------------

// SsdSearchParams represents the search parameters for Ssd operations
type SsdSearchParams struct {
	FwVersion string `json:"fw_version,omitempty" yaml:"fw_version,omitempty" required:"false" doc:"Filter by SSD firmware version"`
	Guid      string `json:"guid,omitempty" yaml:"guid,omitempty" required:"false" doc:"Global unique ID"`
	Model     string `json:"model,omitempty" yaml:"model,omitempty" required:"false" doc:"Filter by SSD model"`
	Name      string `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:""`
	Sn        string `json:"sn,omitempty" yaml:"sn,omitempty" required:"false" doc:"Filter by SSD serial number"`
	State     string `json:"state,omitempty" yaml:"state,omitempty" required:"false" doc:"Filter by SSD state"`

	// RawData allows passing arbitrary search parameters as key-value pairs.
	//
	// Use this field when you need query parameters that are not covered by the typed fields above.
	// This is particularly useful for:
	//   - Dynamic filter operations (e.g., "path__contains", "name__icontains")
	//   - Django-style query filters
	//   - Custom backend-specific parameters
	//
	// Example:
	//   params := &SsdSearchParams{
	//       RawData: core.Params{"path__contains": "/foo", "name__icontains": "bar"},
	//   }
	//
	// Note: You can use either the typed fields or RawData, or combine both.
	RawData core.Params `json:"-" yaml:"-"`
}

// -----------------------------------------------------
// MODELS
// -----------------------------------------------------

// SsdDetailsModel represents the detailed model returned by GET/List operations
// Type alias to component definition: #/components/schemas/SSD
type SsdDetailsModel = Component_SSD

// SsdEditModel represents the model returned by Update operations
// Type alias to component definition: #/components/schemas/AsyncTaskInResponse
type SsdEditModel = Component_AsyncTaskInResponse

// -----------------------------------------------------
// LIST
// -----------------------------------------------------

// List retrieves multiple ssds with typed request/response
// summary: List SSDs
func (r *Ssd) List(req *SsdSearchParams) ([]*SsdDetailsModel, error) {
	return r.ListWithContext(r.Untyped.GetCtx(), req)
}

// ListWithContext retrieves multiple ssds with typed request/response using provided context
// summary: List SSDs
func (r *Ssd) ListWithContext(ctx context.Context, req *SsdSearchParams) ([]*SsdDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.GetResourceMap()[r.GetResourceType()].ListWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response []*SsdDetailsModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// Get retrieves a single ssd with typed request/response
// summary: List SSDs
func (r *Ssd) Get(req *SsdSearchParams) (*SsdDetailsModel, error) {
	return r.GetWithContext(r.Untyped.GetCtx(), req)
}

// GetWithContext retrieves a single ssd with typed request/response using provided context
// summary: List SSDs
func (r *Ssd) GetWithContext(ctx context.Context, req *SsdSearchParams) (*SsdDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response SsdDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// READ
// -----------------------------------------------------

// GetById retrieves a single ssd by ID
// summary: Return Details of an SSD
func (r *Ssd) GetById(id any) (*SsdDetailsModel, error) {
	return r.GetByIdWithContext(r.Untyped.GetCtx(), id)
}

// GetByIdWithContext retrieves a single ssd by ID using provided context
// summary: Return Details of an SSD
func (r *Ssd) GetByIdWithContext(ctx context.Context, id any) (*SsdDetailsModel, error) {
	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetByIdWithContext(ctx, id)
	if err != nil {
		return nil, err
	}

	var response SsdDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// UPDATE
// -----------------------------------------------------

// Update updates an existing ssd with typed request/response
//
// Parameters:
//   - enabled: True for activate, False for deactivate
func (r *Ssd) Update(id any, enabled bool) (*SsdEditModel, error) {
	return r.UpdateWithContext(r.Untyped.GetCtx(), id, enabled)
}

// UpdateWithContext updates an existing ssd with typed request/response using provided context
//
// Parameters:
//   - enabled: True for activate, False for deactivate
func (r *Ssd) UpdateWithContext(ctx context.Context, id any, enabled bool) (*SsdEditModel, error) {
	params := core.Params{
		"enabled": enabled,
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].UpdateWithContext(ctx, id, params)
	if err != nil {
		return nil, err
	}

	var response SsdEditModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// DELETE
// -----------------------------------------------------

// Delete deletes a ssd with search parameters
func (r *Ssd) Delete(req *SsdSearchParams) error {
	return r.DeleteWithContext(r.Untyped.GetCtx(), req)
}

// DeleteWithContext deletes a ssd with search parameters using provided context
func (r *Ssd) DeleteWithContext(ctx context.Context, req *SsdSearchParams) error {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return err
	}
	_, err = r.Untyped.GetResourceMap()[r.GetResourceType()].DeleteWithContext(ctx, params, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteById deletes a ssd by ID
func (r *Ssd) DeleteById(id any) error {
	return r.DeleteByIdWithContext(r.Untyped.GetCtx(), id)
}

// DeleteByIdWithContext deletes a ssd by ID using provided context
func (r *Ssd) DeleteByIdWithContext(ctx context.Context, id any) error {
	_, err := r.Untyped.GetResourceMap()[r.GetResourceType()].DeleteByIdWithContext(ctx, id, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// Exists checks if a ssd exists
func (r *Ssd) Exists(req *SsdSearchParams) (bool, error) {
	return r.ExistsWithContext(r.Untyped.GetCtx(), req)
}

// ExistsWithContext checks if a ssd exists using provided context
func (r *Ssd) ExistsWithContext(ctx context.Context, req *SsdSearchParams) (bool, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].ExistsWithContext(ctx, params)
}

// MustExists checks if a ssd exists and panics if not
func (r *Ssd) MustExists(req *SsdSearchParams) bool {
	return r.MustExistsWithContext(r.Untyped.GetCtx(), req)
}

// MustExistsWithContext checks if a ssd exists and panics if not using provided context
func (r *Ssd) MustExistsWithContext(ctx context.Context, req *SsdSearchParams) bool {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].MustExistsWithContext(ctx, params)
}

// -----------------------------------------------------
// EXTRA METHODS
// -----------------------------------------------------

// SsdControlLedWithContext_PATCH
// method: PATCH
// url: /ssds/{id}/control_led/
// summary: Turn SSD identification LED on and off
//
// Parameters:
//   - control (body): LED state
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (r *Ssd) SsdControlLedWithContext_PATCH(ctx context.Context, id any, control string, waitTimeout time.Duration) (*untyped.AsyncResult, error) {
	resourcePath := core.BuildResourcePathWithID("ssds", id, "control_led")

	var reqParams core.Params
	reqBody := core.Params{}
	if control != "" {
		reqBody["control"] = control
	}

	result, err := core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodPatch, resourcePath, reqParams, reqBody)
	if err != nil {
		return nil, err
	}

	asyncResult, _, err := untyped.MaybeWaitAsyncResultWithContext(ctx, result, r.Untyped, waitTimeout)
	return asyncResult, err

}

// SsdControlLed_PATCH
// method: PATCH
// url: /ssds/{id}/control_led/
// summary: Turn SSD identification LED on and off
//
// Parameters:
//   - control (body): LED state
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (r *Ssd) SsdControlLed_PATCH(id any, control string, waitTimeout time.Duration) (*untyped.AsyncResult, error) {
	return r.SsdControlLedWithContext_PATCH(r.Untyped.GetCtx(), id, control, waitTimeout)
}

// SsdFormatWithContext_PATCH
// method: PATCH
// url: /ssds/{id}/format/
// summary: Format SSD
//
// Parameters:
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (r *Ssd) SsdFormatWithContext_PATCH(ctx context.Context, id any, waitTimeout time.Duration) (*untyped.AsyncResult, error) {
	resourcePath := core.BuildResourcePathWithID("ssds", id, "format")

	var reqParams core.Params
	var reqBody core.Params

	result, err := core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodPatch, resourcePath, reqParams, reqBody)
	if err != nil {
		return nil, err
	}

	asyncResult, _, err := untyped.MaybeWaitAsyncResultWithContext(ctx, result, r.Untyped, waitTimeout)
	return asyncResult, err

}

// SsdFormat_PATCH
// method: PATCH
// url: /ssds/{id}/format/
// summary: Format SSD
//
// Parameters:
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (r *Ssd) SsdFormat_PATCH(id any, waitTimeout time.Duration) (*untyped.AsyncResult, error) {
	return r.SsdFormatWithContext_PATCH(r.Untyped.GetCtx(), id, waitTimeout)
}
