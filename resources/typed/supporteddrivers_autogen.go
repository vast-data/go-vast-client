// Code generated by generate-typed-resources. DO NOT EDIT.
// Template: CREATE|LIST|UPDATE|DELETE

package typed

import (
	"context"

	"github.com/vast-data/go-vast-client/core"
)

// -----------------------------------------------------
// RESOURCE TYPE
// -----------------------------------------------------

// SupportedDrivers represents a typed resource for supporteddrivers operations
type SupportedDrivers struct {
	*core.TypedVastResource
}

// -----------------------------------------------------
// SEARCH PARAMS
// -----------------------------------------------------

// SupportedDriversSearchParams represents the search parameters for SupportedDrivers operations
type SupportedDriversSearchParams struct {

	// RawData allows passing arbitrary search parameters as key-value pairs.
	//
	// Use this field when you need query parameters that are not covered by the typed fields above.
	// This is particularly useful for:
	//   - Dynamic filter operations (e.g., "path__contains", "name__icontains")
	//   - Django-style query filters
	//   - Custom backend-specific parameters
	//
	// Example:
	//   params := &SupportedDriversSearchParams{
	//       RawData: core.Params{"path__contains": "/foo", "name__icontains": "bar"},
	//   }
	//
	// Note: You can use either the typed fields or RawData, or combine both.
	RawData core.Params `json:"-" yaml:"-"`
}

// -----------------------------------------------------
// REQUEST BODY
// -----------------------------------------------------

// SupporteddriveRequestBody_DrivesItem represents a nested type for request body
type SupporteddriveRequestBody_DrivesItem struct {
	CapacityTb int64                                          `json:"capacity_tb,omitempty" yaml:"capacity_tb,omitempty" required:"false" doc:""`
	Fw         *[]SupporteddriveRequestBody_DrivesItem_FwItem `json:"fw,omitempty" yaml:"fw,omitempty" required:"false" doc:""`
	HwPlatform *[]string                                      `json:"hw_platform,omitempty" yaml:"hw_platform,omitempty" required:"false" doc:""`
	Model      string                                         `json:"model,omitempty" yaml:"model,omitempty" required:"false" doc:""`
	Name       string                                         `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:""`
	Type       string                                         `json:"type,omitempty" yaml:"type,omitempty" required:"false" doc:""`
}

// SupporteddriveRequestBody_DrivesItem_FwItem represents a nested type for request body
type SupporteddriveRequestBody_DrivesItem_FwItem struct {
	Latest bool   `json:"latest,omitempty" yaml:"latest,omitempty" required:"false" doc:""`
	Name   string `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:""`
}

// SupporteddriveRequestBody_PlatformsItem represents a nested type for request body
type SupporteddriveRequestBody_PlatformsItem struct {
	DefaultSectionLayout string `json:"default_section_layout,omitempty" yaml:"default_section_layout,omitempty" required:"false" doc:""`
	Name                 string `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:""`
	SsdCapacityTb        int64  `json:"ssd_capacity_tb,omitempty" yaml:"ssd_capacity_tb,omitempty" required:"false" doc:""`
}

// SupportedDriversRequestBody represents the request body for SupportedDrivers operations
type SupportedDriversRequestBody struct {
	Drives    *[]SupporteddriveRequestBody_DrivesItem    `json:"drives,omitempty" yaml:"drives,omitempty" required:"false" doc:"List of supported drives"`
	Platforms *[]SupporteddriveRequestBody_PlatformsItem `json:"platforms,omitempty" yaml:"platforms,omitempty" required:"false" doc:"List of supported hw platforms"`
	Replace   bool                                       `json:"replace,omitempty" yaml:"replace,omitempty" required:"false" doc:"Remove drives not present in data"`
	Signature string                                     `json:"signature,omitempty" yaml:"signature,omitempty" required:"false" doc:"Signature, base64-encoded"`
	Version   string                                     `json:"version,omitempty" yaml:"version,omitempty" required:"false" doc:"Version"`
}

// -----------------------------------------------------
// MODELS
// -----------------------------------------------------

// SupportedDriversDetailsModel represents the detailed model returned by GET/List operations
// Type alias to component definition: #/components/schemas/SupportedDrive
type SupportedDriversDetailsModel = Component_SupportedDrive

// SupportedDriversUpsertModel represents the model returned by Create/Update operations
type SupportedDriversUpsertModel struct {
	Created int64 `json:"created,omitempty" yaml:"created,omitempty" required:"false" doc:""`
}

// -----------------------------------------------------
// LIST
// -----------------------------------------------------

// List retrieves multiple supporteddriverss with typed request/response
func (r *SupportedDrivers) List(req *SupportedDriversSearchParams) ([]*SupportedDriversDetailsModel, error) {
	return r.ListWithContext(r.Untyped.GetCtx(), req)
}

// ListWithContext retrieves multiple supporteddriverss with typed request/response using provided context
func (r *SupportedDrivers) ListWithContext(ctx context.Context, req *SupportedDriversSearchParams) ([]*SupportedDriversDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.GetResourceMap()[r.GetResourceType()].ListWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response []*SupportedDriversDetailsModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// Get retrieves a single supporteddrivers with typed request/response
func (r *SupportedDrivers) Get(req *SupportedDriversSearchParams) (*SupportedDriversDetailsModel, error) {
	return r.GetWithContext(r.Untyped.GetCtx(), req)
}

// GetWithContext retrieves a single supporteddrivers with typed request/response using provided context
func (r *SupportedDrivers) GetWithContext(ctx context.Context, req *SupportedDriversSearchParams) (*SupportedDriversDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response SupportedDriversDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// CREATE
// -----------------------------------------------------

// Create creates a new supporteddrivers with typed request/response
func (r *SupportedDrivers) Create(req *SupportedDriversRequestBody) (*SupportedDriversUpsertModel, error) {
	return r.CreateWithContext(r.Untyped.GetCtx(), req)
}

// CreateWithContext creates a new supporteddrivers with typed request/response using provided context
func (r *SupportedDrivers) CreateWithContext(ctx context.Context, req *SupportedDriversRequestBody) (*SupportedDriversUpsertModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].CreateWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response SupportedDriversUpsertModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// UPDATE
// -----------------------------------------------------

// Update updates an existing supporteddrivers with typed request/response
func (r *SupportedDrivers) Update(id any, req *SupportedDriversRequestBody) (*SupportedDriversUpsertModel, error) {
	return r.UpdateWithContext(r.Untyped.GetCtx(), id, req)
}

// UpdateWithContext updates an existing supporteddrivers with typed request/response using provided context
func (r *SupportedDrivers) UpdateWithContext(ctx context.Context, id any, req *SupportedDriversRequestBody) (*SupportedDriversUpsertModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].UpdateWithContext(ctx, id, params)
	if err != nil {
		return nil, err
	}

	var response SupportedDriversUpsertModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// DELETE
// -----------------------------------------------------

// Delete deletes a supporteddrivers with search parameters
func (r *SupportedDrivers) Delete(req *SupportedDriversSearchParams) error {
	return r.DeleteWithContext(r.Untyped.GetCtx(), req)
}

// DeleteWithContext deletes a supporteddrivers with search parameters using provided context
func (r *SupportedDrivers) DeleteWithContext(ctx context.Context, req *SupportedDriversSearchParams) error {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return err
	}
	_, err = r.Untyped.GetResourceMap()[r.GetResourceType()].DeleteWithContext(ctx, params, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteById deletes a supporteddrivers by ID
func (r *SupportedDrivers) DeleteById(id any) error {
	return r.DeleteByIdWithContext(r.Untyped.GetCtx(), id)
}

// DeleteByIdWithContext deletes a supporteddrivers by ID using provided context
func (r *SupportedDrivers) DeleteByIdWithContext(ctx context.Context, id any) error {
	_, err := r.Untyped.GetResourceMap()[r.GetResourceType()].DeleteByIdWithContext(ctx, id, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// -----------------------------------------------------
// ENSURE
// -----------------------------------------------------

// Ensure ensures a supporteddrivers exists with typed response
func (r *SupportedDrivers) Ensure(searchParams *SupportedDriversSearchParams, body *SupportedDriversRequestBody) (*SupportedDriversUpsertModel, error) {
	return r.EnsureWithContext(r.Untyped.GetCtx(), searchParams, body)
}

// EnsureWithContext ensures a supporteddrivers exists with typed response using provided context
func (r *SupportedDrivers) EnsureWithContext(ctx context.Context, searchParams *SupportedDriversSearchParams, body *SupportedDriversRequestBody) (*SupportedDriversUpsertModel, error) {
	searchParamsConverted, err := core.NewParamsFromStruct(searchParams)
	if err != nil {
		return nil, err
	}
	bodyConverted, err := core.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].EnsureWithContext(ctx, searchParamsConverted, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response SupportedDriversUpsertModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Exists checks if a supporteddrivers exists
func (r *SupportedDrivers) Exists(req *SupportedDriversSearchParams) (bool, error) {
	return r.ExistsWithContext(r.Untyped.GetCtx(), req)
}

// ExistsWithContext checks if a supporteddrivers exists using provided context
func (r *SupportedDrivers) ExistsWithContext(ctx context.Context, req *SupportedDriversSearchParams) (bool, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].ExistsWithContext(ctx, params)
}

// MustExists checks if a supporteddrivers exists and panics if not
func (r *SupportedDrivers) MustExists(req *SupportedDriversSearchParams) bool {
	return r.MustExistsWithContext(r.Untyped.GetCtx(), req)
}

// MustExistsWithContext checks if a supporteddrivers exists and panics if not using provided context
func (r *SupportedDrivers) MustExistsWithContext(ctx context.Context, req *SupportedDriversSearchParams) bool {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].MustExistsWithContext(ctx, params)
}

// -----------------------------------------------------
// GENERATION ISSUES
// -----------------------------------------------------
//   - CREATE operation excluded: POST supporteddrives has no response schema and doesn't return 204 NO CONTENT
//   - LIST operation excluded: GET supporteddrives returns array of objects without properties
//   - READ operation excluded: GET /supporteddrives/{id}/ returns object without properties
