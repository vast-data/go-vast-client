// Code generated by generate-typed-resources. DO NOT EDIT.
// Template: LIST|READ|UPDATE

package typed

import (
	"context"
	"fmt"
	"net/http"

	"github.com/vast-data/go-vast-client/core"
)

// -----------------------------------------------------
// RESOURCE TYPE
// -----------------------------------------------------

// NicPort represents a typed resource for nicport operations
type NicPort struct {
	*core.TypedVastResource
}

// -----------------------------------------------------
// SEARCH PARAMS
// -----------------------------------------------------

// NicPortSearchParams represents the search parameters for NicPort operations
type NicPortSearchParams struct {
	Guid  string `json:"guid,omitempty" yaml:"guid,omitempty" required:"false" doc:""`
	Name  string `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:""`
	State string `json:"state,omitempty" yaml:"state,omitempty" required:"false" doc:"Filter by state"`

	// RawData allows passing arbitrary search parameters as key-value pairs.
	//
	// Use this field when you need query parameters that are not covered by the typed fields above.
	// This is particularly useful for:
	//   - Dynamic filter operations (e.g., "path__contains", "name__icontains")
	//   - Django-style query filters
	//   - Custom backend-specific parameters
	//
	// Example:
	//   params := &NicPortSearchParams{
	//       RawData: core.Params{"path__contains": "/foo", "name__icontains": "bar"},
	//   }
	//
	// Note: You can use either the typed fields or RawData, or combine both.
	RawData core.Params `json:"-" yaml:"-"`
}

// -----------------------------------------------------
// MODELS
// -----------------------------------------------------

// NicPortDetailsModel represents the detailed model returned by GET/List operations
// Type alias to component definition: #/components/schemas/NICPort
type NicPortDetailsModel = Component_NICPort

// NicPortEditModel represents the model returned by Update operations
// Type alias to component definition: #/components/schemas/AsyncTaskInResponse
type NicPortEditModel = Component_AsyncTaskInResponse

// -----------------------------------------------------
// LIST
// -----------------------------------------------------

// List retrieves multiple nicports with typed request/response
// summary: List NIC Ports.
func (r *NicPort) List(req *NicPortSearchParams) ([]*NicPortDetailsModel, error) {
	return r.ListWithContext(r.Untyped.GetCtx(), req)
}

// ListWithContext retrieves multiple nicports with typed request/response using provided context
// summary: List NIC Ports.
func (r *NicPort) ListWithContext(ctx context.Context, req *NicPortSearchParams) ([]*NicPortDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.GetResourceMap()[r.GetResourceType()].ListWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response []*NicPortDetailsModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// Get retrieves a single nicport with typed request/response
// summary: List NIC Ports.
func (r *NicPort) Get(req *NicPortSearchParams) (*NicPortDetailsModel, error) {
	return r.GetWithContext(r.Untyped.GetCtx(), req)
}

// GetWithContext retrieves a single nicport with typed request/response using provided context
// summary: List NIC Ports.
func (r *NicPort) GetWithContext(ctx context.Context, req *NicPortSearchParams) (*NicPortDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response NicPortDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// READ
// -----------------------------------------------------

// GetById retrieves a single nicport by ID
// summary: Return Details of One NICPort.
func (r *NicPort) GetById(id any) (*NicPortDetailsModel, error) {
	return r.GetByIdWithContext(r.Untyped.GetCtx(), id)
}

// GetByIdWithContext retrieves a single nicport by ID using provided context
// summary: Return Details of One NICPort.
func (r *NicPort) GetByIdWithContext(ctx context.Context, id any) (*NicPortDetailsModel, error) {
	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetByIdWithContext(ctx, id)
	if err != nil {
		return nil, err
	}

	var response NicPortDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// UPDATE
// -----------------------------------------------------

// Update updates an existing nicport with typed request/response
//
// Parameters:
//   - enabled: True for enable, False for disable
func (r *NicPort) Update(id any, enabled bool) (*NicPortEditModel, error) {
	return r.UpdateWithContext(r.Untyped.GetCtx(), id, enabled)
}

// UpdateWithContext updates an existing nicport with typed request/response using provided context
//
// Parameters:
//   - enabled: True for enable, False for disable
func (r *NicPort) UpdateWithContext(ctx context.Context, id any, enabled bool) (*NicPortEditModel, error) {
	params := core.Params{
		"enabled": enabled,
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].UpdateWithContext(ctx, id, params)
	if err != nil {
		return nil, err
	}

	var response NicPortEditModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Exists checks if a nicport exists
func (r *NicPort) Exists(req *NicPortSearchParams) (bool, error) {
	return r.ExistsWithContext(r.Untyped.GetCtx(), req)
}

// ExistsWithContext checks if a nicport exists using provided context
func (r *NicPort) ExistsWithContext(ctx context.Context, req *NicPortSearchParams) (bool, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].ExistsWithContext(ctx, params)
}

// MustExists checks if a nicport exists and panics if not
func (r *NicPort) MustExists(req *NicPortSearchParams) bool {
	return r.MustExistsWithContext(r.Untyped.GetCtx(), req)
}

// MustExistsWithContext checks if a nicport exists and panics if not using provided context
func (r *NicPort) MustExistsWithContext(ctx context.Context, req *NicPortSearchParams) bool {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].MustExistsWithContext(ctx, params)
}

// -----------------------------------------------------
// EXTRA METHODS
// -----------------------------------------------------

// NicPortRelatedNicportsWithContext_GET
// method: GET
// url: /nicports/{id}/related_nicports/
// summary: Get Related NICPorts
func (r *NicPort) NicPortRelatedNicportsWithContext_GET(ctx context.Context, id any) ([]int, error) {
	resourcePath := core.BuildResourcePathWithID("nicports", id, "related_nicports")

	var reqParams core.Params
	var reqBody core.Params

	record, err := core.Request[core.RecordSet](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodGet, resourcePath, reqParams, reqBody)
	if err != nil {
		return nil, err
	}
	// Convert RecordSet ([]core.Record) to typed array ([]int)
	result := make([]int, len(record))
	for i, item := range record {
		if err := item.Fill(&result[i]); err != nil {
			return nil, fmt.Errorf("failed to unmarshal array item %d: %w", i, err)
		}
	}
	return result, nil

}

// NicPortRelatedNicports_GET
// method: GET
// url: /nicports/{id}/related_nicports/
// summary: Get Related NICPorts
func (r *NicPort) NicPortRelatedNicports_GET(id any) ([]int, error) {
	return r.NicPortRelatedNicportsWithContext_GET(r.Untyped.GetCtx(), id)
}
