// Code generated by generate-typed-resources. DO NOT EDIT.
// Template: LIST|READ|DELETE

package typed

import (
	"context"
	"fmt"
	"net/http"

	"github.com/vast-data/go-vast-client/core"
)

// -----------------------------------------------------
// RESOURCE TYPE
// -----------------------------------------------------

// KafkaBroker represents a typed resource for kafkabroker operations
type KafkaBroker struct {
	*core.TypedVastResource
}

// -----------------------------------------------------
// SEARCH PARAMS
// -----------------------------------------------------

// KafkaBrokerSearchParams represents the search parameters for KafkaBroker operations
type KafkaBrokerSearchParams struct {
	Name     string `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:"Name of the Kafka broker configuration"`
	TenantId int64  `json:"tenant_id,omitempty" yaml:"tenant_id,omitempty" required:"false" doc:"Tenant ID. If missing, accessed by all tenants"`

	// RawData allows passing arbitrary search parameters as key-value pairs.
	//
	// Use this field when you need query parameters that are not covered by the typed fields above.
	// This is particularly useful for:
	//   - Dynamic filter operations (e.g., "path__contains", "name__icontains")
	//   - Django-style query filters
	//   - Custom backend-specific parameters
	//
	// Example:
	//   params := &KafkaBrokerSearchParams{
	//       RawData: core.Params{"path__contains": "/foo", "name__icontains": "bar"},
	//   }
	//
	// Note: You can use either the typed fields or RawData, or combine both.
	RawData core.Params `json:"-" yaml:"-"`
}

// -----------------------------------------------------
// MODELS
// -----------------------------------------------------

// KafkaBrokerDetailsModel represents the detailed model returned by GET/List operations
// Type alias to component definition: #/components/schemas/KafkaBrokerConfig
type KafkaBrokerDetailsModel = Component_KafkaBrokerConfig

// -----------------------------------------------------
// LIST
// -----------------------------------------------------

// List retrieves multiple kafkabrokers with typed request/response
// summary: List of External Kafka Broker Configuration
func (r *KafkaBroker) List(req *KafkaBrokerSearchParams) ([]*KafkaBrokerDetailsModel, error) {
	return r.ListWithContext(r.Untyped.GetCtx(), req)
}

// ListWithContext retrieves multiple kafkabrokers with typed request/response using provided context
// summary: List of External Kafka Broker Configuration
func (r *KafkaBroker) ListWithContext(ctx context.Context, req *KafkaBrokerSearchParams) ([]*KafkaBrokerDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.GetResourceMap()[r.GetResourceType()].ListWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response []*KafkaBrokerDetailsModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// Get retrieves a single kafkabroker with typed request/response
// summary: List of External Kafka Broker Configuration
func (r *KafkaBroker) Get(req *KafkaBrokerSearchParams) (*KafkaBrokerDetailsModel, error) {
	return r.GetWithContext(r.Untyped.GetCtx(), req)
}

// GetWithContext retrieves a single kafkabroker with typed request/response using provided context
// summary: List of External Kafka Broker Configuration
func (r *KafkaBroker) GetWithContext(ctx context.Context, req *KafkaBrokerSearchParams) (*KafkaBrokerDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response KafkaBrokerDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// READ
// -----------------------------------------------------

// GetById retrieves a single kafkabroker by ID
// summary: Return External Kafka Broker Configuration
func (r *KafkaBroker) GetById(id any) (*KafkaBrokerDetailsModel, error) {
	return r.GetByIdWithContext(r.Untyped.GetCtx(), id)
}

// GetByIdWithContext retrieves a single kafkabroker by ID using provided context
// summary: Return External Kafka Broker Configuration
func (r *KafkaBroker) GetByIdWithContext(ctx context.Context, id any) (*KafkaBrokerDetailsModel, error) {
	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetByIdWithContext(ctx, id)
	if err != nil {
		return nil, err
	}

	var response KafkaBrokerDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// DELETE
// -----------------------------------------------------

// Delete deletes a kafkabroker with search parameters
func (r *KafkaBroker) Delete(req *KafkaBrokerSearchParams) error {
	return r.DeleteWithContext(r.Untyped.GetCtx(), req)
}

// DeleteWithContext deletes a kafkabroker with search parameters using provided context
func (r *KafkaBroker) DeleteWithContext(ctx context.Context, req *KafkaBrokerSearchParams) error {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return err
	}
	_, err = r.Untyped.GetResourceMap()[r.GetResourceType()].DeleteWithContext(ctx, params, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteById deletes a kafkabroker by ID
// summary: Delete External Kafka Broker Configuration
func (r *KafkaBroker) DeleteById(id any) error {
	return r.DeleteByIdWithContext(r.Untyped.GetCtx(), id)
}

// DeleteByIdWithContext deletes a kafkabroker by ID using provided context
// summary: Delete External Kafka Broker Configuration
func (r *KafkaBroker) DeleteByIdWithContext(ctx context.Context, id any) error {
	_, err := r.Untyped.GetResourceMap()[r.GetResourceType()].DeleteByIdWithContext(ctx, id, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// Exists checks if a kafkabroker exists
func (r *KafkaBroker) Exists(req *KafkaBrokerSearchParams) (bool, error) {
	return r.ExistsWithContext(r.Untyped.GetCtx(), req)
}

// ExistsWithContext checks if a kafkabroker exists using provided context
func (r *KafkaBroker) ExistsWithContext(ctx context.Context, req *KafkaBrokerSearchParams) (bool, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].ExistsWithContext(ctx, params)
}

// MustExists checks if a kafkabroker exists and panics if not
func (r *KafkaBroker) MustExists(req *KafkaBrokerSearchParams) bool {
	return r.MustExistsWithContext(r.Untyped.GetCtx(), req)
}

// MustExistsWithContext checks if a kafkabroker exists and panics if not using provided context
func (r *KafkaBroker) MustExistsWithContext(ctx context.Context, req *KafkaBrokerSearchParams) bool {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].MustExistsWithContext(ctx, params)
}

// -----------------------------------------------------
// EXTRA METHODS
// -----------------------------------------------------

// KafkaBrokerListTopics_GET_Body represents the request body for KafkaBrokerListTopics
type KafkaBrokerListTopics_GET_Body struct {
	TopicNameFilter string `json:"topic_name_filter,omitempty" yaml:"topic_name_filter,omitempty" required:"false" doc:""`
}

// KafkaBrokerListTopicsWithContext_GET
// method: GET
// url: /kafkabrokers/{id}/list_topics/
// summary: Retrieve Kafka Topics for a Kafka Broker
func (r *KafkaBroker) KafkaBrokerListTopicsWithContext_GET(ctx context.Context, id any, params *KafkaBrokerListTopics_GET_Body) ([]string, error) {
	resourcePath := core.BuildResourcePathWithID("kafkabrokers", id, "list_topics")

	reqParams, err := core.NewParamsFromStruct(params)
	if err != nil {
		return nil, err
	}
	var reqBody core.Params

	record, err := core.Request[core.RecordSet](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodGet, resourcePath, reqParams, reqBody)
	if err != nil {
		return nil, err
	}
	// Convert RecordSet ([]core.Record) to typed array ([]string)
	result := make([]string, len(record))
	for i, item := range record {
		if err := item.Fill(&result[i]); err != nil {
			return nil, fmt.Errorf("failed to unmarshal array item %d: %w", i, err)
		}
	}
	return result, nil

}

// KafkaBrokerListTopics_GET
// method: GET
// url: /kafkabrokers/{id}/list_topics/
// summary: Retrieve Kafka Topics for a Kafka Broker
func (r *KafkaBroker) KafkaBrokerListTopics_GET(id any, params *KafkaBrokerListTopics_GET_Body) ([]string, error) {
	return r.KafkaBrokerListTopicsWithContext_GET(r.Untyped.GetCtx(), id, params)
}

// -----------------------------------------------------
// GENERATION ISSUES
// -----------------------------------------------------
//   - UpsertModel/EditModel skipped: Response schema is ambiguous (object with no properties) - POST kafkabrokers
