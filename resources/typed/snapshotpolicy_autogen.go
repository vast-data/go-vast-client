// Code generated by generate-typed-resources. DO NOT EDIT.
// Template: CREATE|LIST|READ|DELETE

package typed

import (
	"context"

	"github.com/vast-data/go-vast-client/core"
)

// -----------------------------------------------------
// RESOURCE TYPE
// -----------------------------------------------------

// SnapshotPolicy represents a typed resource for snapshotpolicy operations
type SnapshotPolicy struct {
	*core.TypedVastResource
}

// -----------------------------------------------------
// SEARCH PARAMS
// -----------------------------------------------------

// SnapshotPolicySearchParams represents the search parameters for SnapshotPolicy operations
type SnapshotPolicySearchParams struct {
	Name           string `json:"name,omitempty" yaml:"name,omitempty" required:"true" doc:""`
	ExpirationTime string `json:"expiration_time,omitempty" yaml:"expiration_time,omitempty" required:"false" doc:"Filter by expiration time"`
	Guid           string `json:"guid,omitempty" yaml:"guid,omitempty" required:"false" doc:""`
	Locked         bool   `json:"locked,omitempty" yaml:"locked,omitempty" required:"false" doc:"Filter for locked snapshots"`
	Path           string `json:"path,omitempty" yaml:"path,omitempty" required:"false" doc:"Filter by snapshot path"`
	State          string `json:"state,omitempty" yaml:"state,omitempty" required:"false" doc:"Filter by state"`
	TenantId       int64  `json:"tenant_id,omitempty" yaml:"tenant_id,omitempty" required:"false" doc:"Filter by tenant. Specify tenant ID."`
	VolumeId       int64  `json:"volume_id,omitempty" yaml:"volume_id,omitempty" required:"false" doc:"Mapped volume id to filter by."`

	// RawData allows passing arbitrary search parameters as key-value pairs.
	//
	// Use this field when you need query parameters that are not covered by the typed fields above.
	// This is particularly useful for:
	//   - Dynamic filter operations (e.g., "path__contains", "name__icontains")
	//   - Django-style query filters
	//   - Custom backend-specific parameters
	//
	// Example:
	//   params := &SnapshotPolicySearchParams{
	//       RawData: core.Params{"path__contains": "/foo", "name__icontains": "bar"},
	//   }
	//
	// Note: You can use either the typed fields or RawData, or combine both.
	RawData core.Params `json:"-" yaml:"-"`
}

// -----------------------------------------------------
// REQUEST BODY
// -----------------------------------------------------

// SnapshotPolicyRequestBody represents the request body for SnapshotPolicy operations
type SnapshotPolicyRequestBody struct {
	Name           string `json:"name,omitempty" yaml:"name,omitempty" required:"true" doc:"Snapshot name"`
	Path           string `json:"path,omitempty" yaml:"path,omitempty" required:"true" doc:"The path to take a snapshot on"`
	ClusterId      int64  `json:"cluster_id,omitempty" yaml:"cluster_id,omitempty" required:"false" doc:"Cluster ID"`
	ExpirationTime string `json:"expiration_time,omitempty" yaml:"expiration_time,omitempty" required:"false" doc:"Snapshot expiration time"`
	Indestructible bool   `json:"indestructible,omitempty" yaml:"indestructible,omitempty" required:"false" doc:"Set to true to protect the snapshot from accidental or malicious deletion with the indestructibility feature. If this setting is enabled, authorized unlocking of the cluster's indestructibility mechanism is required to do any of the following: deleting the snapshot, shortening its expiration time or disabling this setting."`
	Locked         bool   `json:"locked,omitempty" yaml:"locked,omitempty" required:"false" doc:"Not in use."`
	TenantId       int64  `json:"tenant_id,omitempty" yaml:"tenant_id,omitempty" required:"false" doc:"Tenant ID"`
}

// -----------------------------------------------------
// MODELS
// -----------------------------------------------------

// SnapshotPolicyDetailsModel represents the detailed model returned by GET/List operations
// Type alias to component definition: #/components/schemas/Snapshot
type SnapshotPolicyDetailsModel = Component_Snapshot

// SnapshotPolicyUpsertModel represents the model returned by Create/Update operations
// Type alias to component definition: #/components/schemas/Snapshot
type SnapshotPolicyUpsertModel = Component_Snapshot

// -----------------------------------------------------
// LIST
// -----------------------------------------------------

// List retrieves multiple snapshotpolicys with typed request/response
// summary: List Snapshots
func (r *SnapshotPolicy) List(req *SnapshotPolicySearchParams) ([]*SnapshotPolicyDetailsModel, error) {
	return r.ListWithContext(r.Untyped.GetCtx(), req)
}

// ListWithContext retrieves multiple snapshotpolicys with typed request/response using provided context
// summary: List Snapshots
func (r *SnapshotPolicy) ListWithContext(ctx context.Context, req *SnapshotPolicySearchParams) ([]*SnapshotPolicyDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.GetResourceMap()[r.GetResourceType()].ListWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response []*SnapshotPolicyDetailsModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// Get retrieves a single snapshotpolicy with typed request/response
// summary: List Snapshots
func (r *SnapshotPolicy) Get(req *SnapshotPolicySearchParams) (*SnapshotPolicyDetailsModel, error) {
	return r.GetWithContext(r.Untyped.GetCtx(), req)
}

// GetWithContext retrieves a single snapshotpolicy with typed request/response using provided context
// summary: List Snapshots
func (r *SnapshotPolicy) GetWithContext(ctx context.Context, req *SnapshotPolicySearchParams) (*SnapshotPolicyDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response SnapshotPolicyDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// READ
// -----------------------------------------------------

// GetById retrieves a single snapshotpolicy by ID
// summary: Return Details of a Snapshot
func (r *SnapshotPolicy) GetById(id any) (*SnapshotPolicyDetailsModel, error) {
	return r.GetByIdWithContext(r.Untyped.GetCtx(), id)
}

// GetByIdWithContext retrieves a single snapshotpolicy by ID using provided context
// summary: Return Details of a Snapshot
func (r *SnapshotPolicy) GetByIdWithContext(ctx context.Context, id any) (*SnapshotPolicyDetailsModel, error) {
	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetByIdWithContext(ctx, id)
	if err != nil {
		return nil, err
	}

	var response SnapshotPolicyDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// CREATE
// -----------------------------------------------------

// Create creates a new snapshotpolicy with typed request/response
// summary: Create Snapshot
func (r *SnapshotPolicy) Create(req *SnapshotPolicyRequestBody) (*SnapshotPolicyUpsertModel, error) {
	return r.CreateWithContext(r.Untyped.GetCtx(), req)
}

// CreateWithContext creates a new snapshotpolicy with typed request/response using provided context
// summary: Create Snapshot
func (r *SnapshotPolicy) CreateWithContext(ctx context.Context, req *SnapshotPolicyRequestBody) (*SnapshotPolicyUpsertModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].CreateWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response SnapshotPolicyUpsertModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// DELETE
// -----------------------------------------------------

// Delete deletes a snapshotpolicy with search parameters
func (r *SnapshotPolicy) Delete(req *SnapshotPolicySearchParams) error {
	return r.DeleteWithContext(r.Untyped.GetCtx(), req)
}

// DeleteWithContext deletes a snapshotpolicy with search parameters using provided context
func (r *SnapshotPolicy) DeleteWithContext(ctx context.Context, req *SnapshotPolicySearchParams) error {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return err
	}
	_, err = r.Untyped.GetResourceMap()[r.GetResourceType()].DeleteWithContext(ctx, params, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteById deletes a snapshotpolicy by ID
// summary: Delete a Snapshot
//
// Parameters:
//   - id: Specify the ID of the snapshot.
func (r *SnapshotPolicy) DeleteById(id any) error {
	return r.DeleteByIdWithContext(r.Untyped.GetCtx(), id)
}

// DeleteByIdWithContext deletes a snapshotpolicy by ID using provided context
// summary: Delete a Snapshot
//
// Parameters:
//   - id: Specify the ID of the snapshot.
func (r *SnapshotPolicy) DeleteByIdWithContext(ctx context.Context, id any) error {
	_, err := r.Untyped.GetResourceMap()[r.GetResourceType()].DeleteByIdWithContext(ctx, id, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// -----------------------------------------------------
// ENSURE
// -----------------------------------------------------

// Ensure ensures a snapshotpolicy exists with typed response
func (r *SnapshotPolicy) Ensure(searchParams *SnapshotPolicySearchParams, body *SnapshotPolicyRequestBody) (*SnapshotPolicyUpsertModel, error) {
	return r.EnsureWithContext(r.Untyped.GetCtx(), searchParams, body)
}

// EnsureWithContext ensures a snapshotpolicy exists with typed response using provided context
func (r *SnapshotPolicy) EnsureWithContext(ctx context.Context, searchParams *SnapshotPolicySearchParams, body *SnapshotPolicyRequestBody) (*SnapshotPolicyUpsertModel, error) {
	searchParamsConverted, err := core.NewParamsFromStruct(searchParams)
	if err != nil {
		return nil, err
	}
	bodyConverted, err := core.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].EnsureWithContext(ctx, searchParamsConverted, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response SnapshotPolicyUpsertModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Exists checks if a snapshotpolicy exists
func (r *SnapshotPolicy) Exists(req *SnapshotPolicySearchParams) (bool, error) {
	return r.ExistsWithContext(r.Untyped.GetCtx(), req)
}

// ExistsWithContext checks if a snapshotpolicy exists using provided context
func (r *SnapshotPolicy) ExistsWithContext(ctx context.Context, req *SnapshotPolicySearchParams) (bool, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].ExistsWithContext(ctx, params)
}

// MustExists checks if a snapshotpolicy exists and panics if not
func (r *SnapshotPolicy) MustExists(req *SnapshotPolicySearchParams) bool {
	return r.MustExistsWithContext(r.Untyped.GetCtx(), req)
}

// MustExistsWithContext checks if a snapshotpolicy exists and panics if not using provided context
func (r *SnapshotPolicy) MustExistsWithContext(ctx context.Context, req *SnapshotPolicySearchParams) bool {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].MustExistsWithContext(ctx, params)
}

// -----------------------------------------------------
// GENERATION ISSUES
// -----------------------------------------------------
//   - UPDATE operation excluded: PATCH/PUT /snapshots/{id}/ has no response schema and doesn't return 204 NO CONTENT
