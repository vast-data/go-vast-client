// Code generated by generate-typed-resources. DO NOT EDIT.
// Template: LIST|READ|UPDATE

package typed

import (
	"context"
	"net/http"

	"github.com/vast-data/go-vast-client/core"
)

// -----------------------------------------------------
// RESOURCE TYPE
// -----------------------------------------------------

// Indestructibility represents a typed resource for indestructibility operations
type Indestructibility struct {
	*core.TypedVastResource
}

// -----------------------------------------------------
// SEARCH PARAMS
// -----------------------------------------------------

// IndestructibilitySearchParams represents the search parameters for Indestructibility operations
type IndestructibilitySearchParams struct {
	Guid     string `json:"guid,omitempty" yaml:"guid,omitempty" required:"false" doc:"Global unique ID"`
	Name     string `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:""`
	Username string `json:"username,omitempty" yaml:"username,omitempty" required:"false" doc:""`

	// RawData allows passing arbitrary search parameters as key-value pairs.
	//
	// Use this field when you need query parameters that are not covered by the typed fields above.
	// This is particularly useful for:
	//   - Dynamic filter operations (e.g., "path__contains", "name__icontains")
	//   - Django-style query filters
	//   - Custom backend-specific parameters
	//
	// Example:
	//   params := &IndestructibilitySearchParams{
	//       RawData: core.Params{"path__contains": "/foo", "name__icontains": "bar"},
	//   }
	//
	// Note: You can use either the typed fields or RawData, or combine both.
	RawData core.Params `json:"-" yaml:"-"`
}

// -----------------------------------------------------
// MODELS
// -----------------------------------------------------

// IndestructibilityDetailsModel represents the detailed model returned by GET/List operations
// Type alias to component definition: #/components/schemas/Indestructibility
type IndestructibilityDetailsModel = Component_Indestructibility

// IndestructibilityEditModel represents the model returned by Update operations
// Type alias to component definition: #/components/schemas/Indestructibility
type IndestructibilityEditModel = Component_Indestructibility

// -----------------------------------------------------
// LIST
// -----------------------------------------------------

// List retrieves multiple indestructibilitys with typed request/response
// summary: List Indestructibility Configuration
func (r *Indestructibility) List(req *IndestructibilitySearchParams) ([]*IndestructibilityDetailsModel, error) {
	return r.ListWithContext(r.Untyped.GetCtx(), req)
}

// ListWithContext retrieves multiple indestructibilitys with typed request/response using provided context
// summary: List Indestructibility Configuration
func (r *Indestructibility) ListWithContext(ctx context.Context, req *IndestructibilitySearchParams) ([]*IndestructibilityDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.GetResourceMap()[r.GetResourceType()].ListWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response []*IndestructibilityDetailsModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// Get retrieves a single indestructibility with typed request/response
// summary: List Indestructibility Configuration
func (r *Indestructibility) Get(req *IndestructibilitySearchParams) (*IndestructibilityDetailsModel, error) {
	return r.GetWithContext(r.Untyped.GetCtx(), req)
}

// GetWithContext retrieves a single indestructibility with typed request/response using provided context
// summary: List Indestructibility Configuration
func (r *Indestructibility) GetWithContext(ctx context.Context, req *IndestructibilitySearchParams) (*IndestructibilityDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response IndestructibilityDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// READ
// -----------------------------------------------------

// GetById retrieves a single indestructibility by ID
// summary: Return Indestructibility Details.
func (r *Indestructibility) GetById(id any) (*IndestructibilityDetailsModel, error) {
	return r.GetByIdWithContext(r.Untyped.GetCtx(), id)
}

// GetByIdWithContext retrieves a single indestructibility by ID using provided context
// summary: Return Indestructibility Details.
func (r *Indestructibility) GetByIdWithContext(ctx context.Context, id any) (*IndestructibilityDetailsModel, error) {
	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetByIdWithContext(ctx, id)
	if err != nil {
		return nil, err
	}

	var response IndestructibilityDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// UPDATE
// -----------------------------------------------------

// Update updates an existing indestructibility with typed request/response
//
// Parameters:
//   - indestructibilityPasswd: The current indestructibility password.
//   - newIndestructibilityPasswd: A new indestructibility password. The password must have at least eight characters.
//   - passwdDelay: A new password restore delay. This is the delay from the time a request is made to restore the indestructibility password to default until it takes effect. Default: 1d (one day). Minimum: 1m (one minute).
func (r *Indestructibility) Update(id any, indestructibilityPasswd string, newIndestructibilityPasswd string, passwdDelay string) (*IndestructibilityEditModel, error) {
	return r.UpdateWithContext(r.Untyped.GetCtx(), id, indestructibilityPasswd, newIndestructibilityPasswd, passwdDelay)
}

// UpdateWithContext updates an existing indestructibility with typed request/response using provided context
//
// Parameters:
//   - indestructibilityPasswd: The current indestructibility password.
//   - newIndestructibilityPasswd: A new indestructibility password. The password must have at least eight characters.
//   - passwdDelay: A new password restore delay. This is the delay from the time a request is made to restore the indestructibility password to default until it takes effect. Default: 1d (one day). Minimum: 1m (one minute).
func (r *Indestructibility) UpdateWithContext(ctx context.Context, id any, indestructibilityPasswd string, newIndestructibilityPasswd string, passwdDelay string) (*IndestructibilityEditModel, error) {
	params := core.Params{
		"indestructibility_passwd":     indestructibilityPasswd,
		"new_indestructibility_passwd": newIndestructibilityPasswd,
		"passwd_delay":                 passwdDelay,
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].UpdateWithContext(ctx, id, params)
	if err != nil {
		return nil, err
	}

	var response IndestructibilityEditModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Exists checks if a indestructibility exists
func (r *Indestructibility) Exists(req *IndestructibilitySearchParams) (bool, error) {
	return r.ExistsWithContext(r.Untyped.GetCtx(), req)
}

// ExistsWithContext checks if a indestructibility exists using provided context
func (r *Indestructibility) ExistsWithContext(ctx context.Context, req *IndestructibilitySearchParams) (bool, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].ExistsWithContext(ctx, params)
}

// MustExists checks if a indestructibility exists and panics if not
func (r *Indestructibility) MustExists(req *IndestructibilitySearchParams) bool {
	return r.MustExistsWithContext(r.Untyped.GetCtx(), req)
}

// MustExistsWithContext checks if a indestructibility exists and panics if not using provided context
func (r *Indestructibility) MustExistsWithContext(ctx context.Context, req *IndestructibilitySearchParams) bool {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].MustExistsWithContext(ctx, params)
}

// -----------------------------------------------------
// EXTRA METHODS
// -----------------------------------------------------

// IndestructibilityGenerateToken_PATCH_Model represents the response model for IndestructibilityGenerateToken
type IndestructibilityGenerateToken_PATCH_Model struct {
	Guid                       string `json:"guid,omitempty" yaml:"guid,omitempty" required:"false" doc:"Global unique ID"`
	Id                         int64  `json:"id,omitempty" yaml:"id,omitempty" required:"false" doc:"The ID of the indestructibility configuration object"`
	IndestructibilityPasswd    string `json:"indestructibility_passwd,omitempty" yaml:"indestructibility_passwd,omitempty" required:"false" doc:"The password needed to unlock the indestructibility mechanism on the cluster."`
	IsLocked                   bool   `json:"is_locked,omitempty" yaml:"is_locked,omitempty" required:"false" doc:"Indicator of whether the indestructibility mechanism is currently locked (true) or unlocked (false)"`
	Name                       string `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:""`
	NewIndestructibilityPasswd string `json:"new_indestructibility_passwd,omitempty" yaml:"new_indestructibility_passwd,omitempty" required:"false" doc:"A new indestructibility password, submitted in a request to change the indestructibility password."`
	PasswdDelay                string `json:"passwd_delay,omitempty" yaml:"passwd_delay,omitempty" required:"false" doc:"The delay from the time a request is made to restore the indestructibility password to default until it takes effect. Default: 1d (one day). Minimum: 1m (one minute)."`
	PasswdDelayEta             string `json:"passwd_delay_eta,omitempty" yaml:"passwd_delay_eta,omitempty" required:"false" doc:"The time at which the password will be restored to default following a current password restore request."`
	Title                      string `json:"title,omitempty" yaml:"title,omitempty" required:"false" doc:""`
	Token                      string `json:"token,omitempty" yaml:"token,omitempty" required:"false" doc:"VMS generated token used in the procedure for unlocking the indestructibility mechanism."`
	TokenTime                  string `json:"token_time,omitempty" yaml:"token_time,omitempty" required:"false" doc:"The time when the token will cease to be valid."`
	UnlockSystemTime           string `json:"unlock_system_time,omitempty" yaml:"unlock_system_time,omitempty" required:"false" doc:"If unlock_time > current time, the indestructibility system is unlocked. Empty when the indestructibility system is locked."`
	Url                        string `json:"url,omitempty" yaml:"url,omitempty" required:"false" doc:"Endpoint URL for operations on the indestructibility configuration"`
}

// IndestructibilityGenerateTokenWithContext_PATCH
// method: PATCH
// url: /indestructibility/{id}/generate_token/
// summary: Generate Indestructibility Token
//
// Parameters:
//   - indestructibilityPasswd (body): Request parameter
func (r *Indestructibility) IndestructibilityGenerateTokenWithContext_PATCH(ctx context.Context, id any, indestructibilityPasswd string) (*IndestructibilityGenerateToken_PATCH_Model, error) {
	resourcePath := core.BuildResourcePathWithID("indestructibility", id, "generate_token")

	var reqParams core.Params
	reqBody := core.Params{}
	if indestructibilityPasswd != "" {
		reqBody["indestructibility_passwd"] = indestructibilityPasswd
	}

	record, err := core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodPatch, resourcePath, reqParams, reqBody)
	if err != nil {
		return nil, err
	}

	var response IndestructibilityGenerateToken_PATCH_Model
	if err := record.Fill(&response); err != nil {
		return nil, err
	}
	return &response, nil

}

// IndestructibilityGenerateToken_PATCH
// method: PATCH
// url: /indestructibility/{id}/generate_token/
// summary: Generate Indestructibility Token
//
// Parameters:
//   - indestructibilityPasswd (body): Request parameter
func (r *Indestructibility) IndestructibilityGenerateToken_PATCH(id any, indestructibilityPasswd string) (*IndestructibilityGenerateToken_PATCH_Model, error) {
	return r.IndestructibilityGenerateTokenWithContext_PATCH(r.Untyped.GetCtx(), id, indestructibilityPasswd)
}

// IndestructibilityResetPasswd_PATCH_Model represents the response model for IndestructibilityResetPasswd
type IndestructibilityResetPasswd_PATCH_Model struct {
	Guid                       string `json:"guid,omitempty" yaml:"guid,omitempty" required:"false" doc:"Global unique ID"`
	Id                         int64  `json:"id,omitempty" yaml:"id,omitempty" required:"false" doc:"The ID of the indestructibility configuration object"`
	IndestructibilityPasswd    string `json:"indestructibility_passwd,omitempty" yaml:"indestructibility_passwd,omitempty" required:"false" doc:"The password needed to unlock the indestructibility mechanism on the cluster."`
	IsLocked                   bool   `json:"is_locked,omitempty" yaml:"is_locked,omitempty" required:"false" doc:"Indicator of whether the indestructibility mechanism is currently locked (true) or unlocked (false)"`
	Name                       string `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:""`
	NewIndestructibilityPasswd string `json:"new_indestructibility_passwd,omitempty" yaml:"new_indestructibility_passwd,omitempty" required:"false" doc:"A new indestructibility password, submitted in a request to change the indestructibility password."`
	PasswdDelay                string `json:"passwd_delay,omitempty" yaml:"passwd_delay,omitempty" required:"false" doc:"The delay from the time a request is made to restore the indestructibility password to default until it takes effect. Default: 1d (one day). Minimum: 1m (one minute)."`
	PasswdDelayEta             string `json:"passwd_delay_eta,omitempty" yaml:"passwd_delay_eta,omitempty" required:"false" doc:"The time at which the password will be restored to default following a current password restore request."`
	Title                      string `json:"title,omitempty" yaml:"title,omitempty" required:"false" doc:""`
	Token                      string `json:"token,omitempty" yaml:"token,omitempty" required:"false" doc:"VMS generated token used in the procedure for unlocking the indestructibility mechanism."`
	TokenTime                  string `json:"token_time,omitempty" yaml:"token_time,omitempty" required:"false" doc:"The time when the token will cease to be valid."`
	UnlockSystemTime           string `json:"unlock_system_time,omitempty" yaml:"unlock_system_time,omitempty" required:"false" doc:"If unlock_time > current time, the indestructibility system is unlocked. Empty when the indestructibility system is locked."`
	Url                        string `json:"url,omitempty" yaml:"url,omitempty" required:"false" doc:"Endpoint URL for operations on the indestructibility configuration"`
}

// IndestructibilityResetPasswdWithContext_PATCH
// method: PATCH
// url: /indestructibility/{id}/reset_passwd/
// summary: Reset Indestructibility Password
func (r *Indestructibility) IndestructibilityResetPasswdWithContext_PATCH(ctx context.Context, id any) (*IndestructibilityResetPasswd_PATCH_Model, error) {
	resourcePath := core.BuildResourcePathWithID("indestructibility", id, "reset_passwd")

	var reqParams core.Params
	var reqBody core.Params

	record, err := core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodPatch, resourcePath, reqParams, reqBody)
	if err != nil {
		return nil, err
	}

	var response IndestructibilityResetPasswd_PATCH_Model
	if err := record.Fill(&response); err != nil {
		return nil, err
	}
	return &response, nil

}

// IndestructibilityResetPasswd_PATCH
// method: PATCH
// url: /indestructibility/{id}/reset_passwd/
// summary: Reset Indestructibility Password
func (r *Indestructibility) IndestructibilityResetPasswd_PATCH(id any) (*IndestructibilityResetPasswd_PATCH_Model, error) {
	return r.IndestructibilityResetPasswdWithContext_PATCH(r.Untyped.GetCtx(), id)
}

// IndestructibilityUnlock_PATCH_Model represents the response model for IndestructibilityUnlock
type IndestructibilityUnlock_PATCH_Model struct {
	Guid                       string `json:"guid,omitempty" yaml:"guid,omitempty" required:"false" doc:"Global unique ID"`
	Id                         int64  `json:"id,omitempty" yaml:"id,omitempty" required:"false" doc:"The ID of the indestructibility configuration object"`
	IndestructibilityPasswd    string `json:"indestructibility_passwd,omitempty" yaml:"indestructibility_passwd,omitempty" required:"false" doc:"The password needed to unlock the indestructibility mechanism on the cluster."`
	IsLocked                   bool   `json:"is_locked,omitempty" yaml:"is_locked,omitempty" required:"false" doc:"Indicator of whether the indestructibility mechanism is currently locked (true) or unlocked (false)"`
	Name                       string `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:""`
	NewIndestructibilityPasswd string `json:"new_indestructibility_passwd,omitempty" yaml:"new_indestructibility_passwd,omitempty" required:"false" doc:"A new indestructibility password, submitted in a request to change the indestructibility password."`
	PasswdDelay                string `json:"passwd_delay,omitempty" yaml:"passwd_delay,omitempty" required:"false" doc:"The delay from the time a request is made to restore the indestructibility password to default until it takes effect. Default: 1d (one day). Minimum: 1m (one minute)."`
	PasswdDelayEta             string `json:"passwd_delay_eta,omitempty" yaml:"passwd_delay_eta,omitempty" required:"false" doc:"The time at which the password will be restored to default following a current password restore request."`
	Title                      string `json:"title,omitempty" yaml:"title,omitempty" required:"false" doc:""`
	Token                      string `json:"token,omitempty" yaml:"token,omitempty" required:"false" doc:"VMS generated token used in the procedure for unlocking the indestructibility mechanism."`
	TokenTime                  string `json:"token_time,omitempty" yaml:"token_time,omitempty" required:"false" doc:"The time when the token will cease to be valid."`
	UnlockSystemTime           string `json:"unlock_system_time,omitempty" yaml:"unlock_system_time,omitempty" required:"false" doc:"If unlock_time > current time, the indestructibility system is unlocked. Empty when the indestructibility system is locked."`
	Url                        string `json:"url,omitempty" yaml:"url,omitempty" required:"false" doc:"Endpoint URL for operations on the indestructibility configuration"`
}

// IndestructibilityUnlockWithContext_PATCH
// method: PATCH
// url: /indestructibility/{id}/unlock/
// summary: Unlock Indestructibility
//
// Parameters:
//   - challengeToken (body): A challenge token, provided by Support. To obtain a challenge token, first generate an indestructibility token and provide it to Support with any additional identifying details required by Support.
func (r *Indestructibility) IndestructibilityUnlockWithContext_PATCH(ctx context.Context, id any, challengeToken string) (*IndestructibilityUnlock_PATCH_Model, error) {
	resourcePath := core.BuildResourcePathWithID("indestructibility", id, "unlock")

	var reqParams core.Params
	reqBody := core.Params{}
	if challengeToken != "" {
		reqBody["challenge_token"] = challengeToken
	}

	record, err := core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodPatch, resourcePath, reqParams, reqBody)
	if err != nil {
		return nil, err
	}

	var response IndestructibilityUnlock_PATCH_Model
	if err := record.Fill(&response); err != nil {
		return nil, err
	}
	return &response, nil

}

// IndestructibilityUnlock_PATCH
// method: PATCH
// url: /indestructibility/{id}/unlock/
// summary: Unlock Indestructibility
//
// Parameters:
//   - challengeToken (body): A challenge token, provided by Support. To obtain a challenge token, first generate an indestructibility token and provide it to Support with any additional identifying details required by Support.
func (r *Indestructibility) IndestructibilityUnlock_PATCH(id any, challengeToken string) (*IndestructibilityUnlock_PATCH_Model, error) {
	return r.IndestructibilityUnlockWithContext_PATCH(r.Untyped.GetCtx(), id, challengeToken)
}

// -----------------------------------------------------
// GENERATION ISSUES
// -----------------------------------------------------
//   - CREATE operation excluded: POST indestructibility has no response schema and doesn't return 204 NO CONTENT
