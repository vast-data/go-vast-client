// Code generated by generate-typed-resources. DO NOT EDIT.
// Template: CREATE|LIST|READ|UPDATE|DELETE

package typed

import (
	"context"
	"fmt"
	"net/http"
	"time"

	"github.com/vast-data/go-vast-client/core"
	"github.com/vast-data/go-vast-client/resources/untyped"
)

// -----------------------------------------------------
// RESOURCE TYPE
// -----------------------------------------------------

// Volume represents a typed resource for volume operations
type Volume struct {
	*core.TypedVastResource
}

// -----------------------------------------------------
// SEARCH PARAMS
// -----------------------------------------------------

// VolumeSearchParams represents the search parameters for Volume operations
type VolumeSearchParams struct {
	Name     string `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:"Volume name to filter by."`
	Nguid    string `json:"nguid,omitempty" yaml:"nguid,omitempty" required:"false" doc:"volume nguid to filter by."`
	TenantId int64  `json:"tenant_id,omitempty" yaml:"tenant_id,omitempty" required:"false" doc:"Filter by tenant. Specify tenant ID."`
	Uuid     string `json:"uuid,omitempty" yaml:"uuid,omitempty" required:"false" doc:"volume uuid to filter by."`

	// RawData allows passing arbitrary search parameters as key-value pairs.
	//
	// Use this field when you need query parameters that are not covered by the typed fields above.
	// This is particularly useful for:
	//   - Dynamic filter operations (e.g., "path__contains", "name__icontains")
	//   - Django-style query filters
	//   - Custom backend-specific parameters
	//
	// Example:
	//   params := &VolumeSearchParams{
	//       RawData: core.Params{"path__contains": "/foo", "name__icontains": "bar"},
	//   }
	//
	// Note: You can use either the typed fields or RawData, or combine both.
	RawData core.Params `json:"-" yaml:"-"`
}

// -----------------------------------------------------
// REQUEST BODY
// -----------------------------------------------------

// VolumeRequestBody represents the request body for Volume operations
type VolumeRequestBody struct {
	Name        string            `json:"name,omitempty" yaml:"name,omitempty" required:"true" doc:"The path to the volume relative to the subsystem directory. The path should not begin with a slash (/). You can include slashes inside the path to indicate a hierarchy of directories. The path will be created under the subsystem path for the volume. Any directory hierarchy indicated by slashes will be created accordingly. For example, if you specify b/c/d the directories <subsystem_path>/b and <subsystem_path>b/c will be created if they do not yet exist, as well as the new directory <subsystem_path>/b/c/d."`
	Size        int64             `json:"size,omitempty" yaml:"size,omitempty" required:"true" doc:"The volume size, in bytes."`
	ViewId      int64             `json:"view_id,omitempty" yaml:"view_id,omitempty" required:"true" doc:"The ID of the subsystem view on which to create the volume."`
	QosPolicyId int64             `json:"qos_policy_id,omitempty" yaml:"qos_policy_id,omitempty" required:"false" doc:"QOS Policy ID"`
	Tags        map[string]string `json:"tags,omitempty" yaml:"tags,omitempty" required:"false" doc:""`
}

// -----------------------------------------------------
// MODELS
// -----------------------------------------------------

// VolumeDetailsModel represents the detailed model returned by GET/List operations
// Type alias to component definition: #/components/schemas/Volume
type VolumeDetailsModel = Component_Volume

// VolumeUpsertModel represents the model returned by Create/Update operations
// Type alias to component definition: #/components/schemas/Volume
type VolumeUpsertModel = Component_Volume

// -----------------------------------------------------
// LIST
// -----------------------------------------------------

// List retrieves multiple volumes with typed request/response
// summary: List Block Storage Volumes
func (r *Volume) List(req *VolumeSearchParams) ([]*VolumeDetailsModel, error) {
	return r.ListWithContext(r.Untyped.GetCtx(), req)
}

// ListWithContext retrieves multiple volumes with typed request/response using provided context
// summary: List Block Storage Volumes
func (r *Volume) ListWithContext(ctx context.Context, req *VolumeSearchParams) ([]*VolumeDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.GetResourceMap()[r.GetResourceType()].ListWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response []*VolumeDetailsModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// Get retrieves a single volume with typed request/response
// summary: List Block Storage Volumes
func (r *Volume) Get(req *VolumeSearchParams) (*VolumeDetailsModel, error) {
	return r.GetWithContext(r.Untyped.GetCtx(), req)
}

// GetWithContext retrieves a single volume with typed request/response using provided context
// summary: List Block Storage Volumes
func (r *Volume) GetWithContext(ctx context.Context, req *VolumeSearchParams) (*VolumeDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response VolumeDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// READ
// -----------------------------------------------------

// GetById retrieves a single volume by ID
// summary: Return Details of a Block Storage Volume
func (r *Volume) GetById(id any) (*VolumeDetailsModel, error) {
	return r.GetByIdWithContext(r.Untyped.GetCtx(), id)
}

// GetByIdWithContext retrieves a single volume by ID using provided context
// summary: Return Details of a Block Storage Volume
func (r *Volume) GetByIdWithContext(ctx context.Context, id any) (*VolumeDetailsModel, error) {
	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetByIdWithContext(ctx, id)
	if err != nil {
		return nil, err
	}

	var response VolumeDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// CREATE
// -----------------------------------------------------

// Create creates a new volume with typed request/response
// summary: Create a Block Storage Volume
func (r *Volume) Create(req *VolumeRequestBody) (*VolumeUpsertModel, error) {
	return r.CreateWithContext(r.Untyped.GetCtx(), req)
}

// CreateWithContext creates a new volume with typed request/response using provided context
// summary: Create a Block Storage Volume
func (r *Volume) CreateWithContext(ctx context.Context, req *VolumeRequestBody) (*VolumeUpsertModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].CreateWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response VolumeUpsertModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// UPDATE
// -----------------------------------------------------

// Update updates an existing volume with typed request/response
func (r *Volume) Update(id any, req *VolumeRequestBody) (*VolumeUpsertModel, error) {
	return r.UpdateWithContext(r.Untyped.GetCtx(), id, req)
}

// UpdateWithContext updates an existing volume with typed request/response using provided context
func (r *Volume) UpdateWithContext(ctx context.Context, id any, req *VolumeRequestBody) (*VolumeUpsertModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].UpdateWithContext(ctx, id, params)
	if err != nil {
		return nil, err
	}

	var response VolumeUpsertModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// DELETE
// -----------------------------------------------------

// Delete deletes a volume with search parameters
//
// Parameters:
//   - force: Forces removal of mappings of the volume to hosts. A volume can be removed only if it is not mapped to any host.
func (r *Volume) Delete(req *VolumeSearchParams, force bool) error {
	return r.DeleteWithContext(r.Untyped.GetCtx(), req, force)
}

// DeleteWithContext deletes a volume with search parameters using provided context
//
// Parameters:
//   - force: Forces removal of mappings of the volume to hosts. A volume can be removed only if it is not mapped to any host.
func (r *Volume) DeleteWithContext(ctx context.Context, req *VolumeSearchParams, force bool) error {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return err
	}

	// Build DELETE query params
	deleteQueryParams := core.Params{"force": force}
	// Build DELETE body params
	var deleteBody core.Params
	_, err = r.Untyped.GetResourceMap()[r.GetResourceType()].DeleteWithContext(ctx, params, deleteQueryParams, deleteBody)
	if err != nil {
		return err
	}
	return nil
}

// DeleteById deletes a volume by ID
// summary: Delete a Block Storage Volume
//
// Parameters:
//   - id: Object ID specified in the path
//   - force: Forces removal of mappings of the volume to hosts. A volume can be removed only if it is not mapped to any host.
func (r *Volume) DeleteById(id any, force bool) error {
	return r.DeleteByIdWithContext(r.Untyped.GetCtx(), id, force)
}

// DeleteByIdWithContext deletes a volume by ID using provided context
// summary: Delete a Block Storage Volume
//
// Parameters:
//   - id: Object ID specified in the path
//   - force: Forces removal of mappings of the volume to hosts. A volume can be removed only if it is not mapped to any host.
func (r *Volume) DeleteByIdWithContext(ctx context.Context, id any, force bool) error {

	// Build DELETE query params
	deleteQueryParams := core.Params{"force": force}
	// Build DELETE body params
	var deleteBody core.Params
	_, err := r.Untyped.GetResourceMap()[r.GetResourceType()].DeleteByIdWithContext(ctx, id, deleteQueryParams, deleteBody)
	if err != nil {
		return err
	}
	return nil
}

// -----------------------------------------------------
// ENSURE
// -----------------------------------------------------

// Ensure ensures a volume exists with typed response
func (r *Volume) Ensure(searchParams *VolumeSearchParams, body *VolumeRequestBody) (*VolumeUpsertModel, error) {
	return r.EnsureWithContext(r.Untyped.GetCtx(), searchParams, body)
}

// EnsureWithContext ensures a volume exists with typed response using provided context
func (r *Volume) EnsureWithContext(ctx context.Context, searchParams *VolumeSearchParams, body *VolumeRequestBody) (*VolumeUpsertModel, error) {
	searchParamsConverted, err := core.NewParamsFromStruct(searchParams)
	if err != nil {
		return nil, err
	}
	bodyConverted, err := core.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].EnsureWithContext(ctx, searchParamsConverted, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response VolumeUpsertModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Exists checks if a volume exists
func (r *Volume) Exists(req *VolumeSearchParams) (bool, error) {
	return r.ExistsWithContext(r.Untyped.GetCtx(), req)
}

// ExistsWithContext checks if a volume exists using provided context
func (r *Volume) ExistsWithContext(ctx context.Context, req *VolumeSearchParams) (bool, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].ExistsWithContext(ctx, params)
}

// MustExists checks if a volume exists and panics if not
func (r *Volume) MustExists(req *VolumeSearchParams) bool {
	return r.MustExistsWithContext(r.Untyped.GetCtx(), req)
}

// MustExistsWithContext checks if a volume exists and panics if not using provided context
func (r *Volume) MustExistsWithContext(ctx context.Context, req *VolumeSearchParams) bool {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].MustExistsWithContext(ctx, params)
}

// -----------------------------------------------------
// EXTRA METHODS
// -----------------------------------------------------

// VolumeGetSnapshotsItem represents a nested type for Volume extra method response
type VolumeGetSnapshotsItem struct {
	Id      int64  `json:"id,omitempty" yaml:"id,omitempty" required:"true" doc:""`
	Created string `json:"created,omitempty" yaml:"created,omitempty" required:"false" doc:""`
	Name    string `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:""`
	Path    string `json:"path,omitempty" yaml:"path,omitempty" required:"false" doc:""`
}

// VolumeBulkWithContext_DELETE
// method: DELETE
// url: /volumes/bulk/
// summary: Delete a Bulk Of Block Storage Volumes
func (r *Volume) VolumeBulkWithContext_DELETE(ctx context.Context) error {
	resourcePath := "/volumes/bulk/"

	var reqParams core.Params
	var reqBody core.Params

	_, err := core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodDelete, resourcePath, reqParams, reqBody)
	return err

}

// VolumeBulk_DELETE
// method: DELETE
// url: /volumes/bulk/
// summary: Delete a Bulk Of Block Storage Volumes
func (r *Volume) VolumeBulk_DELETE() error {
	return r.VolumeBulkWithContext_DELETE(r.Untyped.GetCtx())
}

// VolumeFetchCapacity_GET_Model represents the response model for VolumeFetchCapacity
type VolumeFetchCapacity_GET_Model struct {
	Capacity int64 `json:"capacity,omitempty" yaml:"capacity,omitempty" required:"false" doc:"Volume's capacity usage in bytes"`
}

// VolumeFetchCapacityWithContext_GET
// method: GET
// url: /volumes/{id}/fetch_capacity/
// summary: Fetches Capacity Usage of Block Storage Volume
func (r *Volume) VolumeFetchCapacityWithContext_GET(ctx context.Context, id any) (*VolumeFetchCapacity_GET_Model, error) {
	resourcePath := core.BuildResourcePathWithID("volumes", id, "fetch_capacity")

	var reqParams core.Params
	var reqBody core.Params

	record, err := core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodGet, resourcePath, reqParams, reqBody)
	if err != nil {
		return nil, err
	}

	var response VolumeFetchCapacity_GET_Model
	if err := record.Fill(&response); err != nil {
		return nil, err
	}
	return &response, nil

}

// VolumeFetchCapacity_GET
// method: GET
// url: /volumes/{id}/fetch_capacity/
// summary: Fetches Capacity Usage of Block Storage Volume
func (r *Volume) VolumeFetchCapacity_GET(id any) (*VolumeFetchCapacity_GET_Model, error) {
	return r.VolumeFetchCapacityWithContext_GET(r.Untyped.GetCtx(), id)
}

// VolumeGetSnapshotsWithContext_GET
// method: GET
// url: /volumes/{id}/get_snapshots/
// summary: Return Snapshots (IDs) of a Volume.
func (r *Volume) VolumeGetSnapshotsWithContext_GET(ctx context.Context, id any) ([]VolumeGetSnapshotsItem, error) {
	resourcePath := core.BuildResourcePathWithID("volumes", id, "get_snapshots")

	var reqParams core.Params
	var reqBody core.Params

	record, err := core.Request[core.RecordSet](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodGet, resourcePath, reqParams, reqBody)
	if err != nil {
		return nil, err
	}
	// Convert RecordSet ([]core.Record) to typed array ([]VolumeGetSnapshotsItem)
	result := make([]VolumeGetSnapshotsItem, len(record))
	for i, item := range record {
		if err := item.Fill(&result[i]); err != nil {
			return nil, fmt.Errorf("failed to unmarshal array item %d: %w", i, err)
		}
	}
	return result, nil

}

// VolumeGetSnapshots_GET
// method: GET
// url: /volumes/{id}/get_snapshots/
// summary: Return Snapshots (IDs) of a Volume.
func (r *Volume) VolumeGetSnapshots_GET(id any) ([]VolumeGetSnapshotsItem, error) {
	return r.VolumeGetSnapshotsWithContext_GET(r.Untyped.GetCtx(), id)
}

// VolumeSetHosts_PATCH_Body represents the request body for VolumeSetHosts
type VolumeSetHosts_PATCH_Body struct {
	Ids        *[]int64 `json:"ids,omitempty" yaml:"ids,omitempty" required:"false" doc:""`
	SnapshotId int64    `json:"snapshot_id,omitempty" yaml:"snapshot_id,omitempty" required:"false" doc:""`
}

// VolumeSetHostsWithContext_PATCH
// method: PATCH
// url: /volumes/{id}/set_hosts/
// summary: Map a Volume to Block Hosts
//
// Parameters:
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (r *Volume) VolumeSetHostsWithContext_PATCH(ctx context.Context, id any, body *VolumeSetHosts_PATCH_Body, waitTimeout time.Duration) (*untyped.AsyncResult, error) {
	resourcePath := core.BuildResourcePathWithID("volumes", id, "set_hosts")

	var reqParams core.Params
	reqBody, err := core.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	result, err := core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodPatch, resourcePath, reqParams, reqBody)
	if err != nil {
		return nil, err
	}

	asyncResult, _, err := untyped.MaybeWaitAsyncResultWithContext(ctx, result, r.Untyped, waitTimeout)
	return asyncResult, err

}

// VolumeSetHosts_PATCH
// method: PATCH
// url: /volumes/{id}/set_hosts/
// summary: Map a Volume to Block Hosts
//
// Parameters:
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (r *Volume) VolumeSetHosts_PATCH(id any, body *VolumeSetHosts_PATCH_Body, waitTimeout time.Duration) (*untyped.AsyncResult, error) {
	return r.VolumeSetHostsWithContext_PATCH(r.Untyped.GetCtx(), id, body, waitTimeout)
}

// VolumeUpdateHosts_PATCH_Body represents the request body for VolumeUpdateHosts
type VolumeUpdateHosts_PATCH_Body struct {
	IdsToAdd    *[]int64 `json:"ids_to_add,omitempty" yaml:"ids_to_add,omitempty" required:"false" doc:""`
	IdsToRemove *[]int64 `json:"ids_to_remove,omitempty" yaml:"ids_to_remove,omitempty" required:"false" doc:""`
	SnapshotId  int64    `json:"snapshot_id,omitempty" yaml:"snapshot_id,omitempty" required:"false" doc:""`
}

// VolumeUpdateHostsWithContext_PATCH
// method: PATCH
// url: /volumes/{id}/update_hosts/
// summary: Update Mapping of a Volume to Block Hosts
//
// Parameters:
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (r *Volume) VolumeUpdateHostsWithContext_PATCH(ctx context.Context, id any, body *VolumeUpdateHosts_PATCH_Body, waitTimeout time.Duration) (*untyped.AsyncResult, error) {
	resourcePath := core.BuildResourcePathWithID("volumes", id, "update_hosts")

	var reqParams core.Params
	reqBody, err := core.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	result, err := core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodPatch, resourcePath, reqParams, reqBody)
	if err != nil {
		return nil, err
	}

	asyncResult, _, err := untyped.MaybeWaitAsyncResultWithContext(ctx, result, r.Untyped, waitTimeout)
	return asyncResult, err

}

// VolumeUpdateHosts_PATCH
// method: PATCH
// url: /volumes/{id}/update_hosts/
// summary: Update Mapping of a Volume to Block Hosts
//
// Parameters:
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (r *Volume) VolumeUpdateHosts_PATCH(id any, body *VolumeUpdateHosts_PATCH_Body, waitTimeout time.Duration) (*untyped.AsyncResult, error) {
	return r.VolumeUpdateHostsWithContext_PATCH(r.Untyped.GetCtx(), id, body, waitTimeout)
}
