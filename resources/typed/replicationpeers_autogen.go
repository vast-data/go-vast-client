// Code generated by generate-typed-resources. DO NOT EDIT.
// Template: CREATE|LIST|READ|DELETE

package typed

import (
	"context"

	"github.com/vast-data/go-vast-client/core"
)

// -----------------------------------------------------
// RESOURCE TYPE
// -----------------------------------------------------

// ReplicationPeers represents a typed resource for replicationpeers operations
type ReplicationPeers struct {
	*core.TypedVastResource
}

// -----------------------------------------------------
// SEARCH PARAMS
// -----------------------------------------------------

// ReplicationPeersSearchParams represents the search parameters for ReplicationPeers operations
type ReplicationPeersSearchParams struct {
	Guid          string `json:"guid,omitempty" yaml:"guid,omitempty" required:"false" doc:"unique identifier"`
	LastHeartBeat string `json:"last_heart_beat,omitempty" yaml:"last_heart_beat,omitempty" required:"false" doc:"Filter by last heartbeat, the time of the last successful message sent, arrived and acknowledged by the peer."`
	LeadingVip    string `json:"leading_vip,omitempty" yaml:"leading_vip,omitempty" required:"false" doc:"Filter by leading remote VIP, a VIP that is specified when creating the peer. It is one of the VIPs in the remote peer's replication VIP Pool."`
	Name          string `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:"Filter by name"`
	Pool          string `json:"pool,omitempty" yaml:"pool,omitempty" required:"false" doc:"Filter by the name of the local cluster's replication VIP pool"`
	RemoteVersion string `json:"remote_version,omitempty" yaml:"remote_version,omitempty" required:"false" doc:"Filter by remote peer's software version"`
	RemoteVips    string `json:"remote_vips,omitempty" yaml:"remote_vips,omitempty" required:"false" doc:"remote vips"`
	SecureMode    string `json:"secure_mode,omitempty" yaml:"secure_mode,omitempty" required:"false" doc:"Filter by secure_mode"`
	SpaceLeft     string `json:"space_left,omitempty" yaml:"space_left,omitempty" required:"false" doc:"Filter by logical capacity remaining available on the remote peer."`
	State         string `json:"state,omitempty" yaml:"state,omitempty" required:"false" doc:"Filter by state"`
	TransportMode string `json:"transport_mode,omitempty" yaml:"transport_mode,omitempty" required:"false" doc:"Filter by transport_mode"`
	Version       string `json:"version,omitempty" yaml:"version,omitempty" required:"false" doc:"Filter by local cluster's software version"`

	// RawData allows passing arbitrary search parameters as key-value pairs.
	//
	// Use this field when you need query parameters that are not covered by the typed fields above.
	// This is particularly useful for:
	//   - Dynamic filter operations (e.g., "path__contains", "name__icontains")
	//   - Django-style query filters
	//   - Custom backend-specific parameters
	//
	// Example:
	//   params := &ReplicationPeersSearchParams{
	//       RawData: core.Params{"path__contains": "/foo", "name__icontains": "bar"},
	//   }
	//
	// Note: You can use either the typed fields or RawData, or combine both.
	RawData core.Params `json:"-" yaml:"-"`
}

// -----------------------------------------------------
// REQUEST BODY
// -----------------------------------------------------

// ReplicationPeersRequestBody represents the request body for ReplicationPeers operations
type ReplicationPeersRequestBody struct {
	LeadingVip      string `json:"leading_vip,omitempty" yaml:"leading_vip,omitempty" required:"true" doc:"Any one of the IP addresses that belong to the remote peer's replication VIP pool. This IP is used for the initial connection between the peers. Once the connection is established, the peers share their external network topology and form multiple connections between the VIPs."`
	Name            string `json:"name,omitempty" yaml:"name,omitempty" required:"true" doc:""`
	PoolId          int64  `json:"pool_id,omitempty" yaml:"pool_id,omitempty" required:"true" doc:"The ID of the local replication VIP Pool to use for the replication connection with the remote peer."`
	Mss             int64  `json:"mss,omitempty" yaml:"mss,omitempty" required:"false" doc:"Maximum segment size (MSS), in bytes, that the peer can receive in a single TCP segment."`
	Password        string `json:"password,omitempty" yaml:"password,omitempty" required:"false" doc:"Not in use"`
	PeerCertificate string `json:"peer_certificate,omitempty" yaml:"peer_certificate,omitempty" required:"false" doc:"Not in use"`
	SecureMode      string `json:"secure_mode,omitempty" yaml:"secure_mode,omitempty" required:"false" doc:"Secure mode: NONE=no encryption on the replication connection. SECURE=Replication to this peer will be encrypted over the wire with mTLS. Requires a certificate, key and root certificate to be uploaded to VMS on each peer cluster. Upload mTLS certificates with PATCH /clusters/{id}/."`
	TransportMode   string `json:"transport_mode,omitempty" yaml:"transport_mode,omitempty" required:"false" doc:"Transport mode: TCP for FIPS compliance, QUIC is not FIPS compliance but good for lower latency in high-latency networks."`
}

// -----------------------------------------------------
// MODELS
// -----------------------------------------------------

// ReplicationPeersDetailsModel represents the detailed model returned by GET/List operations
// Type alias to component definition: #/components/schemas/NativeReplicationRemoteTarget
type ReplicationPeersDetailsModel = Component_NativeReplicationRemoteTarget

// ReplicationPeersUpsertModel represents the model returned by Create/Update operations
// Type alias to component definition: #/components/schemas/NativeReplicationRemoteTarget
type ReplicationPeersUpsertModel = Component_NativeReplicationRemoteTarget

// -----------------------------------------------------
// LIST
// -----------------------------------------------------

// List retrieves multiple replicationpeerss with typed request/response
// summary: List Async Replication Peers
func (r *ReplicationPeers) List(req *ReplicationPeersSearchParams) ([]*ReplicationPeersDetailsModel, error) {
	return r.ListWithContext(r.Untyped.GetCtx(), req)
}

// ListWithContext retrieves multiple replicationpeerss with typed request/response using provided context
// summary: List Async Replication Peers
func (r *ReplicationPeers) ListWithContext(ctx context.Context, req *ReplicationPeersSearchParams) ([]*ReplicationPeersDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.GetResourceMap()[r.GetResourceType()].ListWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response []*ReplicationPeersDetailsModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// Get retrieves a single replicationpeers with typed request/response
// summary: List Async Replication Peers
func (r *ReplicationPeers) Get(req *ReplicationPeersSearchParams) (*ReplicationPeersDetailsModel, error) {
	return r.GetWithContext(r.Untyped.GetCtx(), req)
}

// GetWithContext retrieves a single replicationpeers with typed request/response using provided context
// summary: List Async Replication Peers
func (r *ReplicationPeers) GetWithContext(ctx context.Context, req *ReplicationPeersSearchParams) (*ReplicationPeersDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response ReplicationPeersDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// READ
// -----------------------------------------------------

// GetById retrieves a single replicationpeers by ID
// summary: Return Details of an Async Replication Peer
func (r *ReplicationPeers) GetById(id any) (*ReplicationPeersDetailsModel, error) {
	return r.GetByIdWithContext(r.Untyped.GetCtx(), id)
}

// GetByIdWithContext retrieves a single replicationpeers by ID using provided context
// summary: Return Details of an Async Replication Peer
func (r *ReplicationPeers) GetByIdWithContext(ctx context.Context, id any) (*ReplicationPeersDetailsModel, error) {
	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetByIdWithContext(ctx, id)
	if err != nil {
		return nil, err
	}

	var response ReplicationPeersDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// CREATE
// -----------------------------------------------------

// Create creates a new replicationpeers with typed request/response
// summary: Create an Async Replication Peer
func (r *ReplicationPeers) Create(req *ReplicationPeersRequestBody) (*ReplicationPeersUpsertModel, error) {
	return r.CreateWithContext(r.Untyped.GetCtx(), req)
}

// CreateWithContext creates a new replicationpeers with typed request/response using provided context
// summary: Create an Async Replication Peer
func (r *ReplicationPeers) CreateWithContext(ctx context.Context, req *ReplicationPeersRequestBody) (*ReplicationPeersUpsertModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].CreateWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response ReplicationPeersUpsertModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// DELETE
// -----------------------------------------------------

// Delete deletes a replicationpeers with search parameters
func (r *ReplicationPeers) Delete(req *ReplicationPeersSearchParams) error {
	return r.DeleteWithContext(r.Untyped.GetCtx(), req)
}

// DeleteWithContext deletes a replicationpeers with search parameters using provided context
func (r *ReplicationPeers) DeleteWithContext(ctx context.Context, req *ReplicationPeersSearchParams) error {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return err
	}
	_, err = r.Untyped.GetResourceMap()[r.GetResourceType()].DeleteWithContext(ctx, params, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteById deletes a replicationpeers by ID
// summary: Delete a Native Replication Peer
func (r *ReplicationPeers) DeleteById(id any) error {
	return r.DeleteByIdWithContext(r.Untyped.GetCtx(), id)
}

// DeleteByIdWithContext deletes a replicationpeers by ID using provided context
// summary: Delete a Native Replication Peer
func (r *ReplicationPeers) DeleteByIdWithContext(ctx context.Context, id any) error {
	_, err := r.Untyped.GetResourceMap()[r.GetResourceType()].DeleteByIdWithContext(ctx, id, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// -----------------------------------------------------
// ENSURE
// -----------------------------------------------------

// Ensure ensures a replicationpeers exists with typed response
func (r *ReplicationPeers) Ensure(searchParams *ReplicationPeersSearchParams, body *ReplicationPeersRequestBody) (*ReplicationPeersUpsertModel, error) {
	return r.EnsureWithContext(r.Untyped.GetCtx(), searchParams, body)
}

// EnsureWithContext ensures a replicationpeers exists with typed response using provided context
func (r *ReplicationPeers) EnsureWithContext(ctx context.Context, searchParams *ReplicationPeersSearchParams, body *ReplicationPeersRequestBody) (*ReplicationPeersUpsertModel, error) {
	searchParamsConverted, err := core.NewParamsFromStruct(searchParams)
	if err != nil {
		return nil, err
	}
	bodyConverted, err := core.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].EnsureWithContext(ctx, searchParamsConverted, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response ReplicationPeersUpsertModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Exists checks if a replicationpeers exists
func (r *ReplicationPeers) Exists(req *ReplicationPeersSearchParams) (bool, error) {
	return r.ExistsWithContext(r.Untyped.GetCtx(), req)
}

// ExistsWithContext checks if a replicationpeers exists using provided context
func (r *ReplicationPeers) ExistsWithContext(ctx context.Context, req *ReplicationPeersSearchParams) (bool, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].ExistsWithContext(ctx, params)
}

// MustExists checks if a replicationpeers exists and panics if not
func (r *ReplicationPeers) MustExists(req *ReplicationPeersSearchParams) bool {
	return r.MustExistsWithContext(r.Untyped.GetCtx(), req)
}

// MustExistsWithContext checks if a replicationpeers exists and panics if not using provided context
func (r *ReplicationPeers) MustExistsWithContext(ctx context.Context, req *ReplicationPeersSearchParams) bool {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].MustExistsWithContext(ctx, params)
}

// -----------------------------------------------------
// GENERATION ISSUES
// -----------------------------------------------------
//   - Extra method GET /nativereplicationremotetargets/get_remote_mapping/ skipped: GET /nativereplicationremotetargets/get_remote_mapping/ - Response schema contains ambiguous nested objects (objects with no properties)
//   - UPDATE operation excluded: PATCH/PUT /nativereplicationremotetargets/{id}/ has no response schema and doesn't return 204 NO CONTENT
