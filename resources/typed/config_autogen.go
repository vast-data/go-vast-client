// Code generated by generate-typed-resources. DO NOT EDIT.
// Template: LIST

package typed

import (
	"context"
	"net/http"

	"github.com/vast-data/go-vast-client/core"
)

// -----------------------------------------------------
// RESOURCE TYPE
// -----------------------------------------------------

// Config represents a typed resource for config operations
type Config struct {
	*core.TypedVastResource
}

// -----------------------------------------------------
// SEARCH PARAMS
// -----------------------------------------------------

// ConfigSearchParams represents the search parameters for Config operations
type ConfigSearchParams struct {

	// RawData allows passing arbitrary search parameters as key-value pairs.
	//
	// Use this field when you need query parameters that are not covered by the typed fields above.
	// This is particularly useful for:
	//   - Dynamic filter operations (e.g., "path__contains", "name__icontains")
	//   - Django-style query filters
	//   - Custom backend-specific parameters
	//
	// Example:
	//   params := &ConfigSearchParams{
	//       RawData: core.Params{"path__contains": "/foo", "name__icontains": "bar"},
	//   }
	//
	// Note: You can use either the typed fields or RawData, or combine both.
	RawData core.Params `json:"-" yaml:"-"`
}

// -----------------------------------------------------
// MODELS
// -----------------------------------------------------

// ConfigDetailsModel represents the detailed model returned by GET/List operations
// Type alias to component definition: #/components/schemas/DynamicConfig
type ConfigDetailsModel = Component_DynamicConfig

// -----------------------------------------------------
// LIST
// -----------------------------------------------------

// List retrieves multiple configs with typed request/response
// summary: List dynamic configs
func (r *Config) List(req *ConfigSearchParams) ([]*ConfigDetailsModel, error) {
	return r.ListWithContext(r.Untyped.GetCtx(), req)
}

// ListWithContext retrieves multiple configs with typed request/response using provided context
// summary: List dynamic configs
func (r *Config) ListWithContext(ctx context.Context, req *ConfigSearchParams) ([]*ConfigDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.GetResourceMap()[r.GetResourceType()].ListWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response []*ConfigDetailsModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// Get retrieves a single config with typed request/response
// summary: List dynamic configs
func (r *Config) Get(req *ConfigSearchParams) (*ConfigDetailsModel, error) {
	return r.GetWithContext(r.Untyped.GetCtx(), req)
}

// GetWithContext retrieves a single config with typed request/response using provided context
// summary: List dynamic configs
func (r *Config) GetWithContext(ctx context.Context, req *ConfigSearchParams) (*ConfigDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response ConfigDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Exists checks if a config exists
func (r *Config) Exists(req *ConfigSearchParams) (bool, error) {
	return r.ExistsWithContext(r.Untyped.GetCtx(), req)
}

// ExistsWithContext checks if a config exists using provided context
func (r *Config) ExistsWithContext(ctx context.Context, req *ConfigSearchParams) (bool, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].ExistsWithContext(ctx, params)
}

// MustExists checks if a config exists and panics if not
func (r *Config) MustExists(req *ConfigSearchParams) bool {
	return r.MustExistsWithContext(r.Untyped.GetCtx(), req)
}

// MustExistsWithContext checks if a config exists and panics if not using provided context
func (r *Config) MustExistsWithContext(ctx context.Context, req *ConfigSearchParams) bool {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].MustExistsWithContext(ctx, params)
}

// -----------------------------------------------------
// EXTRA METHODS
// -----------------------------------------------------

// ConfigResetWithContext_POST
// method: POST
// url: /config/reset/
// summary: Reset all dynamic configs to their default values
func (r *Config) ConfigResetWithContext_POST(ctx context.Context) error {
	resourcePath := "/config/reset/"

	var reqParams core.Params
	var reqBody core.Params

	_, err := core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodPost, resourcePath, reqParams, reqBody)
	return err

}

// ConfigReset_POST
// method: POST
// url: /config/reset/
// summary: Reset all dynamic configs to their default values
func (r *Config) ConfigReset_POST() error {
	return r.ConfigResetWithContext_POST(r.Untyped.GetCtx())
}
