// Code generated by generate-typed-resources. DO NOT EDIT.
// Template: CREATE|LIST|READ|DELETE

package typed

import (
	"context"
	"net/http"
	"time"

	"github.com/vast-data/go-vast-client/core"
	"github.com/vast-data/go-vast-client/resources/untyped"
)

// -----------------------------------------------------
// RESOURCE TYPE
// -----------------------------------------------------

// GlobalSnapshotStream represents a typed resource for globalsnapshotstream operations
type GlobalSnapshotStream struct {
	*core.TypedVastResource
}

// -----------------------------------------------------
// SEARCH PARAMS
// -----------------------------------------------------

// GlobalSnapshotStreamSearchParams represents the search parameters for GlobalSnapshotStream operations
type GlobalSnapshotStreamSearchParams struct {
	Guid string `json:"guid,omitempty" yaml:"guid,omitempty" required:"false" doc:"unique identifier"`
	Name string `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:"Filter by Global Snaphot Stream name"`

	// RawData allows passing arbitrary search parameters as key-value pairs.
	//
	// Use this field when you need query parameters that are not covered by the typed fields above.
	// This is particularly useful for:
	//   - Dynamic filter operations (e.g., "path__contains", "name__icontains")
	//   - Django-style query filters
	//   - Custom backend-specific parameters
	//
	// Example:
	//   params := &GlobalSnapshotStreamSearchParams{
	//       RawData: core.Params{"path__contains": "/foo", "name__icontains": "bar"},
	//   }
	//
	// Note: You can use either the typed fields or RawData, or combine both.
	RawData core.Params `json:"-" yaml:"-"`
}

// -----------------------------------------------------
// REQUEST BODY
// -----------------------------------------------------

// GlobalsnapstreamRequestBody_OwnerRootSnapshot represents a nested type for request body
type GlobalsnapstreamRequestBody_OwnerRootSnapshot struct {
	CloneId             int64  `json:"clone_id,omitempty" yaml:"clone_id,omitempty" required:"false" doc:""`
	Name                string `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:"Name of snapshot"`
	ParentHandleEhandle string `json:"parent_handle_ehandle,omitempty" yaml:"parent_handle_ehandle,omitempty" required:"false" doc:""`
}

// GlobalSnapshotStreamRequestBody represents the request body for GlobalSnapshotStream operations
type GlobalSnapshotStreamRequestBody struct {
	Enabled           bool                                          `json:"enabled,omitempty" yaml:"enabled,omitempty" required:"false" doc:"Enables background sync, in which the snapshot data is copied from the source to the destination after the clone is created. During the copying stage, read requests are directed to the source if the requested data is not yet copied. If false, the snapshot data is not copied to the destination. Requests to read data from the cloned directory continue to read data from the cloned source."`
	Guid              string                                        `json:"guid,omitempty" yaml:"guid,omitempty" required:"false" doc:"Do not specify this parameter."`
	Id                int64                                         `json:"id,omitempty" yaml:"id,omitempty" required:"false" doc:"Do not specify this parameter."`
	LoaneeRootPath    string                                        `json:"loanee_root_path,omitempty" yaml:"loanee_root_path,omitempty" required:"false" doc:"ID of the path you want to clone. Specify only if cloning from a snapshot on the local cluster."`
	LoaneeSnapshot    string                                        `json:"loanee_snapshot,omitempty" yaml:"loanee_snapshot,omitempty" required:"false" doc:"Loanee snapshot name"`
	LoaneeSnapshotId  int64                                         `json:"loanee_snapshot_id,omitempty" yaml:"loanee_snapshot_id,omitempty" required:"false" doc:"ID of local snapshot to clone. Specify only if cloning from a snapshot on the local cluster."`
	LoaneeTenantId    int64                                         `json:"loanee_tenant_id,omitempty" yaml:"loanee_tenant_id,omitempty" required:"false" doc:"The target tenant for the clone, on the local cluster."`
	Name              string                                        `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:"A name for the global snap stream."`
	OwnerRootSnapshot GlobalsnapstreamRequestBody_OwnerRootSnapshot `json:"owner_root_snapshot,omitempty" yaml:"owner_root_snapshot,omitempty" required:"false" doc:"Details of the remote snapshot to clone. To retrieve details of snapshots per path, call /clusters/list_snapshoted_paths_remote/ and clusters/list_clone_snapshoted_paths_remote/. Specify only if cloning from remote."`
	RemoteTarget      string                                        `json:"remote_target,omitempty" yaml:"remote_target,omitempty" required:"false" doc:"The name of a remote replication peer from which to clone a snapshot. Specify only if cloning from remote."`
	RemoteTargetId    int64                                         `json:"remote_target_id,omitempty" yaml:"remote_target_id,omitempty" required:"false" doc:"The ID of the remote replication peer from which to clone a snapshot. Specify only if cloning from remote."`
}

// -----------------------------------------------------
// MODELS
// -----------------------------------------------------

// GlobalSnapshotStreamDetailsModel represents the detailed model returned by GET/List operations
// Type alias to component definition: #/components/schemas/GlobalSnapStream
type GlobalSnapshotStreamDetailsModel = Component_GlobalSnapStream

// GlobalSnapshotStreamUpsertModel represents the model returned by Create/Update operations
// Type alias to component definition: #/components/schemas/AsyncGlobalSnapStream
type GlobalSnapshotStreamUpsertModel = Component_AsyncGlobalSnapStream

// -----------------------------------------------------
// LIST
// -----------------------------------------------------

// List retrieves multiple globalsnapshotstreams with typed request/response
// summary: Return Global Snaphot Streams
func (r *GlobalSnapshotStream) List(req *GlobalSnapshotStreamSearchParams) ([]*GlobalSnapshotStreamDetailsModel, error) {
	return r.ListWithContext(r.Untyped.GetCtx(), req)
}

// ListWithContext retrieves multiple globalsnapshotstreams with typed request/response using provided context
// summary: Return Global Snaphot Streams
func (r *GlobalSnapshotStream) ListWithContext(ctx context.Context, req *GlobalSnapshotStreamSearchParams) ([]*GlobalSnapshotStreamDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.GetResourceMap()[r.GetResourceType()].ListWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response []*GlobalSnapshotStreamDetailsModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// Get retrieves a single globalsnapshotstream with typed request/response
// summary: Return Global Snaphot Streams
func (r *GlobalSnapshotStream) Get(req *GlobalSnapshotStreamSearchParams) (*GlobalSnapshotStreamDetailsModel, error) {
	return r.GetWithContext(r.Untyped.GetCtx(), req)
}

// GetWithContext retrieves a single globalsnapshotstream with typed request/response using provided context
// summary: Return Global Snaphot Streams
func (r *GlobalSnapshotStream) GetWithContext(ctx context.Context, req *GlobalSnapshotStreamSearchParams) (*GlobalSnapshotStreamDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response GlobalSnapshotStreamDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// READ
// -----------------------------------------------------

// GetById retrieves a single globalsnapshotstream by ID
// summary: Return Details of a Global Snapshot Stream
func (r *GlobalSnapshotStream) GetById(id any) (*GlobalSnapshotStreamDetailsModel, error) {
	return r.GetByIdWithContext(r.Untyped.GetCtx(), id)
}

// GetByIdWithContext retrieves a single globalsnapshotstream by ID using provided context
// summary: Return Details of a Global Snapshot Stream
func (r *GlobalSnapshotStream) GetByIdWithContext(ctx context.Context, id any) (*GlobalSnapshotStreamDetailsModel, error) {
	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetByIdWithContext(ctx, id)
	if err != nil {
		return nil, err
	}

	var response GlobalSnapshotStreamDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// CREATE
// -----------------------------------------------------

// Create creates a new globalsnapshotstream with typed request/response
// summary: Create a Global Snapshot Stream
func (r *GlobalSnapshotStream) Create(req *GlobalSnapshotStreamRequestBody) (*GlobalSnapshotStreamUpsertModel, error) {
	return r.CreateWithContext(r.Untyped.GetCtx(), req)
}

// CreateWithContext creates a new globalsnapshotstream with typed request/response using provided context
// summary: Create a Global Snapshot Stream
func (r *GlobalSnapshotStream) CreateWithContext(ctx context.Context, req *GlobalSnapshotStreamRequestBody) (*GlobalSnapshotStreamUpsertModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].CreateWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response GlobalSnapshotStreamUpsertModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// DELETE
// -----------------------------------------------------

// Delete deletes a globalsnapshotstream with search parameters
//
// Parameters:
//   - removeDir: Remove Directory
func (r *GlobalSnapshotStream) Delete(req *GlobalSnapshotStreamSearchParams, removeDir bool) error {
	return r.DeleteWithContext(r.Untyped.GetCtx(), req, removeDir)
}

// DeleteWithContext deletes a globalsnapshotstream with search parameters using provided context
//
// Parameters:
//   - removeDir: Remove Directory
func (r *GlobalSnapshotStream) DeleteWithContext(ctx context.Context, req *GlobalSnapshotStreamSearchParams, removeDir bool) error {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return err
	}

	// Build DELETE query params
	var deleteQueryParams core.Params
	// Build DELETE body params
	deleteBody := core.Params{"remove_dir": removeDir}
	_, err = r.Untyped.GetResourceMap()[r.GetResourceType()].DeleteWithContext(ctx, params, deleteQueryParams, deleteBody)
	if err != nil {
		return err
	}
	return nil
}

// DeleteById deletes a globalsnapshotstream by ID and returns an async task
// summary: Delete a Global Snapshot Stream
//
// Parameters:
//   - id: Global Snapshot Stream ID
//   - removeDir: Remove Directory
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (r *GlobalSnapshotStream) DeleteById(id any, removeDir bool, waitTimeout time.Duration) (*untyped.AsyncResult, error) {
	return r.DeleteByIdWithContext(r.Untyped.GetCtx(), id, removeDir, waitTimeout)
}

// DeleteByIdWithContext deletes a globalsnapshotstream by ID and returns an async task using provided context
// summary: Delete a Global Snapshot Stream
//
// Parameters:
//   - id: Global Snapshot Stream ID
//   - removeDir: Remove Directory
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (r *GlobalSnapshotStream) DeleteByIdWithContext(ctx context.Context, id any, removeDir bool, waitTimeout time.Duration) (*untyped.AsyncResult, error) {
	// For async DELETE, call core.Request directly to get the task response
	path := core.BuildResourcePathWithID(r.Untyped.GetResourceMap()[r.GetResourceType()].GetResourcePath(), id)

	// Build DELETE query params
	var deleteQueryParams core.Params
	// Build DELETE body params
	deleteBody := core.Params{"remove_dir": removeDir}
	record, err := core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodDelete, path, deleteQueryParams, deleteBody)
	if err != nil {
		return nil, err
	}

	asyncResult, _, err := untyped.MaybeWaitAsyncResultWithContext(ctx, record, r.Untyped, waitTimeout)
	return asyncResult, err
}

// -----------------------------------------------------
// ENSURE
// -----------------------------------------------------

// Ensure ensures a globalsnapshotstream exists with typed response
func (r *GlobalSnapshotStream) Ensure(searchParams *GlobalSnapshotStreamSearchParams, body *GlobalSnapshotStreamRequestBody) (*GlobalSnapshotStreamUpsertModel, error) {
	return r.EnsureWithContext(r.Untyped.GetCtx(), searchParams, body)
}

// EnsureWithContext ensures a globalsnapshotstream exists with typed response using provided context
func (r *GlobalSnapshotStream) EnsureWithContext(ctx context.Context, searchParams *GlobalSnapshotStreamSearchParams, body *GlobalSnapshotStreamRequestBody) (*GlobalSnapshotStreamUpsertModel, error) {
	searchParamsConverted, err := core.NewParamsFromStruct(searchParams)
	if err != nil {
		return nil, err
	}
	bodyConverted, err := core.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].EnsureWithContext(ctx, searchParamsConverted, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response GlobalSnapshotStreamUpsertModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Exists checks if a globalsnapshotstream exists
func (r *GlobalSnapshotStream) Exists(req *GlobalSnapshotStreamSearchParams) (bool, error) {
	return r.ExistsWithContext(r.Untyped.GetCtx(), req)
}

// ExistsWithContext checks if a globalsnapshotstream exists using provided context
func (r *GlobalSnapshotStream) ExistsWithContext(ctx context.Context, req *GlobalSnapshotStreamSearchParams) (bool, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].ExistsWithContext(ctx, params)
}

// MustExists checks if a globalsnapshotstream exists and panics if not
func (r *GlobalSnapshotStream) MustExists(req *GlobalSnapshotStreamSearchParams) bool {
	return r.MustExistsWithContext(r.Untyped.GetCtx(), req)
}

// MustExistsWithContext checks if a globalsnapshotstream exists and panics if not using provided context
func (r *GlobalSnapshotStream) MustExistsWithContext(ctx context.Context, req *GlobalSnapshotStreamSearchParams) bool {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].MustExistsWithContext(ctx, params)
}

// -----------------------------------------------------
// EXTRA METHODS
// -----------------------------------------------------

// GlobalSnapshotStreamStopWithContext_PATCH
// method: PATCH
// url: /globalsnapstreams/{id}/stop/
// summary: Stop a Global Snapshot Stream
//
// Parameters:
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (r *GlobalSnapshotStream) GlobalSnapshotStreamStopWithContext_PATCH(ctx context.Context, id any, waitTimeout time.Duration) (*untyped.AsyncResult, error) {
	resourcePath := core.BuildResourcePathWithID("globalsnapstreams", id, "stop")

	var reqParams core.Params
	var reqBody core.Params

	result, err := core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodPatch, resourcePath, reqParams, reqBody)
	if err != nil {
		return nil, err
	}

	asyncResult, _, err := untyped.MaybeWaitAsyncResultWithContext(ctx, result, r.Untyped, waitTimeout)
	return asyncResult, err

}

// GlobalSnapshotStreamStop_PATCH
// method: PATCH
// url: /globalsnapstreams/{id}/stop/
// summary: Stop a Global Snapshot Stream
//
// Parameters:
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (r *GlobalSnapshotStream) GlobalSnapshotStreamStop_PATCH(id any, waitTimeout time.Duration) (*untyped.AsyncResult, error) {
	return r.GlobalSnapshotStreamStopWithContext_PATCH(r.Untyped.GetCtx(), id, waitTimeout)
}

// -----------------------------------------------------
// GENERATION ISSUES
// -----------------------------------------------------
//   - Extra method PATCH /globalsnapstreams/{id}/pause/ skipped: PATCH /globalsnapstreams/{id}/pause/ - No response schema defined in OpenAPI spec. Error: no valid schema found in PATCH response (200/201/202/204) for resource /globalsnapstreams/{id}/pause/
//   - Extra method PATCH /globalsnapstreams/{id}/resume/ skipped: PATCH /globalsnapstreams/{id}/resume/ - No response schema defined in OpenAPI spec. Error: no valid schema found in PATCH response (200/201/202/204) for resource /globalsnapstreams/{id}/resume/
//   - UPDATE operation excluded: PATCH/PUT /globalsnapstreams/{id}/ has no response schema and doesn't return 204 NO CONTENT
