// Code generated by generate-typed-resources. DO NOT EDIT.
// Template: CREATE|LIST|READ|DELETE

package typed

import (
	"context"

	"github.com/vast-data/go-vast-client/core"
)

// -----------------------------------------------------
// RESOURCE TYPE
// -----------------------------------------------------

// Role represents a typed resource for role operations
type Role struct {
	*core.TypedVastResource
}

// -----------------------------------------------------
// SEARCH PARAMS
// -----------------------------------------------------

// RoleSearchParams represents the search parameters for Role operations
type RoleSearchParams struct {
	Name     string `json:"name,omitempty" yaml:"name,omitempty" required:"true" doc:"The name of the role."`
	Guid     string `json:"guid,omitempty" yaml:"guid,omitempty" required:"false" doc:""`
	TenantId int64  `json:"tenant_id,omitempty" yaml:"tenant_id,omitempty" required:"false" doc:"Tenant ID"`

	// RawData allows passing arbitrary search parameters as key-value pairs.
	//
	// Use this field when you need query parameters that are not covered by the typed fields above.
	// This is particularly useful for:
	//   - Dynamic filter operations (e.g., "path__contains", "name__icontains")
	//   - Django-style query filters
	//   - Custom backend-specific parameters
	//
	// Example:
	//   params := &RoleSearchParams{
	//       RawData: core.Params{"path__contains": "/foo", "name__icontains": "bar"},
	//   }
	//
	// Note: You can use either the typed fields or RawData, or combine both.
	RawData core.Params `json:"-" yaml:"-"`
}

// -----------------------------------------------------
// REQUEST BODY
// -----------------------------------------------------

// RoleRequestBody represents the request body for Role operations
type RoleRequestBody struct {
	Name            string    `json:"name,omitempty" yaml:"name,omitempty" required:"true" doc:"Role name"`
	LdapGroups      *[]string `json:"ldap_groups,omitempty" yaml:"ldap_groups,omitempty" required:"false" doc:"Optionally specify LDAP group(s) to associate with the role. A group can be any user group on an LDAP-based provider, including Active Directory. The provider must be connected to the cluster. If the role is for tenant admins, the provider must be connected to the specific tenant. Members of the specified groups can access VMS and are granted whichever permissions are included in the role. A group can be associated with multiple roles."`
	ObjectId        int64     `json:"object_id,omitempty" yaml:"object_id,omitempty" required:"false" doc:"Object ID. Used to specify a particular object to limit the role to."`
	ObjectType      string    `json:"object_type,omitempty" yaml:"object_type,omitempty" required:"false" doc:"Object type. Used to specify a particular object to limit the role to."`
	Permissions     string    `json:"permissions,omitempty" yaml:"permissions,omitempty" required:"false" doc:"Permission type. Used to assign all the permissions of given type to a role. Can be used together with 'realm' to narrow resulting permissions list (logical AND). Ignored if provided along with 'permissions_list'. Note, that this is a legacy name, which does not correspond to the output schema's 'permissions'."`
	PermissionsList *[]string `json:"permissions_list,omitempty" yaml:"permissions_list,omitempty" required:"false" doc:"To list permission codenames, run /permissions/get. Takes precedence over 'permissions' or 'realm'."`
	Realm           string    `json:"realm,omitempty" yaml:"realm,omitempty" required:"false" doc:"Realm name. Used to assigned all the permissions of given realm to a role. Can be used together with 'permissions' to narrow resulting permissions list (logical AND). Ignored if provided along with 'permissions_list'."`
	TenantId        int64     `json:"tenant_id,omitempty" yaml:"tenant_id,omitempty" required:"false" doc:"Pass this parameter to create a role for managers with user_type=TENANT_ADMIN (tenant admin users). Specifies the ID of a single tenant to associate with the role. If not specified, the role is a cluster admin role. Corresponds to 'tenant' in the output schema."`
	TenantIds       *[]int64  `json:"tenant_ids,omitempty" yaml:"tenant_ids,omitempty" required:"false" doc:"Specifies IDs of tenants to associate with the role. Corresponds to 'tenants' in the output schema."`
}

// -----------------------------------------------------
// MODELS
// -----------------------------------------------------

// RoleDetailsModel represents the detailed model returned by GET/List operations
// Type alias to component definition: #/components/schemas/Role
type RoleDetailsModel = Component_Role

// RoleUpsertModel represents the model returned by Create/Update operations
// Type alias to component definition: #/components/schemas/Role
type RoleUpsertModel = Component_Role

// -----------------------------------------------------
// LIST
// -----------------------------------------------------

// List retrieves multiple roles with typed request/response
// summary: List Roles
func (r *Role) List(req *RoleSearchParams) ([]*RoleDetailsModel, error) {
	return r.ListWithContext(r.Untyped.GetCtx(), req)
}

// ListWithContext retrieves multiple roles with typed request/response using provided context
// summary: List Roles
func (r *Role) ListWithContext(ctx context.Context, req *RoleSearchParams) ([]*RoleDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.GetResourceMap()[r.GetResourceType()].ListWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response []*RoleDetailsModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// Get retrieves a single role with typed request/response
// summary: List Roles
func (r *Role) Get(req *RoleSearchParams) (*RoleDetailsModel, error) {
	return r.GetWithContext(r.Untyped.GetCtx(), req)
}

// GetWithContext retrieves a single role with typed request/response using provided context
// summary: List Roles
func (r *Role) GetWithContext(ctx context.Context, req *RoleSearchParams) (*RoleDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response RoleDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// READ
// -----------------------------------------------------

// GetById retrieves a single role by ID
// summary: Return Details of a Role
func (r *Role) GetById(id any) (*RoleDetailsModel, error) {
	return r.GetByIdWithContext(r.Untyped.GetCtx(), id)
}

// GetByIdWithContext retrieves a single role by ID using provided context
// summary: Return Details of a Role
func (r *Role) GetByIdWithContext(ctx context.Context, id any) (*RoleDetailsModel, error) {
	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetByIdWithContext(ctx, id)
	if err != nil {
		return nil, err
	}

	var response RoleDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// CREATE
// -----------------------------------------------------

// Create creates a new role with typed request/response
// summary: Create Manager Role
func (r *Role) Create(req *RoleRequestBody) (*RoleUpsertModel, error) {
	return r.CreateWithContext(r.Untyped.GetCtx(), req)
}

// CreateWithContext creates a new role with typed request/response using provided context
// summary: Create Manager Role
func (r *Role) CreateWithContext(ctx context.Context, req *RoleRequestBody) (*RoleUpsertModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].CreateWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response RoleUpsertModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// DELETE
// -----------------------------------------------------

// Delete deletes a role with search parameters
func (r *Role) Delete(req *RoleSearchParams) error {
	return r.DeleteWithContext(r.Untyped.GetCtx(), req)
}

// DeleteWithContext deletes a role with search parameters using provided context
func (r *Role) DeleteWithContext(ctx context.Context, req *RoleSearchParams) error {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return err
	}
	_, err = r.Untyped.GetResourceMap()[r.GetResourceType()].DeleteWithContext(ctx, params, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteById deletes a role by ID
// summary: Delete Role
//
// Parameters:
//   - id: Role ID
func (r *Role) DeleteById(id any) error {
	return r.DeleteByIdWithContext(r.Untyped.GetCtx(), id)
}

// DeleteByIdWithContext deletes a role by ID using provided context
// summary: Delete Role
//
// Parameters:
//   - id: Role ID
func (r *Role) DeleteByIdWithContext(ctx context.Context, id any) error {
	_, err := r.Untyped.GetResourceMap()[r.GetResourceType()].DeleteByIdWithContext(ctx, id, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// -----------------------------------------------------
// ENSURE
// -----------------------------------------------------

// Ensure ensures a role exists with typed response
func (r *Role) Ensure(searchParams *RoleSearchParams, body *RoleRequestBody) (*RoleUpsertModel, error) {
	return r.EnsureWithContext(r.Untyped.GetCtx(), searchParams, body)
}

// EnsureWithContext ensures a role exists with typed response using provided context
func (r *Role) EnsureWithContext(ctx context.Context, searchParams *RoleSearchParams, body *RoleRequestBody) (*RoleUpsertModel, error) {
	searchParamsConverted, err := core.NewParamsFromStruct(searchParams)
	if err != nil {
		return nil, err
	}
	bodyConverted, err := core.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].EnsureWithContext(ctx, searchParamsConverted, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response RoleUpsertModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Exists checks if a role exists
func (r *Role) Exists(req *RoleSearchParams) (bool, error) {
	return r.ExistsWithContext(r.Untyped.GetCtx(), req)
}

// ExistsWithContext checks if a role exists using provided context
func (r *Role) ExistsWithContext(ctx context.Context, req *RoleSearchParams) (bool, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].ExistsWithContext(ctx, params)
}

// MustExists checks if a role exists and panics if not
func (r *Role) MustExists(req *RoleSearchParams) bool {
	return r.MustExistsWithContext(r.Untyped.GetCtx(), req)
}

// MustExistsWithContext checks if a role exists and panics if not using provided context
func (r *Role) MustExistsWithContext(ctx context.Context, req *RoleSearchParams) bool {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].MustExistsWithContext(ctx, params)
}

// -----------------------------------------------------
// GENERATION ISSUES
// -----------------------------------------------------
//   - UPDATE operation excluded: PATCH/PUT /roles/{id}/ has no response schema and doesn't return 204 NO CONTENT
