// Code generated by generate-typed-resources. DO NOT EDIT.
// Template: LIST|READ|UPDATE|DELETE

package typed

import (
	"context"
	"net/http"

	"github.com/vast-data/go-vast-client/core"
)

// -----------------------------------------------------
// RESOURCE TYPE
// -----------------------------------------------------

// Dtray represents a typed resource for dtray operations
type Dtray struct {
	*core.TypedVastResource
}

// -----------------------------------------------------
// SEARCH PARAMS
// -----------------------------------------------------

// DtraySearchParams represents the search parameters for Dtray operations
type DtraySearchParams struct {
	Enabled bool   `json:"enabled,omitempty" yaml:"enabled,omitempty" required:"false" doc:"Filter by enabled state"`
	Guid    string `json:"guid,omitempty" yaml:"guid,omitempty" required:"false" doc:""`
	Name    string `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:"Filter list by DTray name"`
	State   string `json:"state,omitempty" yaml:"state,omitempty" required:"false" doc:"Filter list by DTray state"`

	// RawData allows passing arbitrary search parameters as key-value pairs.
	//
	// Use this field when you need query parameters that are not covered by the typed fields above.
	// This is particularly useful for:
	//   - Dynamic filter operations (e.g., "path__contains", "name__icontains")
	//   - Django-style query filters
	//   - Custom backend-specific parameters
	//
	// Example:
	//   params := &DtraySearchParams{
	//       RawData: core.Params{"path__contains": "/foo", "name__icontains": "bar"},
	//   }
	//
	// Note: You can use either the typed fields or RawData, or combine both.
	RawData core.Params `json:"-" yaml:"-"`
}

// -----------------------------------------------------
// REQUEST BODY
// -----------------------------------------------------

// DtrayRequestBody represents the request body for Dtray operations
type DtrayRequestBody struct {
	Enabled               bool `json:"enabled,omitempty" yaml:"enabled,omitempty" required:"false" doc:"True for activate, False for deactivate"`
	PowerOff              bool `json:"power_off,omitempty" yaml:"power_off,omitempty" required:"false" doc:"True for power off"`
	PowerOn               bool `json:"power_on,omitempty" yaml:"power_on,omitempty" required:"false" doc:"True for power on"`
	Replace               bool `json:"replace,omitempty" yaml:"replace,omitempty" required:"false" doc:"True for replacement"`
	SkipNetworkValidation bool `json:"skip_network_validation,omitempty" yaml:"skip_network_validation,omitempty" required:"false" doc:"If true, skips internal network validation. Allows FRU to proceed if another node is in failed state."`
}

// -----------------------------------------------------
// MODELS
// -----------------------------------------------------

// DtrayDetailsModel represents the detailed model returned by GET/List operations
// Type alias to component definition: #/components/schemas/DTray
type DtrayDetailsModel = Component_DTray

// DtrayEditModel represents the model returned by Update operations
// Type alias to component definition: #/components/schemas/AsyncTaskInResponse
type DtrayEditModel = Component_AsyncTaskInResponse

// -----------------------------------------------------
// LIST
// -----------------------------------------------------

// List retrieves multiple dtrays with typed request/response
// summary: List DTrays
func (r *Dtray) List(req *DtraySearchParams) ([]*DtrayDetailsModel, error) {
	return r.ListWithContext(r.Untyped.GetCtx(), req)
}

// ListWithContext retrieves multiple dtrays with typed request/response using provided context
// summary: List DTrays
func (r *Dtray) ListWithContext(ctx context.Context, req *DtraySearchParams) ([]*DtrayDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.GetResourceMap()[r.GetResourceType()].ListWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response []*DtrayDetailsModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// Get retrieves a single dtray with typed request/response
// summary: List DTrays
func (r *Dtray) Get(req *DtraySearchParams) (*DtrayDetailsModel, error) {
	return r.GetWithContext(r.Untyped.GetCtx(), req)
}

// GetWithContext retrieves a single dtray with typed request/response using provided context
// summary: List DTrays
func (r *Dtray) GetWithContext(ctx context.Context, req *DtraySearchParams) (*DtrayDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response DtrayDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// READ
// -----------------------------------------------------

// GetById retrieves a single dtray by ID
// summary: Return Details of a DTray
func (r *Dtray) GetById(id any) (*DtrayDetailsModel, error) {
	return r.GetByIdWithContext(r.Untyped.GetCtx(), id)
}

// GetByIdWithContext retrieves a single dtray by ID using provided context
// summary: Return Details of a DTray
func (r *Dtray) GetByIdWithContext(ctx context.Context, id any) (*DtrayDetailsModel, error) {
	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetByIdWithContext(ctx, id)
	if err != nil {
		return nil, err
	}

	var response DtrayDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// UPDATE
// -----------------------------------------------------

// Update updates an existing dtray with typed request/response
func (r *Dtray) Update(id any, req *DtrayRequestBody) (*DtrayEditModel, error) {
	return r.UpdateWithContext(r.Untyped.GetCtx(), id, req)
}

// UpdateWithContext updates an existing dtray with typed request/response using provided context
func (r *Dtray) UpdateWithContext(ctx context.Context, id any, req *DtrayRequestBody) (*DtrayEditModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].UpdateWithContext(ctx, id, params)
	if err != nil {
		return nil, err
	}

	var response DtrayEditModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// DELETE
// -----------------------------------------------------

// Delete deletes a dtray with search parameters
func (r *Dtray) Delete(req *DtraySearchParams) error {
	return r.DeleteWithContext(r.Untyped.GetCtx(), req)
}

// DeleteWithContext deletes a dtray with search parameters using provided context
func (r *Dtray) DeleteWithContext(ctx context.Context, req *DtraySearchParams) error {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return err
	}
	_, err = r.Untyped.GetResourceMap()[r.GetResourceType()].DeleteWithContext(ctx, params, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteById deletes a dtray by ID
func (r *Dtray) DeleteById(id any) error {
	return r.DeleteByIdWithContext(r.Untyped.GetCtx(), id)
}

// DeleteByIdWithContext deletes a dtray by ID using provided context
func (r *Dtray) DeleteByIdWithContext(ctx context.Context, id any) error {
	_, err := r.Untyped.GetResourceMap()[r.GetResourceType()].DeleteByIdWithContext(ctx, id, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// Exists checks if a dtray exists
func (r *Dtray) Exists(req *DtraySearchParams) (bool, error) {
	return r.ExistsWithContext(r.Untyped.GetCtx(), req)
}

// ExistsWithContext checks if a dtray exists using provided context
func (r *Dtray) ExistsWithContext(ctx context.Context, req *DtraySearchParams) (bool, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].ExistsWithContext(ctx, params)
}

// MustExists checks if a dtray exists and panics if not
func (r *Dtray) MustExists(req *DtraySearchParams) bool {
	return r.MustExistsWithContext(r.Untyped.GetCtx(), req)
}

// MustExistsWithContext checks if a dtray exists and panics if not using provided context
func (r *Dtray) MustExistsWithContext(ctx context.Context, req *DtraySearchParams) bool {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].MustExistsWithContext(ctx, params)
}

// -----------------------------------------------------
// EXTRA METHODS
// -----------------------------------------------------

// DtrayControlLedWithContext_PATCH
// method: PATCH
// url: /dtrays/{id}/control_led/
// summary: Control DTray (DNode) LEDs
//
// Parameters:
//   - control (body): LED state
func (r *Dtray) DtrayControlLedWithContext_PATCH(ctx context.Context, id any, control string) error {
	resourcePath := core.BuildResourcePathWithID("dtrays", id, "control_led")

	var reqParams core.Params
	reqBody := core.Params{}
	if control != "" {
		reqBody["control"] = control
	}

	_, err := core.Request[core.EmptyRecord](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodPatch, resourcePath, reqParams, reqBody)
	return err

}

// DtrayControlLed_PATCH
// method: PATCH
// url: /dtrays/{id}/control_led/
// summary: Control DTray (DNode) LEDs
//
// Parameters:
//   - control (body): LED state
func (r *Dtray) DtrayControlLed_PATCH(id any, control string) error {
	return r.DtrayControlLedWithContext_PATCH(r.Untyped.GetCtx(), id, control)
}

// DtrayRenameWithContext_PATCH
// method: PATCH
// url: /dtrays/{id}/rename/
// summary: Rename Dtray
//
// Parameters:
//   - name (body): New DTray name
func (r *Dtray) DtrayRenameWithContext_PATCH(ctx context.Context, id any, name string) error {
	resourcePath := core.BuildResourcePathWithID("dtrays", id, "rename")

	var reqParams core.Params
	reqBody := core.Params{}
	if name != "" {
		reqBody["name"] = name
	}

	_, err := core.Request[core.EmptyRecord](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodPatch, resourcePath, reqParams, reqBody)
	return err

}

// DtrayRename_PATCH
// method: PATCH
// url: /dtrays/{id}/rename/
// summary: Rename Dtray
//
// Parameters:
//   - name (body): New DTray name
func (r *Dtray) DtrayRename_PATCH(id any, name string) error {
	return r.DtrayRenameWithContext_PATCH(r.Untyped.GetCtx(), id, name)
}

// -----------------------------------------------------
// GENERATION ISSUES
// -----------------------------------------------------
//   - CREATE operation excluded: POST dtrays has no response schema and doesn't return 204 NO CONTENT
