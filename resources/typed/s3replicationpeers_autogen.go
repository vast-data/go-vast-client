// Code generated by generate-typed-resources. DO NOT EDIT.
// Template: CREATE|LIST|READ|DELETE

package typed

import (
	"context"

	"github.com/vast-data/go-vast-client/core"
)

// -----------------------------------------------------
// RESOURCE TYPE
// -----------------------------------------------------

// S3replicationPeers represents a typed resource for s3replicationpeers operations
type S3replicationPeers struct {
	*core.TypedVastResource
}

// -----------------------------------------------------
// SEARCH PARAMS
// -----------------------------------------------------

// S3replicationPeersSearchParams represents the search parameters for S3replicationPeers operations
type S3replicationPeersSearchParams struct {
	BucketName      string `json:"bucket_name,omitempty" yaml:"bucket_name,omitempty" required:"false" doc:"Filter by target bucket name"`
	CustomBucketUrl string `json:"custom_bucket_url,omitempty" yaml:"custom_bucket_url,omitempty" required:"false" doc:"Filter by the URL of a custom target bucket"`
	Guid            string `json:"guid,omitempty" yaml:"guid,omitempty" required:"false" doc:"unique identifier"`
	HttpProtocol    string `json:"http_protocol,omitempty" yaml:"http_protocol,omitempty" required:"false" doc:"Filter by protocol used to connect to the bucket (http or https)"`
	Name            string `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:"Filter by name"`

	// RawData allows passing arbitrary search parameters as key-value pairs.
	//
	// Use this field when you need query parameters that are not covered by the typed fields above.
	// This is particularly useful for:
	//   - Dynamic filter operations (e.g., "path__contains", "name__icontains")
	//   - Django-style query filters
	//   - Custom backend-specific parameters
	//
	// Example:
	//   params := &S3replicationPeersSearchParams{
	//       RawData: core.Params{"path__contains": "/foo", "name__icontains": "bar"},
	//   }
	//
	// Note: You can use either the typed fields or RawData, or combine both.
	RawData core.Params `json:"-" yaml:"-"`
}

// -----------------------------------------------------
// REQUEST BODY
// -----------------------------------------------------

// S3replicationPeersRequestBody represents the request body for S3replicationPeers operations
type S3replicationPeersRequestBody struct {
	AccessKey       string    `json:"access_key,omitempty" yaml:"access_key,omitempty" required:"true" doc:"Access key of a valid key pair for accessing the named S3 bucket"`
	BucketName      string    `json:"bucket_name,omitempty" yaml:"bucket_name,omitempty" required:"true" doc:"The S3 bucket name of an existing S3 bucket that you want to configure as the replication target"`
	HttpProtocol    string    `json:"http_protocol,omitempty" yaml:"http_protocol,omitempty" required:"true" doc:"For custom S3 buckets (not AWS), specifies which protocol to use to connect to the bucket"`
	Name            string    `json:"name,omitempty" yaml:"name,omitempty" required:"true" doc:""`
	Type            string    `json:"type,omitempty" yaml:"type,omitempty" required:"true" doc:"Specify AWS_S3 for an AWS S3 bucket. Specify CUSTOM_S3 for a custom S3 bucket."`
	AwsAccountId    string    `json:"aws_account_id,omitempty" yaml:"aws_account_id,omitempty" required:"false" doc:"Not in use"`
	AwsRegion       string    `json:"aws_region,omitempty" yaml:"aws_region,omitempty" required:"false" doc:"If the target is an AWS S3 bucket, use this parameter to specify the AWS region of the bucket"`
	AwsRole         string    `json:"aws_role,omitempty" yaml:"aws_role,omitempty" required:"false" doc:"Not in use"`
	CustomBucketUrl string    `json:"custom_bucket_url,omitempty" yaml:"custom_bucket_url,omitempty" required:"false" doc:"If the target is a custom S3 bucket, use this parameter to specify the URL of the bucket"`
	Proxies         *[]string `json:"proxies,omitempty" yaml:"proxies,omitempty" required:"false" doc:"If configured, replication traffic is routed via proxies. Separate with commas. Format: http://USERNAME:PASSWORD@IP:PORT"`
	SecretKey       string    `json:"secret_key,omitempty" yaml:"secret_key,omitempty" required:"false" doc:"The secret key of a valid key pair for accessing the destination S3 bucket"`
}

// -----------------------------------------------------
// MODELS
// -----------------------------------------------------

// S3replicationPeersDetailsModel represents the detailed model returned by GET/List operations
// Type alias to component definition: #/components/schemas/ReplicationTarget
type S3replicationPeersDetailsModel = Component_ReplicationTarget

// S3replicationPeersUpsertModel represents the model returned by Create/Update operations
// Type alias to component definition: #/components/schemas/ReplicationTarget
type S3replicationPeersUpsertModel = Component_ReplicationTarget

// -----------------------------------------------------
// LIST
// -----------------------------------------------------

// List retrieves multiple s3replicationpeerss with typed request/response
// summary: List S3 Replication Peers
func (r *S3replicationPeers) List(req *S3replicationPeersSearchParams) ([]*S3replicationPeersDetailsModel, error) {
	return r.ListWithContext(r.Untyped.GetCtx(), req)
}

// ListWithContext retrieves multiple s3replicationpeerss with typed request/response using provided context
// summary: List S3 Replication Peers
func (r *S3replicationPeers) ListWithContext(ctx context.Context, req *S3replicationPeersSearchParams) ([]*S3replicationPeersDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.GetResourceMap()[r.GetResourceType()].ListWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response []*S3replicationPeersDetailsModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// Get retrieves a single s3replicationpeers with typed request/response
// summary: List S3 Replication Peers
func (r *S3replicationPeers) Get(req *S3replicationPeersSearchParams) (*S3replicationPeersDetailsModel, error) {
	return r.GetWithContext(r.Untyped.GetCtx(), req)
}

// GetWithContext retrieves a single s3replicationpeers with typed request/response using provided context
// summary: List S3 Replication Peers
func (r *S3replicationPeers) GetWithContext(ctx context.Context, req *S3replicationPeersSearchParams) (*S3replicationPeersDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response S3replicationPeersDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// READ
// -----------------------------------------------------

// GetById retrieves a single s3replicationpeers by ID
// summary: Return Details of a Single S3 Replication Peer.
func (r *S3replicationPeers) GetById(id any) (*S3replicationPeersDetailsModel, error) {
	return r.GetByIdWithContext(r.Untyped.GetCtx(), id)
}

// GetByIdWithContext retrieves a single s3replicationpeers by ID using provided context
// summary: Return Details of a Single S3 Replication Peer.
func (r *S3replicationPeers) GetByIdWithContext(ctx context.Context, id any) (*S3replicationPeersDetailsModel, error) {
	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetByIdWithContext(ctx, id)
	if err != nil {
		return nil, err
	}

	var response S3replicationPeersDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// CREATE
// -----------------------------------------------------

// Create creates a new s3replicationpeers with typed request/response
// summary: Create an S3 Replication Peer
func (r *S3replicationPeers) Create(req *S3replicationPeersRequestBody) (*S3replicationPeersUpsertModel, error) {
	return r.CreateWithContext(r.Untyped.GetCtx(), req)
}

// CreateWithContext creates a new s3replicationpeers with typed request/response using provided context
// summary: Create an S3 Replication Peer
func (r *S3replicationPeers) CreateWithContext(ctx context.Context, req *S3replicationPeersRequestBody) (*S3replicationPeersUpsertModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].CreateWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response S3replicationPeersUpsertModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// DELETE
// -----------------------------------------------------

// Delete deletes a s3replicationpeers with search parameters
func (r *S3replicationPeers) Delete(req *S3replicationPeersSearchParams) error {
	return r.DeleteWithContext(r.Untyped.GetCtx(), req)
}

// DeleteWithContext deletes a s3replicationpeers with search parameters using provided context
func (r *S3replicationPeers) DeleteWithContext(ctx context.Context, req *S3replicationPeersSearchParams) error {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return err
	}
	_, err = r.Untyped.GetResourceMap()[r.GetResourceType()].DeleteWithContext(ctx, params, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteById deletes a s3replicationpeers by ID
// summary: Delete an S3 Replication Peer
//
// Parameters:
//   - id: Replication Target ID
func (r *S3replicationPeers) DeleteById(id any) error {
	return r.DeleteByIdWithContext(r.Untyped.GetCtx(), id)
}

// DeleteByIdWithContext deletes a s3replicationpeers by ID using provided context
// summary: Delete an S3 Replication Peer
//
// Parameters:
//   - id: Replication Target ID
func (r *S3replicationPeers) DeleteByIdWithContext(ctx context.Context, id any) error {
	_, err := r.Untyped.GetResourceMap()[r.GetResourceType()].DeleteByIdWithContext(ctx, id, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// -----------------------------------------------------
// ENSURE
// -----------------------------------------------------

// Ensure ensures a s3replicationpeers exists with typed response
func (r *S3replicationPeers) Ensure(searchParams *S3replicationPeersSearchParams, body *S3replicationPeersRequestBody) (*S3replicationPeersUpsertModel, error) {
	return r.EnsureWithContext(r.Untyped.GetCtx(), searchParams, body)
}

// EnsureWithContext ensures a s3replicationpeers exists with typed response using provided context
func (r *S3replicationPeers) EnsureWithContext(ctx context.Context, searchParams *S3replicationPeersSearchParams, body *S3replicationPeersRequestBody) (*S3replicationPeersUpsertModel, error) {
	searchParamsConverted, err := core.NewParamsFromStruct(searchParams)
	if err != nil {
		return nil, err
	}
	bodyConverted, err := core.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].EnsureWithContext(ctx, searchParamsConverted, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response S3replicationPeersUpsertModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Exists checks if a s3replicationpeers exists
func (r *S3replicationPeers) Exists(req *S3replicationPeersSearchParams) (bool, error) {
	return r.ExistsWithContext(r.Untyped.GetCtx(), req)
}

// ExistsWithContext checks if a s3replicationpeers exists using provided context
func (r *S3replicationPeers) ExistsWithContext(ctx context.Context, req *S3replicationPeersSearchParams) (bool, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].ExistsWithContext(ctx, params)
}

// MustExists checks if a s3replicationpeers exists and panics if not
func (r *S3replicationPeers) MustExists(req *S3replicationPeersSearchParams) bool {
	return r.MustExistsWithContext(r.Untyped.GetCtx(), req)
}

// MustExistsWithContext checks if a s3replicationpeers exists and panics if not using provided context
func (r *S3replicationPeers) MustExistsWithContext(ctx context.Context, req *S3replicationPeersSearchParams) bool {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].MustExistsWithContext(ctx, params)
}

// -----------------------------------------------------
// GENERATION ISSUES
// -----------------------------------------------------
//   - UPDATE operation excluded: PATCH/PUT /replicationtargets/{id}/ has no response schema and doesn't return 204 NO CONTENT
