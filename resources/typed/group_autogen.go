// Code generated by generate-typed-resources. DO NOT EDIT.
// Template: CREATE|LIST|READ|UPDATE|DELETE

package typed

import (
	"context"
	"net/http"

	"github.com/vast-data/go-vast-client/core"
)

// -----------------------------------------------------
// RESOURCE TYPE
// -----------------------------------------------------

// Group represents a typed resource for group operations
type Group struct {
	*core.TypedVastResource
}

// -----------------------------------------------------
// SEARCH PARAMS
// -----------------------------------------------------

// GroupSearchParams represents the search parameters for Group operations
type GroupSearchParams struct {
	Gid  int64  `json:"gid,omitempty" yaml:"gid,omitempty" required:"true" doc:""`
	Name string `json:"name,omitempty" yaml:"name,omitempty" required:"true" doc:""`
	Guid string `json:"guid,omitempty" yaml:"guid,omitempty" required:"false" doc:""`

	// RawData allows passing arbitrary search parameters as key-value pairs.
	//
	// Use this field when you need query parameters that are not covered by the typed fields above.
	// This is particularly useful for:
	//   - Dynamic filter operations (e.g., "path__contains", "name__icontains")
	//   - Django-style query filters
	//   - Custom backend-specific parameters
	//
	// Example:
	//   params := &GroupSearchParams{
	//       RawData: core.Params{"path__contains": "/foo", "name__icontains": "bar"},
	//   }
	//
	// Note: You can use either the typed fields or RawData, or combine both.
	RawData core.Params `json:"-" yaml:"-"`
}

// -----------------------------------------------------
// REQUEST BODY
// -----------------------------------------------------

// GroupRequestBody represents the request body for Group operations
type GroupRequestBody struct {
	Gid             int64    `json:"gid,omitempty" yaml:"gid,omitempty" required:"true" doc:"group GID"`
	Name            string   `json:"name,omitempty" yaml:"name,omitempty" required:"true" doc:"group name"`
	LocalProviderId int64    `json:"local_provider_id,omitempty" yaml:"local_provider_id,omitempty" required:"false" doc:"Local provider ID"`
	S3PoliciesIds   *[]int64 `json:"s3_policies_ids,omitempty" yaml:"s3_policies_ids,omitempty" required:"false" doc:"list of s3 policy ids"`
	Sid             string   `json:"sid,omitempty" yaml:"sid,omitempty" required:"false" doc:"group SID"`
}

// -----------------------------------------------------
// MODELS
// -----------------------------------------------------

// GroupDetailsModel represents the detailed model returned by GET/List operations
// Type alias to component definition: #/components/schemas/Group
type GroupDetailsModel = Component_Group

// GroupUpsertModel represents the model returned by Create/Update operations
// Type alias to component definition: #/components/schemas/Group
type GroupUpsertModel = Component_Group

// -----------------------------------------------------
// LIST
// -----------------------------------------------------

// List retrieves multiple groups with typed request/response
// summary: List Groups
func (r *Group) List(req *GroupSearchParams) ([]*GroupDetailsModel, error) {
	return r.ListWithContext(r.Untyped.GetCtx(), req)
}

// ListWithContext retrieves multiple groups with typed request/response using provided context
// summary: List Groups
func (r *Group) ListWithContext(ctx context.Context, req *GroupSearchParams) ([]*GroupDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.GetResourceMap()[r.GetResourceType()].ListWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response []*GroupDetailsModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// Get retrieves a single group with typed request/response
// summary: List Groups
func (r *Group) Get(req *GroupSearchParams) (*GroupDetailsModel, error) {
	return r.GetWithContext(r.Untyped.GetCtx(), req)
}

// GetWithContext retrieves a single group with typed request/response using provided context
// summary: List Groups
func (r *Group) GetWithContext(ctx context.Context, req *GroupSearchParams) (*GroupDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response GroupDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// READ
// -----------------------------------------------------

// GetById retrieves a single group by ID
// summary: Return Details of a Group
func (r *Group) GetById(id any) (*GroupDetailsModel, error) {
	return r.GetByIdWithContext(r.Untyped.GetCtx(), id)
}

// GetByIdWithContext retrieves a single group by ID using provided context
// summary: Return Details of a Group
func (r *Group) GetByIdWithContext(ctx context.Context, id any) (*GroupDetailsModel, error) {
	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetByIdWithContext(ctx, id)
	if err != nil {
		return nil, err
	}

	var response GroupDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// CREATE
// -----------------------------------------------------

// Create creates a new group with typed request/response
// summary: Create Group
func (r *Group) Create(req *GroupRequestBody) (*GroupUpsertModel, error) {
	return r.CreateWithContext(r.Untyped.GetCtx(), req)
}

// CreateWithContext creates a new group with typed request/response using provided context
// summary: Create Group
func (r *Group) CreateWithContext(ctx context.Context, req *GroupRequestBody) (*GroupUpsertModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].CreateWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response GroupUpsertModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// UPDATE
// -----------------------------------------------------

// Update updates an existing group with typed request/response
func (r *Group) Update(id any, req *GroupRequestBody) (*GroupUpsertModel, error) {
	return r.UpdateWithContext(r.Untyped.GetCtx(), id, req)
}

// UpdateWithContext updates an existing group with typed request/response using provided context
func (r *Group) UpdateWithContext(ctx context.Context, id any, req *GroupRequestBody) (*GroupUpsertModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].UpdateWithContext(ctx, id, params)
	if err != nil {
		return nil, err
	}

	var response GroupUpsertModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// DELETE
// -----------------------------------------------------

// Delete deletes a group with search parameters
func (r *Group) Delete(req *GroupSearchParams) error {
	return r.DeleteWithContext(r.Untyped.GetCtx(), req)
}

// DeleteWithContext deletes a group with search parameters using provided context
func (r *Group) DeleteWithContext(ctx context.Context, req *GroupSearchParams) error {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return err
	}
	_, err = r.Untyped.GetResourceMap()[r.GetResourceType()].DeleteWithContext(ctx, params, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteById deletes a group by ID
// summary: Delete Group
func (r *Group) DeleteById(id any) error {
	return r.DeleteByIdWithContext(r.Untyped.GetCtx(), id)
}

// DeleteByIdWithContext deletes a group by ID using provided context
// summary: Delete Group
func (r *Group) DeleteByIdWithContext(ctx context.Context, id any) error {
	_, err := r.Untyped.GetResourceMap()[r.GetResourceType()].DeleteByIdWithContext(ctx, id, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// -----------------------------------------------------
// ENSURE
// -----------------------------------------------------

// Ensure ensures a group exists with typed response
func (r *Group) Ensure(searchParams *GroupSearchParams, body *GroupRequestBody) (*GroupUpsertModel, error) {
	return r.EnsureWithContext(r.Untyped.GetCtx(), searchParams, body)
}

// EnsureWithContext ensures a group exists with typed response using provided context
func (r *Group) EnsureWithContext(ctx context.Context, searchParams *GroupSearchParams, body *GroupRequestBody) (*GroupUpsertModel, error) {
	searchParamsConverted, err := core.NewParamsFromStruct(searchParams)
	if err != nil {
		return nil, err
	}
	bodyConverted, err := core.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].EnsureWithContext(ctx, searchParamsConverted, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response GroupUpsertModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Exists checks if a group exists
func (r *Group) Exists(req *GroupSearchParams) (bool, error) {
	return r.ExistsWithContext(r.Untyped.GetCtx(), req)
}

// ExistsWithContext checks if a group exists using provided context
func (r *Group) ExistsWithContext(ctx context.Context, req *GroupSearchParams) (bool, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].ExistsWithContext(ctx, params)
}

// MustExists checks if a group exists and panics if not
func (r *Group) MustExists(req *GroupSearchParams) bool {
	return r.MustExistsWithContext(r.Untyped.GetCtx(), req)
}

// MustExistsWithContext checks if a group exists and panics if not using provided context
func (r *Group) MustExistsWithContext(ctx context.Context, req *GroupSearchParams) bool {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].MustExistsWithContext(ctx, params)
}

// -----------------------------------------------------
// EXTRA METHODS
// -----------------------------------------------------

// GroupNames_GET_Body represents the request body for GroupNames
type GroupNames_GET_Body struct {
	Domain   string `json:"domain,omitempty" yaml:"domain,omitempty" required:"false" doc:"Domain details to find the group (ALL by default). Format: BASE_DN|FQDN|SID"`
	Prefix   string `json:"prefix,omitempty" yaml:"prefix,omitempty" required:"false" doc:"Prefix to find the group"`
	TenantId int64  `json:"tenant_id,omitempty" yaml:"tenant_id,omitempty" required:"false" doc:"Filter by tenant. Specify tenant ID."`
}

// GroupNames_GET_Model represents the response model for GroupNames
type GroupNames_GET_Model struct {
	Gid           int64     `json:"gid,omitempty" yaml:"gid,omitempty" required:"false" doc:""`
	Name          string    `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:""`
	ProviderType  string    `json:"provider_type,omitempty" yaml:"provider_type,omitempty" required:"false" doc:""`
	S3Policies    *[]string `json:"s3_policies,omitempty" yaml:"s3_policies,omitempty" required:"false" doc:""`
	S3PoliciesIds *[]int64  `json:"s3_policies_ids,omitempty" yaml:"s3_policies_ids,omitempty" required:"false" doc:""`
	Sid           string    `json:"sid,omitempty" yaml:"sid,omitempty" required:"false" doc:""`
}

// GroupNamesWithContext_GET
// method: GET
// url: /groups/names/
// summary: Find Group by prefix and domain details
func (r *Group) GroupNamesWithContext_GET(ctx context.Context, params *GroupNames_GET_Body) (*GroupNames_GET_Model, error) {
	resourcePath := "/groups/names/"

	reqParams, err := core.NewParamsFromStruct(params)
	if err != nil {
		return nil, err
	}
	var reqBody core.Params

	record, err := core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodGet, resourcePath, reqParams, reqBody)
	if err != nil {
		return nil, err
	}

	var response GroupNames_GET_Model
	if err := record.Fill(&response); err != nil {
		return nil, err
	}
	return &response, nil

}

// GroupNames_GET
// method: GET
// url: /groups/names/
// summary: Find Group by prefix and domain details
func (r *Group) GroupNames_GET(params *GroupNames_GET_Body) (*GroupNames_GET_Model, error) {
	return r.GroupNamesWithContext_GET(r.Untyped.GetCtx(), params)
}

// GroupQuery_GET_Body represents the request body for GroupQuery
type GroupQuery_GET_Body struct {
	Context   string `json:"context,omitempty" yaml:"context,omitempty" required:"false" doc:"The provider to query"`
	Gid       int64  `json:"gid,omitempty" yaml:"gid,omitempty" required:"false" doc:"Group GID"`
	Groupname string `json:"groupname,omitempty" yaml:"groupname,omitempty" required:"false" doc:"Groupname"`
	Sid       string `json:"sid,omitempty" yaml:"sid,omitempty" required:"false" doc:"Group SID"`
	TenantId  int64  `json:"tenant_id,omitempty" yaml:"tenant_id,omitempty" required:"false" doc:"Filter by tenant. Specify tenant ID."`
	Vaid      string `json:"vaid,omitempty" yaml:"vaid,omitempty" required:"false" doc:"Group VAID (a VAST identifier for groups)"`
}

// GroupQuery_GET_Model represents the response model for GroupQuery
type GroupQuery_GET_Model struct {
	Gid           int64     `json:"gid,omitempty" yaml:"gid,omitempty" required:"false" doc:""`
	Name          string    `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:""`
	ProviderType  string    `json:"provider_type,omitempty" yaml:"provider_type,omitempty" required:"false" doc:""`
	S3Policies    *[]string `json:"s3_policies,omitempty" yaml:"s3_policies,omitempty" required:"false" doc:""`
	S3PoliciesIds *[]int64  `json:"s3_policies_ids,omitempty" yaml:"s3_policies_ids,omitempty" required:"false" doc:""`
	Sid           string    `json:"sid,omitempty" yaml:"sid,omitempty" required:"false" doc:""`
}

// GroupQueryWithContext_GET
// method: GET
// url: /groups/query/
// summary: Query Group
func (r *Group) GroupQueryWithContext_GET(ctx context.Context, params *GroupQuery_GET_Body) (*GroupQuery_GET_Model, error) {
	resourcePath := "/groups/query/"

	reqParams, err := core.NewParamsFromStruct(params)
	if err != nil {
		return nil, err
	}
	var reqBody core.Params

	record, err := core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodGet, resourcePath, reqParams, reqBody)
	if err != nil {
		return nil, err
	}

	var response GroupQuery_GET_Model
	if err := record.Fill(&response); err != nil {
		return nil, err
	}
	return &response, nil

}

// GroupQuery_GET
// method: GET
// url: /groups/query/
// summary: Query Group
func (r *Group) GroupQuery_GET(params *GroupQuery_GET_Body) (*GroupQuery_GET_Model, error) {
	return r.GroupQueryWithContext_GET(r.Untyped.GetCtx(), params)
}

// -----------------------------------------------------
// GENERATION ISSUES
// -----------------------------------------------------
//   - Extra method PATCH /groups/query/ skipped: PATCH /groups/query/ - No response schema defined in OpenAPI spec. Error: no valid schema found in PATCH response (200/201/202/204) for resource /groups/query/
