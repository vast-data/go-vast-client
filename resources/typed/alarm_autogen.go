// Code generated by generate-typed-resources. DO NOT EDIT.
// Template: LIST|READ|DELETE

package typed

import (
	"context"

	"github.com/vast-data/go-vast-client/core"
)

// -----------------------------------------------------
// RESOURCE TYPE
// -----------------------------------------------------

// Alarm represents a typed resource for alarm operations
type Alarm struct {
	*core.TypedVastResource
}

// -----------------------------------------------------
// SEARCH PARAMS
// -----------------------------------------------------

// AlarmSearchParams represents the search parameters for Alarm operations
type AlarmSearchParams struct {
	ObjectGuid          string `json:"object_guid,omitempty" yaml:"object_guid,omitempty" required:"false" doc:""`
	ObjectId            string `json:"object_id,omitempty" yaml:"object_id,omitempty" required:"false" doc:"The ID of the affected object"`
	ObjectType          string `json:"object_type,omitempty" yaml:"object_type,omitempty" required:"false" doc:"Filter the list by object type"`
	OnlyDiscoveredHosts string `json:"only_discovered_hosts,omitempty" yaml:"only_discovered_hosts,omitempty" required:"false" doc:"get only discovery related hosts"`
	Severity            string `json:"severity,omitempty" yaml:"severity,omitempty" required:"false" doc:"Filter by severity"`

	// RawData allows passing arbitrary search parameters as key-value pairs.
	//
	// Use this field when you need query parameters that are not covered by the typed fields above.
	// This is particularly useful for:
	//   - Dynamic filter operations (e.g., "path__contains", "name__icontains")
	//   - Django-style query filters
	//   - Custom backend-specific parameters
	//
	// Example:
	//   params := &AlarmSearchParams{
	//       RawData: core.Params{"path__contains": "/foo", "name__icontains": "bar"},
	//   }
	//
	// Note: You can use either the typed fields or RawData, or combine both.
	RawData core.Params `json:"-" yaml:"-"`
}

// -----------------------------------------------------
// MODELS
// -----------------------------------------------------

// AlarmDetailsModel represents the detailed model returned by GET/List operations
// Type alias to component definition: #/components/schemas/Alarm
type AlarmDetailsModel = Component_Alarm

// -----------------------------------------------------
// LIST
// -----------------------------------------------------

// List retrieves multiple alarms with typed request/response
// summary: List Alarms
func (r *Alarm) List(req *AlarmSearchParams) ([]*AlarmDetailsModel, error) {
	return r.ListWithContext(r.Untyped.GetCtx(), req)
}

// ListWithContext retrieves multiple alarms with typed request/response using provided context
// summary: List Alarms
func (r *Alarm) ListWithContext(ctx context.Context, req *AlarmSearchParams) ([]*AlarmDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.GetResourceMap()[r.GetResourceType()].ListWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response []*AlarmDetailsModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// Get retrieves a single alarm with typed request/response
// summary: List Alarms
func (r *Alarm) Get(req *AlarmSearchParams) (*AlarmDetailsModel, error) {
	return r.GetWithContext(r.Untyped.GetCtx(), req)
}

// GetWithContext retrieves a single alarm with typed request/response using provided context
// summary: List Alarms
func (r *Alarm) GetWithContext(ctx context.Context, req *AlarmSearchParams) (*AlarmDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response AlarmDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// READ
// -----------------------------------------------------

// GetById retrieves a single alarm by ID
// summary: Return Details of an Alarm
func (r *Alarm) GetById(id any) (*AlarmDetailsModel, error) {
	return r.GetByIdWithContext(r.Untyped.GetCtx(), id)
}

// GetByIdWithContext retrieves a single alarm by ID using provided context
// summary: Return Details of an Alarm
func (r *Alarm) GetByIdWithContext(ctx context.Context, id any) (*AlarmDetailsModel, error) {
	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetByIdWithContext(ctx, id)
	if err != nil {
		return nil, err
	}

	var response AlarmDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// DELETE
// -----------------------------------------------------

// Delete deletes a alarm with search parameters
func (r *Alarm) Delete(req *AlarmSearchParams) error {
	return r.DeleteWithContext(r.Untyped.GetCtx(), req)
}

// DeleteWithContext deletes a alarm with search parameters using provided context
func (r *Alarm) DeleteWithContext(ctx context.Context, req *AlarmSearchParams) error {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return err
	}
	_, err = r.Untyped.GetResourceMap()[r.GetResourceType()].DeleteWithContext(ctx, params, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteById deletes a alarm by ID
func (r *Alarm) DeleteById(id any) error {
	return r.DeleteByIdWithContext(r.Untyped.GetCtx(), id)
}

// DeleteByIdWithContext deletes a alarm by ID using provided context
func (r *Alarm) DeleteByIdWithContext(ctx context.Context, id any) error {
	_, err := r.Untyped.GetResourceMap()[r.GetResourceType()].DeleteByIdWithContext(ctx, id, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// Exists checks if a alarm exists
func (r *Alarm) Exists(req *AlarmSearchParams) (bool, error) {
	return r.ExistsWithContext(r.Untyped.GetCtx(), req)
}

// ExistsWithContext checks if a alarm exists using provided context
func (r *Alarm) ExistsWithContext(ctx context.Context, req *AlarmSearchParams) (bool, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].ExistsWithContext(ctx, params)
}

// MustExists checks if a alarm exists and panics if not
func (r *Alarm) MustExists(req *AlarmSearchParams) bool {
	return r.MustExistsWithContext(r.Untyped.GetCtx(), req)
}

// MustExistsWithContext checks if a alarm exists and panics if not using provided context
func (r *Alarm) MustExistsWithContext(ctx context.Context, req *AlarmSearchParams) bool {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].MustExistsWithContext(ctx, params)
}

// -----------------------------------------------------
// GENERATION ISSUES
// -----------------------------------------------------
//   - Extra method PATCH /alarms/clear/ skipped: PATCH /alarms/clear/ - No response schema defined in OpenAPI spec. Error: no valid schema found in PATCH response (200/201/202) for resource /alarms/clear/
//   - UPDATE operation excluded: PATCH/PUT /alarms/{id}/ has no response schema and doesn't return 204 NO CONTENT
