// Code generated by generate-typed-resources. DO NOT EDIT.
// Template: CREATE|LIST|READ|DELETE

package typed

import (
	"context"

	"github.com/vast-data/go-vast-client/core"
)

// -----------------------------------------------------
// RESOURCE TYPE
// -----------------------------------------------------

// Dns represents a typed resource for dns operations
type Dns struct {
	*core.TypedVastResource
}

// -----------------------------------------------------
// SEARCH PARAMS
// -----------------------------------------------------

// DnsSearchParams represents the search parameters for Dns operations
type DnsSearchParams struct {
	Guid string `json:"guid,omitempty" yaml:"guid,omitempty" required:"false" doc:""`
	Name string `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:"Specifies a name for the VAST DNS server configuration"`

	// RawData allows passing arbitrary search parameters as key-value pairs.
	//
	// Use this field when you need query parameters that are not covered by the typed fields above.
	// This is particularly useful for:
	//   - Dynamic filter operations (e.g., "path__contains", "name__icontains")
	//   - Django-style query filters
	//   - Custom backend-specific parameters
	//
	// Example:
	//   params := &DnsSearchParams{
	//       RawData: core.Params{"path__contains": "/foo", "name__icontains": "bar"},
	//   }
	//
	// Note: You can use either the typed fields or RawData, or combine both.
	RawData core.Params `json:"-" yaml:"-"`
}

// -----------------------------------------------------
// REQUEST BODY
// -----------------------------------------------------

// DnsRequestBody represents the request body for Dns operations
type DnsRequestBody struct {
	BgpConfigId         int64  `json:"bgp_config_id,omitempty" yaml:"bgp_config_id,omitempty" required:"false" doc:"BGP configuration ID"`
	CnodeIds            string `json:"cnode_ids,omitempty" yaml:"cnode_ids,omitempty" required:"false" doc:"To dedicate a specific group of CNodes to the DNS, list the IDs of the CNodes."`
	DomainSuffix        string `json:"domain_suffix,omitempty" yaml:"domain_suffix,omitempty" required:"false" doc:"A suffix for domain names. Requests for domain names with this suffix are resolved to the VIPs configured on the cluster."`
	EnableL3            bool   `json:"enable_l3,omitempty" yaml:"enable_l3,omitempty" required:"false" doc:"Enable L3"`
	Enabled             bool   `json:"enabled,omitempty" yaml:"enabled,omitempty" required:"false" doc:"Set to true to enable the DNS service"`
	InvalidNameResponse string `json:"invalid_name_response,omitempty" yaml:"invalid_name_response,omitempty" required:"false" doc:""`
	InvalidTypeResponse string `json:"invalid_type_response,omitempty" yaml:"invalid_type_response,omitempty" required:"false" doc:""`
	Name                string `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:"A name for the DNS server configuration"`
	NetType             string `json:"net_type,omitempty" yaml:"net_type,omitempty" required:"false" doc:""`
	Port                int64  `json:"port,omitempty" yaml:"port,omitempty" required:"false" doc:"Specifies a port for the DNS"`
	Ttl                 int64  `json:"ttl,omitempty" yaml:"ttl,omitempty" required:"false" doc:"Specifies the TTL value for the DNS."`
	Vip                 string `json:"vip,omitempty" yaml:"vip,omitempty" required:"false" doc:"A virtual IP to assign to the DNS service. DNS requests from your external DNS server must be delegated to this IP."`
	VipGateway          string `json:"vip_gateway,omitempty" yaml:"vip_gateway,omitempty" required:"false" doc:"If the external DNS server doesn't reside on the same subnet as the DNS VIP, enter the IP of a gateway through which to connect to the DNS server."`
	VipIpv6             string `json:"vip_ipv6,omitempty" yaml:"vip_ipv6,omitempty" required:"false" doc:"Assigns an IPv6 to the DNS service."`
	VipIpv6Gateway      string `json:"vip_ipv6_gateway,omitempty" yaml:"vip_ipv6_gateway,omitempty" required:"false" doc:"Specifies a gateway IPv6 to external DNS server if on different subnet."`
	VipIpv6SubnetCidr   int64  `json:"vip_ipv6_subnet_cidr,omitempty" yaml:"vip_ipv6_subnet_cidr,omitempty" required:"false" doc:"Specifies the subnet, as a CIDR index, on which the DNS resides. [1..128]"`
	VipSubnetCidr       int64  `json:"vip_subnet_cidr,omitempty" yaml:"vip_subnet_cidr,omitempty" required:"false" doc:"The subnet, in CIDR format, on which the DNS VIP resides."`
	VipVlan             int64  `json:"vip_vlan,omitempty" yaml:"vip_vlan,omitempty" required:"false" doc:"If your external DNS server is only exposed to a specific VLAN, you can enter the VLAN here to enable communication with the DNS server."`
}

// -----------------------------------------------------
// MODELS
// -----------------------------------------------------

// DnsDetailsModel represents the detailed model returned by GET/List operations
// Type alias to component definition: #/components/schemas/DNS
type DnsDetailsModel = Component_DNS

// DnsUpsertModel represents the model returned by Create/Update operations
// Type alias to component definition: #/components/schemas/DNS
type DnsUpsertModel = Component_DNS

// -----------------------------------------------------
// LIST
// -----------------------------------------------------

// List retrieves multiple dnss with typed request/response
// summary: List VAST-DNS Configuration
func (r *Dns) List(req *DnsSearchParams) ([]*DnsDetailsModel, error) {
	return r.ListWithContext(r.Untyped.GetCtx(), req)
}

// ListWithContext retrieves multiple dnss with typed request/response using provided context
// summary: List VAST-DNS Configuration
func (r *Dns) ListWithContext(ctx context.Context, req *DnsSearchParams) ([]*DnsDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.GetResourceMap()[r.GetResourceType()].ListWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response []*DnsDetailsModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// Get retrieves a single dns with typed request/response
// summary: List VAST-DNS Configuration
func (r *Dns) Get(req *DnsSearchParams) (*DnsDetailsModel, error) {
	return r.GetWithContext(r.Untyped.GetCtx(), req)
}

// GetWithContext retrieves a single dns with typed request/response using provided context
// summary: List VAST-DNS Configuration
func (r *Dns) GetWithContext(ctx context.Context, req *DnsSearchParams) (*DnsDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response DnsDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// READ
// -----------------------------------------------------

// GetById retrieves a single dns by ID
// summary: Return Details of VAST-DNS Configuration
func (r *Dns) GetById(id any) (*DnsDetailsModel, error) {
	return r.GetByIdWithContext(r.Untyped.GetCtx(), id)
}

// GetByIdWithContext retrieves a single dns by ID using provided context
// summary: Return Details of VAST-DNS Configuration
func (r *Dns) GetByIdWithContext(ctx context.Context, id any) (*DnsDetailsModel, error) {
	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetByIdWithContext(ctx, id)
	if err != nil {
		return nil, err
	}

	var response DnsDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// CREATE
// -----------------------------------------------------

// Create creates a new dns with typed request/response
// summary: Create a VAST-DNS Server Configuration
func (r *Dns) Create(req *DnsRequestBody) (*DnsUpsertModel, error) {
	return r.CreateWithContext(r.Untyped.GetCtx(), req)
}

// CreateWithContext creates a new dns with typed request/response using provided context
// summary: Create a VAST-DNS Server Configuration
func (r *Dns) CreateWithContext(ctx context.Context, req *DnsRequestBody) (*DnsUpsertModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].CreateWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response DnsUpsertModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// DELETE
// -----------------------------------------------------

// Delete deletes a dns with search parameters
func (r *Dns) Delete(req *DnsSearchParams) error {
	return r.DeleteWithContext(r.Untyped.GetCtx(), req)
}

// DeleteWithContext deletes a dns with search parameters using provided context
func (r *Dns) DeleteWithContext(ctx context.Context, req *DnsSearchParams) error {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return err
	}
	_, err = r.Untyped.GetResourceMap()[r.GetResourceType()].DeleteWithContext(ctx, params, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteById deletes a dns by ID
// summary: Delete VAST-DNS Server Configuration.
//
// Parameters:
//   - id: DNS ID
func (r *Dns) DeleteById(id any) error {
	return r.DeleteByIdWithContext(r.Untyped.GetCtx(), id)
}

// DeleteByIdWithContext deletes a dns by ID using provided context
// summary: Delete VAST-DNS Server Configuration.
//
// Parameters:
//   - id: DNS ID
func (r *Dns) DeleteByIdWithContext(ctx context.Context, id any) error {
	_, err := r.Untyped.GetResourceMap()[r.GetResourceType()].DeleteByIdWithContext(ctx, id, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// -----------------------------------------------------
// ENSURE
// -----------------------------------------------------

// Ensure ensures a dns exists with typed response
func (r *Dns) Ensure(searchParams *DnsSearchParams, body *DnsRequestBody) (*DnsUpsertModel, error) {
	return r.EnsureWithContext(r.Untyped.GetCtx(), searchParams, body)
}

// EnsureWithContext ensures a dns exists with typed response using provided context
func (r *Dns) EnsureWithContext(ctx context.Context, searchParams *DnsSearchParams, body *DnsRequestBody) (*DnsUpsertModel, error) {
	searchParamsConverted, err := core.NewParamsFromStruct(searchParams)
	if err != nil {
		return nil, err
	}
	bodyConverted, err := core.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].EnsureWithContext(ctx, searchParamsConverted, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response DnsUpsertModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Exists checks if a dns exists
func (r *Dns) Exists(req *DnsSearchParams) (bool, error) {
	return r.ExistsWithContext(r.Untyped.GetCtx(), req)
}

// ExistsWithContext checks if a dns exists using provided context
func (r *Dns) ExistsWithContext(ctx context.Context, req *DnsSearchParams) (bool, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].ExistsWithContext(ctx, params)
}

// MustExists checks if a dns exists and panics if not
func (r *Dns) MustExists(req *DnsSearchParams) bool {
	return r.MustExistsWithContext(r.Untyped.GetCtx(), req)
}

// MustExistsWithContext checks if a dns exists and panics if not using provided context
func (r *Dns) MustExistsWithContext(ctx context.Context, req *DnsSearchParams) bool {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].MustExistsWithContext(ctx, params)
}

// -----------------------------------------------------
// GENERATION ISSUES
// -----------------------------------------------------
//   - UPDATE operation excluded: PATCH/PUT /dns/{id}/ has no response schema and doesn't return 204 NO CONTENT
