// Code generated by generate-typed-resources. DO NOT EDIT.
// Template: CREATE|LIST|READ|DELETE

package typed

import (
	"context"

	"github.com/vast-data/go-vast-client/core"
)

// -----------------------------------------------------
// RESOURCE TYPE
// -----------------------------------------------------

// ProtectionPolicy represents a typed resource for protectionpolicy operations
type ProtectionPolicy struct {
	*core.TypedVastResource
}

// -----------------------------------------------------
// SEARCH PARAMS
// -----------------------------------------------------

// ProtectionPolicySearchParams represents the search parameters for ProtectionPolicy operations
type ProtectionPolicySearchParams struct {
	Guid     string `json:"guid,omitempty" yaml:"guid,omitempty" required:"false" doc:"unique identifier"`
	Name     string `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:"Filter by protection policy name"`
	TenantId int64  `json:"tenant_id,omitempty" yaml:"tenant_id,omitempty" required:"false" doc:""`

	// RawData allows passing arbitrary search parameters as key-value pairs.
	//
	// Use this field when you need query parameters that are not covered by the typed fields above.
	// This is particularly useful for:
	//   - Dynamic filter operations (e.g., "path__contains", "name__icontains")
	//   - Django-style query filters
	//   - Custom backend-specific parameters
	//
	// Example:
	//   params := &ProtectionPolicySearchParams{
	//       RawData: core.Params{"path__contains": "/foo", "name__icontains": "bar"},
	//   }
	//
	// Note: You can use either the typed fields or RawData, or combine both.
	RawData core.Params `json:"-" yaml:"-"`
}

// -----------------------------------------------------
// REQUEST BODY
// -----------------------------------------------------

// ProtectionPolicyRequestBody represents the request body for ProtectionPolicy operations
type ProtectionPolicyRequestBody struct {
	CloneType        string `json:"clone_type,omitempty" yaml:"clone_type,omitempty" required:"true" doc:"Specify the type of data protection. CLOUD_REPLICATION is S3 backup. LOCAL means local snapshots without replication."`
	Name             string `json:"name,omitempty" yaml:"name,omitempty" required:"true" doc:""`
	Prefix           string `json:"prefix,omitempty" yaml:"prefix,omitempty" required:"true" doc:"The prefix for names of snapshots created by the policy"`
	BigCatalog       bool   `json:"big_catalog,omitempty" yaml:"big_catalog,omitempty" required:"false" doc:"Indicates if Protection Policy will be used for VAST Catalog. There may only be 1 such policy."`
	Guid             string `json:"guid,omitempty" yaml:"guid,omitempty" required:"false" doc:"Do not specify this parameter."`
	Id               int64  `json:"id,omitempty" yaml:"id,omitempty" required:"false" doc:"Do not specify this parameter."`
	Indestructible   bool   `json:"indestructible,omitempty" yaml:"indestructible,omitempty" required:"false" doc:"Set to true to protect the protection policy from accidental or malicious deletion with the indestructibility feature. If this setting is enabled, authorized unlocking of the cluster's indestructibility mechanism is required to do any of the following: modifying the policy, deleting the policy or disabling this setting."`
	RemoteTenantGuid string `json:"remote_tenant_guid,omitempty" yaml:"remote_tenant_guid,omitempty" required:"false" doc:"remote tenant guid"`
	TargetObjectId   int64  `json:"target_object_id,omitempty" yaml:"target_object_id,omitempty" required:"false" doc:"ID of the remote peer. Specify ID of a ReplicationTarget (aka S3 replication peer) if clone_type is CLOUD_REPLICATION. Specify the ID of a NativeReplicationRemoteTarget if clone_type is NATIVE_REPLICATION."`
	TenantId         int64  `json:"tenant_id,omitempty" yaml:"tenant_id,omitempty" required:"false" doc:"Tenant ID"`
}

// -----------------------------------------------------
// MODELS
// -----------------------------------------------------

// ProtectionPolicyDetailsModel represents the detailed model returned by GET/List operations
// Type alias to component definition: #/components/schemas/ProtectionPolicy
type ProtectionPolicyDetailsModel = Component_ProtectionPolicy

// ProtectionPolicyUpsertModel represents the model returned by Create/Update operations
// Type alias to component definition: #/components/schemas/ProtectionPolicy
type ProtectionPolicyUpsertModel = Component_ProtectionPolicy

// -----------------------------------------------------
// LIST
// -----------------------------------------------------

// List retrieves multiple protectionpolicys with typed request/response
// summary: Return Protection Policies
func (r *ProtectionPolicy) List(req *ProtectionPolicySearchParams) ([]*ProtectionPolicyDetailsModel, error) {
	return r.ListWithContext(r.Untyped.GetCtx(), req)
}

// ListWithContext retrieves multiple protectionpolicys with typed request/response using provided context
// summary: Return Protection Policies
func (r *ProtectionPolicy) ListWithContext(ctx context.Context, req *ProtectionPolicySearchParams) ([]*ProtectionPolicyDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.GetResourceMap()[r.GetResourceType()].ListWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response []*ProtectionPolicyDetailsModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// Get retrieves a single protectionpolicy with typed request/response
// summary: Return Protection Policies
func (r *ProtectionPolicy) Get(req *ProtectionPolicySearchParams) (*ProtectionPolicyDetailsModel, error) {
	return r.GetWithContext(r.Untyped.GetCtx(), req)
}

// GetWithContext retrieves a single protectionpolicy with typed request/response using provided context
// summary: Return Protection Policies
func (r *ProtectionPolicy) GetWithContext(ctx context.Context, req *ProtectionPolicySearchParams) (*ProtectionPolicyDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response ProtectionPolicyDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// READ
// -----------------------------------------------------

// GetById retrieves a single protectionpolicy by ID
// summary: Return Details of a Protection Policy
func (r *ProtectionPolicy) GetById(id any) (*ProtectionPolicyDetailsModel, error) {
	return r.GetByIdWithContext(r.Untyped.GetCtx(), id)
}

// GetByIdWithContext retrieves a single protectionpolicy by ID using provided context
// summary: Return Details of a Protection Policy
func (r *ProtectionPolicy) GetByIdWithContext(ctx context.Context, id any) (*ProtectionPolicyDetailsModel, error) {
	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetByIdWithContext(ctx, id)
	if err != nil {
		return nil, err
	}

	var response ProtectionPolicyDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// CREATE
// -----------------------------------------------------

// Create creates a new protectionpolicy with typed request/response
// summary: Create Protection Policy
func (r *ProtectionPolicy) Create(req *ProtectionPolicyRequestBody) (*ProtectionPolicyUpsertModel, error) {
	return r.CreateWithContext(r.Untyped.GetCtx(), req)
}

// CreateWithContext creates a new protectionpolicy with typed request/response using provided context
// summary: Create Protection Policy
func (r *ProtectionPolicy) CreateWithContext(ctx context.Context, req *ProtectionPolicyRequestBody) (*ProtectionPolicyUpsertModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].CreateWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response ProtectionPolicyUpsertModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// DELETE
// -----------------------------------------------------

// Delete deletes a protectionpolicy with search parameters
func (r *ProtectionPolicy) Delete(req *ProtectionPolicySearchParams) error {
	return r.DeleteWithContext(r.Untyped.GetCtx(), req)
}

// DeleteWithContext deletes a protectionpolicy with search parameters using provided context
func (r *ProtectionPolicy) DeleteWithContext(ctx context.Context, req *ProtectionPolicySearchParams) error {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return err
	}
	_, err = r.Untyped.GetResourceMap()[r.GetResourceType()].DeleteWithContext(ctx, params, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteById deletes a protectionpolicy by ID
// summary: Delete Protection Policy
//
// Parameters:
//   - id: Protection Policy ID
func (r *ProtectionPolicy) DeleteById(id any) error {
	return r.DeleteByIdWithContext(r.Untyped.GetCtx(), id)
}

// DeleteByIdWithContext deletes a protectionpolicy by ID using provided context
// summary: Delete Protection Policy
//
// Parameters:
//   - id: Protection Policy ID
func (r *ProtectionPolicy) DeleteByIdWithContext(ctx context.Context, id any) error {
	_, err := r.Untyped.GetResourceMap()[r.GetResourceType()].DeleteByIdWithContext(ctx, id, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// -----------------------------------------------------
// ENSURE
// -----------------------------------------------------

// Ensure ensures a protectionpolicy exists with typed response
func (r *ProtectionPolicy) Ensure(searchParams *ProtectionPolicySearchParams, body *ProtectionPolicyRequestBody) (*ProtectionPolicyUpsertModel, error) {
	return r.EnsureWithContext(r.Untyped.GetCtx(), searchParams, body)
}

// EnsureWithContext ensures a protectionpolicy exists with typed response using provided context
func (r *ProtectionPolicy) EnsureWithContext(ctx context.Context, searchParams *ProtectionPolicySearchParams, body *ProtectionPolicyRequestBody) (*ProtectionPolicyUpsertModel, error) {
	searchParamsConverted, err := core.NewParamsFromStruct(searchParams)
	if err != nil {
		return nil, err
	}
	bodyConverted, err := core.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].EnsureWithContext(ctx, searchParamsConverted, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response ProtectionPolicyUpsertModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Exists checks if a protectionpolicy exists
func (r *ProtectionPolicy) Exists(req *ProtectionPolicySearchParams) (bool, error) {
	return r.ExistsWithContext(r.Untyped.GetCtx(), req)
}

// ExistsWithContext checks if a protectionpolicy exists using provided context
func (r *ProtectionPolicy) ExistsWithContext(ctx context.Context, req *ProtectionPolicySearchParams) (bool, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].ExistsWithContext(ctx, params)
}

// MustExists checks if a protectionpolicy exists and panics if not
func (r *ProtectionPolicy) MustExists(req *ProtectionPolicySearchParams) bool {
	return r.MustExistsWithContext(r.Untyped.GetCtx(), req)
}

// MustExistsWithContext checks if a protectionpolicy exists and panics if not using provided context
func (r *ProtectionPolicy) MustExistsWithContext(ctx context.Context, req *ProtectionPolicySearchParams) bool {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].MustExistsWithContext(ctx, params)
}

// -----------------------------------------------------
// GENERATION ISSUES
// -----------------------------------------------------
//   - UPDATE operation excluded: PATCH/PUT /protectionpolicies/{id}/ has no response schema and doesn't return 204 NO CONTENT
