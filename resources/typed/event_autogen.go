// Code generated by generate-typed-resources. DO NOT EDIT.
// Template: CREATE|LIST|READ

package typed

import (
	"context"

	"github.com/vast-data/go-vast-client/core"
)

// -----------------------------------------------------
// RESOURCE TYPE
// -----------------------------------------------------

// Event represents a typed resource for event operations
type Event struct {
	*core.TypedVastResource
}

// -----------------------------------------------------
// SEARCH PARAMS
// -----------------------------------------------------

// EventSearchParams represents the search parameters for Event operations
type EventSearchParams struct {
	EventOrigin string `json:"event_origin,omitempty" yaml:"event_origin,omitempty" required:"false" doc:""`
	EventType   string `json:"event_type,omitempty" yaml:"event_type,omitempty" required:"false" doc:""`
	Guid        string `json:"guid,omitempty" yaml:"guid,omitempty" required:"false" doc:""`
	ObjectGuid  string `json:"object_guid,omitempty" yaml:"object_guid,omitempty" required:"false" doc:""`
	ObjectId    string `json:"object_id,omitempty" yaml:"object_id,omitempty" required:"false" doc:""`
	ObjectType  string `json:"object_type,omitempty" yaml:"object_type,omitempty" required:"false" doc:""`
	Severity    string `json:"severity,omitempty" yaml:"severity,omitempty" required:"false" doc:""`

	// RawData allows passing arbitrary search parameters as key-value pairs.
	//
	// Use this field when you need query parameters that are not covered by the typed fields above.
	// This is particularly useful for:
	//   - Dynamic filter operations (e.g., "path__contains", "name__icontains")
	//   - Django-style query filters
	//   - Custom backend-specific parameters
	//
	// Example:
	//   params := &EventSearchParams{
	//       RawData: core.Params{"path__contains": "/foo", "name__icontains": "bar"},
	//   }
	//
	// Note: You can use either the typed fields or RawData, or combine both.
	RawData core.Params `json:"-" yaml:"-"`
}

// -----------------------------------------------------
// REQUEST BODY
// -----------------------------------------------------

// EventRequestBody represents the request body for Event operations
type EventRequestBody struct {
	ObjectId     int64  `json:"object_id,omitempty" yaml:"object_id,omitempty" required:"true" doc:""`
	ObjectType   string `json:"object_type,omitempty" yaml:"object_type,omitempty" required:"true" doc:"The type of object involved in the event."`
	EventMessage string `json:"event_message,omitempty" yaml:"event_message,omitempty" required:"false" doc:"A description of the event."`
	EventType    string `json:"event_type,omitempty" yaml:"event_type,omitempty" required:"false" doc:"The type of event. 'Object modified' events go on and off when an object property reaches specified values. 'Threshold' events occur when a property value crosses a specified threshold. 'Rate' events occur if a property value exceeds a threshold within a given time frame."`
}

// -----------------------------------------------------
// MODELS
// -----------------------------------------------------

// EventDetailsModel represents the detailed model returned by GET/List operations
// Type alias to component definition: #/components/schemas/Event
type EventDetailsModel = Component_Event

// EventUpsertModel represents the model returned by Create/Update operations
// Type alias to component definition: #/components/schemas/Event
type EventUpsertModel = Component_Event

// -----------------------------------------------------
// LIST
// -----------------------------------------------------

// List retrieves multiple events with typed request/response
// summary: List Events
func (r *Event) List(req *EventSearchParams) ([]*EventDetailsModel, error) {
	return r.ListWithContext(r.Untyped.GetCtx(), req)
}

// ListWithContext retrieves multiple events with typed request/response using provided context
// summary: List Events
func (r *Event) ListWithContext(ctx context.Context, req *EventSearchParams) ([]*EventDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.GetResourceMap()[r.GetResourceType()].ListWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response []*EventDetailsModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// Get retrieves a single event with typed request/response
// summary: List Events
func (r *Event) Get(req *EventSearchParams) (*EventDetailsModel, error) {
	return r.GetWithContext(r.Untyped.GetCtx(), req)
}

// GetWithContext retrieves a single event with typed request/response using provided context
// summary: List Events
func (r *Event) GetWithContext(ctx context.Context, req *EventSearchParams) (*EventDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response EventDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// READ
// -----------------------------------------------------

// GetById retrieves a single event by ID
// summary: Return Details of an Event
func (r *Event) GetById(id any) (*EventDetailsModel, error) {
	return r.GetByIdWithContext(r.Untyped.GetCtx(), id)
}

// GetByIdWithContext retrieves a single event by ID using provided context
// summary: Return Details of an Event
func (r *Event) GetByIdWithContext(ctx context.Context, id any) (*EventDetailsModel, error) {
	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetByIdWithContext(ctx, id)
	if err != nil {
		return nil, err
	}

	var response EventDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// CREATE
// -----------------------------------------------------

// Create creates a new event with typed request/response
// summary: Create Event
func (r *Event) Create(req *EventRequestBody) (*EventUpsertModel, error) {
	return r.CreateWithContext(r.Untyped.GetCtx(), req)
}

// CreateWithContext creates a new event with typed request/response using provided context
// summary: Create Event
func (r *Event) CreateWithContext(ctx context.Context, req *EventRequestBody) (*EventUpsertModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].CreateWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response EventUpsertModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// ENSURE
// -----------------------------------------------------

// Ensure ensures a event exists with typed response
func (r *Event) Ensure(searchParams *EventSearchParams, body *EventRequestBody) (*EventUpsertModel, error) {
	return r.EnsureWithContext(r.Untyped.GetCtx(), searchParams, body)
}

// EnsureWithContext ensures a event exists with typed response using provided context
func (r *Event) EnsureWithContext(ctx context.Context, searchParams *EventSearchParams, body *EventRequestBody) (*EventUpsertModel, error) {
	searchParamsConverted, err := core.NewParamsFromStruct(searchParams)
	if err != nil {
		return nil, err
	}
	bodyConverted, err := core.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].EnsureWithContext(ctx, searchParamsConverted, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response EventUpsertModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Exists checks if a event exists
func (r *Event) Exists(req *EventSearchParams) (bool, error) {
	return r.ExistsWithContext(r.Untyped.GetCtx(), req)
}

// ExistsWithContext checks if a event exists using provided context
func (r *Event) ExistsWithContext(ctx context.Context, req *EventSearchParams) (bool, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].ExistsWithContext(ctx, params)
}

// MustExists checks if a event exists and panics if not
func (r *Event) MustExists(req *EventSearchParams) bool {
	return r.MustExistsWithContext(r.Untyped.GetCtx(), req)
}

// MustExistsWithContext checks if a event exists and panics if not using provided context
func (r *Event) MustExistsWithContext(ctx context.Context, req *EventSearchParams) bool {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].MustExistsWithContext(ctx, params)
}
