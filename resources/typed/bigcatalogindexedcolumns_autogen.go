// Code generated by generate-typed-resources. DO NOT EDIT.
// Template: LIST

package typed

import (
	"context"
	"net/http"

	"github.com/vast-data/go-vast-client/core"
)

// -----------------------------------------------------
// RESOURCE TYPE
// -----------------------------------------------------

// BigCatalogIndexedColumns represents a typed resource for bigcatalogindexedcolumns operations
type BigCatalogIndexedColumns struct {
	*core.TypedVastResource
}

// -----------------------------------------------------
// SEARCH PARAMS
// -----------------------------------------------------

// BigCatalogIndexedColumnsSearchParams represents the search parameters for BigCatalogIndexedColumns operations
type BigCatalogIndexedColumnsSearchParams struct {
	ColumnType string `json:"column_type,omitempty" yaml:"column_type,omitempty" required:"false" doc:""`

	// RawData allows passing arbitrary search parameters as key-value pairs.
	//
	// Use this field when you need query parameters that are not covered by the typed fields above.
	// This is particularly useful for:
	//   - Dynamic filter operations (e.g., "path__contains", "name__icontains")
	//   - Django-style query filters
	//   - Custom backend-specific parameters
	//
	// Example:
	//   params := &BigCatalogIndexedColumnsSearchParams{
	//       RawData: core.Params{"path__contains": "/foo", "name__icontains": "bar"},
	//   }
	//
	// Note: You can use either the typed fields or RawData, or combine both.
	RawData core.Params `json:"-" yaml:"-"`
}

// -----------------------------------------------------
// MODELS
// -----------------------------------------------------

// BigCatalogIndexedColumnsDetailsModel represents the detailed model returned by GET/List operations
// Type alias to component definition: #/components/schemas/VastCatalogIndexedColumn
type BigCatalogIndexedColumnsDetailsModel = Component_VastCatalogIndexedColumn

// -----------------------------------------------------
// LIST
// -----------------------------------------------------

// List retrieves multiple bigcatalogindexedcolumnss with typed request/response
// summary: List VAST Catalog Tags
func (r *BigCatalogIndexedColumns) List(req *BigCatalogIndexedColumnsSearchParams) ([]*BigCatalogIndexedColumnsDetailsModel, error) {
	return r.ListWithContext(r.Untyped.GetCtx(), req)
}

// ListWithContext retrieves multiple bigcatalogindexedcolumnss with typed request/response using provided context
// summary: List VAST Catalog Tags
func (r *BigCatalogIndexedColumns) ListWithContext(ctx context.Context, req *BigCatalogIndexedColumnsSearchParams) ([]*BigCatalogIndexedColumnsDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.GetResourceMap()[r.GetResourceType()].ListWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response []*BigCatalogIndexedColumnsDetailsModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// Get retrieves a single bigcatalogindexedcolumns with typed request/response
// summary: List VAST Catalog Tags
func (r *BigCatalogIndexedColumns) Get(req *BigCatalogIndexedColumnsSearchParams) (*BigCatalogIndexedColumnsDetailsModel, error) {
	return r.GetWithContext(r.Untyped.GetCtx(), req)
}

// GetWithContext retrieves a single bigcatalogindexedcolumns with typed request/response using provided context
// summary: List VAST Catalog Tags
func (r *BigCatalogIndexedColumns) GetWithContext(ctx context.Context, req *BigCatalogIndexedColumnsSearchParams) (*BigCatalogIndexedColumnsDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response BigCatalogIndexedColumnsDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Exists checks if a bigcatalogindexedcolumns exists
func (r *BigCatalogIndexedColumns) Exists(req *BigCatalogIndexedColumnsSearchParams) (bool, error) {
	return r.ExistsWithContext(r.Untyped.GetCtx(), req)
}

// ExistsWithContext checks if a bigcatalogindexedcolumns exists using provided context
func (r *BigCatalogIndexedColumns) ExistsWithContext(ctx context.Context, req *BigCatalogIndexedColumnsSearchParams) (bool, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].ExistsWithContext(ctx, params)
}

// MustExists checks if a bigcatalogindexedcolumns exists and panics if not
func (r *BigCatalogIndexedColumns) MustExists(req *BigCatalogIndexedColumnsSearchParams) bool {
	return r.MustExistsWithContext(r.Untyped.GetCtx(), req)
}

// MustExistsWithContext checks if a bigcatalogindexedcolumns exists and panics if not using provided context
func (r *BigCatalogIndexedColumns) MustExistsWithContext(ctx context.Context, req *BigCatalogIndexedColumnsSearchParams) bool {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].MustExistsWithContext(ctx, params)
}

// -----------------------------------------------------
// EXTRA METHODS
// -----------------------------------------------------

// BigCatalogIndexedColumnsAddWithContext_PATCH
// method: PATCH
// url: /bigcatalogindexedcolumns/add/
// summary: Add Indexed Column to VAST Catalog
//
// Parameters:
//   - columnType (body): Type of indexed column
//   - name (body): Column name
func (r *BigCatalogIndexedColumns) BigCatalogIndexedColumnsAddWithContext_PATCH(ctx context.Context, columnType string, name string) error {
	resourcePath := "/bigcatalogindexedcolumns/add/"

	var reqParams core.Params
	reqBody := core.Params{}
	reqBody["column_type"] = columnType
	reqBody["name"] = name

	_, err := core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodPatch, resourcePath, reqParams, reqBody)
	return err

}

// BigCatalogIndexedColumnsAdd_PATCH
// method: PATCH
// url: /bigcatalogindexedcolumns/add/
// summary: Add Indexed Column to VAST Catalog
//
// Parameters:
//   - columnType (body): Type of indexed column
//   - name (body): Column name
func (r *BigCatalogIndexedColumns) BigCatalogIndexedColumnsAdd_PATCH(columnType string, name string) error {
	return r.BigCatalogIndexedColumnsAddWithContext_PATCH(r.Untyped.GetCtx(), columnType, name)
}

// BigCatalogIndexedColumnsRemoveWithContext_DELETE
// method: DELETE
// url: /bigcatalogindexedcolumns/remove/
// summary: Remove VAST Catalog Indexed Column
//
// Parameters:
//   - columnType (body): Type of indexed column
//   - name (body): Column name
func (r *BigCatalogIndexedColumns) BigCatalogIndexedColumnsRemoveWithContext_DELETE(ctx context.Context, columnType string, name string) error {
	resourcePath := "/bigcatalogindexedcolumns/remove/"

	var reqParams core.Params
	reqBody := core.Params{}
	reqBody["column_type"] = columnType
	reqBody["name"] = name

	_, err := core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodDelete, resourcePath, reqParams, reqBody)
	return err

}

// BigCatalogIndexedColumnsRemove_DELETE
// method: DELETE
// url: /bigcatalogindexedcolumns/remove/
// summary: Remove VAST Catalog Indexed Column
//
// Parameters:
//   - columnType (body): Type of indexed column
//   - name (body): Column name
func (r *BigCatalogIndexedColumns) BigCatalogIndexedColumnsRemove_DELETE(columnType string, name string) error {
	return r.BigCatalogIndexedColumnsRemoveWithContext_DELETE(r.Untyped.GetCtx(), columnType, name)
}
