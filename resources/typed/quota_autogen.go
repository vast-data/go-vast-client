// Code generated by generate-typed-resources. DO NOT EDIT.
// Template: CREATE|LIST|READ|DELETE

package typed

import (
	"context"
	"net/http"

	"github.com/vast-data/go-vast-client/core"
)

// -----------------------------------------------------
// RESOURCE TYPE
// -----------------------------------------------------

// Quota represents a typed resource for quota operations
type Quota struct {
	*core.TypedVastResource
}

// -----------------------------------------------------
// SEARCH PARAMS
// -----------------------------------------------------

// QuotaSearchParams represents the search parameters for Quota operations
type QuotaSearchParams struct {
	Path            string `json:"path,omitempty" yaml:"path,omitempty" required:"true" doc:"Directory path"`
	Guid            string `json:"guid,omitempty" yaml:"guid,omitempty" required:"false" doc:"Quota guid"`
	HardLimit       string `json:"hard_limit,omitempty" yaml:"hard_limit,omitempty" required:"false" doc:"Filter results by hard capacity limit."`
	HardLimitInodes string `json:"hard_limit_inodes,omitempty" yaml:"hard_limit_inodes,omitempty" required:"false" doc:"Filter results by hard limit on number of files and directories"`
	Name            string `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:""`
	ShowUserRules   bool   `json:"show_user_rules,omitempty" yaml:"show_user_rules,omitempty" required:"false" doc:"Include user and group quota rules in response."`
	SoftLimit       string `json:"soft_limit,omitempty" yaml:"soft_limit,omitempty" required:"false" doc:"Filter results by soft capacity limit."`
	SoftLimitInodes string `json:"soft_limit_inodes,omitempty" yaml:"soft_limit_inodes,omitempty" required:"false" doc:"Filter results by soft limit on number of files and directories."`
	SystemId        string `json:"system_id,omitempty" yaml:"system_id,omitempty" required:"false" doc:""`
	TenantId        int64  `json:"tenant_id,omitempty" yaml:"tenant_id,omitempty" required:"false" doc:"Filter by tenant. Specify tenant ID."`

	// RawData allows passing arbitrary search parameters as key-value pairs.
	//
	// Use this field when you need query parameters that are not covered by the typed fields above.
	// This is particularly useful for:
	//   - Dynamic filter operations (e.g., "path__contains", "name__icontains")
	//   - Django-style query filters
	//   - Custom backend-specific parameters
	//
	// Example:
	//   params := &QuotaSearchParams{
	//       RawData: core.Params{"path__contains": "/foo", "name__icontains": "bar"},
	//   }
	//
	// Note: You can use either the typed fields or RawData, or combine both.
	RawData core.Params `json:"-" yaml:"-"`
}

// -----------------------------------------------------
// REQUEST BODY
// -----------------------------------------------------

// QuotaRequestBody represents the request body for Quota operations
type QuotaRequestBody struct {
	Name                 string `json:"name,omitempty" yaml:"name,omitempty" required:"true" doc:"A name for the quota"`
	Path                 string `json:"path,omitempty" yaml:"path,omitempty" required:"true" doc:"The directory path on which to enforce the quota"`
	CreateDir            bool   `json:"create_dir,omitempty" yaml:"create_dir,omitempty" required:"false" doc:"Set to true to create the directory if the directory was not created yet."`
	CreateDirMode        int64  `json:"create_dir_mode,omitempty" yaml:"create_dir_mode,omitempty" required:"false" doc:"Unix permissions mode for the new directory"`
	DefaultEmail         string `json:"default_email,omitempty" yaml:"default_email,omitempty" required:"false" doc:"Emails are sent to users if and when they exceed their user/group quota limits. default_email is a default email address that is used instead of a user's email address in the event that no email address is found for the user on a provider and no email suffix is set."`
	EnableAlarms         bool   `json:"enable_alarms,omitempty" yaml:"enable_alarms,omitempty" required:"false" doc:"Enables alarms on relevant events for user and group quotas. Applicable only if is_user_quota is true. Raises alarms reporting the number of users that exceed their quotas and when one or more users is/are blocked from writing to the quota directory."`
	EnableEmailProviders bool   `json:"enable_email_providers,omitempty" yaml:"enable_email_providers,omitempty" required:"false" doc:"Set to true to enable querying Active Directory and LDAP services for user emails when sending user notifications to users if they exceed their user/group quota limits. If enabled, the provider query is the first priority source for a user's email. If a user's email is not found on the provider, a global suffix is used to form an email. If no suffix is set, default_email is used."`
	GracePeriod          string `json:"grace_period,omitempty" yaml:"grace_period,omitempty" required:"false" doc:"Quota enforcement grace period. An alarm is triggered and write operations are blocked if storage usage continues to exceed the soft limit for the grace period. Format: [DD] [HH:[MM:]]ss"`
	HardLimit            int64  `json:"hard_limit,omitempty" yaml:"hard_limit,omitempty" required:"false" doc:"Storage usage limit beyond which no writes will be allowed."`
	HardLimitInodes      int64  `json:"hard_limit_inodes,omitempty" yaml:"hard_limit_inodes,omitempty" required:"false" doc:"Number of directories and unique files under the path beyond which no writes will be allowed. A file with multiple hardlinks is counted only once."`
	InheritAcl           bool   `json:"inherit_acl,omitempty" yaml:"inherit_acl,omitempty" required:"false" doc:"Indicates whether the directory should inherit ACLs from its parent directory"`
	IsUserQuota          bool   `json:"is_user_quota,omitempty" yaml:"is_user_quota,omitempty" required:"false" doc:"Set to true to enable user and group quotas. False by default. Cannot be disabled later."`
	SoftLimit            int64  `json:"soft_limit,omitempty" yaml:"soft_limit,omitempty" required:"false" doc:"Storage usage limit at which warnings of exceeding the quota are issued."`
	SoftLimitInodes      int64  `json:"soft_limit_inodes,omitempty" yaml:"soft_limit_inodes,omitempty" required:"false" doc:"Number of directories and unique files under the path at which warnings of exceeding the quota will be issued. A file with multiple hardlinks is counted only once."`
	TenantId             int64  `json:"tenant_id,omitempty" yaml:"tenant_id,omitempty" required:"false" doc:"Tenant ID"`
}

// -----------------------------------------------------
// MODELS
// -----------------------------------------------------

// QuotaDetailsModel represents the detailed model returned by GET/List operations
// Type alias to component definition: #/components/schemas/Quota
type QuotaDetailsModel = Component_Quota

// QuotaUpsertModel represents the model returned by Create/Update operations
// Type alias to component definition: #/components/schemas/Quota
type QuotaUpsertModel = Component_Quota

// -----------------------------------------------------
// LIST
// -----------------------------------------------------

// List retrieves multiple quotas with typed request/response
// summary: List Quotas
func (r *Quota) List(req *QuotaSearchParams) ([]*QuotaDetailsModel, error) {
	return r.ListWithContext(r.Untyped.GetCtx(), req)
}

// ListWithContext retrieves multiple quotas with typed request/response using provided context
// summary: List Quotas
func (r *Quota) ListWithContext(ctx context.Context, req *QuotaSearchParams) ([]*QuotaDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.GetResourceMap()[r.GetResourceType()].ListWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response []*QuotaDetailsModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// Get retrieves a single quota with typed request/response
// summary: List Quotas
func (r *Quota) Get(req *QuotaSearchParams) (*QuotaDetailsModel, error) {
	return r.GetWithContext(r.Untyped.GetCtx(), req)
}

// GetWithContext retrieves a single quota with typed request/response using provided context
// summary: List Quotas
func (r *Quota) GetWithContext(ctx context.Context, req *QuotaSearchParams) (*QuotaDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response QuotaDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// READ
// -----------------------------------------------------

// GetById retrieves a single quota by ID
// summary: Return Details of a Quota
func (r *Quota) GetById(id any) (*QuotaDetailsModel, error) {
	return r.GetByIdWithContext(r.Untyped.GetCtx(), id)
}

// GetByIdWithContext retrieves a single quota by ID using provided context
// summary: Return Details of a Quota
func (r *Quota) GetByIdWithContext(ctx context.Context, id any) (*QuotaDetailsModel, error) {
	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetByIdWithContext(ctx, id)
	if err != nil {
		return nil, err
	}

	var response QuotaDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// CREATE
// -----------------------------------------------------

// Create creates a new quota with typed request/response
// summary: Create a Quota
func (r *Quota) Create(req *QuotaRequestBody) (*QuotaUpsertModel, error) {
	return r.CreateWithContext(r.Untyped.GetCtx(), req)
}

// CreateWithContext creates a new quota with typed request/response using provided context
// summary: Create a Quota
func (r *Quota) CreateWithContext(ctx context.Context, req *QuotaRequestBody) (*QuotaUpsertModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].CreateWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response QuotaUpsertModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// DELETE
// -----------------------------------------------------

// Delete deletes a quota with search parameters
func (r *Quota) Delete(req *QuotaSearchParams) error {
	return r.DeleteWithContext(r.Untyped.GetCtx(), req)
}

// DeleteWithContext deletes a quota with search parameters using provided context
func (r *Quota) DeleteWithContext(ctx context.Context, req *QuotaSearchParams) error {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return err
	}
	_, err = r.Untyped.GetResourceMap()[r.GetResourceType()].DeleteWithContext(ctx, params, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteById deletes a quota by ID
// summary: Delete Quota
//
// Parameters:
//   - id: Quota ID
func (r *Quota) DeleteById(id any) error {
	return r.DeleteByIdWithContext(r.Untyped.GetCtx(), id)
}

// DeleteByIdWithContext deletes a quota by ID using provided context
// summary: Delete Quota
//
// Parameters:
//   - id: Quota ID
func (r *Quota) DeleteByIdWithContext(ctx context.Context, id any) error {
	_, err := r.Untyped.GetResourceMap()[r.GetResourceType()].DeleteByIdWithContext(ctx, id, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// -----------------------------------------------------
// ENSURE
// -----------------------------------------------------

// Ensure ensures a quota exists with typed response
func (r *Quota) Ensure(searchParams *QuotaSearchParams, body *QuotaRequestBody) (*QuotaUpsertModel, error) {
	return r.EnsureWithContext(r.Untyped.GetCtx(), searchParams, body)
}

// EnsureWithContext ensures a quota exists with typed response using provided context
func (r *Quota) EnsureWithContext(ctx context.Context, searchParams *QuotaSearchParams, body *QuotaRequestBody) (*QuotaUpsertModel, error) {
	searchParamsConverted, err := core.NewParamsFromStruct(searchParams)
	if err != nil {
		return nil, err
	}
	bodyConverted, err := core.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].EnsureWithContext(ctx, searchParamsConverted, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response QuotaUpsertModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Exists checks if a quota exists
func (r *Quota) Exists(req *QuotaSearchParams) (bool, error) {
	return r.ExistsWithContext(r.Untyped.GetCtx(), req)
}

// ExistsWithContext checks if a quota exists using provided context
func (r *Quota) ExistsWithContext(ctx context.Context, req *QuotaSearchParams) (bool, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].ExistsWithContext(ctx, params)
}

// MustExists checks if a quota exists and panics if not
func (r *Quota) MustExists(req *QuotaSearchParams) bool {
	return r.MustExistsWithContext(r.Untyped.GetCtx(), req)
}

// MustExistsWithContext checks if a quota exists and panics if not using provided context
func (r *Quota) MustExistsWithContext(ctx context.Context, req *QuotaSearchParams) bool {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].MustExistsWithContext(ctx, params)
}

// -----------------------------------------------------
// EXTRA METHODS
// -----------------------------------------------------

// QuotaRecalcStopWithContext_PATCH
// method: PATCH
// url: /quotas/recalc_stop/
// summary: Stop recalculation flow for all quotas
func (r *Quota) QuotaRecalcStopWithContext_PATCH(ctx context.Context) error {
	resourcePath := "/quotas/recalc_stop/"

	var reqParams core.Params
	var reqBody core.Params

	_, err := core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodPatch, resourcePath, reqParams, reqBody)
	return err

}

// QuotaRecalcStop_PATCH
// method: PATCH
// url: /quotas/recalc_stop/
// summary: Stop recalculation flow for all quotas
func (r *Quota) QuotaRecalcStop_PATCH() error {
	return r.QuotaRecalcStopWithContext_PATCH(r.Untyped.GetCtx())
}

// QuotaRecalcWithContext_PATCH
// method: PATCH
// url: /quotas/recalc/
// summary: Start recalculation flow all quotas
func (r *Quota) QuotaRecalcWithContext_PATCH(ctx context.Context) error {
	resourcePath := "/quotas/recalc/"

	var reqParams core.Params
	var reqBody core.Params

	_, err := core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodPatch, resourcePath, reqParams, reqBody)
	return err

}

// QuotaRecalc_PATCH
// method: PATCH
// url: /quotas/recalc/
// summary: Start recalculation flow all quotas
func (r *Quota) QuotaRecalc_PATCH() error {
	return r.QuotaRecalcWithContext_PATCH(r.Untyped.GetCtx())
}

// QuotaRefreshUserQuotasWithContext_PATCH
// method: PATCH
// url: /quotas/{id}/refresh_user_quotas/
// summary: Refresh a Quota's User Quotas
func (r *Quota) QuotaRefreshUserQuotasWithContext_PATCH(ctx context.Context, id any) error {
	resourcePath := core.BuildResourcePathWithID("quotas", id, "refresh_user_quotas")

	var reqParams core.Params
	var reqBody core.Params

	_, err := core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodPatch, resourcePath, reqParams, reqBody)
	return err

}

// QuotaRefreshUserQuotas_PATCH
// method: PATCH
// url: /quotas/{id}/refresh_user_quotas/
// summary: Refresh a Quota's User Quotas
func (r *Quota) QuotaRefreshUserQuotas_PATCH(id any) error {
	return r.QuotaRefreshUserQuotasWithContext_PATCH(r.Untyped.GetCtx(), id)
}

// QuotaResetGracePeriodWithContext_PATCH
// method: PATCH
// url: /quotas/{id}/reset_grace_period/
// summary: Reset the grace period countdown after soft limit is exceeded
func (r *Quota) QuotaResetGracePeriodWithContext_PATCH(ctx context.Context, id any) error {
	resourcePath := core.BuildResourcePathWithID("quotas", id, "reset_grace_period")

	var reqParams core.Params
	var reqBody core.Params

	_, err := core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodPatch, resourcePath, reqParams, reqBody)
	return err

}

// QuotaResetGracePeriod_PATCH
// method: PATCH
// url: /quotas/{id}/reset_grace_period/
// summary: Reset the grace period countdown after soft limit is exceeded
func (r *Quota) QuotaResetGracePeriod_PATCH(id any) error {
	return r.QuotaResetGracePeriodWithContext_PATCH(r.Untyped.GetCtx(), id)
}

// -----------------------------------------------------
// GENERATION ISSUES
// -----------------------------------------------------
//   - UPDATE operation excluded: PATCH/PUT /quotas/{id}/ has no response schema and doesn't return 204 NO CONTENT
