// Code generated by generate-typed-resources. DO NOT EDIT.
// Template: CREATE|LIST|READ|UPDATE

package typed

import (
	"context"
	"fmt"
	"net/http"

	"github.com/vast-data/go-vast-client/core"
)

// -----------------------------------------------------
// RESOURCE TYPE
// -----------------------------------------------------

// ApiToken represents a typed resource for apitoken operations
type ApiToken struct {
	*core.TypedVastResource
}

// -----------------------------------------------------
// SEARCH PARAMS
// -----------------------------------------------------

// ApiTokenSearchParams represents the search parameters for ApiToken operations
type ApiTokenSearchParams struct {
	Archived string `json:"archived,omitempty" yaml:"archived,omitempty" required:"false" doc:""`
	Name     string `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:"The name of the Api token"`
	Owner    string `json:"owner,omitempty" yaml:"owner,omitempty" required:"false" doc:"Filter by token owner username"`

	// RawData allows passing arbitrary search parameters as key-value pairs.
	//
	// Use this field when you need query parameters that are not covered by the typed fields above.
	// This is particularly useful for:
	//   - Dynamic filter operations (e.g., "path__contains", "name__icontains")
	//   - Django-style query filters
	//   - Custom backend-specific parameters
	//
	// Example:
	//   params := &ApiTokenSearchParams{
	//       RawData: core.Params{"path__contains": "/foo", "name__icontains": "bar"},
	//   }
	//
	// Note: You can use either the typed fields or RawData, or combine both.
	RawData core.Params `json:"-" yaml:"-"`
}

// -----------------------------------------------------
// REQUEST BODY
// -----------------------------------------------------

// ApiTokenRequestBody represents the request body for ApiToken operations
type ApiTokenRequestBody struct {
	ExpiryDate string `json:"expiry_date,omitempty" yaml:"expiry_date,omitempty" required:"false" doc:"Sets the token's expiration date by specifying an amount of time from token creation until the token should expire. The expiration date is equal to the token creation date in UTC + the specified time period. Specify as a whole integer followed by a unit of time: 'Y' for (365 day) years, 'M' for (30 day) months, 'w' or 'W' for weeks, 'd' or 'D' for days, 'h' or 'H' for hours, 'm' for minutes, 's' or 'S' for seconds. The maximum and default expiration time is the password expiration timeout."`
	Name       string `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:"Sets a custom name for the token. If not specified, the token is named OWNER_api_token, where OWNER is the user name of the token owner."`
	Owner      string `json:"owner,omitempty" yaml:"owner,omitempty" required:"false" doc:"The user name of the user for whom to create the API token. If not specified, the token is created for the requesting user."`
}

// -----------------------------------------------------
// MODELS
// -----------------------------------------------------

// ApiTokenDetailsModel represents the detailed model returned by GET/List operations
// Type alias to component definition: #/components/schemas/ApiToken
type ApiTokenDetailsModel = Component_ApiToken

// ApiTokenUpsertModel represents the model returned by Create/Update operations
type ApiTokenUpsertModel struct {
	Id    string `json:"id,omitempty" yaml:"id,omitempty" required:"false" doc:"The generated API token ID"`
	Token string `json:"token,omitempty" yaml:"token,omitempty" required:"false" doc:"The generated API token"`
}

// -----------------------------------------------------
// LIST
// -----------------------------------------------------

// List retrieves multiple apitokens with typed request/response
// summary: List API Tokens
func (r *ApiToken) List(req *ApiTokenSearchParams) ([]*ApiTokenDetailsModel, error) {
	return r.ListWithContext(r.Untyped.GetCtx(), req)
}

// ListWithContext retrieves multiple apitokens with typed request/response using provided context
// summary: List API Tokens
func (r *ApiToken) ListWithContext(ctx context.Context, req *ApiTokenSearchParams) ([]*ApiTokenDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.GetResourceMap()[r.GetResourceType()].ListWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response []*ApiTokenDetailsModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// Get retrieves a single apitoken with typed request/response
// summary: List API Tokens
func (r *ApiToken) Get(req *ApiTokenSearchParams) (*ApiTokenDetailsModel, error) {
	return r.GetWithContext(r.Untyped.GetCtx(), req)
}

// GetWithContext retrieves a single apitoken with typed request/response using provided context
// summary: List API Tokens
func (r *ApiToken) GetWithContext(ctx context.Context, req *ApiTokenSearchParams) (*ApiTokenDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response ApiTokenDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// READ
// -----------------------------------------------------

// GetById retrieves a single apitoken by ID
// summary: Return Properties of an API Token
func (r *ApiToken) GetById(id any) (*ApiTokenDetailsModel, error) {
	return r.GetByIdWithContext(r.Untyped.GetCtx(), id)
}

// GetByIdWithContext retrieves a single apitoken by ID using provided context
// summary: Return Properties of an API Token
func (r *ApiToken) GetByIdWithContext(ctx context.Context, id any) (*ApiTokenDetailsModel, error) {
	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetByIdWithContext(ctx, id)
	if err != nil {
		return nil, err
	}

	var response ApiTokenDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// CREATE
// -----------------------------------------------------

// Create creates a new apitoken with typed request/response
// summary: Create API Token.
func (r *ApiToken) Create(req *ApiTokenRequestBody) (*ApiTokenUpsertModel, error) {
	return r.CreateWithContext(r.Untyped.GetCtx(), req)
}

// CreateWithContext creates a new apitoken with typed request/response using provided context
// summary: Create API Token.
func (r *ApiToken) CreateWithContext(ctx context.Context, req *ApiTokenRequestBody) (*ApiTokenUpsertModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].CreateWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response ApiTokenUpsertModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// UPDATE
// -----------------------------------------------------

// Update updates an existing apitoken with typed request/response
func (r *ApiToken) Update(id any, req *ApiTokenRequestBody) (*ApiTokenUpsertModel, error) {
	return r.UpdateWithContext(r.Untyped.GetCtx(), id, req)
}

// UpdateWithContext updates an existing apitoken with typed request/response using provided context
func (r *ApiToken) UpdateWithContext(ctx context.Context, id any, req *ApiTokenRequestBody) (*ApiTokenUpsertModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].UpdateWithContext(ctx, id, params)
	if err != nil {
		return nil, err
	}

	var response ApiTokenUpsertModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// ENSURE
// -----------------------------------------------------

// Ensure ensures a apitoken exists with typed response
func (r *ApiToken) Ensure(searchParams *ApiTokenSearchParams, body *ApiTokenRequestBody) (*ApiTokenUpsertModel, error) {
	return r.EnsureWithContext(r.Untyped.GetCtx(), searchParams, body)
}

// EnsureWithContext ensures a apitoken exists with typed response using provided context
func (r *ApiToken) EnsureWithContext(ctx context.Context, searchParams *ApiTokenSearchParams, body *ApiTokenRequestBody) (*ApiTokenUpsertModel, error) {
	searchParamsConverted, err := core.NewParamsFromStruct(searchParams)
	if err != nil {
		return nil, err
	}
	bodyConverted, err := core.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].EnsureWithContext(ctx, searchParamsConverted, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response ApiTokenUpsertModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Exists checks if a apitoken exists
func (r *ApiToken) Exists(req *ApiTokenSearchParams) (bool, error) {
	return r.ExistsWithContext(r.Untyped.GetCtx(), req)
}

// ExistsWithContext checks if a apitoken exists using provided context
func (r *ApiToken) ExistsWithContext(ctx context.Context, req *ApiTokenSearchParams) (bool, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].ExistsWithContext(ctx, params)
}

// MustExists checks if a apitoken exists and panics if not
func (r *ApiToken) MustExists(req *ApiTokenSearchParams) bool {
	return r.MustExistsWithContext(r.Untyped.GetCtx(), req)
}

// MustExistsWithContext checks if a apitoken exists and panics if not using provided context
func (r *ApiToken) MustExistsWithContext(ctx context.Context, req *ApiTokenSearchParams) bool {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].MustExistsWithContext(ctx, params)
}

// -----------------------------------------------------
// EXTRA METHODS
// -----------------------------------------------------

// ApiTokenRevokeWithContext_PATCH
// method: PATCH
// url: /apitokens/{id}/revoke/
// summary: Revoke API Token
func (r *ApiToken) ApiTokenRevokeWithContext_PATCH(ctx context.Context, id any) (string, error) {
	resourcePath := core.BuildResourcePathWithID("apitokens", id, "revoke")

	var reqParams core.Params
	var reqBody core.Params

	record, err := core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodPatch, resourcePath, reqParams, reqBody)
	if err != nil {
		return "", err
	}
	// Extract primitive response from @raw key
	if rawVal, ok := record["@raw"]; ok {
		if rawBytes, ok := rawVal.([]byte); ok {
			return string(rawBytes), nil
		}
		return fmt.Sprintf("%v", rawVal), nil
	}
	return "", fmt.Errorf("@raw key not found in response")

}

// ApiTokenRevoke_PATCH
// method: PATCH
// url: /apitokens/{id}/revoke/
// summary: Revoke API Token
func (r *ApiToken) ApiTokenRevoke_PATCH(id any) (string, error) {
	return r.ApiTokenRevokeWithContext_PATCH(r.Untyped.GetCtx(), id)
}
