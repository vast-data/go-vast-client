// Code generated by generate-typed-resources. DO NOT EDIT.
// Template: EXTRA_METHODS_ONLY

package typed

import (
	"context"
	"net/http"

	"github.com/vast-data/go-vast-client/core"
)

// Folder provides typed access to Folder extra methods
type Folder struct {
	*core.TypedVastResource
}

// -----------------------------------------------------
// EXTRA METHODS
// -----------------------------------------------------

// FolderDeleteFolderWithContext_DELETE
// method: DELETE
// url: /folders/delete_folder/
// summary: Delete Folder
//
// Parameters:
//   - path (body): Folder path to delete
//   - tenantId (body): Tenant ID
func (r *Folder) FolderDeleteFolderWithContext_DELETE(ctx context.Context, path string, tenantId int64) error {
	resourcePath := "/folders/delete_folder/"

	var reqParams core.Params
	reqBody := core.Params{}
	reqBody["path"] = path
	if tenantId != 0 {
		reqBody["tenant_id"] = tenantId
	}

	_, err := core.Request[core.EmptyRecord](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodDelete, resourcePath, reqParams, reqBody)
	return err

}

// FolderDeleteFolder_DELETE
// method: DELETE
// url: /folders/delete_folder/
// summary: Delete Folder
//
// Parameters:
//   - path (body): Folder path to delete
//   - tenantId (body): Tenant ID
func (r *Folder) FolderDeleteFolder_DELETE(path string, tenantId int64) error {
	return r.FolderDeleteFolderWithContext_DELETE(r.Untyped.GetCtx(), path, tenantId)
}

// FolderReadOnlyWithContext_DELETE
// method: DELETE
// url: /folders/read_only/
// summary: Unlock Read-Only Folder
//
// Parameters:
//   - path (body): Path
//   - tenantId (body): Tenant ID
func (r *Folder) FolderReadOnlyWithContext_DELETE(ctx context.Context, path string, tenantId int64) error {
	resourcePath := "/folders/read_only/"

	var reqParams core.Params
	reqBody := core.Params{}
	reqBody["path"] = path
	reqBody["tenant_id"] = tenantId

	_, err := core.Request[core.EmptyRecord](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodDelete, resourcePath, reqParams, reqBody)
	return err

}

// FolderReadOnly_DELETE
// method: DELETE
// url: /folders/read_only/
// summary: Unlock Read-Only Folder
//
// Parameters:
//   - path (body): Path
//   - tenantId (body): Tenant ID
func (r *Folder) FolderReadOnly_DELETE(path string, tenantId int64) error {
	return r.FolderReadOnlyWithContext_DELETE(r.Untyped.GetCtx(), path, tenantId)
}

// FolderReadOnly_GET_Body represents the request body for FolderReadOnly
type FolderReadOnly_GET_Body struct {
	Path     string `json:"path,omitempty" yaml:"path,omitempty" required:"false" doc:"Path to get read-only folder details"`
	TenantId int64  `json:"tenant_id,omitempty" yaml:"tenant_id,omitempty" required:"false" doc:"Tenant ID"`
}

// FolderReadOnly_GET_Model represents the response model for FolderReadOnly
type FolderReadOnly_GET_Model struct {
	RootPath string `json:"root_path,omitempty" yaml:"root_path,omitempty" required:"true" doc:"Root path for requested folder"`
	State    string `json:"state,omitempty" yaml:"state,omitempty" required:"true" doc:"Folder's state"`
}

// FolderReadOnlyWithContext_GET
// method: GET
// url: /folders/read_only/
// summary: Return Details of Read-Only Folder
func (r *Folder) FolderReadOnlyWithContext_GET(ctx context.Context, params *FolderReadOnly_GET_Body) (*FolderReadOnly_GET_Model, error) {
	resourcePath := "/folders/read_only/"

	reqParams, err := core.NewParamsFromStruct(params)
	if err != nil {
		return nil, err
	}
	var reqBody core.Params

	record, err := core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodGet, resourcePath, reqParams, reqBody)
	if err != nil {
		return nil, err
	}

	var response FolderReadOnly_GET_Model
	if err := record.Fill(&response); err != nil {
		return nil, err
	}
	return &response, nil

}

// FolderReadOnly_GET
// method: GET
// url: /folders/read_only/
// summary: Return Details of Read-Only Folder
func (r *Folder) FolderReadOnly_GET(params *FolderReadOnly_GET_Body) (*FolderReadOnly_GET_Model, error) {
	return r.FolderReadOnlyWithContext_GET(r.Untyped.GetCtx(), params)
}

// FolderStatPath_POST_Model represents the response model for FolderStatPath
type FolderStatPath_POST_Model struct {
	AbacTags                    *[]string `json:"abac_tags,omitempty" yaml:"abac_tags,omitempty" required:"false" doc:""`
	Atime                       string    `json:"atime,omitempty" yaml:"atime,omitempty" required:"false" doc:"Access Time"`
	Children                    int64     `json:"children,omitempty" yaml:"children,omitempty" required:"false" doc:"Children count"`
	Ctime                       string    `json:"ctime,omitempty" yaml:"ctime,omitempty" required:"false" doc:"Change Time"`
	HasDefaultAcl               bool      `json:"has_default_acl,omitempty" yaml:"has_default_acl,omitempty" required:"false" doc:"Path has default ACL"`
	IndestructibleObjectTimeout string    `json:"indestructible_object_timeout,omitempty" yaml:"indestructible_object_timeout,omitempty" required:"false" doc:"Indestructible object timeout"`
	IsDirectory                 bool      `json:"is_directory,omitempty" yaml:"is_directory,omitempty" required:"false" doc:"Path is a directory"`
	Mtime                       string    `json:"mtime,omitempty" yaml:"mtime,omitempty" required:"false" doc:"Modification Time"`
	OwningGid                   int64     `json:"owning_gid,omitempty" yaml:"owning_gid,omitempty" required:"false" doc:"Owning group ID"`
	OwningGroup                 string    `json:"owning_group,omitempty" yaml:"owning_group,omitempty" required:"false" doc:"Owning group name"`
	OwningUid                   int64     `json:"owning_uid,omitempty" yaml:"owning_uid,omitempty" required:"false" doc:"Owning user ID"`
	OwningUser                  string    `json:"owning_user,omitempty" yaml:"owning_user,omitempty" required:"false" doc:"Owning user name"`
	SmbReadonlyFlag             bool      `json:"smb_readonly_flag,omitempty" yaml:"smb_readonly_flag,omitempty" required:"false" doc:"Is path SMB readonly"`
	WormAutoCommitTimeout       string    `json:"worm_auto_commit_timeout,omitempty" yaml:"worm_auto_commit_timeout,omitempty" required:"false" doc:"Warm auto commit timeout"`
	WormLegalHoldStatus         string    `json:"worm_legal_hold_status,omitempty" yaml:"worm_legal_hold_status,omitempty" required:"false" doc:"Worm legal hold status"`
	WormLockStatus              string    `json:"worm_lock_status,omitempty" yaml:"worm_lock_status,omitempty" required:"false" doc:"Worm lock status"`
	WormRetentionMode           string    `json:"worm_retention_mode,omitempty" yaml:"worm_retention_mode,omitempty" required:"false" doc:"Worm retention mode"`
	WormRetentionTimeout        string    `json:"worm_retention_timeout,omitempty" yaml:"worm_retention_timeout,omitempty" required:"false" doc:"Worm retention timeout"`
}

// FolderStatPathWithContext_POST
// method: POST
// url: /folders/stat_path/
// summary: Get Owning User and Group for a Path
//
// Parameters:
//   - path (body): Path
//   - tenantId (body): Tenant ID
func (r *Folder) FolderStatPathWithContext_POST(ctx context.Context, path string, tenantId int64) (*FolderStatPath_POST_Model, error) {
	resourcePath := "/folders/stat_path/"

	var reqParams core.Params
	reqBody := core.Params{}
	reqBody["path"] = path
	reqBody["tenant_id"] = tenantId

	record, err := core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodPost, resourcePath, reqParams, reqBody)
	if err != nil {
		return nil, err
	}

	var response FolderStatPath_POST_Model
	if err := record.Fill(&response); err != nil {
		return nil, err
	}
	return &response, nil

}

// FolderStatPath_POST
// method: POST
// url: /folders/stat_path/
// summary: Get Owning User and Group for a Path
//
// Parameters:
//   - path (body): Path
//   - tenantId (body): Tenant ID
func (r *Folder) FolderStatPath_POST(path string, tenantId int64) (*FolderStatPath_POST_Model, error) {
	return r.FolderStatPathWithContext_POST(r.Untyped.GetCtx(), path, tenantId)
}

// -----------------------------------------------------
// GENERATION ISSUES
// -----------------------------------------------------
//   - Extra method PATCH /folders/modify_folder/ skipped: PATCH /folders/modify_folder/ - No response schema defined in OpenAPI spec. Error: no valid schema found in PATCH response (200/201/202) for resource /folders/modify_folder/
//   - Extra method POST /folders/create_folder/ skipped: POST /folders/create_folder/ - No response schema defined in OpenAPI spec. Error: no valid schema found in POST response (200/201/202) for resource /folders/create_folder/
//   - Extra method POST /folders/read_only/ skipped: POST /folders/read_only/ - No response schema defined in OpenAPI spec. Error: no valid schema found in POST response (200/201/202) for resource /folders/read_only/
