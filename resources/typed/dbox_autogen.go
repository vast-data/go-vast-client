// Code generated by generate-typed-resources. DO NOT EDIT.
// Template: LIST|READ|DELETE

package typed

import (
	"context"
	"net/http"
	"time"

	"github.com/vast-data/go-vast-client/core"
	"github.com/vast-data/go-vast-client/resources/untyped"
)

// -----------------------------------------------------
// RESOURCE TYPE
// -----------------------------------------------------

// Dbox represents a typed resource for dbox operations
type Dbox struct {
	*core.TypedVastResource
}

// -----------------------------------------------------
// SEARCH PARAMS
// -----------------------------------------------------

// DboxSearchParams represents the search parameters for Dbox operations
type DboxSearchParams struct {
	Name   string `json:"name,omitempty" yaml:"name,omitempty" required:"true" doc:""`
	Guid   string `json:"guid,omitempty" yaml:"guid,omitempty" required:"false" doc:""`
	RackId int64  `json:"rack_id,omitempty" yaml:"rack_id,omitempty" required:"false" doc:"Filter by Rack"`
	Uid    string `json:"uid,omitempty" yaml:"uid,omitempty" required:"false" doc:"Unique h/w identifier"`

	// RawData allows passing arbitrary search parameters as key-value pairs.
	//
	// Use this field when you need query parameters that are not covered by the typed fields above.
	// This is particularly useful for:
	//   - Dynamic filter operations (e.g., "path__contains", "name__icontains")
	//   - Django-style query filters
	//   - Custom backend-specific parameters
	//
	// Example:
	//   params := &DboxSearchParams{
	//       RawData: core.Params{"path__contains": "/foo", "name__icontains": "bar"},
	//   }
	//
	// Note: You can use either the typed fields or RawData, or combine both.
	RawData core.Params `json:"-" yaml:"-"`
}

// -----------------------------------------------------
// MODELS
// -----------------------------------------------------

// DboxDetailsModel represents the detailed model returned by GET/List operations
// Type alias to component definition: #/components/schemas/DBox
type DboxDetailsModel = Component_DBox

// -----------------------------------------------------
// LIST
// -----------------------------------------------------

// List retrieves multiple dboxs with typed request/response
// summary: List DBoxes
func (r *Dbox) List(req *DboxSearchParams) ([]*DboxDetailsModel, error) {
	return r.ListWithContext(r.Untyped.GetCtx(), req)
}

// ListWithContext retrieves multiple dboxs with typed request/response using provided context
// summary: List DBoxes
func (r *Dbox) ListWithContext(ctx context.Context, req *DboxSearchParams) ([]*DboxDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.GetResourceMap()[r.GetResourceType()].ListWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response []*DboxDetailsModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// Get retrieves a single dbox with typed request/response
// summary: List DBoxes
func (r *Dbox) Get(req *DboxSearchParams) (*DboxDetailsModel, error) {
	return r.GetWithContext(r.Untyped.GetCtx(), req)
}

// GetWithContext retrieves a single dbox with typed request/response using provided context
// summary: List DBoxes
func (r *Dbox) GetWithContext(ctx context.Context, req *DboxSearchParams) (*DboxDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response DboxDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// READ
// -----------------------------------------------------

// GetById retrieves a single dbox by ID
// summary: Return Details of a DBox
func (r *Dbox) GetById(id any) (*DboxDetailsModel, error) {
	return r.GetByIdWithContext(r.Untyped.GetCtx(), id)
}

// GetByIdWithContext retrieves a single dbox by ID using provided context
// summary: Return Details of a DBox
func (r *Dbox) GetByIdWithContext(ctx context.Context, id any) (*DboxDetailsModel, error) {
	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetByIdWithContext(ctx, id)
	if err != nil {
		return nil, err
	}

	var response DboxDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// DELETE
// -----------------------------------------------------

// Delete deletes a dbox with search parameters
func (r *Dbox) Delete(req *DboxSearchParams) error {
	return r.DeleteWithContext(r.Untyped.GetCtx(), req)
}

// DeleteWithContext deletes a dbox with search parameters using provided context
func (r *Dbox) DeleteWithContext(ctx context.Context, req *DboxSearchParams) error {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return err
	}
	_, err = r.Untyped.GetResourceMap()[r.GetResourceType()].DeleteWithContext(ctx, params, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteById deletes a dbox by ID and returns an async task
func (r *Dbox) DeleteById(id any, waitTimeout time.Duration) (*untyped.AsyncResult, error) {
	return r.DeleteByIdWithContext(r.Untyped.GetCtx(), id, waitTimeout)
}

// DeleteByIdWithContext deletes a dbox by ID and returns an async task using provided context
func (r *Dbox) DeleteByIdWithContext(ctx context.Context, id any, waitTimeout time.Duration) (*untyped.AsyncResult, error) {
	// For async DELETE, call core.Request directly to get the task response
	path := core.BuildResourcePathWithID(r.Untyped.GetResourceMap()[r.GetResourceType()].GetResourcePath(), id)
	record, err := core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodDelete, path, nil, nil)
	if err != nil {
		return nil, err
	}

	asyncResult, _, err := untyped.MaybeWaitAsyncResultWithContext(ctx, record, r.Untyped, waitTimeout)
	return asyncResult, err
}

// Exists checks if a dbox exists
func (r *Dbox) Exists(req *DboxSearchParams) (bool, error) {
	return r.ExistsWithContext(r.Untyped.GetCtx(), req)
}

// ExistsWithContext checks if a dbox exists using provided context
func (r *Dbox) ExistsWithContext(ctx context.Context, req *DboxSearchParams) (bool, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].ExistsWithContext(ctx, params)
}

// MustExists checks if a dbox exists and panics if not
func (r *Dbox) MustExists(req *DboxSearchParams) bool {
	return r.MustExistsWithContext(r.Untyped.GetCtx(), req)
}

// MustExistsWithContext checks if a dbox exists and panics if not using provided context
func (r *Dbox) MustExistsWithContext(ctx context.Context, req *DboxSearchParams) bool {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].MustExistsWithContext(ctx, params)
}

// -----------------------------------------------------
// EXTRA METHODS
// -----------------------------------------------------

// DboxControlLedWithContext_PATCH
// method: PATCH
// url: /dboxes/{id}/control_led/
// summary: Control DBox LEDs
//
// Parameters:
//   - control (body): LED state
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (r *Dbox) DboxControlLedWithContext_PATCH(ctx context.Context, id any, control string, waitTimeout time.Duration) (*untyped.AsyncResult, error) {
	resourcePath := core.BuildResourcePathWithID("dboxes", id, "control_led")

	var reqParams core.Params
	reqBody := core.Params{}
	if control != "" {
		reqBody["control"] = control
	}

	result, err := core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodPatch, resourcePath, reqParams, reqBody)
	if err != nil {
		return nil, err
	}

	asyncResult, _, err := untyped.MaybeWaitAsyncResultWithContext(ctx, result, r.Untyped, waitTimeout)
	return asyncResult, err

}

// DboxControlLed_PATCH
// method: PATCH
// url: /dboxes/{id}/control_led/
// summary: Control DBox LEDs
//
// Parameters:
//   - control (body): LED state
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (r *Dbox) DboxControlLed_PATCH(id any, control string, waitTimeout time.Duration) (*untyped.AsyncResult, error) {
	return r.DboxControlLedWithContext_PATCH(r.Untyped.GetCtx(), id, control, waitTimeout)
}

// DboxResetDpI2cWithContext_PATCH
// method: PATCH
// url: /dboxes/{id}/reset_dp_i2c/
// summary: Reset dp i2c
//
// Parameters:
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (r *Dbox) DboxResetDpI2cWithContext_PATCH(ctx context.Context, id any, waitTimeout time.Duration) (*untyped.AsyncResult, error) {
	resourcePath := core.BuildResourcePathWithID("dboxes", id, "reset_dp_i2c")

	var reqParams core.Params
	var reqBody core.Params

	result, err := core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodPatch, resourcePath, reqParams, reqBody)
	if err != nil {
		return nil, err
	}

	asyncResult, _, err := untyped.MaybeWaitAsyncResultWithContext(ctx, result, r.Untyped, waitTimeout)
	return asyncResult, err

}

// DboxResetDpI2c_PATCH
// method: PATCH
// url: /dboxes/{id}/reset_dp_i2c/
// summary: Reset dp i2c
//
// Parameters:
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (r *Dbox) DboxResetDpI2c_PATCH(id any, waitTimeout time.Duration) (*untyped.AsyncResult, error) {
	return r.DboxResetDpI2cWithContext_PATCH(r.Untyped.GetCtx(), id, waitTimeout)
}

// -----------------------------------------------------
// GENERATION ISSUES
// -----------------------------------------------------
//   - CREATE operation excluded: POST dboxes has no response schema and doesn't return 204 NO CONTENT
//   - Extra method POST /dboxes/add/ skipped: POST /dboxes/add/ - Response schema contains ambiguous nested objects (objects with no properties)
//   - UPDATE operation excluded: PATCH/PUT /dboxes/{id}/ has no response schema and doesn't return 204 NO CONTENT
