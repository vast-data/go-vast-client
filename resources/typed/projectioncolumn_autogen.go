// Code generated by generate-typed-resources. DO NOT EDIT.
// Template: LIST

package typed

import (
	"context"

	"github.com/vast-data/go-vast-client/core"
)

// -----------------------------------------------------
// RESOURCE TYPE
// -----------------------------------------------------

// ProjectionColumn represents a typed resource for projectioncolumn operations
type ProjectionColumn struct {
	*core.TypedVastResource
}

// -----------------------------------------------------
// SEARCH PARAMS
// -----------------------------------------------------

// ProjectionColumnSearchParams represents the search parameters for ProjectionColumn operations
type ProjectionColumnSearchParams struct {
	CountOnly      bool   `json:"count_only,omitempty" yaml:"count_only,omitempty" required:"false" doc:"Whether to only return count of objects"`
	DatabaseName   string `json:"database_name,omitempty" yaml:"database_name,omitempty" required:"false" doc:"Getting list of objects by database_name"`
	Name           string `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:"Getting list of objects by exact match"`
	ProjectionName string `json:"projection_name,omitempty" yaml:"projection_name,omitempty" required:"false" doc:"Getting list of objects by projection_name"`
	SchemaName     string `json:"schema_name,omitempty" yaml:"schema_name,omitempty" required:"false" doc:"Getting list of objects by schema_name"`
	TableName      string `json:"table_name,omitempty" yaml:"table_name,omitempty" required:"false" doc:"Getting list of objects by table_name"`
	TenantId       int64  `json:"tenant_id,omitempty" yaml:"tenant_id,omitempty" required:"false" doc:"Filter by tenant. Specify tenant ID."`

	// RawData allows passing arbitrary search parameters as key-value pairs.
	//
	// Use this field when you need query parameters that are not covered by the typed fields above.
	// This is particularly useful for:
	//   - Dynamic filter operations (e.g., "path__contains", "name__icontains")
	//   - Django-style query filters
	//   - Custom backend-specific parameters
	//
	// Example:
	//   params := &ProjectionColumnSearchParams{
	//       RawData: core.Params{"path__contains": "/foo", "name__icontains": "bar"},
	//   }
	//
	// Note: You can use either the typed fields or RawData, or combine both.
	RawData core.Params `json:"-" yaml:"-"`
}

// -----------------------------------------------------
// MODELS
// -----------------------------------------------------

// ProjectionColumnDetailsModel represents the detailed model returned by GET/List operations
// Type alias to component definition: #/components/schemas/ProjectionColumn
type ProjectionColumnDetailsModel = Component_ProjectionColumn

// -----------------------------------------------------
// LIST
// -----------------------------------------------------

// List retrieves multiple projectioncolumns with typed request/response
// summary: List Database Table Semi-Sorted Projection Columns
func (r *ProjectionColumn) List(req *ProjectionColumnSearchParams) ([]*ProjectionColumnDetailsModel, error) {
	return r.ListWithContext(r.Untyped.GetCtx(), req)
}

// ListWithContext retrieves multiple projectioncolumns with typed request/response using provided context
// summary: List Database Table Semi-Sorted Projection Columns
func (r *ProjectionColumn) ListWithContext(ctx context.Context, req *ProjectionColumnSearchParams) ([]*ProjectionColumnDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.GetResourceMap()[r.GetResourceType()].ListWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response []*ProjectionColumnDetailsModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// Get retrieves a single projectioncolumn with typed request/response
// summary: List Database Table Semi-Sorted Projection Columns
func (r *ProjectionColumn) Get(req *ProjectionColumnSearchParams) (*ProjectionColumnDetailsModel, error) {
	return r.GetWithContext(r.Untyped.GetCtx(), req)
}

// GetWithContext retrieves a single projectioncolumn with typed request/response using provided context
// summary: List Database Table Semi-Sorted Projection Columns
func (r *ProjectionColumn) GetWithContext(ctx context.Context, req *ProjectionColumnSearchParams) (*ProjectionColumnDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response ProjectionColumnDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Exists checks if a projectioncolumn exists
func (r *ProjectionColumn) Exists(req *ProjectionColumnSearchParams) (bool, error) {
	return r.ExistsWithContext(r.Untyped.GetCtx(), req)
}

// ExistsWithContext checks if a projectioncolumn exists using provided context
func (r *ProjectionColumn) ExistsWithContext(ctx context.Context, req *ProjectionColumnSearchParams) (bool, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].ExistsWithContext(ctx, params)
}

// MustExists checks if a projectioncolumn exists and panics if not
func (r *ProjectionColumn) MustExists(req *ProjectionColumnSearchParams) bool {
	return r.MustExistsWithContext(r.Untyped.GetCtx(), req)
}

// MustExistsWithContext checks if a projectioncolumn exists and panics if not using provided context
func (r *ProjectionColumn) MustExistsWithContext(ctx context.Context, req *ProjectionColumnSearchParams) bool {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].MustExistsWithContext(ctx, params)
}

// -----------------------------------------------------
// GENERATION ISSUES
// -----------------------------------------------------
//   - Extra method GET /projectioncolumns/show/ skipped: GET /projectioncolumns/show/ - Response schema contains ambiguous nested objects (objects with no properties)
