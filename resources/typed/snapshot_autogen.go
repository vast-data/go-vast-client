// Code generated by generate-typed-resources. DO NOT EDIT.
// Template: CREATE|LIST|READ|DELETE

package typed

import (
	"context"

	"github.com/vast-data/go-vast-client/core"
)

// -----------------------------------------------------
// RESOURCE TYPE
// -----------------------------------------------------

// Snapshot represents a typed resource for snapshot operations
type Snapshot struct {
	*core.TypedVastResource
}

// -----------------------------------------------------
// SEARCH PARAMS
// -----------------------------------------------------

// SnapshotSearchParams represents the search parameters for Snapshot operations
type SnapshotSearchParams struct {
	Name           string `json:"name,omitempty" yaml:"name,omitempty" required:"true" doc:""`
	ExpirationTime string `json:"expiration_time,omitempty" yaml:"expiration_time,omitempty" required:"false" doc:"Filter by expiration time"`
	Guid           string `json:"guid,omitempty" yaml:"guid,omitempty" required:"false" doc:""`
	Locked         bool   `json:"locked,omitempty" yaml:"locked,omitempty" required:"false" doc:"Filter for locked snapshots"`
	Path           string `json:"path,omitempty" yaml:"path,omitempty" required:"false" doc:"Filter by snapshot path"`
	State          string `json:"state,omitempty" yaml:"state,omitempty" required:"false" doc:"Filter by state"`
	TenantId       int64  `json:"tenant_id,omitempty" yaml:"tenant_id,omitempty" required:"false" doc:"Filter by tenant. Specify tenant ID."`
	VolumeId       int64  `json:"volume_id,omitempty" yaml:"volume_id,omitempty" required:"false" doc:"Mapped volume id to filter by."`

	// RawData allows passing arbitrary search parameters as key-value pairs.
	//
	// Use this field when you need query parameters that are not covered by the typed fields above.
	// This is particularly useful for:
	//   - Dynamic filter operations (e.g., "path__contains", "name__icontains")
	//   - Django-style query filters
	//   - Custom backend-specific parameters
	//
	// Example:
	//   params := &SnapshotSearchParams{
	//       RawData: core.Params{"path__contains": "/foo", "name__icontains": "bar"},
	//   }
	//
	// Note: You can use either the typed fields or RawData, or combine both.
	RawData core.Params `json:"-" yaml:"-"`
}

// -----------------------------------------------------
// REQUEST BODY
// -----------------------------------------------------

// SnapshotRequestBody represents the request body for Snapshot operations
type SnapshotRequestBody struct {
	Name           string `json:"name,omitempty" yaml:"name,omitempty" required:"true" doc:"Snapshot name"`
	Path           string `json:"path,omitempty" yaml:"path,omitempty" required:"true" doc:"The path to take a snapshot on"`
	ClusterId      int64  `json:"cluster_id,omitempty" yaml:"cluster_id,omitempty" required:"false" doc:"Cluster ID"`
	ExpirationTime string `json:"expiration_time,omitempty" yaml:"expiration_time,omitempty" required:"false" doc:"Snapshot expiration time"`
	Indestructible bool   `json:"indestructible,omitempty" yaml:"indestructible,omitempty" required:"false" doc:"Set to true to protect the snapshot from accidental or malicious deletion with the indestructibility feature. If this setting is enabled, authorized unlocking of the cluster's indestructibility mechanism is required to do any of the following: deleting the snapshot, shortening its expiration time or disabling this setting."`
	Locked         bool   `json:"locked,omitempty" yaml:"locked,omitempty" required:"false" doc:"Not in use."`
	TenantId       int64  `json:"tenant_id,omitempty" yaml:"tenant_id,omitempty" required:"false" doc:"Tenant ID"`
}

// -----------------------------------------------------
// MODELS
// -----------------------------------------------------

// SnapshotDetailsModel represents the detailed model returned by GET/List operations
// Type alias to component definition: #/components/schemas/Snapshot
type SnapshotDetailsModel = Component_Snapshot

// SnapshotUpsertModel represents the model returned by Create/Update operations
// Type alias to component definition: #/components/schemas/Snapshot
type SnapshotUpsertModel = Component_Snapshot

// -----------------------------------------------------
// LIST
// -----------------------------------------------------

// List retrieves multiple snapshots with typed request/response
// summary: List Snapshots
func (r *Snapshot) List(req *SnapshotSearchParams) ([]*SnapshotDetailsModel, error) {
	return r.ListWithContext(r.Untyped.GetCtx(), req)
}

// ListWithContext retrieves multiple snapshots with typed request/response using provided context
// summary: List Snapshots
func (r *Snapshot) ListWithContext(ctx context.Context, req *SnapshotSearchParams) ([]*SnapshotDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.GetResourceMap()[r.GetResourceType()].ListWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response []*SnapshotDetailsModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// Get retrieves a single snapshot with typed request/response
// summary: List Snapshots
func (r *Snapshot) Get(req *SnapshotSearchParams) (*SnapshotDetailsModel, error) {
	return r.GetWithContext(r.Untyped.GetCtx(), req)
}

// GetWithContext retrieves a single snapshot with typed request/response using provided context
// summary: List Snapshots
func (r *Snapshot) GetWithContext(ctx context.Context, req *SnapshotSearchParams) (*SnapshotDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response SnapshotDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// READ
// -----------------------------------------------------

// GetById retrieves a single snapshot by ID
// summary: Return Details of a Snapshot
func (r *Snapshot) GetById(id any) (*SnapshotDetailsModel, error) {
	return r.GetByIdWithContext(r.Untyped.GetCtx(), id)
}

// GetByIdWithContext retrieves a single snapshot by ID using provided context
// summary: Return Details of a Snapshot
func (r *Snapshot) GetByIdWithContext(ctx context.Context, id any) (*SnapshotDetailsModel, error) {
	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetByIdWithContext(ctx, id)
	if err != nil {
		return nil, err
	}

	var response SnapshotDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// CREATE
// -----------------------------------------------------

// Create creates a new snapshot with typed request/response
// summary: Create Snapshot
func (r *Snapshot) Create(req *SnapshotRequestBody) (*SnapshotUpsertModel, error) {
	return r.CreateWithContext(r.Untyped.GetCtx(), req)
}

// CreateWithContext creates a new snapshot with typed request/response using provided context
// summary: Create Snapshot
func (r *Snapshot) CreateWithContext(ctx context.Context, req *SnapshotRequestBody) (*SnapshotUpsertModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].CreateWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response SnapshotUpsertModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// DELETE
// -----------------------------------------------------

// Delete deletes a snapshot with search parameters
func (r *Snapshot) Delete(req *SnapshotSearchParams) error {
	return r.DeleteWithContext(r.Untyped.GetCtx(), req)
}

// DeleteWithContext deletes a snapshot with search parameters using provided context
func (r *Snapshot) DeleteWithContext(ctx context.Context, req *SnapshotSearchParams) error {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return err
	}
	_, err = r.Untyped.GetResourceMap()[r.GetResourceType()].DeleteWithContext(ctx, params, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteById deletes a snapshot by ID
// summary: Delete a Snapshot
//
// Parameters:
//   - id: Specify the ID of the snapshot.
func (r *Snapshot) DeleteById(id any) error {
	return r.DeleteByIdWithContext(r.Untyped.GetCtx(), id)
}

// DeleteByIdWithContext deletes a snapshot by ID using provided context
// summary: Delete a Snapshot
//
// Parameters:
//   - id: Specify the ID of the snapshot.
func (r *Snapshot) DeleteByIdWithContext(ctx context.Context, id any) error {
	_, err := r.Untyped.GetResourceMap()[r.GetResourceType()].DeleteByIdWithContext(ctx, id, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// -----------------------------------------------------
// ENSURE
// -----------------------------------------------------

// Ensure ensures a snapshot exists with typed response
func (r *Snapshot) Ensure(searchParams *SnapshotSearchParams, body *SnapshotRequestBody) (*SnapshotUpsertModel, error) {
	return r.EnsureWithContext(r.Untyped.GetCtx(), searchParams, body)
}

// EnsureWithContext ensures a snapshot exists with typed response using provided context
func (r *Snapshot) EnsureWithContext(ctx context.Context, searchParams *SnapshotSearchParams, body *SnapshotRequestBody) (*SnapshotUpsertModel, error) {
	searchParamsConverted, err := core.NewParamsFromStruct(searchParams)
	if err != nil {
		return nil, err
	}
	bodyConverted, err := core.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].EnsureWithContext(ctx, searchParamsConverted, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response SnapshotUpsertModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Exists checks if a snapshot exists
func (r *Snapshot) Exists(req *SnapshotSearchParams) (bool, error) {
	return r.ExistsWithContext(r.Untyped.GetCtx(), req)
}

// ExistsWithContext checks if a snapshot exists using provided context
func (r *Snapshot) ExistsWithContext(ctx context.Context, req *SnapshotSearchParams) (bool, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].ExistsWithContext(ctx, params)
}

// MustExists checks if a snapshot exists and panics if not
func (r *Snapshot) MustExists(req *SnapshotSearchParams) bool {
	return r.MustExistsWithContext(r.Untyped.GetCtx(), req)
}

// MustExistsWithContext checks if a snapshot exists and panics if not using provided context
func (r *Snapshot) MustExistsWithContext(ctx context.Context, req *SnapshotSearchParams) bool {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].MustExistsWithContext(ctx, params)
}

// -----------------------------------------------------
// GENERATION ISSUES
// -----------------------------------------------------
//   - Extra method POST /snapshots/{id}/clone/ skipped: POST /snapshots/{id}/clone/ - Response schema contains ambiguous nested objects (objects with no properties)
//   - UPDATE operation excluded: PATCH/PUT /snapshots/{id}/ has no response schema and doesn't return 204 NO CONTENT
