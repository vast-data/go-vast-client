// Code generated by generate-typed-resources. DO NOT EDIT.
// Template: LIST|READ|UPDATE

package typed

import (
	"context"
	"net/http"
	"time"

	"github.com/vast-data/go-vast-client/core"
	"github.com/vast-data/go-vast-client/resources/untyped"
)

// -----------------------------------------------------
// RESOURCE TYPE
// -----------------------------------------------------

// Carrier represents a typed resource for carrier operations
type Carrier struct {
	*core.TypedVastResource
}

// -----------------------------------------------------
// SEARCH PARAMS
// -----------------------------------------------------

// CarrierSearchParams represents the search parameters for Carrier operations
type CarrierSearchParams struct {
	Guid  string `json:"guid,omitempty" yaml:"guid,omitempty" required:"false" doc:""`
	Name  string `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:""`
	State string `json:"state,omitempty" yaml:"state,omitempty" required:"false" doc:"Filter by carrier state"`

	// RawData allows passing arbitrary search parameters as key-value pairs.
	//
	// Use this field when you need query parameters that are not covered by the typed fields above.
	// This is particularly useful for:
	//   - Dynamic filter operations (e.g., "path__contains", "name__icontains")
	//   - Django-style query filters
	//   - Custom backend-specific parameters
	//
	// Example:
	//   params := &CarrierSearchParams{
	//       RawData: core.Params{"path__contains": "/foo", "name__icontains": "bar"},
	//   }
	//
	// Note: You can use either the typed fields or RawData, or combine both.
	RawData core.Params `json:"-" yaml:"-"`
}

// -----------------------------------------------------
// MODELS
// -----------------------------------------------------

// CarrierDetailsModel represents the detailed model returned by GET/List operations
// Type alias to component definition: #/components/schemas/Carrier
type CarrierDetailsModel = Component_Carrier

// CarrierEditModel represents the model returned by Update operations
// Type alias to component definition: #/components/schemas/AsyncTaskInResponse
type CarrierEditModel = Component_AsyncTaskInResponse

// -----------------------------------------------------
// LIST
// -----------------------------------------------------

// List retrieves multiple carriers with typed request/response
// summary: List Carriers
func (r *Carrier) List(req *CarrierSearchParams) ([]*CarrierDetailsModel, error) {
	return r.ListWithContext(r.Untyped.GetCtx(), req)
}

// ListWithContext retrieves multiple carriers with typed request/response using provided context
// summary: List Carriers
func (r *Carrier) ListWithContext(ctx context.Context, req *CarrierSearchParams) ([]*CarrierDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.GetResourceMap()[r.GetResourceType()].ListWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response []*CarrierDetailsModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// Get retrieves a single carrier with typed request/response
// summary: List Carriers
func (r *Carrier) Get(req *CarrierSearchParams) (*CarrierDetailsModel, error) {
	return r.GetWithContext(r.Untyped.GetCtx(), req)
}

// GetWithContext retrieves a single carrier with typed request/response using provided context
// summary: List Carriers
func (r *Carrier) GetWithContext(ctx context.Context, req *CarrierSearchParams) (*CarrierDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response CarrierDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// READ
// -----------------------------------------------------

// GetById retrieves a single carrier by ID
// summary: Return Details of One Carrier
func (r *Carrier) GetById(id any) (*CarrierDetailsModel, error) {
	return r.GetByIdWithContext(r.Untyped.GetCtx(), id)
}

// GetByIdWithContext retrieves a single carrier by ID using provided context
// summary: Return Details of One Carrier
func (r *Carrier) GetByIdWithContext(ctx context.Context, id any) (*CarrierDetailsModel, error) {
	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetByIdWithContext(ctx, id)
	if err != nil {
		return nil, err
	}

	var response CarrierDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// UPDATE
// -----------------------------------------------------

// Update updates an existing carrier with typed request/response
//
// Parameters:
//   - enabled: True for activate, False for deactivate
func (r *Carrier) Update(id any, enabled bool) (*CarrierEditModel, error) {
	return r.UpdateWithContext(r.Untyped.GetCtx(), id, enabled)
}

// UpdateWithContext updates an existing carrier with typed request/response using provided context
//
// Parameters:
//   - enabled: True for activate, False for deactivate
func (r *Carrier) UpdateWithContext(ctx context.Context, id any, enabled bool) (*CarrierEditModel, error) {
	params := core.Params{
		"enabled": enabled,
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].UpdateWithContext(ctx, id, params)
	if err != nil {
		return nil, err
	}

	var response CarrierEditModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Exists checks if a carrier exists
func (r *Carrier) Exists(req *CarrierSearchParams) (bool, error) {
	return r.ExistsWithContext(r.Untyped.GetCtx(), req)
}

// ExistsWithContext checks if a carrier exists using provided context
func (r *Carrier) ExistsWithContext(ctx context.Context, req *CarrierSearchParams) (bool, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].ExistsWithContext(ctx, params)
}

// MustExists checks if a carrier exists and panics if not
func (r *Carrier) MustExists(req *CarrierSearchParams) bool {
	return r.MustExistsWithContext(r.Untyped.GetCtx(), req)
}

// MustExistsWithContext checks if a carrier exists and panics if not using provided context
func (r *Carrier) MustExistsWithContext(ctx context.Context, req *CarrierSearchParams) bool {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].MustExistsWithContext(ctx, params)
}

// -----------------------------------------------------
// EXTRA METHODS
// -----------------------------------------------------

// CarrierControlLedWithContext_PATCH
// method: PATCH
// url: /carriers/{id}/control_led/
// summary: Control Slot LED
//
// Parameters:
//   - control (body): LED state
func (r *Carrier) CarrierControlLedWithContext_PATCH(ctx context.Context, id any, control string) error {
	resourcePath := core.BuildResourcePathWithID("carriers", id, "control_led")

	var reqParams core.Params
	reqBody := core.Params{}
	if control != "" {
		reqBody["control"] = control
	}

	_, err := core.Request[core.EmptyRecord](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodPatch, resourcePath, reqParams, reqBody)
	return err

}

// CarrierControlLed_PATCH
// method: PATCH
// url: /carriers/{id}/control_led/
// summary: Control Slot LED
//
// Parameters:
//   - control (body): LED state
func (r *Carrier) CarrierControlLed_PATCH(id any, control string) error {
	return r.CarrierControlLedWithContext_PATCH(r.Untyped.GetCtx(), id, control)
}

// CarrierHighlightWithContext_PATCH
// method: PATCH
// url: /carriers/{id}/highlight/
// summary: Highlight the Control Slot
//
// Parameters:
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (r *Carrier) CarrierHighlightWithContext_PATCH(ctx context.Context, id any, waitTimeout time.Duration) (*untyped.AsyncResult, error) {
	resourcePath := core.BuildResourcePathWithID("carriers", id, "highlight")

	var reqParams core.Params
	var reqBody core.Params

	result, err := core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodPatch, resourcePath, reqParams, reqBody)
	if err != nil {
		return nil, err
	}
	// Create async task from result
	task := untyped.NewAsyncResult(ctx, result.RecordID(), r.Untyped)
	// If waitTimeout is 0, return task immediately without waiting (async background operation)
	if waitTimeout == 0 {
		return task, nil
	}
	// Wait for task completion with the specified timeout
	if _, err := task.Wait(waitTimeout); err != nil {
		return task, err
	}
	return task, nil

}

// CarrierHighlight_PATCH
// method: PATCH
// url: /carriers/{id}/highlight/
// summary: Highlight the Control Slot
//
// Parameters:
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (r *Carrier) CarrierHighlight_PATCH(id any, waitTimeout time.Duration) (*untyped.AsyncResult, error) {
	return r.CarrierHighlightWithContext_PATCH(r.Untyped.GetCtx(), id, waitTimeout)
}

// CarrierResetPciWithContext_PATCH
// method: PATCH
// url: /carriers/{id}/reset_pci/
// summary: Power Cycles a Slot
//
// Parameters:
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (r *Carrier) CarrierResetPciWithContext_PATCH(ctx context.Context, id any, waitTimeout time.Duration) (*untyped.AsyncResult, error) {
	resourcePath := core.BuildResourcePathWithID("carriers", id, "reset_pci")

	var reqParams core.Params
	var reqBody core.Params

	result, err := core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodPatch, resourcePath, reqParams, reqBody)
	if err != nil {
		return nil, err
	}
	// Create async task from result
	task := untyped.NewAsyncResult(ctx, result.RecordID(), r.Untyped)
	// If waitTimeout is 0, return task immediately without waiting (async background operation)
	if waitTimeout == 0 {
		return task, nil
	}
	// Wait for task completion with the specified timeout
	if _, err := task.Wait(waitTimeout); err != nil {
		return task, err
	}
	return task, nil

}

// CarrierResetPci_PATCH
// method: PATCH
// url: /carriers/{id}/reset_pci/
// summary: Power Cycles a Slot
//
// Parameters:
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (r *Carrier) CarrierResetPci_PATCH(id any, waitTimeout time.Duration) (*untyped.AsyncResult, error) {
	return r.CarrierResetPciWithContext_PATCH(r.Untyped.GetCtx(), id, waitTimeout)
}
