// Code generated by generate-typed-resources. DO NOT EDIT.
// Template: CREATE|LIST|READ|UPDATE|DELETE

package typed

import (
	"context"
	"net/http"

	"github.com/vast-data/go-vast-client/core"
)

// -----------------------------------------------------
// RESOURCE TYPE
// -----------------------------------------------------

// Nis represents a typed resource for nis operations
type Nis struct {
	*core.TypedVastResource
}

// -----------------------------------------------------
// SEARCH PARAMS
// -----------------------------------------------------

// NisSearchParams represents the search parameters for Nis operations
type NisSearchParams struct {
	Guid     string `json:"guid,omitempty" yaml:"guid,omitempty" required:"false" doc:""`
	Name     string `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:"Name of the NIS configuration"`
	TenantId int64  `json:"tenant_id,omitempty" yaml:"tenant_id,omitempty" required:"false" doc:""`

	// RawData allows passing arbitrary search parameters as key-value pairs.
	//
	// Use this field when you need query parameters that are not covered by the typed fields above.
	// This is particularly useful for:
	//   - Dynamic filter operations (e.g., "path__contains", "name__icontains")
	//   - Django-style query filters
	//   - Custom backend-specific parameters
	//
	// Example:
	//   params := &NisSearchParams{
	//       RawData: core.Params{"path__contains": "/foo", "name__icontains": "bar"},
	//   }
	//
	// Note: You can use either the typed fields or RawData, or combine both.
	RawData core.Params `json:"-" yaml:"-"`
}

// -----------------------------------------------------
// REQUEST BODY
// -----------------------------------------------------

// NisRequestBody represents the request body for Nis operations
type NisRequestBody struct {
	DomainName string    `json:"domain_name,omitempty" yaml:"domain_name,omitempty" required:"true" doc:"The NIS domain name shared by all the NIS servers and clients on your network."`
	Hosts      *[]string `json:"hosts,omitempty" yaml:"hosts,omitempty" required:"false" doc:"Host names of NIS master and slave servers."`
	Ips        *[]string `json:"ips,omitempty" yaml:"ips,omitempty" required:"false" doc:"IP addresses of NIS master and slave servers."`
	Name       string    `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:"NIS name"`
	Servers    *[]string `json:"servers,omitempty" yaml:"servers,omitempty" required:"false" doc:"NIS master and slave servers (limited to ten servers). You can specify each server by its IP or host name, up to 48 characters. Separate hosts with commas."`
}

// -----------------------------------------------------
// MODELS
// -----------------------------------------------------

// NisDetailsModel represents the detailed model returned by GET/List operations
// Type alias to component definition: #/components/schemas/NIS
type NisDetailsModel = Component_NIS

// NisUpsertModel represents the model returned by Create/Update operations
// Type alias to component definition: #/components/schemas/NIS
type NisUpsertModel = Component_NIS

// -----------------------------------------------------
// LIST
// -----------------------------------------------------

// List retrieves multiple niss with typed request/response
// summary: List NIS Configurations
func (r *Nis) List(req *NisSearchParams) ([]*NisDetailsModel, error) {
	return r.ListWithContext(r.Untyped.GetCtx(), req)
}

// ListWithContext retrieves multiple niss with typed request/response using provided context
// summary: List NIS Configurations
func (r *Nis) ListWithContext(ctx context.Context, req *NisSearchParams) ([]*NisDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.GetResourceMap()[r.GetResourceType()].ListWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response []*NisDetailsModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// Get retrieves a single nis with typed request/response
// summary: List NIS Configurations
func (r *Nis) Get(req *NisSearchParams) (*NisDetailsModel, error) {
	return r.GetWithContext(r.Untyped.GetCtx(), req)
}

// GetWithContext retrieves a single nis with typed request/response using provided context
// summary: List NIS Configurations
func (r *Nis) GetWithContext(ctx context.Context, req *NisSearchParams) (*NisDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response NisDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// READ
// -----------------------------------------------------

// GetById retrieves a single nis by ID
// summary: Return NIS Configuration Details
func (r *Nis) GetById(id any) (*NisDetailsModel, error) {
	return r.GetByIdWithContext(r.Untyped.GetCtx(), id)
}

// GetByIdWithContext retrieves a single nis by ID using provided context
// summary: Return NIS Configuration Details
func (r *Nis) GetByIdWithContext(ctx context.Context, id any) (*NisDetailsModel, error) {
	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetByIdWithContext(ctx, id)
	if err != nil {
		return nil, err
	}

	var response NisDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// CREATE
// -----------------------------------------------------

// Create creates a new nis with typed request/response
// summary: Create a NIS Configuration
func (r *Nis) Create(req *NisRequestBody) (*NisUpsertModel, error) {
	return r.CreateWithContext(r.Untyped.GetCtx(), req)
}

// CreateWithContext creates a new nis with typed request/response using provided context
// summary: Create a NIS Configuration
func (r *Nis) CreateWithContext(ctx context.Context, req *NisRequestBody) (*NisUpsertModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].CreateWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response NisUpsertModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// UPDATE
// -----------------------------------------------------

// Update updates an existing nis with typed request/response
func (r *Nis) Update(id any, req *NisRequestBody) (*NisUpsertModel, error) {
	return r.UpdateWithContext(r.Untyped.GetCtx(), id, req)
}

// UpdateWithContext updates an existing nis with typed request/response using provided context
func (r *Nis) UpdateWithContext(ctx context.Context, id any, req *NisRequestBody) (*NisUpsertModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].UpdateWithContext(ctx, id, params)
	if err != nil {
		return nil, err
	}

	var response NisUpsertModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// DELETE
// -----------------------------------------------------

// Delete deletes a nis with search parameters
func (r *Nis) Delete(req *NisSearchParams) error {
	return r.DeleteWithContext(r.Untyped.GetCtx(), req)
}

// DeleteWithContext deletes a nis with search parameters using provided context
func (r *Nis) DeleteWithContext(ctx context.Context, req *NisSearchParams) error {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return err
	}
	_, err = r.Untyped.GetResourceMap()[r.GetResourceType()].DeleteWithContext(ctx, params, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteById deletes a nis by ID
// summary: Delete NIS Configuration
func (r *Nis) DeleteById(id any) error {
	return r.DeleteByIdWithContext(r.Untyped.GetCtx(), id)
}

// DeleteByIdWithContext deletes a nis by ID using provided context
// summary: Delete NIS Configuration
func (r *Nis) DeleteByIdWithContext(ctx context.Context, id any) error {
	_, err := r.Untyped.GetResourceMap()[r.GetResourceType()].DeleteByIdWithContext(ctx, id, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// -----------------------------------------------------
// ENSURE
// -----------------------------------------------------

// Ensure ensures a nis exists with typed response
func (r *Nis) Ensure(searchParams *NisSearchParams, body *NisRequestBody) (*NisUpsertModel, error) {
	return r.EnsureWithContext(r.Untyped.GetCtx(), searchParams, body)
}

// EnsureWithContext ensures a nis exists with typed response using provided context
func (r *Nis) EnsureWithContext(ctx context.Context, searchParams *NisSearchParams, body *NisRequestBody) (*NisUpsertModel, error) {
	searchParamsConverted, err := core.NewParamsFromStruct(searchParams)
	if err != nil {
		return nil, err
	}
	bodyConverted, err := core.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].EnsureWithContext(ctx, searchParamsConverted, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response NisUpsertModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Exists checks if a nis exists
func (r *Nis) Exists(req *NisSearchParams) (bool, error) {
	return r.ExistsWithContext(r.Untyped.GetCtx(), req)
}

// ExistsWithContext checks if a nis exists using provided context
func (r *Nis) ExistsWithContext(ctx context.Context, req *NisSearchParams) (bool, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].ExistsWithContext(ctx, params)
}

// MustExists checks if a nis exists and panics if not
func (r *Nis) MustExists(req *NisSearchParams) bool {
	return r.MustExistsWithContext(r.Untyped.GetCtx(), req)
}

// MustExistsWithContext checks if a nis exists and panics if not using provided context
func (r *Nis) MustExistsWithContext(ctx context.Context, req *NisSearchParams) bool {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].MustExistsWithContext(ctx, params)
}

// -----------------------------------------------------
// EXTRA METHODS
// -----------------------------------------------------

// NisRefresh_PATCH_Model represents the response model for NisRefresh
type NisRefresh_PATCH_Model struct {
	DomainName           string    `json:"domain_name,omitempty" yaml:"domain_name,omitempty" required:"true" doc:"The NIS domain name shared by all the NIS servers and clients on the network."`
	Guid                 string    `json:"guid,omitempty" yaml:"guid,omitempty" required:"false" doc:""`
	Hosts                *[]string `json:"hosts,omitempty" yaml:"hosts,omitempty" required:"false" doc:"not in use"`
	Id                   int64     `json:"id,omitempty" yaml:"id,omitempty" required:"false" doc:""`
	Ips                  *[]string `json:"ips,omitempty" yaml:"ips,omitempty" required:"false" doc:""`
	Name                 string    `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:"Name of the NIS configuration"`
	PosixPrimaryProvider bool      `json:"posix_primary_provider,omitempty" yaml:"posix_primary_provider,omitempty" required:"false" doc:"POSIX primary provider"`
	Servers              *[]string `json:"servers,omitempty" yaml:"servers,omitempty" required:"false" doc:"NIS master and slave servers (limited to ten servers). Each server may be specified by its IP or host name, up to 48 characters."`
	State                string    `json:"state,omitempty" yaml:"state,omitempty" required:"false" doc:"Nis state"`
	TenantId             int64     `json:"tenant_id,omitempty" yaml:"tenant_id,omitempty" required:"false" doc:""`
	Title                string    `json:"title,omitempty" yaml:"title,omitempty" required:"false" doc:""`
	Url                  string    `json:"url,omitempty" yaml:"url,omitempty" required:"false" doc:""`
}

// NisRefreshWithContext_PATCH
// method: PATCH
// url: /nis/refresh/
// summary: Refresh NIS Cache
func (r *Nis) NisRefreshWithContext_PATCH(ctx context.Context) (*NisRefresh_PATCH_Model, error) {
	resourcePath := "/nis/refresh/"

	var reqParams core.Params
	var reqBody core.Params

	record, err := core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodPatch, resourcePath, reqParams, reqBody)
	if err != nil {
		return nil, err
	}

	var response NisRefresh_PATCH_Model
	if err := record.Fill(&response); err != nil {
		return nil, err
	}
	return &response, nil

}

// NisRefresh_PATCH
// method: PATCH
// url: /nis/refresh/
// summary: Refresh NIS Cache
func (r *Nis) NisRefresh_PATCH() (*NisRefresh_PATCH_Model, error) {
	return r.NisRefreshWithContext_PATCH(r.Untyped.GetCtx())
}

// NisSetPosixPrimaryWithContext_PATCH
// method: PATCH
// url: /nis/{id}/set_posix_primary/
// summary: Set NIS as Primary POSIX Provider
func (r *Nis) NisSetPosixPrimaryWithContext_PATCH(ctx context.Context, id any) error {
	resourcePath := core.BuildResourcePathWithID("nis", id, "set_posix_primary")

	var reqParams core.Params
	var reqBody core.Params

	_, err := core.Request[core.EmptyRecord](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodPatch, resourcePath, reqParams, reqBody)
	return err

}

// NisSetPosixPrimary_PATCH
// method: PATCH
// url: /nis/{id}/set_posix_primary/
// summary: Set NIS as Primary POSIX Provider
func (r *Nis) NisSetPosixPrimary_PATCH(id any) error {
	return r.NisSetPosixPrimaryWithContext_PATCH(r.Untyped.GetCtx(), id)
}
