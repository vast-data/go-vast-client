// Code generated by generate-typed-resources. DO NOT EDIT.
// Template: LIST

package typed

import (
	"context"
	"net/http"

	"github.com/vast-data/go-vast-client/core"
)

// -----------------------------------------------------
// RESOURCE TYPE
// -----------------------------------------------------

// EncryptionGroup represents a typed resource for encryptiongroup operations
type EncryptionGroup struct {
	*core.TypedVastResource
}

// -----------------------------------------------------
// SEARCH PARAMS
// -----------------------------------------------------

// EncryptionGroupSearchParams represents the search parameters for EncryptionGroup operations
type EncryptionGroupSearchParams struct {

	// RawData allows passing arbitrary search parameters as key-value pairs.
	//
	// Use this field when you need query parameters that are not covered by the typed fields above.
	// This is particularly useful for:
	//   - Dynamic filter operations (e.g., "path__contains", "name__icontains")
	//   - Django-style query filters
	//   - Custom backend-specific parameters
	//
	// Example:
	//   params := &EncryptionGroupSearchParams{
	//       RawData: core.Params{"path__contains": "/foo", "name__icontains": "bar"},
	//   }
	//
	// Note: You can use either the typed fields or RawData, or combine both.
	RawData core.Params `json:"-" yaml:"-"`
}

// -----------------------------------------------------
// MODELS
// -----------------------------------------------------

// EncryptionGroupDetailsModel represents the detailed model returned by GET/List operations
// Type alias to component definition: #/components/schemas/EncryptionGroup
type EncryptionGroupDetailsModel = Component_EncryptionGroup

// -----------------------------------------------------
// LIST
// -----------------------------------------------------

// List retrieves multiple encryptiongroups with typed request/response
// summary: List Encryption Groups
func (r *EncryptionGroup) List(req *EncryptionGroupSearchParams) ([]*EncryptionGroupDetailsModel, error) {
	return r.ListWithContext(r.Untyped.GetCtx(), req)
}

// ListWithContext retrieves multiple encryptiongroups with typed request/response using provided context
// summary: List Encryption Groups
func (r *EncryptionGroup) ListWithContext(ctx context.Context, req *EncryptionGroupSearchParams) ([]*EncryptionGroupDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.GetResourceMap()[r.GetResourceType()].ListWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response []*EncryptionGroupDetailsModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// Get retrieves a single encryptiongroup with typed request/response
// summary: List Encryption Groups
func (r *EncryptionGroup) Get(req *EncryptionGroupSearchParams) (*EncryptionGroupDetailsModel, error) {
	return r.GetWithContext(r.Untyped.GetCtx(), req)
}

// GetWithContext retrieves a single encryptiongroup with typed request/response using provided context
// summary: List Encryption Groups
func (r *EncryptionGroup) GetWithContext(ctx context.Context, req *EncryptionGroupSearchParams) (*EncryptionGroupDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response EncryptionGroupDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Exists checks if a encryptiongroup exists
func (r *EncryptionGroup) Exists(req *EncryptionGroupSearchParams) (bool, error) {
	return r.ExistsWithContext(r.Untyped.GetCtx(), req)
}

// ExistsWithContext checks if a encryptiongroup exists using provided context
func (r *EncryptionGroup) ExistsWithContext(ctx context.Context, req *EncryptionGroupSearchParams) (bool, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].ExistsWithContext(ctx, params)
}

// MustExists checks if a encryptiongroup exists and panics if not
func (r *EncryptionGroup) MustExists(req *EncryptionGroupSearchParams) bool {
	return r.MustExistsWithContext(r.Untyped.GetCtx(), req)
}

// MustExistsWithContext checks if a encryptiongroup exists and panics if not using provided context
func (r *EncryptionGroup) MustExistsWithContext(ctx context.Context, req *EncryptionGroupSearchParams) bool {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].MustExistsWithContext(ctx, params)
}

// -----------------------------------------------------
// EXTRA METHODS
// -----------------------------------------------------

// EncryptionGroupDeactivateEncryptionGroupWithContext_POST
// method: POST
// url: /encryptiongroups/{id}/deactivate_encryption_group/
// summary: Deactivate encryption group.
func (r *EncryptionGroup) EncryptionGroupDeactivateEncryptionGroupWithContext_POST(ctx context.Context, id any) error {
	resourcePath := core.BuildResourcePathWithID("encryptiongroups", id, "deactivate_encryption_group")

	var reqParams core.Params
	var reqBody core.Params

	_, err := core.Request[core.EmptyRecord](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodPost, resourcePath, reqParams, reqBody)
	return err

}

// EncryptionGroupDeactivateEncryptionGroup_POST
// method: POST
// url: /encryptiongroups/{id}/deactivate_encryption_group/
// summary: Deactivate encryption group.
func (r *EncryptionGroup) EncryptionGroupDeactivateEncryptionGroup_POST(id any) error {
	return r.EncryptionGroupDeactivateEncryptionGroupWithContext_POST(r.Untyped.GetCtx(), id)
}

// EncryptionGroupReinstateEncryptionGroupWithContext_POST
// method: POST
// url: /encryptiongroups/{id}/reinstate_encryption_group/
// summary: Reinstate Encryption Group
func (r *EncryptionGroup) EncryptionGroupReinstateEncryptionGroupWithContext_POST(ctx context.Context, id any) error {
	resourcePath := core.BuildResourcePathWithID("encryptiongroups", id, "reinstate_encryption_group")

	var reqParams core.Params
	var reqBody core.Params

	_, err := core.Request[core.EmptyRecord](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodPost, resourcePath, reqParams, reqBody)
	return err

}

// EncryptionGroupReinstateEncryptionGroup_POST
// method: POST
// url: /encryptiongroups/{id}/reinstate_encryption_group/
// summary: Reinstate Encryption Group
func (r *EncryptionGroup) EncryptionGroupReinstateEncryptionGroup_POST(id any) error {
	return r.EncryptionGroupReinstateEncryptionGroupWithContext_POST(r.Untyped.GetCtx(), id)
}

// EncryptionGroupRevokeEncryptionGroupWithContext_POST
// method: POST
// url: /encryptiongroups/{id}/revoke_encryption_group/
// summary: Revoke Encryption Group
func (r *EncryptionGroup) EncryptionGroupRevokeEncryptionGroupWithContext_POST(ctx context.Context, id any) error {
	resourcePath := core.BuildResourcePathWithID("encryptiongroups", id, "revoke_encryption_group")

	var reqParams core.Params
	var reqBody core.Params

	_, err := core.Request[core.EmptyRecord](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodPost, resourcePath, reqParams, reqBody)
	return err

}

// EncryptionGroupRevokeEncryptionGroup_POST
// method: POST
// url: /encryptiongroups/{id}/revoke_encryption_group/
// summary: Revoke Encryption Group
func (r *EncryptionGroup) EncryptionGroupRevokeEncryptionGroup_POST(id any) error {
	return r.EncryptionGroupRevokeEncryptionGroupWithContext_POST(r.Untyped.GetCtx(), id)
}

// EncryptionGroupRotateEncryptionGroupKeyWithContext_POST
// method: POST
// url: /encryptiongroups/{id}/rotate_encryption_group_key/
// summary: Rotate Encryption Group Key
func (r *EncryptionGroup) EncryptionGroupRotateEncryptionGroupKeyWithContext_POST(ctx context.Context, id any) error {
	resourcePath := core.BuildResourcePathWithID("encryptiongroups", id, "rotate_encryption_group_key")

	var reqParams core.Params
	var reqBody core.Params

	_, err := core.Request[core.EmptyRecord](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodPost, resourcePath, reqParams, reqBody)
	return err

}

// EncryptionGroupRotateEncryptionGroupKey_POST
// method: POST
// url: /encryptiongroups/{id}/rotate_encryption_group_key/
// summary: Rotate Encryption Group Key
func (r *EncryptionGroup) EncryptionGroupRotateEncryptionGroupKey_POST(id any) error {
	return r.EncryptionGroupRotateEncryptionGroupKeyWithContext_POST(r.Untyped.GetCtx(), id)
}
