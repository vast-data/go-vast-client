// Code generated by generate-typed-resources. DO NOT EDIT.
// Template: LIST|READ|UPDATE|DELETE

package typed

import (
	"context"
	"net/http"
	"time"

	"github.com/vast-data/go-vast-client/core"
	"github.com/vast-data/go-vast-client/resources/untyped"
)

// -----------------------------------------------------
// RESOURCE TYPE
// -----------------------------------------------------

// Nvram represents a typed resource for nvram operations
type Nvram struct {
	*core.TypedVastResource
}

// -----------------------------------------------------
// SEARCH PARAMS
// -----------------------------------------------------

// NvramSearchParams represents the search parameters for Nvram operations
type NvramSearchParams struct {
	FwVersion string `json:"fw_version,omitempty" yaml:"fw_version,omitempty" required:"false" doc:"Filter by NVRAM firmware version"`
	Guid      string `json:"guid,omitempty" yaml:"guid,omitempty" required:"false" doc:"Global unique ID"`
	Model     string `json:"model,omitempty" yaml:"model,omitempty" required:"false" doc:"Filter by NVRAM model"`
	Name      string `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:""`
	Sn        string `json:"sn,omitempty" yaml:"sn,omitempty" required:"false" doc:"Filter by NVRAM serial number"`
	State     string `json:"state,omitempty" yaml:"state,omitempty" required:"false" doc:"Filter by NVRAM state"`

	// RawData allows passing arbitrary search parameters as key-value pairs.
	//
	// Use this field when you need query parameters that are not covered by the typed fields above.
	// This is particularly useful for:
	//   - Dynamic filter operations (e.g., "path__contains", "name__icontains")
	//   - Django-style query filters
	//   - Custom backend-specific parameters
	//
	// Example:
	//   params := &NvramSearchParams{
	//       RawData: core.Params{"path__contains": "/foo", "name__icontains": "bar"},
	//   }
	//
	// Note: You can use either the typed fields or RawData, or combine both.
	RawData core.Params `json:"-" yaml:"-"`
}

// -----------------------------------------------------
// MODELS
// -----------------------------------------------------

// NvramDetailsModel represents the detailed model returned by GET/List operations
// Type alias to component definition: #/components/schemas/NVRAM
type NvramDetailsModel = Component_NVRAM

// NvramEditModel represents the model returned by Update operations
// Type alias to component definition: #/components/schemas/AsyncTaskInResponse
type NvramEditModel = Component_AsyncTaskInResponse

// -----------------------------------------------------
// LIST
// -----------------------------------------------------

// List retrieves multiple nvrams with typed request/response
// summary: List NVRAMs
func (r *Nvram) List(req *NvramSearchParams) ([]*NvramDetailsModel, error) {
	return r.ListWithContext(r.Untyped.GetCtx(), req)
}

// ListWithContext retrieves multiple nvrams with typed request/response using provided context
// summary: List NVRAMs
func (r *Nvram) ListWithContext(ctx context.Context, req *NvramSearchParams) ([]*NvramDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.GetResourceMap()[r.GetResourceType()].ListWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response []*NvramDetailsModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// Get retrieves a single nvram with typed request/response
// summary: List NVRAMs
func (r *Nvram) Get(req *NvramSearchParams) (*NvramDetailsModel, error) {
	return r.GetWithContext(r.Untyped.GetCtx(), req)
}

// GetWithContext retrieves a single nvram with typed request/response using provided context
// summary: List NVRAMs
func (r *Nvram) GetWithContext(ctx context.Context, req *NvramSearchParams) (*NvramDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response NvramDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// READ
// -----------------------------------------------------

// GetById retrieves a single nvram by ID
// summary: Return Details of an NVRAM
func (r *Nvram) GetById(id any) (*NvramDetailsModel, error) {
	return r.GetByIdWithContext(r.Untyped.GetCtx(), id)
}

// GetByIdWithContext retrieves a single nvram by ID using provided context
// summary: Return Details of an NVRAM
func (r *Nvram) GetByIdWithContext(ctx context.Context, id any) (*NvramDetailsModel, error) {
	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetByIdWithContext(ctx, id)
	if err != nil {
		return nil, err
	}

	var response NvramDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// UPDATE
// -----------------------------------------------------

// Update updates an existing nvram with typed request/response
//
// Parameters:
//   - enabled: True for activate, False for deactivate
func (r *Nvram) Update(id any, enabled bool) (*NvramEditModel, error) {
	return r.UpdateWithContext(r.Untyped.GetCtx(), id, enabled)
}

// UpdateWithContext updates an existing nvram with typed request/response using provided context
//
// Parameters:
//   - enabled: True for activate, False for deactivate
func (r *Nvram) UpdateWithContext(ctx context.Context, id any, enabled bool) (*NvramEditModel, error) {
	params := core.Params{
		"enabled": enabled,
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].UpdateWithContext(ctx, id, params)
	if err != nil {
		return nil, err
	}

	var response NvramEditModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// DELETE
// -----------------------------------------------------

// Delete deletes a nvram with search parameters
func (r *Nvram) Delete(req *NvramSearchParams) error {
	return r.DeleteWithContext(r.Untyped.GetCtx(), req)
}

// DeleteWithContext deletes a nvram with search parameters using provided context
func (r *Nvram) DeleteWithContext(ctx context.Context, req *NvramSearchParams) error {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return err
	}
	_, err = r.Untyped.GetResourceMap()[r.GetResourceType()].DeleteWithContext(ctx, params, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteById deletes a nvram by ID
func (r *Nvram) DeleteById(id any) error {
	return r.DeleteByIdWithContext(r.Untyped.GetCtx(), id)
}

// DeleteByIdWithContext deletes a nvram by ID using provided context
func (r *Nvram) DeleteByIdWithContext(ctx context.Context, id any) error {
	_, err := r.Untyped.GetResourceMap()[r.GetResourceType()].DeleteByIdWithContext(ctx, id, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// Exists checks if a nvram exists
func (r *Nvram) Exists(req *NvramSearchParams) (bool, error) {
	return r.ExistsWithContext(r.Untyped.GetCtx(), req)
}

// ExistsWithContext checks if a nvram exists using provided context
func (r *Nvram) ExistsWithContext(ctx context.Context, req *NvramSearchParams) (bool, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].ExistsWithContext(ctx, params)
}

// MustExists checks if a nvram exists and panics if not
func (r *Nvram) MustExists(req *NvramSearchParams) bool {
	return r.MustExistsWithContext(r.Untyped.GetCtx(), req)
}

// MustExistsWithContext checks if a nvram exists and panics if not using provided context
func (r *Nvram) MustExistsWithContext(ctx context.Context, req *NvramSearchParams) bool {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].MustExistsWithContext(ctx, params)
}

// -----------------------------------------------------
// EXTRA METHODS
// -----------------------------------------------------

// NvramControlLedWithContext_PATCH
// method: PATCH
// url: /nvrams/{id}/control_led/
// summary: Turn SCM SLED identification LED on and off
//
// Parameters:
//   - control (body): LED state
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (r *Nvram) NvramControlLedWithContext_PATCH(ctx context.Context, id any, control string, waitTimeout time.Duration) (*untyped.AsyncResult, error) {
	resourcePath := core.BuildResourcePathWithID("nvrams", id, "control_led")

	var reqParams core.Params
	reqBody := core.Params{}
	if control != "" {
		reqBody["control"] = control
	}

	result, err := core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodPatch, resourcePath, reqParams, reqBody)
	if err != nil {
		return nil, err
	}

	asyncResult, _, err := untyped.MaybeWaitAsyncResultWithContext(ctx, result, r.Untyped, waitTimeout)
	return asyncResult, err

}

// NvramControlLed_PATCH
// method: PATCH
// url: /nvrams/{id}/control_led/
// summary: Turn SCM SLED identification LED on and off
//
// Parameters:
//   - control (body): LED state
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (r *Nvram) NvramControlLed_PATCH(id any, control string, waitTimeout time.Duration) (*untyped.AsyncResult, error) {
	return r.NvramControlLedWithContext_PATCH(r.Untyped.GetCtx(), id, control, waitTimeout)
}

// NvramFormatWithContext_PATCH
// method: PATCH
// url: /nvrams/{id}/format/
// summary: Format NVRAM
//
// Parameters:
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (r *Nvram) NvramFormatWithContext_PATCH(ctx context.Context, id any, waitTimeout time.Duration) (*untyped.AsyncResult, error) {
	resourcePath := core.BuildResourcePathWithID("nvrams", id, "format")

	var reqParams core.Params
	var reqBody core.Params

	result, err := core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodPatch, resourcePath, reqParams, reqBody)
	if err != nil {
		return nil, err
	}

	asyncResult, _, err := untyped.MaybeWaitAsyncResultWithContext(ctx, result, r.Untyped, waitTimeout)
	return asyncResult, err

}

// NvramFormat_PATCH
// method: PATCH
// url: /nvrams/{id}/format/
// summary: Format NVRAM
//
// Parameters:
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (r *Nvram) NvramFormat_PATCH(id any, waitTimeout time.Duration) (*untyped.AsyncResult, error) {
	return r.NvramFormatWithContext_PATCH(r.Untyped.GetCtx(), id, waitTimeout)
}
