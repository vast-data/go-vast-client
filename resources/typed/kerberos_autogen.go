// Code generated by generate-typed-resources. DO NOT EDIT.
// Template: CREATE|LIST|READ|UPDATE|DELETE

package typed

import (
	"context"
	"net/http"

	"github.com/vast-data/go-vast-client/core"
)

// -----------------------------------------------------
// RESOURCE TYPE
// -----------------------------------------------------

// Kerberos represents a typed resource for kerberos operations
type Kerberos struct {
	*core.TypedVastResource
}

// -----------------------------------------------------
// SEARCH PARAMS
// -----------------------------------------------------

// KerberosSearchParams represents the search parameters for Kerberos operations
type KerberosSearchParams struct {
	Guid string `json:"guid,omitempty" yaml:"guid,omitempty" required:"false" doc:""`

	// RawData allows passing arbitrary search parameters as key-value pairs.
	//
	// Use this field when you need query parameters that are not covered by the typed fields above.
	// This is particularly useful for:
	//   - Dynamic filter operations (e.g., "path__contains", "name__icontains")
	//   - Django-style query filters
	//   - Custom backend-specific parameters
	//
	// Example:
	//   params := &KerberosSearchParams{
	//       RawData: core.Params{"path__contains": "/foo", "name__icontains": "bar"},
	//   }
	//
	// Note: You can use either the typed fields or RawData, or combine both.
	RawData core.Params `json:"-" yaml:"-"`
}

// -----------------------------------------------------
// REQUEST BODY
// -----------------------------------------------------

// KerberosRequestBody represents the request body for Kerberos operations
type KerberosRequestBody struct {
	KadminServers     *[]string `json:"kadmin_servers,omitempty" yaml:"kadmin_servers,omitempty" required:"true" doc:""`
	Kdc               *[]string `json:"kdc,omitempty" yaml:"kdc,omitempty" required:"true" doc:""`
	Realm             string    `json:"realm,omitempty" yaml:"realm,omitempty" required:"true" doc:""`
	ServicePrincipals *[]string `json:"service_principals,omitempty" yaml:"service_principals,omitempty" required:"true" doc:"Kerberos Provider Service Principals"`
}

// -----------------------------------------------------
// MODELS
// -----------------------------------------------------

// KerberosDetailsModel represents the detailed model returned by GET/List operations
// Type alias to component definition: #/components/schemas/Kerberos
type KerberosDetailsModel = Component_Kerberos

// KerberosUpsertModel represents the model returned by Create/Update operations
// Type alias to component definition: #/components/schemas/Kerberos
type KerberosUpsertModel = Component_Kerberos

// -----------------------------------------------------
// LIST
// -----------------------------------------------------

// List retrieves multiple kerbeross with typed request/response
// summary: List Kerberos Providers
func (r *Kerberos) List(req *KerberosSearchParams) ([]*KerberosDetailsModel, error) {
	return r.ListWithContext(r.Untyped.GetCtx(), req)
}

// ListWithContext retrieves multiple kerbeross with typed request/response using provided context
// summary: List Kerberos Providers
func (r *Kerberos) ListWithContext(ctx context.Context, req *KerberosSearchParams) ([]*KerberosDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.GetResourceMap()[r.GetResourceType()].ListWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response []*KerberosDetailsModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// Get retrieves a single kerberos with typed request/response
// summary: List Kerberos Providers
func (r *Kerberos) Get(req *KerberosSearchParams) (*KerberosDetailsModel, error) {
	return r.GetWithContext(r.Untyped.GetCtx(), req)
}

// GetWithContext retrieves a single kerberos with typed request/response using provided context
// summary: List Kerberos Providers
func (r *Kerberos) GetWithContext(ctx context.Context, req *KerberosSearchParams) (*KerberosDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response KerberosDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// READ
// -----------------------------------------------------

// GetById retrieves a single kerberos by ID
// summary: Return Details of a Kerberos Provider
func (r *Kerberos) GetById(id any) (*KerberosDetailsModel, error) {
	return r.GetByIdWithContext(r.Untyped.GetCtx(), id)
}

// GetByIdWithContext retrieves a single kerberos by ID using provided context
// summary: Return Details of a Kerberos Provider
func (r *Kerberos) GetByIdWithContext(ctx context.Context, id any) (*KerberosDetailsModel, error) {
	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetByIdWithContext(ctx, id)
	if err != nil {
		return nil, err
	}

	var response KerberosDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// CREATE
// -----------------------------------------------------

// Create creates a new kerberos with typed request/response
// summary: Create a new Kerberos provider
func (r *Kerberos) Create(req *KerberosRequestBody) (*KerberosUpsertModel, error) {
	return r.CreateWithContext(r.Untyped.GetCtx(), req)
}

// CreateWithContext creates a new kerberos with typed request/response using provided context
// summary: Create a new Kerberos provider
func (r *Kerberos) CreateWithContext(ctx context.Context, req *KerberosRequestBody) (*KerberosUpsertModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].CreateWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response KerberosUpsertModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// UPDATE
// -----------------------------------------------------

// Update updates an existing kerberos with typed request/response
func (r *Kerberos) Update(id any, req *KerberosRequestBody) (*KerberosUpsertModel, error) {
	return r.UpdateWithContext(r.Untyped.GetCtx(), id, req)
}

// UpdateWithContext updates an existing kerberos with typed request/response using provided context
func (r *Kerberos) UpdateWithContext(ctx context.Context, id any, req *KerberosRequestBody) (*KerberosUpsertModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].UpdateWithContext(ctx, id, params)
	if err != nil {
		return nil, err
	}

	var response KerberosUpsertModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// DELETE
// -----------------------------------------------------

// Delete deletes a kerberos with search parameters
func (r *Kerberos) Delete(req *KerberosSearchParams) error {
	return r.DeleteWithContext(r.Untyped.GetCtx(), req)
}

// DeleteWithContext deletes a kerberos with search parameters using provided context
func (r *Kerberos) DeleteWithContext(ctx context.Context, req *KerberosSearchParams) error {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return err
	}
	_, err = r.Untyped.GetResourceMap()[r.GetResourceType()].DeleteWithContext(ctx, params, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteById deletes a kerberos by ID
// summary: Delete an existing Kerberos Provider
//
// Parameters:
//   - id: Kerberos Provider ID
func (r *Kerberos) DeleteById(id any) error {
	return r.DeleteByIdWithContext(r.Untyped.GetCtx(), id)
}

// DeleteByIdWithContext deletes a kerberos by ID using provided context
// summary: Delete an existing Kerberos Provider
//
// Parameters:
//   - id: Kerberos Provider ID
func (r *Kerberos) DeleteByIdWithContext(ctx context.Context, id any) error {
	_, err := r.Untyped.GetResourceMap()[r.GetResourceType()].DeleteByIdWithContext(ctx, id, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// -----------------------------------------------------
// ENSURE
// -----------------------------------------------------

// Ensure ensures a kerberos exists with typed response
func (r *Kerberos) Ensure(searchParams *KerberosSearchParams, body *KerberosRequestBody) (*KerberosUpsertModel, error) {
	return r.EnsureWithContext(r.Untyped.GetCtx(), searchParams, body)
}

// EnsureWithContext ensures a kerberos exists with typed response using provided context
func (r *Kerberos) EnsureWithContext(ctx context.Context, searchParams *KerberosSearchParams, body *KerberosRequestBody) (*KerberosUpsertModel, error) {
	searchParamsConverted, err := core.NewParamsFromStruct(searchParams)
	if err != nil {
		return nil, err
	}
	bodyConverted, err := core.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].EnsureWithContext(ctx, searchParamsConverted, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response KerberosUpsertModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Exists checks if a kerberos exists
func (r *Kerberos) Exists(req *KerberosSearchParams) (bool, error) {
	return r.ExistsWithContext(r.Untyped.GetCtx(), req)
}

// ExistsWithContext checks if a kerberos exists using provided context
func (r *Kerberos) ExistsWithContext(ctx context.Context, req *KerberosSearchParams) (bool, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].ExistsWithContext(ctx, params)
}

// MustExists checks if a kerberos exists and panics if not
func (r *Kerberos) MustExists(req *KerberosSearchParams) bool {
	return r.MustExistsWithContext(r.Untyped.GetCtx(), req)
}

// MustExistsWithContext checks if a kerberos exists and panics if not using provided context
func (r *Kerberos) MustExistsWithContext(ctx context.Context, req *KerberosSearchParams) bool {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].MustExistsWithContext(ctx, params)
}

// -----------------------------------------------------
// EXTRA METHODS
// -----------------------------------------------------

// KerberosKeytabModel_ServicePrincipalsItem represents a nested type for Kerberos extra method response
type KerberosKeytabModel_ServicePrincipalsItem struct {
	Message string `json:"message,omitempty" yaml:"message,omitempty" required:"false" doc:""`
	Name    string `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:""`
	Status  string `json:"status,omitempty" yaml:"status,omitempty" required:"false" doc:""`
}

// KerberosKeytab_POST_Model represents the response model for KerberosKeytab
type KerberosKeytab_POST_Model struct {
	ServicePrincipals *[]KerberosKeytabModel_ServicePrincipalsItem `json:"service_principals,omitempty" yaml:"service_principals,omitempty" required:"false" doc:""`
}

// KerberosKeytabWithContext_POST
// method: POST
// url: /kerberos/{id}/keytab/
// summary: Generate keytab for the Kerberos Provider
//
// Parameters:
//   - adminPassword (body): Request parameter
//   - adminUsername (body): Request parameter
func (r *Kerberos) KerberosKeytabWithContext_POST(ctx context.Context, id any, adminPassword string, adminUsername string) (*KerberosKeytab_POST_Model, error) {
	resourcePath := core.BuildResourcePathWithID("kerberos", id, "keytab")

	var reqParams core.Params
	reqBody := core.Params{}
	reqBody["admin_password"] = adminPassword
	reqBody["admin_username"] = adminUsername

	record, err := core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodPost, resourcePath, reqParams, reqBody)
	if err != nil {
		return nil, err
	}

	var response KerberosKeytab_POST_Model
	if err := record.Fill(&response); err != nil {
		return nil, err
	}
	return &response, nil

}

// KerberosKeytab_POST
// method: POST
// url: /kerberos/{id}/keytab/
// summary: Generate keytab for the Kerberos Provider
//
// Parameters:
//   - adminPassword (body): Request parameter
//   - adminUsername (body): Request parameter
func (r *Kerberos) KerberosKeytab_POST(id any, adminPassword string, adminUsername string) (*KerberosKeytab_POST_Model, error) {
	return r.KerberosKeytabWithContext_POST(r.Untyped.GetCtx(), id, adminPassword, adminUsername)
}

// KerberosKeytab_PUT_Model represents the response model for KerberosKeytab
type KerberosKeytab_PUT_Model struct {
	ServicePrincipals *[]KerberosKeytabModel_ServicePrincipalsItem `json:"service_principals,omitempty" yaml:"service_principals,omitempty" required:"false" doc:""`
}

// KerberosKeytabWithContext_PUT
// method: PUT
// url: /kerberos/{id}/keytab/
// summary: Upload keytab for the Kerberos Provider
func (r *Kerberos) KerberosKeytabWithContext_PUT(ctx context.Context, id any) (*KerberosKeytab_PUT_Model, error) {
	resourcePath := core.BuildResourcePathWithID("kerberos", id, "keytab")

	var reqParams core.Params
	var reqBody core.Params

	record, err := core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodPut, resourcePath, reqParams, reqBody)
	if err != nil {
		return nil, err
	}

	var response KerberosKeytab_PUT_Model
	if err := record.Fill(&response); err != nil {
		return nil, err
	}
	return &response, nil

}

// KerberosKeytab_PUT
// method: PUT
// url: /kerberos/{id}/keytab/
// summary: Upload keytab for the Kerberos Provider
func (r *Kerberos) KerberosKeytab_PUT(id any) (*KerberosKeytab_PUT_Model, error) {
	return r.KerberosKeytabWithContext_PUT(r.Untyped.GetCtx(), id)
}
