// Code generated by generate-typed-resources. DO NOT EDIT.
// Template: CREATE|LIST|READ|UPDATE|DELETE

package typed

import (
	"context"

	"github.com/vast-data/go-vast-client/core"
)

// -----------------------------------------------------
// RESOURCE TYPE
// -----------------------------------------------------

// BGPConfig represents a typed resource for bgpconfig operations
type BGPConfig struct {
	*core.TypedVastResource
}

// -----------------------------------------------------
// SEARCH PARAMS
// -----------------------------------------------------

// BGPConfigSearchParams represents the search parameters for BGPConfig operations
type BGPConfigSearchParams struct {
	Name string `json:"name,omitempty" yaml:"name,omitempty" required:"true" doc:""`
	Guid string `json:"guid,omitempty" yaml:"guid,omitempty" required:"false" doc:""`

	// RawData allows passing arbitrary search parameters as key-value pairs.
	//
	// Use this field when you need query parameters that are not covered by the typed fields above.
	// This is particularly useful for:
	//   - Dynamic filter operations (e.g., "path__contains", "name__icontains")
	//   - Django-style query filters
	//   - Custom backend-specific parameters
	//
	// Example:
	//   params := &BGPConfigSearchParams{
	//       RawData: core.Params{"path__contains": "/foo", "name__icontains": "bar"},
	//   }
	//
	// Note: You can use either the typed fields or RawData, or combine both.
	RawData core.Params `json:"-" yaml:"-"`
}

// -----------------------------------------------------
// REQUEST BODY
// -----------------------------------------------------

// BgpconfigRequestBody_RacksItem represents a nested type for request body
type BgpconfigRequestBody_RacksItem struct {
	IpRanges *[]string `json:"ip_ranges,omitempty" yaml:"ip_ranges,omitempty" required:"false" doc:""`
	RackId   int64     `json:"rack_id,omitempty" yaml:"rack_id,omitempty" required:"false" doc:""`
}

// BGPConfigRequestBody represents the request body for BGPConfig operations
type BGPConfigRequestBody struct {
	ExternalAsn                int64                             `json:"external_asn,omitempty" yaml:"external_asn,omitempty" required:"true" doc:""`
	Name                       string                            `json:"name,omitempty" yaml:"name,omitempty" required:"true" doc:""`
	SelfAsn                    int64                             `json:"self_asn,omitempty" yaml:"self_asn,omitempty" required:"true" doc:""`
	AnyExternalAsn             bool                              `json:"any_external_asn,omitempty" yaml:"any_external_asn,omitempty" required:"false" doc:""`
	BfdEnabled                 bool                              `json:"bfd_enabled,omitempty" yaml:"bfd_enabled,omitempty" required:"false" doc:""`
	Guid                       string                            `json:"guid,omitempty" yaml:"guid,omitempty" required:"false" doc:""`
	Id                         int64                             `json:"id,omitempty" yaml:"id,omitempty" required:"false" doc:""`
	IpsRepresent               string                            `json:"ips_represent,omitempty" yaml:"ips_represent,omitempty" required:"false" doc:"IP address representation (odd/even)"`
	Md5Password                string                            `json:"md5_password,omitempty" yaml:"md5_password,omitempty" required:"false" doc:""`
	Method                     string                            `json:"method,omitempty" yaml:"method,omitempty" required:"false" doc:""`
	Racks                      *[]BgpconfigRequestBody_RacksItem `json:"racks,omitempty" yaml:"racks,omitempty" required:"false" doc:""`
	Status                     string                            `json:"status,omitempty" yaml:"status,omitempty" required:"false" doc:""`
	SubnetBits                 int64                             `json:"subnet_bits,omitempty" yaml:"subnet_bits,omitempty" required:"false" doc:""`
	VipMigrationGracePeriodSec int64                             `json:"vip_migration_grace_period_sec,omitempty" yaml:"vip_migration_grace_period_sec,omitempty" required:"false" doc:""`
	Vlan                       int64                             `json:"vlan,omitempty" yaml:"vlan,omitempty" required:"false" doc:""`
}

// -----------------------------------------------------
// MODELS
// -----------------------------------------------------

// BGPConfigDetailsModel represents the detailed model returned by GET/List operations
// Type alias to component definition: #/components/schemas/BGPConfig
type BGPConfigDetailsModel = Component_BGPConfig

// BGPConfigUpsertModel represents the model returned by Create/Update operations
// Type alias to component definition: #/components/schemas/BGPConfig
type BGPConfigUpsertModel = Component_BGPConfig

// -----------------------------------------------------
// LIST
// -----------------------------------------------------

// List retrieves multiple bgpconfigs with typed request/response
// summary: List BGP Configurations
func (r *BGPConfig) List(req *BGPConfigSearchParams) ([]*BGPConfigDetailsModel, error) {
	return r.ListWithContext(r.Untyped.GetCtx(), req)
}

// ListWithContext retrieves multiple bgpconfigs with typed request/response using provided context
// summary: List BGP Configurations
func (r *BGPConfig) ListWithContext(ctx context.Context, req *BGPConfigSearchParams) ([]*BGPConfigDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.GetResourceMap()[r.GetResourceType()].ListWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response []*BGPConfigDetailsModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// Get retrieves a single bgpconfig with typed request/response
// summary: List BGP Configurations
func (r *BGPConfig) Get(req *BGPConfigSearchParams) (*BGPConfigDetailsModel, error) {
	return r.GetWithContext(r.Untyped.GetCtx(), req)
}

// GetWithContext retrieves a single bgpconfig with typed request/response using provided context
// summary: List BGP Configurations
func (r *BGPConfig) GetWithContext(ctx context.Context, req *BGPConfigSearchParams) (*BGPConfigDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response BGPConfigDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// READ
// -----------------------------------------------------

// GetById retrieves a single bgpconfig by ID
// summary: Return Details of a BGP Configuration
func (r *BGPConfig) GetById(id any) (*BGPConfigDetailsModel, error) {
	return r.GetByIdWithContext(r.Untyped.GetCtx(), id)
}

// GetByIdWithContext retrieves a single bgpconfig by ID using provided context
// summary: Return Details of a BGP Configuration
func (r *BGPConfig) GetByIdWithContext(ctx context.Context, id any) (*BGPConfigDetailsModel, error) {
	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetByIdWithContext(ctx, id)
	if err != nil {
		return nil, err
	}

	var response BGPConfigDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// CREATE
// -----------------------------------------------------

// Create creates a new bgpconfig with typed request/response
// summary: Create BGP Config
func (r *BGPConfig) Create(req *BGPConfigRequestBody) (*BGPConfigUpsertModel, error) {
	return r.CreateWithContext(r.Untyped.GetCtx(), req)
}

// CreateWithContext creates a new bgpconfig with typed request/response using provided context
// summary: Create BGP Config
func (r *BGPConfig) CreateWithContext(ctx context.Context, req *BGPConfigRequestBody) (*BGPConfigUpsertModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].CreateWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response BGPConfigUpsertModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// UPDATE
// -----------------------------------------------------

// Update updates an existing bgpconfig with typed request/response
func (r *BGPConfig) Update(id any, req *BGPConfigRequestBody) (*BGPConfigUpsertModel, error) {
	return r.UpdateWithContext(r.Untyped.GetCtx(), id, req)
}

// UpdateWithContext updates an existing bgpconfig with typed request/response using provided context
func (r *BGPConfig) UpdateWithContext(ctx context.Context, id any, req *BGPConfigRequestBody) (*BGPConfigUpsertModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].UpdateWithContext(ctx, id, params)
	if err != nil {
		return nil, err
	}

	var response BGPConfigUpsertModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// DELETE
// -----------------------------------------------------

// Delete deletes a bgpconfig with search parameters
func (r *BGPConfig) Delete(req *BGPConfigSearchParams) error {
	return r.DeleteWithContext(r.Untyped.GetCtx(), req)
}

// DeleteWithContext deletes a bgpconfig with search parameters using provided context
func (r *BGPConfig) DeleteWithContext(ctx context.Context, req *BGPConfigSearchParams) error {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return err
	}
	_, err = r.Untyped.GetResourceMap()[r.GetResourceType()].DeleteWithContext(ctx, params, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteById deletes a bgpconfig by ID
// summary: Delete BGP Config
//
// Parameters:
//   - id: BGP Config ID
func (r *BGPConfig) DeleteById(id any) error {
	return r.DeleteByIdWithContext(r.Untyped.GetCtx(), id)
}

// DeleteByIdWithContext deletes a bgpconfig by ID using provided context
// summary: Delete BGP Config
//
// Parameters:
//   - id: BGP Config ID
func (r *BGPConfig) DeleteByIdWithContext(ctx context.Context, id any) error {
	_, err := r.Untyped.GetResourceMap()[r.GetResourceType()].DeleteByIdWithContext(ctx, id, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// -----------------------------------------------------
// ENSURE
// -----------------------------------------------------

// Ensure ensures a bgpconfig exists with typed response
func (r *BGPConfig) Ensure(searchParams *BGPConfigSearchParams, body *BGPConfigRequestBody) (*BGPConfigUpsertModel, error) {
	return r.EnsureWithContext(r.Untyped.GetCtx(), searchParams, body)
}

// EnsureWithContext ensures a bgpconfig exists with typed response using provided context
func (r *BGPConfig) EnsureWithContext(ctx context.Context, searchParams *BGPConfigSearchParams, body *BGPConfigRequestBody) (*BGPConfigUpsertModel, error) {
	searchParamsConverted, err := core.NewParamsFromStruct(searchParams)
	if err != nil {
		return nil, err
	}
	bodyConverted, err := core.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].EnsureWithContext(ctx, searchParamsConverted, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response BGPConfigUpsertModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Exists checks if a bgpconfig exists
func (r *BGPConfig) Exists(req *BGPConfigSearchParams) (bool, error) {
	return r.ExistsWithContext(r.Untyped.GetCtx(), req)
}

// ExistsWithContext checks if a bgpconfig exists using provided context
func (r *BGPConfig) ExistsWithContext(ctx context.Context, req *BGPConfigSearchParams) (bool, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].ExistsWithContext(ctx, params)
}

// MustExists checks if a bgpconfig exists and panics if not
func (r *BGPConfig) MustExists(req *BGPConfigSearchParams) bool {
	return r.MustExistsWithContext(r.Untyped.GetCtx(), req)
}

// MustExistsWithContext checks if a bgpconfig exists and panics if not using provided context
func (r *BGPConfig) MustExistsWithContext(ctx context.Context, req *BGPConfigSearchParams) bool {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].MustExistsWithContext(ctx, params)
}
