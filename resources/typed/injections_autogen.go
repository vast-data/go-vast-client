// Code generated by generate-typed-resources. DO NOT EDIT.
// Template: LIST|READ|DELETE

package typed

import (
	"context"

	"github.com/vast-data/go-vast-client/core"
)

// -----------------------------------------------------
// RESOURCE TYPE
// -----------------------------------------------------

// Injections represents a typed resource for injections operations
type Injections struct {
	*core.TypedVastResource
}

// -----------------------------------------------------
// SEARCH PARAMS
// -----------------------------------------------------

// InjectionsSearchParams represents the search parameters for Injections operations
type InjectionsSearchParams struct {
	InjectionType string `json:"injection_type,omitempty" yaml:"injection_type,omitempty" required:"false" doc:"Injection type"`
	Name          string `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:"Injection name"`

	// RawData allows passing arbitrary search parameters as key-value pairs.
	//
	// Use this field when you need query parameters that are not covered by the typed fields above.
	// This is particularly useful for:
	//   - Dynamic filter operations (e.g., "path__contains", "name__icontains")
	//   - Django-style query filters
	//   - Custom backend-specific parameters
	//
	// Example:
	//   params := &InjectionsSearchParams{
	//       RawData: core.Params{"path__contains": "/foo", "name__icontains": "bar"},
	//   }
	//
	// Note: You can use either the typed fields or RawData, or combine both.
	RawData core.Params `json:"-" yaml:"-"`
}

// -----------------------------------------------------
// MODELS
// -----------------------------------------------------

// InjectionsDetailsModel represents the detailed model returned by GET/List operations
// Type alias to component definition: #/components/schemas/Injection
type InjectionsDetailsModel = Component_Injection

// -----------------------------------------------------
// LIST
// -----------------------------------------------------

// List retrieves multiple injectionss with typed request/response
// summary: List injections
func (r *Injections) List(req *InjectionsSearchParams) ([]*InjectionsDetailsModel, error) {
	return r.ListWithContext(r.Untyped.GetCtx(), req)
}

// ListWithContext retrieves multiple injectionss with typed request/response using provided context
// summary: List injections
func (r *Injections) ListWithContext(ctx context.Context, req *InjectionsSearchParams) ([]*InjectionsDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.GetResourceMap()[r.GetResourceType()].ListWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response []*InjectionsDetailsModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// Get retrieves a single injections with typed request/response
// summary: List injections
func (r *Injections) Get(req *InjectionsSearchParams) (*InjectionsDetailsModel, error) {
	return r.GetWithContext(r.Untyped.GetCtx(), req)
}

// GetWithContext retrieves a single injections with typed request/response using provided context
// summary: List injections
func (r *Injections) GetWithContext(ctx context.Context, req *InjectionsSearchParams) (*InjectionsDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response InjectionsDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// READ
// -----------------------------------------------------

// GetById retrieves a single injections by ID
func (r *Injections) GetById(id any) (*InjectionsDetailsModel, error) {
	return r.GetByIdWithContext(r.Untyped.GetCtx(), id)
}

// GetByIdWithContext retrieves a single injections by ID using provided context
func (r *Injections) GetByIdWithContext(ctx context.Context, id any) (*InjectionsDetailsModel, error) {
	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetByIdWithContext(ctx, id)
	if err != nil {
		return nil, err
	}

	var response InjectionsDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// DELETE
// -----------------------------------------------------

// Delete deletes a injections with search parameters
func (r *Injections) Delete(req *InjectionsSearchParams) error {
	return r.DeleteWithContext(r.Untyped.GetCtx(), req)
}

// DeleteWithContext deletes a injections with search parameters using provided context
func (r *Injections) DeleteWithContext(ctx context.Context, req *InjectionsSearchParams) error {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return err
	}
	_, err = r.Untyped.GetResourceMap()[r.GetResourceType()].DeleteWithContext(ctx, params, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteById deletes a injections by ID
func (r *Injections) DeleteById(id any) error {
	return r.DeleteByIdWithContext(r.Untyped.GetCtx(), id)
}

// DeleteByIdWithContext deletes a injections by ID using provided context
func (r *Injections) DeleteByIdWithContext(ctx context.Context, id any) error {
	_, err := r.Untyped.GetResourceMap()[r.GetResourceType()].DeleteByIdWithContext(ctx, id, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// Exists checks if a injections exists
func (r *Injections) Exists(req *InjectionsSearchParams) (bool, error) {
	return r.ExistsWithContext(r.Untyped.GetCtx(), req)
}

// ExistsWithContext checks if a injections exists using provided context
func (r *Injections) ExistsWithContext(ctx context.Context, req *InjectionsSearchParams) (bool, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].ExistsWithContext(ctx, params)
}

// MustExists checks if a injections exists and panics if not
func (r *Injections) MustExists(req *InjectionsSearchParams) bool {
	return r.MustExistsWithContext(r.Untyped.GetCtx(), req)
}

// MustExistsWithContext checks if a injections exists and panics if not using provided context
func (r *Injections) MustExistsWithContext(ctx context.Context, req *InjectionsSearchParams) bool {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].MustExistsWithContext(ctx, params)
}

// -----------------------------------------------------
// GENERATION ISSUES
// -----------------------------------------------------
//   - CREATE operation excluded: POST injections has no response schema and doesn't return 204 NO CONTENT
//   - UPDATE operation excluded: PATCH/PUT /injections/{id}/ has no response schema and doesn't return 204 NO CONTENT
