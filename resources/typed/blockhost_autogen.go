// Code generated by generate-typed-resources. DO NOT EDIT.
// Template: CREATE|LIST|READ|UPDATE|DELETE

package typed

import (
	"context"
	"net/http"
	"time"

	"github.com/vast-data/go-vast-client/core"
	"github.com/vast-data/go-vast-client/resources/untyped"
)

// -----------------------------------------------------
// RESOURCE TYPE
// -----------------------------------------------------

// BlockHost represents a typed resource for blockhost operations
type BlockHost struct {
	*core.TypedVastResource
}

// -----------------------------------------------------
// SEARCH PARAMS
// -----------------------------------------------------

// BlockHostSearchParams represents the search parameters for BlockHost operations
type BlockHostSearchParams struct {
	Name     string `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:"name of the blockhost"`
	Nqn      string `json:"nqn,omitempty" yaml:"nqn,omitempty" required:"false" doc:"NQN of the blockhost"`
	TenantId int64  `json:"tenant_id,omitempty" yaml:"tenant_id,omitempty" required:"false" doc:"Filter by tenant. Specify tenant ID."`

	// RawData allows passing arbitrary search parameters as key-value pairs.
	//
	// Use this field when you need query parameters that are not covered by the typed fields above.
	// This is particularly useful for:
	//   - Dynamic filter operations (e.g., "path__contains", "name__icontains")
	//   - Django-style query filters
	//   - Custom backend-specific parameters
	//
	// Example:
	//   params := &BlockHostSearchParams{
	//       RawData: core.Params{"path__contains": "/foo", "name__icontains": "bar"},
	//   }
	//
	// Note: You can use either the typed fields or RawData, or combine both.
	RawData core.Params `json:"-" yaml:"-"`
}

// -----------------------------------------------------
// REQUEST BODY
// -----------------------------------------------------

// BlockHostRequestBody represents the request body for BlockHost operations
type BlockHostRequestBody struct {
	Name     string            `json:"name,omitempty" yaml:"name,omitempty" required:"true" doc:"The name of the block host. Must be unique on the tenant. Can be duplicated on multiple tenants."`
	Nqn      string            `json:"nqn,omitempty" yaml:"nqn,omitempty" required:"true" doc:"The host's NVMe Qualified Name (NQN), a unique identifier used to identify the host in NVMe operations. Retrieve the NQN from the host."`
	TenantId int64             `json:"tenant_id,omitempty" yaml:"tenant_id,omitempty" required:"true" doc:"The ID of the tenant to which to add the block host. Add the host separately as needed to each tenant."`
	Tags     map[string]string `json:"tags,omitempty" yaml:"tags,omitempty" required:"false" doc:""`
}

// -----------------------------------------------------
// MODELS
// -----------------------------------------------------

// BlockHostDetailsModel represents the detailed model returned by GET/List operations
// Type alias to component definition: #/components/schemas/BlockHost
type BlockHostDetailsModel = Component_BlockHost

// BlockHostUpsertModel represents the model returned by Create/Update operations
// Type alias to component definition: #/components/schemas/BlockHost
type BlockHostUpsertModel = Component_BlockHost

// -----------------------------------------------------
// LIST
// -----------------------------------------------------

// List retrieves multiple blockhosts with typed request/response
// summary: List Block Hosts per Tenant
func (r *BlockHost) List(req *BlockHostSearchParams) ([]*BlockHostDetailsModel, error) {
	return r.ListWithContext(r.Untyped.GetCtx(), req)
}

// ListWithContext retrieves multiple blockhosts with typed request/response using provided context
// summary: List Block Hosts per Tenant
func (r *BlockHost) ListWithContext(ctx context.Context, req *BlockHostSearchParams) ([]*BlockHostDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.GetResourceMap()[r.GetResourceType()].ListWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response []*BlockHostDetailsModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// Get retrieves a single blockhost with typed request/response
// summary: List Block Hosts per Tenant
func (r *BlockHost) Get(req *BlockHostSearchParams) (*BlockHostDetailsModel, error) {
	return r.GetWithContext(r.Untyped.GetCtx(), req)
}

// GetWithContext retrieves a single blockhost with typed request/response using provided context
// summary: List Block Hosts per Tenant
func (r *BlockHost) GetWithContext(ctx context.Context, req *BlockHostSearchParams) (*BlockHostDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response BlockHostDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// READ
// -----------------------------------------------------

// GetById retrieves a single blockhost by ID
// summary: Return Details of a Block Host
func (r *BlockHost) GetById(id any) (*BlockHostDetailsModel, error) {
	return r.GetByIdWithContext(r.Untyped.GetCtx(), id)
}

// GetByIdWithContext retrieves a single blockhost by ID using provided context
// summary: Return Details of a Block Host
func (r *BlockHost) GetByIdWithContext(ctx context.Context, id any) (*BlockHostDetailsModel, error) {
	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetByIdWithContext(ctx, id)
	if err != nil {
		return nil, err
	}

	var response BlockHostDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// CREATE
// -----------------------------------------------------

// Create creates a new blockhost with typed request/response
// summary: Create a Block Host
func (r *BlockHost) Create(req *BlockHostRequestBody) (*BlockHostUpsertModel, error) {
	return r.CreateWithContext(r.Untyped.GetCtx(), req)
}

// CreateWithContext creates a new blockhost with typed request/response using provided context
// summary: Create a Block Host
func (r *BlockHost) CreateWithContext(ctx context.Context, req *BlockHostRequestBody) (*BlockHostUpsertModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].CreateWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response BlockHostUpsertModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// UPDATE
// -----------------------------------------------------

// Update updates an existing blockhost with typed request/response
func (r *BlockHost) Update(id any, req *BlockHostRequestBody) (*BlockHostUpsertModel, error) {
	return r.UpdateWithContext(r.Untyped.GetCtx(), id, req)
}

// UpdateWithContext updates an existing blockhost with typed request/response using provided context
func (r *BlockHost) UpdateWithContext(ctx context.Context, id any, req *BlockHostRequestBody) (*BlockHostUpsertModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].UpdateWithContext(ctx, id, params)
	if err != nil {
		return nil, err
	}

	var response BlockHostUpsertModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// DELETE
// -----------------------------------------------------

// Delete deletes a blockhost with search parameters
//
// Parameters:
//   - force: Forces removal of mappings of the host to volumes. A host can be deleted only if it is not mapped to any volume.
func (r *BlockHost) Delete(req *BlockHostSearchParams, force bool) error {
	return r.DeleteWithContext(r.Untyped.GetCtx(), req, force)
}

// DeleteWithContext deletes a blockhost with search parameters using provided context
//
// Parameters:
//   - force: Forces removal of mappings of the host to volumes. A host can be deleted only if it is not mapped to any volume.
func (r *BlockHost) DeleteWithContext(ctx context.Context, req *BlockHostSearchParams, force bool) error {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return err
	}

	// Build DELETE query params
	deleteQueryParams := core.Params{"force": force}
	// Build DELETE body params
	var deleteBody core.Params
	_, err = r.Untyped.GetResourceMap()[r.GetResourceType()].DeleteWithContext(ctx, params, deleteQueryParams, deleteBody)
	if err != nil {
		return err
	}
	return nil
}

// DeleteById deletes a blockhost by ID
// summary: Delete a Block Host
//
// Parameters:
//   - id: Object ID specified in the path
//   - force: Forces removal of mappings of the host to volumes. A host can be deleted only if it is not mapped to any volume.
func (r *BlockHost) DeleteById(id any, force bool) error {
	return r.DeleteByIdWithContext(r.Untyped.GetCtx(), id, force)
}

// DeleteByIdWithContext deletes a blockhost by ID using provided context
// summary: Delete a Block Host
//
// Parameters:
//   - id: Object ID specified in the path
//   - force: Forces removal of mappings of the host to volumes. A host can be deleted only if it is not mapped to any volume.
func (r *BlockHost) DeleteByIdWithContext(ctx context.Context, id any, force bool) error {

	// Build DELETE query params
	deleteQueryParams := core.Params{"force": force}
	// Build DELETE body params
	var deleteBody core.Params
	_, err := r.Untyped.GetResourceMap()[r.GetResourceType()].DeleteByIdWithContext(ctx, id, deleteQueryParams, deleteBody)
	if err != nil {
		return err
	}
	return nil
}

// -----------------------------------------------------
// ENSURE
// -----------------------------------------------------

// Ensure ensures a blockhost exists with typed response
func (r *BlockHost) Ensure(searchParams *BlockHostSearchParams, body *BlockHostRequestBody) (*BlockHostUpsertModel, error) {
	return r.EnsureWithContext(r.Untyped.GetCtx(), searchParams, body)
}

// EnsureWithContext ensures a blockhost exists with typed response using provided context
func (r *BlockHost) EnsureWithContext(ctx context.Context, searchParams *BlockHostSearchParams, body *BlockHostRequestBody) (*BlockHostUpsertModel, error) {
	searchParamsConverted, err := core.NewParamsFromStruct(searchParams)
	if err != nil {
		return nil, err
	}
	bodyConverted, err := core.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].EnsureWithContext(ctx, searchParamsConverted, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response BlockHostUpsertModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Exists checks if a blockhost exists
func (r *BlockHost) Exists(req *BlockHostSearchParams) (bool, error) {
	return r.ExistsWithContext(r.Untyped.GetCtx(), req)
}

// ExistsWithContext checks if a blockhost exists using provided context
func (r *BlockHost) ExistsWithContext(ctx context.Context, req *BlockHostSearchParams) (bool, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].ExistsWithContext(ctx, params)
}

// MustExists checks if a blockhost exists and panics if not
func (r *BlockHost) MustExists(req *BlockHostSearchParams) bool {
	return r.MustExistsWithContext(r.Untyped.GetCtx(), req)
}

// MustExistsWithContext checks if a blockhost exists and panics if not using provided context
func (r *BlockHost) MustExistsWithContext(ctx context.Context, req *BlockHostSearchParams) bool {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].MustExistsWithContext(ctx, params)
}

// -----------------------------------------------------
// EXTRA METHODS
// -----------------------------------------------------

// BlockHostBulkWithContext_DELETE
// method: DELETE
// url: /blockhosts/bulk/
// summary: Delete a Bulk Of Hosts
func (r *BlockHost) BlockHostBulkWithContext_DELETE(ctx context.Context) error {
	resourcePath := "/blockhosts/bulk/"

	var reqParams core.Params
	var reqBody core.Params

	_, err := core.Request[core.EmptyRecord](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodDelete, resourcePath, reqParams, reqBody)
	return err

}

// BlockHostBulk_DELETE
// method: DELETE
// url: /blockhosts/bulk/
// summary: Delete a Bulk Of Hosts
func (r *BlockHost) BlockHostBulk_DELETE() error {
	return r.BlockHostBulkWithContext_DELETE(r.Untyped.GetCtx())
}

// BlockHostSetVolumes_PATCH_Body represents the request body for BlockHostSetVolumes
type BlockHostSetVolumes_PATCH_Body struct {
	Ids        *[]int64 `json:"ids,omitempty" yaml:"ids,omitempty" required:"false" doc:""`
	SnapshotId int64    `json:"snapshot_id,omitempty" yaml:"snapshot_id,omitempty" required:"false" doc:""`
}

// BlockHostSetVolumesWithContext_PATCH
// method: PATCH
// url: /blockhosts/{id}/set_volumes/
// summary: Mapping a block host to volumes.
//
// Parameters:
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (r *BlockHost) BlockHostSetVolumesWithContext_PATCH(ctx context.Context, id any, body *BlockHostSetVolumes_PATCH_Body, waitTimeout time.Duration) (*untyped.AsyncResult, error) {
	resourcePath := core.BuildResourcePathWithID("blockhosts", id, "set_volumes")

	var reqParams core.Params
	reqBody, err := core.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	result, err := core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodPatch, resourcePath, reqParams, reqBody)
	if err != nil {
		return nil, err
	}
	// Create async task from result
	task := untyped.NewAsyncResult(ctx, result.RecordID(), r.Untyped)
	// If waitTimeout is 0, return task immediately without waiting (async background operation)
	if waitTimeout == 0 {
		return task, nil
	}
	// Wait for task completion with the specified timeout
	if _, err := task.Wait(waitTimeout); err != nil {
		return task, err
	}
	return task, nil

}

// BlockHostSetVolumes_PATCH
// method: PATCH
// url: /blockhosts/{id}/set_volumes/
// summary: Mapping a block host to volumes.
//
// Parameters:
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (r *BlockHost) BlockHostSetVolumes_PATCH(id any, body *BlockHostSetVolumes_PATCH_Body, waitTimeout time.Duration) (*untyped.AsyncResult, error) {
	return r.BlockHostSetVolumesWithContext_PATCH(r.Untyped.GetCtx(), id, body, waitTimeout)
}

// BlockHostUpdateVolumes_PATCH_Body represents the request body for BlockHostUpdateVolumes
type BlockHostUpdateVolumes_PATCH_Body struct {
	IdsToAdd    *[]int64 `json:"ids_to_add,omitempty" yaml:"ids_to_add,omitempty" required:"false" doc:""`
	IdsToRemove *[]int64 `json:"ids_to_remove,omitempty" yaml:"ids_to_remove,omitempty" required:"false" doc:""`
	SnapshotId  int64    `json:"snapshot_id,omitempty" yaml:"snapshot_id,omitempty" required:"false" doc:""`
}

// BlockHostUpdateVolumesWithContext_PATCH
// method: PATCH
// url: /blockhosts/{id}/update_volumes/
// summary: Update Mapping of Block Host to Volumes
//
// Parameters:
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (r *BlockHost) BlockHostUpdateVolumesWithContext_PATCH(ctx context.Context, id any, body *BlockHostUpdateVolumes_PATCH_Body, waitTimeout time.Duration) (*untyped.AsyncResult, error) {
	resourcePath := core.BuildResourcePathWithID("blockhosts", id, "update_volumes")

	var reqParams core.Params
	reqBody, err := core.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	result, err := core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodPatch, resourcePath, reqParams, reqBody)
	if err != nil {
		return nil, err
	}
	// Create async task from result
	task := untyped.NewAsyncResult(ctx, result.RecordID(), r.Untyped)
	// If waitTimeout is 0, return task immediately without waiting (async background operation)
	if waitTimeout == 0 {
		return task, nil
	}
	// Wait for task completion with the specified timeout
	if _, err := task.Wait(waitTimeout); err != nil {
		return task, err
	}
	return task, nil

}

// BlockHostUpdateVolumes_PATCH
// method: PATCH
// url: /blockhosts/{id}/update_volumes/
// summary: Update Mapping of Block Host to Volumes
//
// Parameters:
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (r *BlockHost) BlockHostUpdateVolumes_PATCH(id any, body *BlockHostUpdateVolumes_PATCH_Body, waitTimeout time.Duration) (*untyped.AsyncResult, error) {
	return r.BlockHostUpdateVolumesWithContext_PATCH(r.Untyped.GetCtx(), id, body, waitTimeout)
}
