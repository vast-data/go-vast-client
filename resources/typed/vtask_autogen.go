// Code generated by generate-typed-resources. DO NOT EDIT.
// Template: LIST|READ

package typed

import (
	"context"

	"github.com/vast-data/go-vast-client/core"
)

// -----------------------------------------------------
// RESOURCE TYPE
// -----------------------------------------------------

// VTask represents a typed resource for vtask operations
type VTask struct {
	*core.TypedVastResource
}

// -----------------------------------------------------
// SEARCH PARAMS
// -----------------------------------------------------

// VTaskSearchParams represents the search parameters for VTask operations
type VTaskSearchParams struct {
	Name  string `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:"Task name"`
	State string `json:"state,omitempty" yaml:"state,omitempty" required:"false" doc:"Task state"`

	// RawData allows passing arbitrary search parameters as key-value pairs.
	//
	// Use this field when you need query parameters that are not covered by the typed fields above.
	// This is particularly useful for:
	//   - Dynamic filter operations (e.g., "path__contains", "name__icontains")
	//   - Django-style query filters
	//   - Custom backend-specific parameters
	//
	// Example:
	//   params := &VTaskSearchParams{
	//       RawData: core.Params{"path__contains": "/foo", "name__icontains": "bar"},
	//   }
	//
	// Note: You can use either the typed fields or RawData, or combine both.
	RawData core.Params `json:"-" yaml:"-"`
}

// -----------------------------------------------------
// MODELS
// -----------------------------------------------------

// VTaskDetailsModel represents the detailed model returned by GET/List operations
// Type alias to component definition: #/components/schemas/VTask
type VTaskDetailsModel = Component_VTask

// -----------------------------------------------------
// LIST
// -----------------------------------------------------

// List retrieves multiple vtasks with typed request/response
// summary: List vtasks
func (r *VTask) List(req *VTaskSearchParams) ([]*VTaskDetailsModel, error) {
	return r.ListWithContext(r.Untyped.GetCtx(), req)
}

// ListWithContext retrieves multiple vtasks with typed request/response using provided context
// summary: List vtasks
func (r *VTask) ListWithContext(ctx context.Context, req *VTaskSearchParams) ([]*VTaskDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.GetResourceMap()[r.GetResourceType()].ListWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response []*VTaskDetailsModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// Get retrieves a single vtask with typed request/response
// summary: List vtasks
func (r *VTask) Get(req *VTaskSearchParams) (*VTaskDetailsModel, error) {
	return r.GetWithContext(r.Untyped.GetCtx(), req)
}

// GetWithContext retrieves a single vtask with typed request/response using provided context
// summary: List vtasks
func (r *VTask) GetWithContext(ctx context.Context, req *VTaskSearchParams) (*VTaskDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response VTaskDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// READ
// -----------------------------------------------------

// GetById retrieves a single vtask by ID
// summary: Return Task Details
func (r *VTask) GetById(id any) (*VTaskDetailsModel, error) {
	return r.GetByIdWithContext(r.Untyped.GetCtx(), id)
}

// GetByIdWithContext retrieves a single vtask by ID using provided context
// summary: Return Task Details
func (r *VTask) GetByIdWithContext(ctx context.Context, id any) (*VTaskDetailsModel, error) {
	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetByIdWithContext(ctx, id)
	if err != nil {
		return nil, err
	}

	var response VTaskDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Exists checks if a vtask exists
func (r *VTask) Exists(req *VTaskSearchParams) (bool, error) {
	return r.ExistsWithContext(r.Untyped.GetCtx(), req)
}

// ExistsWithContext checks if a vtask exists using provided context
func (r *VTask) ExistsWithContext(ctx context.Context, req *VTaskSearchParams) (bool, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].ExistsWithContext(ctx, params)
}

// MustExists checks if a vtask exists and panics if not
func (r *VTask) MustExists(req *VTaskSearchParams) bool {
	return r.MustExistsWithContext(r.Untyped.GetCtx(), req)
}

// MustExistsWithContext checks if a vtask exists and panics if not using provided context
func (r *VTask) MustExistsWithContext(ctx context.Context, req *VTaskSearchParams) bool {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].MustExistsWithContext(ctx, params)
}

// -----------------------------------------------------
// GENERATION ISSUES
// -----------------------------------------------------
//   - Extra method PATCH /vtasks/{id}/retry/ skipped: PATCH /vtasks/{id}/retry/ - No response schema defined in OpenAPI spec. Error: no valid schema found in PATCH response (200/201/202) for resource /vtasks/{id}/retry/
//   - UPDATE operation excluded: PATCH/PUT /vtasks/{id}/ has no response schema and doesn't return 204 NO CONTENT
