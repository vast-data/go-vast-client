// Code generated by generate-typed-resources. DO NOT EDIT.
// Template: CREATE|LIST|READ|UPDATE|DELETE

package typed

import (
	"context"
	"net/http"

	"github.com/vast-data/go-vast-client/core"
)

// -----------------------------------------------------
// RESOURCE TYPE
// -----------------------------------------------------

// Oidc represents a typed resource for oidc operations
type Oidc struct {
	*core.TypedVastResource
}

// -----------------------------------------------------
// SEARCH PARAMS
// -----------------------------------------------------

// OidcSearchParams represents the search parameters for Oidc operations
type OidcSearchParams struct {
	Guid string `json:"guid,omitempty" yaml:"guid,omitempty" required:"false" doc:""`
	Name string `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:""`

	// RawData allows passing arbitrary search parameters as key-value pairs.
	//
	// Use this field when you need query parameters that are not covered by the typed fields above.
	// This is particularly useful for:
	//   - Dynamic filter operations (e.g., "path__contains", "name__icontains")
	//   - Django-style query filters
	//   - Custom backend-specific parameters
	//
	// Example:
	//   params := &OidcSearchParams{
	//       RawData: core.Params{"path__contains": "/foo", "name__icontains": "bar"},
	//   }
	//
	// Note: You can use either the typed fields or RawData, or combine both.
	RawData core.Params `json:"-" yaml:"-"`
}

// -----------------------------------------------------
// REQUEST BODY
// -----------------------------------------------------

// OidcRequestBody represents the request body for Oidc operations
type OidcRequestBody struct {
	DiscoveryUrl     string `json:"discovery_url,omitempty" yaml:"discovery_url,omitempty" required:"true" doc:""`
	Name             string `json:"name,omitempty" yaml:"name,omitempty" required:"true" doc:""`
	Certificate      string `json:"certificate,omitempty" yaml:"certificate,omitempty" required:"false" doc:""`
	UserJwtAttribute string `json:"user_jwt_attribute,omitempty" yaml:"user_jwt_attribute,omitempty" required:"false" doc:""`
	VerifyPeer       bool   `json:"verify_peer,omitempty" yaml:"verify_peer,omitempty" required:"false" doc:""`
}

// -----------------------------------------------------
// MODELS
// -----------------------------------------------------

// OidcDetailsModel represents the detailed model returned by GET/List operations
// Type alias to component definition: #/components/schemas/OIDC
type OidcDetailsModel = Component_OIDC

// OidcUpsertModel represents the model returned by Create/Update operations
// Type alias to component definition: #/components/schemas/OIDC
type OidcUpsertModel = Component_OIDC

// -----------------------------------------------------
// LIST
// -----------------------------------------------------

// List retrieves multiple oidcs with typed request/response
// summary: List OIDC Providers
func (r *Oidc) List(req *OidcSearchParams) ([]*OidcDetailsModel, error) {
	return r.ListWithContext(r.Untyped.GetCtx(), req)
}

// ListWithContext retrieves multiple oidcs with typed request/response using provided context
// summary: List OIDC Providers
func (r *Oidc) ListWithContext(ctx context.Context, req *OidcSearchParams) ([]*OidcDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.GetResourceMap()[r.GetResourceType()].ListWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response []*OidcDetailsModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// Get retrieves a single oidc with typed request/response
// summary: List OIDC Providers
func (r *Oidc) Get(req *OidcSearchParams) (*OidcDetailsModel, error) {
	return r.GetWithContext(r.Untyped.GetCtx(), req)
}

// GetWithContext retrieves a single oidc with typed request/response using provided context
// summary: List OIDC Providers
func (r *Oidc) GetWithContext(ctx context.Context, req *OidcSearchParams) (*OidcDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response OidcDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// READ
// -----------------------------------------------------

// GetById retrieves a single oidc by ID
// summary: Return Details of a OIDC Provider
func (r *Oidc) GetById(id any) (*OidcDetailsModel, error) {
	return r.GetByIdWithContext(r.Untyped.GetCtx(), id)
}

// GetByIdWithContext retrieves a single oidc by ID using provided context
// summary: Return Details of a OIDC Provider
func (r *Oidc) GetByIdWithContext(ctx context.Context, id any) (*OidcDetailsModel, error) {
	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetByIdWithContext(ctx, id)
	if err != nil {
		return nil, err
	}

	var response OidcDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// CREATE
// -----------------------------------------------------

// Create creates a new oidc with typed request/response
// summary: Create OIDC Provider
func (r *Oidc) Create(req *OidcRequestBody) (*OidcUpsertModel, error) {
	return r.CreateWithContext(r.Untyped.GetCtx(), req)
}

// CreateWithContext creates a new oidc with typed request/response using provided context
// summary: Create OIDC Provider
func (r *Oidc) CreateWithContext(ctx context.Context, req *OidcRequestBody) (*OidcUpsertModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].CreateWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response OidcUpsertModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// UPDATE
// -----------------------------------------------------

// Update updates an existing oidc with typed request/response
func (r *Oidc) Update(id any, req *OidcRequestBody) (*OidcUpsertModel, error) {
	return r.UpdateWithContext(r.Untyped.GetCtx(), id, req)
}

// UpdateWithContext updates an existing oidc with typed request/response using provided context
func (r *Oidc) UpdateWithContext(ctx context.Context, id any, req *OidcRequestBody) (*OidcUpsertModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].UpdateWithContext(ctx, id, params)
	if err != nil {
		return nil, err
	}

	var response OidcUpsertModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// DELETE
// -----------------------------------------------------

// Delete deletes a oidc with search parameters
func (r *Oidc) Delete(req *OidcSearchParams) error {
	return r.DeleteWithContext(r.Untyped.GetCtx(), req)
}

// DeleteWithContext deletes a oidc with search parameters using provided context
func (r *Oidc) DeleteWithContext(ctx context.Context, req *OidcSearchParams) error {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return err
	}
	_, err = r.Untyped.GetResourceMap()[r.GetResourceType()].DeleteWithContext(ctx, params, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteById deletes a oidc by ID
// summary: Delete OIDC Provider
//
// Parameters:
//   - id: OIDC Provider ID
func (r *Oidc) DeleteById(id any) error {
	return r.DeleteByIdWithContext(r.Untyped.GetCtx(), id)
}

// DeleteByIdWithContext deletes a oidc by ID using provided context
// summary: Delete OIDC Provider
//
// Parameters:
//   - id: OIDC Provider ID
func (r *Oidc) DeleteByIdWithContext(ctx context.Context, id any) error {
	_, err := r.Untyped.GetResourceMap()[r.GetResourceType()].DeleteByIdWithContext(ctx, id, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// -----------------------------------------------------
// ENSURE
// -----------------------------------------------------

// Ensure ensures a oidc exists with typed response
func (r *Oidc) Ensure(searchParams *OidcSearchParams, body *OidcRequestBody) (*OidcUpsertModel, error) {
	return r.EnsureWithContext(r.Untyped.GetCtx(), searchParams, body)
}

// EnsureWithContext ensures a oidc exists with typed response using provided context
func (r *Oidc) EnsureWithContext(ctx context.Context, searchParams *OidcSearchParams, body *OidcRequestBody) (*OidcUpsertModel, error) {
	searchParamsConverted, err := core.NewParamsFromStruct(searchParams)
	if err != nil {
		return nil, err
	}
	bodyConverted, err := core.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].EnsureWithContext(ctx, searchParamsConverted, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response OidcUpsertModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Exists checks if a oidc exists
func (r *Oidc) Exists(req *OidcSearchParams) (bool, error) {
	return r.ExistsWithContext(r.Untyped.GetCtx(), req)
}

// ExistsWithContext checks if a oidc exists using provided context
func (r *Oidc) ExistsWithContext(ctx context.Context, req *OidcSearchParams) (bool, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].ExistsWithContext(ctx, params)
}

// MustExists checks if a oidc exists and panics if not
func (r *Oidc) MustExists(req *OidcSearchParams) bool {
	return r.MustExistsWithContext(r.Untyped.GetCtx(), req)
}

// MustExistsWithContext checks if a oidc exists and panics if not using provided context
func (r *Oidc) MustExistsWithContext(ctx context.Context, req *OidcSearchParams) bool {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].MustExistsWithContext(ctx, params)
}

// -----------------------------------------------------
// EXTRA METHODS
// -----------------------------------------------------

// OidcRefreshKeys_PATCH_Model represents the response model for OidcRefreshKeys
type OidcRefreshKeys_PATCH_Model struct {
	AssignedTenantsPreview string `json:"assigned_tenants_preview,omitempty" yaml:"assigned_tenants_preview,omitempty" required:"false" doc:""`
	Certificate            string `json:"certificate,omitempty" yaml:"certificate,omitempty" required:"false" doc:""`
	DiscoveryUrl           string `json:"discovery_url,omitempty" yaml:"discovery_url,omitempty" required:"false" doc:""`
	Guid                   string `json:"guid,omitempty" yaml:"guid,omitempty" required:"false" doc:""`
	Id                     int64  `json:"id,omitempty" yaml:"id,omitempty" required:"false" doc:""`
	LastKeysRefreshTime    string `json:"last_keys_refresh_time,omitempty" yaml:"last_keys_refresh_time,omitempty" required:"false" doc:""`
	Name                   string `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:""`
	State                  string `json:"state,omitempty" yaml:"state,omitempty" required:"false" doc:""`
	UserJwtAttribute       string `json:"user_jwt_attribute,omitempty" yaml:"user_jwt_attribute,omitempty" required:"false" doc:""`
	VerifyPeer             bool   `json:"verify_peer,omitempty" yaml:"verify_peer,omitempty" required:"false" doc:""`
}

// OidcRefreshKeysWithContext_PATCH
// method: PATCH
// url: /oidcs/{id}/refresh_keys/
// summary: Refresh the keys from OIDC provider
func (r *Oidc) OidcRefreshKeysWithContext_PATCH(ctx context.Context, id any) (*OidcRefreshKeys_PATCH_Model, error) {
	resourcePath := core.BuildResourcePathWithID("oidcs", id, "refresh_keys")

	var reqParams core.Params
	var reqBody core.Params

	record, err := core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodPatch, resourcePath, reqParams, reqBody)
	if err != nil {
		return nil, err
	}

	var response OidcRefreshKeys_PATCH_Model
	if err := record.Fill(&response); err != nil {
		return nil, err
	}
	return &response, nil

}

// OidcRefreshKeys_PATCH
// method: PATCH
// url: /oidcs/{id}/refresh_keys/
// summary: Refresh the keys from OIDC provider
func (r *Oidc) OidcRefreshKeys_PATCH(id any) (*OidcRefreshKeys_PATCH_Model, error) {
	return r.OidcRefreshKeysWithContext_PATCH(r.Untyped.GetCtx(), id)
}
