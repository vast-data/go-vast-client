// Code generated by generate-typed-resources. DO NOT EDIT.
// Template: CREATE|LIST|READ|DELETE

package typed

import (
	"context"

	"github.com/vast-data/go-vast-client/core"
)

// -----------------------------------------------------
// RESOURCE TYPE
// -----------------------------------------------------

// Certificate represents a typed resource for certificate operations
type Certificate struct {
	*core.TypedVastResource
}

// -----------------------------------------------------
// SEARCH PARAMS
// -----------------------------------------------------

// CertificateSearchParams represents the search parameters for Certificate operations
type CertificateSearchParams struct {
	Name string `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:""`

	// RawData allows passing arbitrary search parameters as key-value pairs.
	//
	// Use this field when you need query parameters that are not covered by the typed fields above.
	// This is particularly useful for:
	//   - Dynamic filter operations (e.g., "path__contains", "name__icontains")
	//   - Django-style query filters
	//   - Custom backend-specific parameters
	//
	// Example:
	//   params := &CertificateSearchParams{
	//       RawData: core.Params{"path__contains": "/foo", "name__icontains": "bar"},
	//   }
	//
	// Note: You can use either the typed fields or RawData, or combine both.
	RawData core.Params `json:"-" yaml:"-"`
}

// -----------------------------------------------------
// REQUEST BODY
// -----------------------------------------------------

// CertificateRequestBody represents the request body for Certificate operations
type CertificateRequestBody struct {
	Name          string `json:"name,omitempty" yaml:"name,omitempty" required:"true" doc:"Certificate name"`
	CaCertificate string `json:"ca_certificate,omitempty" yaml:"ca_certificate,omitempty" required:"false" doc:""`
	CertType      string `json:"cert_type,omitempty" yaml:"cert_type,omitempty" required:"false" doc:"Certificate type"`
	Certificate   string `json:"certificate,omitempty" yaml:"certificate,omitempty" required:"false" doc:""`
	PrivateKey    string `json:"private_key,omitempty" yaml:"private_key,omitempty" required:"false" doc:""`
}

// -----------------------------------------------------
// MODELS
// -----------------------------------------------------

// CertificateDetailsModel represents the detailed model returned by GET/List operations
// Type alias to component definition: #/components/schemas/Certificate
type CertificateDetailsModel = Component_Certificate

// CertificateUpsertModel represents the model returned by Create/Update operations
// Type alias to component definition: #/components/schemas/Certificate
type CertificateUpsertModel = Component_Certificate

// -----------------------------------------------------
// LIST
// -----------------------------------------------------

// List retrieves multiple certificates with typed request/response
// summary: List certificates
func (r *Certificate) List(req *CertificateSearchParams) ([]*CertificateDetailsModel, error) {
	return r.ListWithContext(r.Untyped.GetCtx(), req)
}

// ListWithContext retrieves multiple certificates with typed request/response using provided context
// summary: List certificates
func (r *Certificate) ListWithContext(ctx context.Context, req *CertificateSearchParams) ([]*CertificateDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.GetResourceMap()[r.GetResourceType()].ListWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response []*CertificateDetailsModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// Get retrieves a single certificate with typed request/response
// summary: List certificates
func (r *Certificate) Get(req *CertificateSearchParams) (*CertificateDetailsModel, error) {
	return r.GetWithContext(r.Untyped.GetCtx(), req)
}

// GetWithContext retrieves a single certificate with typed request/response using provided context
// summary: List certificates
func (r *Certificate) GetWithContext(ctx context.Context, req *CertificateSearchParams) (*CertificateDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response CertificateDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// READ
// -----------------------------------------------------

// GetById retrieves a single certificate by ID
func (r *Certificate) GetById(id any) (*CertificateDetailsModel, error) {
	return r.GetByIdWithContext(r.Untyped.GetCtx(), id)
}

// GetByIdWithContext retrieves a single certificate by ID using provided context
func (r *Certificate) GetByIdWithContext(ctx context.Context, id any) (*CertificateDetailsModel, error) {
	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetByIdWithContext(ctx, id)
	if err != nil {
		return nil, err
	}

	var response CertificateDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// CREATE
// -----------------------------------------------------

// Create creates a new certificate with typed request/response
// summary: Creates certificates
func (r *Certificate) Create(req *CertificateRequestBody) (*CertificateUpsertModel, error) {
	return r.CreateWithContext(r.Untyped.GetCtx(), req)
}

// CreateWithContext creates a new certificate with typed request/response using provided context
// summary: Creates certificates
func (r *Certificate) CreateWithContext(ctx context.Context, req *CertificateRequestBody) (*CertificateUpsertModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].CreateWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response CertificateUpsertModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// DELETE
// -----------------------------------------------------

// Delete deletes a certificate with search parameters
func (r *Certificate) Delete(req *CertificateSearchParams) error {
	return r.DeleteWithContext(r.Untyped.GetCtx(), req)
}

// DeleteWithContext deletes a certificate with search parameters using provided context
func (r *Certificate) DeleteWithContext(ctx context.Context, req *CertificateSearchParams) error {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return err
	}
	_, err = r.Untyped.GetResourceMap()[r.GetResourceType()].DeleteWithContext(ctx, params, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteById deletes a certificate by ID
func (r *Certificate) DeleteById(id any) error {
	return r.DeleteByIdWithContext(r.Untyped.GetCtx(), id)
}

// DeleteByIdWithContext deletes a certificate by ID using provided context
func (r *Certificate) DeleteByIdWithContext(ctx context.Context, id any) error {
	_, err := r.Untyped.GetResourceMap()[r.GetResourceType()].DeleteByIdWithContext(ctx, id, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// -----------------------------------------------------
// ENSURE
// -----------------------------------------------------

// Ensure ensures a certificate exists with typed response
func (r *Certificate) Ensure(searchParams *CertificateSearchParams, body *CertificateRequestBody) (*CertificateUpsertModel, error) {
	return r.EnsureWithContext(r.Untyped.GetCtx(), searchParams, body)
}

// EnsureWithContext ensures a certificate exists with typed response using provided context
func (r *Certificate) EnsureWithContext(ctx context.Context, searchParams *CertificateSearchParams, body *CertificateRequestBody) (*CertificateUpsertModel, error) {
	searchParamsConverted, err := core.NewParamsFromStruct(searchParams)
	if err != nil {
		return nil, err
	}
	bodyConverted, err := core.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].EnsureWithContext(ctx, searchParamsConverted, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response CertificateUpsertModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Exists checks if a certificate exists
func (r *Certificate) Exists(req *CertificateSearchParams) (bool, error) {
	return r.ExistsWithContext(r.Untyped.GetCtx(), req)
}

// ExistsWithContext checks if a certificate exists using provided context
func (r *Certificate) ExistsWithContext(ctx context.Context, req *CertificateSearchParams) (bool, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].ExistsWithContext(ctx, params)
}

// MustExists checks if a certificate exists and panics if not
func (r *Certificate) MustExists(req *CertificateSearchParams) bool {
	return r.MustExistsWithContext(r.Untyped.GetCtx(), req)
}

// MustExistsWithContext checks if a certificate exists and panics if not using provided context
func (r *Certificate) MustExistsWithContext(ctx context.Context, req *CertificateSearchParams) bool {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].MustExistsWithContext(ctx, params)
}

// -----------------------------------------------------
// GENERATION ISSUES
// -----------------------------------------------------
//   - UPDATE operation excluded: PATCH/PUT /certificates/{id}/ has no response schema and doesn't return 204 NO CONTENT
