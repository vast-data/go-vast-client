// Code generated by generate-typed-resources. DO NOT EDIT.
// Template: LIST|READ|DELETE

package typed

import (
	"context"

	"github.com/vast-data/go-vast-client/core"
)

// -----------------------------------------------------
// RESOURCE TYPE
// -----------------------------------------------------

// EncryptedPath represents a typed resource for encryptedpath operations
type EncryptedPath struct {
	*core.TypedVastResource
}

// -----------------------------------------------------
// SEARCH PARAMS
// -----------------------------------------------------

// EncryptedPathSearchParams represents the search parameters for EncryptedPath operations
type EncryptedPathSearchParams struct {
	Name     string `json:"name,omitempty" yaml:"name,omitempty" required:"true" doc:"Name of Encrypted Path"`
	Path     string `json:"path,omitempty" yaml:"path,omitempty" required:"true" doc:"Encrypted path"`
	TenantId int64  `json:"tenant_id,omitempty" yaml:"tenant_id,omitempty" required:"false" doc:"Tenant ID"`

	// RawData allows passing arbitrary search parameters as key-value pairs.
	//
	// Use this field when you need query parameters that are not covered by the typed fields above.
	// This is particularly useful for:
	//   - Dynamic filter operations (e.g., "path__contains", "name__icontains")
	//   - Django-style query filters
	//   - Custom backend-specific parameters
	//
	// Example:
	//   params := &EncryptedPathSearchParams{
	//       RawData: core.Params{"path__contains": "/foo", "name__icontains": "bar"},
	//   }
	//
	// Note: You can use either the typed fields or RawData, or combine both.
	RawData core.Params `json:"-" yaml:"-"`
}

// -----------------------------------------------------
// MODELS
// -----------------------------------------------------

// EncryptedPathDetailsModel represents the detailed model returned by GET/List operations
// Type alias to component definition: #/components/schemas/EncryptedPath
type EncryptedPathDetailsModel = Component_EncryptedPath

// -----------------------------------------------------
// LIST
// -----------------------------------------------------

// List retrieves multiple encryptedpaths with typed request/response
// summary: List Encrypted Paths
func (r *EncryptedPath) List(req *EncryptedPathSearchParams) ([]*EncryptedPathDetailsModel, error) {
	return r.ListWithContext(r.Untyped.GetCtx(), req)
}

// ListWithContext retrieves multiple encryptedpaths with typed request/response using provided context
// summary: List Encrypted Paths
func (r *EncryptedPath) ListWithContext(ctx context.Context, req *EncryptedPathSearchParams) ([]*EncryptedPathDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.GetResourceMap()[r.GetResourceType()].ListWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response []*EncryptedPathDetailsModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// Get retrieves a single encryptedpath with typed request/response
// summary: List Encrypted Paths
func (r *EncryptedPath) Get(req *EncryptedPathSearchParams) (*EncryptedPathDetailsModel, error) {
	return r.GetWithContext(r.Untyped.GetCtx(), req)
}

// GetWithContext retrieves a single encryptedpath with typed request/response using provided context
// summary: List Encrypted Paths
func (r *EncryptedPath) GetWithContext(ctx context.Context, req *EncryptedPathSearchParams) (*EncryptedPathDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response EncryptedPathDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// READ
// -----------------------------------------------------

// GetById retrieves a single encryptedpath by ID
// summary: Return Details of a Encrypted Path
func (r *EncryptedPath) GetById(id any) (*EncryptedPathDetailsModel, error) {
	return r.GetByIdWithContext(r.Untyped.GetCtx(), id)
}

// GetByIdWithContext retrieves a single encryptedpath by ID using provided context
// summary: Return Details of a Encrypted Path
func (r *EncryptedPath) GetByIdWithContext(ctx context.Context, id any) (*EncryptedPathDetailsModel, error) {
	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetByIdWithContext(ctx, id)
	if err != nil {
		return nil, err
	}

	var response EncryptedPathDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// DELETE
// -----------------------------------------------------

// Delete deletes a encryptedpath with search parameters
func (r *EncryptedPath) Delete(req *EncryptedPathSearchParams) error {
	return r.DeleteWithContext(r.Untyped.GetCtx(), req)
}

// DeleteWithContext deletes a encryptedpath with search parameters using provided context
func (r *EncryptedPath) DeleteWithContext(ctx context.Context, req *EncryptedPathSearchParams) error {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return err
	}
	_, err = r.Untyped.GetResourceMap()[r.GetResourceType()].DeleteWithContext(ctx, params, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteById deletes a encryptedpath by ID
func (r *EncryptedPath) DeleteById(id any) error {
	return r.DeleteByIdWithContext(r.Untyped.GetCtx(), id)
}

// DeleteByIdWithContext deletes a encryptedpath by ID using provided context
func (r *EncryptedPath) DeleteByIdWithContext(ctx context.Context, id any) error {
	_, err := r.Untyped.GetResourceMap()[r.GetResourceType()].DeleteByIdWithContext(ctx, id, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// Exists checks if a encryptedpath exists
func (r *EncryptedPath) Exists(req *EncryptedPathSearchParams) (bool, error) {
	return r.ExistsWithContext(r.Untyped.GetCtx(), req)
}

// ExistsWithContext checks if a encryptedpath exists using provided context
func (r *EncryptedPath) ExistsWithContext(ctx context.Context, req *EncryptedPathSearchParams) (bool, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].ExistsWithContext(ctx, params)
}

// MustExists checks if a encryptedpath exists and panics if not
func (r *EncryptedPath) MustExists(req *EncryptedPathSearchParams) bool {
	return r.MustExistsWithContext(r.Untyped.GetCtx(), req)
}

// MustExistsWithContext checks if a encryptedpath exists and panics if not using provided context
func (r *EncryptedPath) MustExistsWithContext(ctx context.Context, req *EncryptedPathSearchParams) bool {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].MustExistsWithContext(ctx, params)
}

// -----------------------------------------------------
// GENERATION ISSUES
// -----------------------------------------------------
//   - CREATE operation excluded: POST encryptedpaths has no response schema and doesn't return 204 NO CONTENT
