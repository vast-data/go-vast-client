// Code generated by generate-typed-resources. DO NOT EDIT.
// Template: LIST|READ

package typed

import (
	"context"
	"fmt"
	"net/http"
	"time"

	"github.com/vast-data/go-vast-client/core"
	"github.com/vast-data/go-vast-client/resources/untyped"
)

// -----------------------------------------------------
// RESOURCE TYPE
// -----------------------------------------------------

// Vms represents a typed resource for vms operations
type Vms struct {
	*core.TypedVastResource
}

// -----------------------------------------------------
// SEARCH PARAMS
// -----------------------------------------------------

// VmsSearchParams represents the search parameters for Vms operations
type VmsSearchParams struct {
	Name string `json:"name,omitempty" yaml:"name,omitempty" required:"true" doc:"The name of the VMS"`
	Guid string `json:"guid,omitempty" yaml:"guid,omitempty" required:"false" doc:""`

	// RawData allows passing arbitrary search parameters as key-value pairs.
	//
	// Use this field when you need query parameters that are not covered by the typed fields above.
	// This is particularly useful for:
	//   - Dynamic filter operations (e.g., "path__contains", "name__icontains")
	//   - Django-style query filters
	//   - Custom backend-specific parameters
	//
	// Example:
	//   params := &VmsSearchParams{
	//       RawData: core.Params{"path__contains": "/foo", "name__icontains": "bar"},
	//   }
	//
	// Note: You can use either the typed fields or RawData, or combine both.
	RawData core.Params `json:"-" yaml:"-"`
}

// -----------------------------------------------------
// MODELS
// -----------------------------------------------------

// VmsDetailsModel represents the detailed model returned by GET/List operations
// Type alias to component definition: #/components/schemas/Vms
type VmsDetailsModel = Component_Vms

// -----------------------------------------------------
// LIST
// -----------------------------------------------------

// List retrieves multiple vmss with typed request/response
// summary: List VMS
func (r *Vms) List(req *VmsSearchParams) ([]*VmsDetailsModel, error) {
	return r.ListWithContext(r.Untyped.GetCtx(), req)
}

// ListWithContext retrieves multiple vmss with typed request/response using provided context
// summary: List VMS
func (r *Vms) ListWithContext(ctx context.Context, req *VmsSearchParams) ([]*VmsDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.GetResourceMap()[r.GetResourceType()].ListWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response []*VmsDetailsModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// Get retrieves a single vms with typed request/response
// summary: List VMS
func (r *Vms) Get(req *VmsSearchParams) (*VmsDetailsModel, error) {
	return r.GetWithContext(r.Untyped.GetCtx(), req)
}

// GetWithContext retrieves a single vms with typed request/response using provided context
// summary: List VMS
func (r *Vms) GetWithContext(ctx context.Context, req *VmsSearchParams) (*VmsDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response VmsDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// READ
// -----------------------------------------------------

// GetById retrieves a single vms by ID
// summary: Return VMS Details
func (r *Vms) GetById(id any) (*VmsDetailsModel, error) {
	return r.GetByIdWithContext(r.Untyped.GetCtx(), id)
}

// GetByIdWithContext retrieves a single vms by ID using provided context
// summary: Return VMS Details
func (r *Vms) GetByIdWithContext(ctx context.Context, id any) (*VmsDetailsModel, error) {
	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetByIdWithContext(ctx, id)
	if err != nil {
		return nil, err
	}

	var response VmsDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Exists checks if a vms exists
func (r *Vms) Exists(req *VmsSearchParams) (bool, error) {
	return r.ExistsWithContext(r.Untyped.GetCtx(), req)
}

// ExistsWithContext checks if a vms exists using provided context
func (r *Vms) ExistsWithContext(ctx context.Context, req *VmsSearchParams) (bool, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].ExistsWithContext(ctx, params)
}

// MustExists checks if a vms exists and panics if not
func (r *Vms) MustExists(req *VmsSearchParams) bool {
	return r.MustExistsWithContext(r.Untyped.GetCtx(), req)
}

// MustExistsWithContext checks if a vms exists and panics if not using provided context
func (r *Vms) MustExistsWithContext(ctx context.Context, req *VmsSearchParams) bool {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].MustExistsWithContext(ctx, params)
}

// -----------------------------------------------------
// EXTRA METHODS
// -----------------------------------------------------

// VmsNetworkSettingsBody_HostsItem represents a nested type for Vms extra method body
type VmsNetworkSettingsBody_HostsItem struct {
	Hostname string `json:"hostname,omitempty" yaml:"hostname,omitempty" required:"false" doc:"The hostname of the CNode or DNode"`
	Id       int64  `json:"id,omitempty" yaml:"id,omitempty" required:"false" doc:"The ID of the CNode or DNode"`
	IpmiIp   string `json:"ipmi_ip,omitempty" yaml:"ipmi_ip,omitempty" required:"false" doc:"The IPMI IP of the CNode or DNode"`
	MgmtIp   string `json:"mgmt_ip,omitempty" yaml:"mgmt_ip,omitempty" required:"false" doc:"The management IP of the CNode or DNode"`
	NbEthMtu int64  `json:"nb_eth_mtu,omitempty" yaml:"nb_eth_mtu,omitempty" required:"false" doc:"For dual-NIC CNodes where a NIC is directly connected to an external Ethernet network, use this field to set the MTU for that Ethernet network."`
	NbIbMtu  int64  `json:"nb_ib_mtu,omitempty" yaml:"nb_ib_mtu,omitempty" required:"false" doc:"For dual-NIC CNodes where a NIC is directly connected to an external InfiniBand data network, use this field to set the MTU for that InfiniBand network. Default is 2044. If NB IB type is Connected, the maximum IB NB MTU is 65520. If NB IB type is Datagram, the maximum IB NB MTU is 4092."`
}

// VmsSamlConfigBody_SamlSettings represents a nested type for Vms extra method body
type VmsSamlConfigBody_SamlSettings struct {
	EncryptAssertion               bool   `json:"encrypt_assertion,omitempty" yaml:"encrypt_assertion,omitempty" required:"false" doc:"Set to true if the IdP encrypts the assertion. If true, an encryption certificate and key must be uploaded. Use encryption_saml_crt and encryption_saml_key to provide the required certificate and key. Default: false. Set to false to disable encryption."`
	EncryptionSamlCrt              string `json:"encryption_saml_crt,omitempty" yaml:"encryption_saml_crt,omitempty" required:"false" doc:"Specifies the encryption certificate file content to upload. Required if encrypt_assertion is true."`
	EncryptionSamlKey              string `json:"encryption_saml_key,omitempty" yaml:"encryption_saml_key,omitempty" required:"false" doc:"Specifies the encryption key file content to upload. Required if encrypt_assertion is true."`
	ForceAuthn                     bool   `json:"force_authn,omitempty" yaml:"force_authn,omitempty" required:"false" doc:"Set to true to force authentication with the IDP even if there is an active session with the IdP for the user. Default: false."`
	IdpEntityid                    string `json:"idp_entityid,omitempty" yaml:"idp_entityid,omitempty" required:"false" doc:"A unique identifier for the IdP instance"`
	IdpMetadata                    string `json:"idp_metadata,omitempty" yaml:"idp_metadata,omitempty" required:"false" doc:"Use local metadata. Supply local metadata XML."`
	IdpMetadataUrl                 string `json:"idp_metadata_url,omitempty" yaml:"idp_metadata_url,omitempty" required:"false" doc:"Use metadata located at specified remote URL. For example: 'https://dev-12914105.okta.com/app/exke7ia133bKXWP2g5d7/sso/saml/metadata'"`
	SigningCert                    string `json:"signing_cert,omitempty" yaml:"signing_cert,omitempty" required:"false" doc:"Specifies the certificate file content to use for requiring signed responses from the IdP. Required if want_assertions_or_response_signed is true."`
	SigningKey                     string `json:"signing_key,omitempty" yaml:"signing_key,omitempty" required:"false" doc:"Specifies the key file content to use for requiring signed responses from the IdP. Required if want_assertions_or_response_signed is true."`
	WantAssertionsOrResponseSigned bool   `json:"want_assertions_or_response_signed,omitempty" yaml:"want_assertions_or_response_signed,omitempty" required:"false" doc:"Set to true to require a signed response or assertion from the IdP. VMS then fails the user authentication if an unsigned response is received. If true, upload a certificate and key. Use signing_cert and signing_key to provide certificate and key. Default: false."`
}

// VmsNetworkSettingsModel_BoxesItem represents a nested type for Vms extra method response
type VmsNetworkSettingsModel_BoxesItem struct {
	BoxName string                                         `json:"box_name,omitempty" yaml:"box_name,omitempty" required:"false" doc:"Name of CBox or DBox"`
	Hosts   *[]VmsNetworkSettingsModel_BoxesItem_HostsItem `json:"hosts,omitempty" yaml:"hosts,omitempty" required:"false" doc:"Configuration of each CNode or DNode in the CBox or DBox"`
}

// VmsNetworkSettingsModel_BoxesItem_HostsItem represents a nested type for Vms extra method response
type VmsNetworkSettingsModel_BoxesItem_HostsItem struct {
	Hostname string `json:"hostname,omitempty" yaml:"hostname,omitempty" required:"false" doc:"The hostname of the CNode or DNode"`
	Id       int64  `json:"id,omitempty" yaml:"id,omitempty" required:"false" doc:"The ID of the CNode or DNode"`
	IpmiIp   string `json:"ipmi_ip,omitempty" yaml:"ipmi_ip,omitempty" required:"false" doc:"The IPMI IP of the CNode or DNode"`
	MgmtIp   string `json:"mgmt_ip,omitempty" yaml:"mgmt_ip,omitempty" required:"false" doc:"The management IP of the CNode or DNode"`
	NbEthMtu int64  `json:"nb_eth_mtu,omitempty" yaml:"nb_eth_mtu,omitempty" required:"false" doc:"For dual-NIC CNodes where a NIC is directly connected to an external Ethernet network, use this field to set the MTU for that Ethernet network."`
	NbIbMtu  int64  `json:"nb_ib_mtu,omitempty" yaml:"nb_ib_mtu,omitempty" required:"false" doc:"For dual-NIC CNodes where a NIC is directly connected to an external InfiniBand data network, use this field to set the MTU for that InfiniBand network. Default is 2044. If NB IB type is Connected, the maximum IB NB MTU is 65520. If NB IB type is Datagram, the maximum IB NB MTU is 4092."`
}

// VmsConfiguredIdpsWithContext_GET
// method: GET
// url: /vms/{id}/configured_idps/
// summary: Return Configured SAML Identify Providers (IdPs)
func (r *Vms) VmsConfiguredIdpsWithContext_GET(ctx context.Context, id any) ([]string, error) {
	resourcePath := core.BuildResourcePathWithID("vms", id, "configured_idps")

	var reqParams core.Params
	var reqBody core.Params

	record, err := core.Request[core.RecordSet](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodGet, resourcePath, reqParams, reqBody)
	if err != nil {
		return nil, err
	}
	// Convert RecordSet ([]core.Record) to typed array ([]string)
	result := make([]string, len(record))
	for i, item := range record {
		if err := item.Fill(&result[i]); err != nil {
			return nil, fmt.Errorf("failed to unmarshal array item %d: %w", i, err)
		}
	}
	return result, nil

}

// VmsConfiguredIdps_GET
// method: GET
// url: /vms/{id}/configured_idps/
// summary: Return Configured SAML Identify Providers (IdPs)
func (r *Vms) VmsConfiguredIdps_GET(id any) ([]string, error) {
	return r.VmsConfiguredIdpsWithContext_GET(r.Untyped.GetCtx(), id)
}

// VmsLoginBanner_GET_Model represents the response model for VmsLoginBanner
type VmsLoginBanner_GET_Model struct {
	Name                         string  `json:"name,omitempty" yaml:"name,omitempty" required:"true" doc:"The name of the VMS"`
	AccessTokenLifetime          string  `json:"access_token_lifetime,omitempty" yaml:"access_token_lifetime,omitempty" required:"false" doc:"Validity duration for JWT access tokens. Specify as [DD [HH:[MM:]]]ss"`
	AutoLogoutTimeout            int64   `json:"auto_logout_timeout,omitempty" yaml:"auto_logout_timeout,omitempty" required:"false" doc:"Inactivity period for auto logout"`
	Build                        string  `json:"build,omitempty" yaml:"build,omitempty" required:"false" doc:"The current VMS build running on the cluster."`
	CapacityBase10               bool    `json:"capacity_base_10,omitempty" yaml:"capacity_base_10,omitempty" required:"false" doc:"True if capacity properties are formatted in base 10. False if capacity properties are formatted in base 2"`
	CapacityUsable               bool    `json:"capacity_usable,omitempty" yaml:"capacity_usable,omitempty" required:"false" doc:"Toggles between showing usable capacity (true, default) or physical capacity (false) in the capacity card on the VMS web UI dashboard"`
	Created                      string  `json:"created,omitempty" yaml:"created,omitempty" required:"false" doc:"Date and time of creation"`
	DegradedReason               string  `json:"degraded_reason,omitempty" yaml:"degraded_reason,omitempty" required:"false" doc:"The reason for VMS degraded state"`
	DisableMgmtHa                bool    `json:"disable_mgmt_ha,omitempty" yaml:"disable_mgmt_ha,omitempty" required:"false" doc:"True if management HA is disabled"`
	DisableVmsMetrics            bool    `json:"disable_vms_metrics,omitempty" yaml:"disable_vms_metrics,omitempty" required:"false" doc:"True if VMS metrics collection is disabled"`
	Guid                         string  `json:"guid,omitempty" yaml:"guid,omitempty" required:"false" doc:""`
	Id                           int64   `json:"id,omitempty" yaml:"id,omitempty" required:"false" doc:"The ID of the VMS object."`
	Ip                           string  `json:"ip,omitempty" yaml:"ip,omitempty" required:"false" doc:"The bond interface IP for the cluster's internal data network, on the current management CNode, the CNode hosting VMS"`
	Ip1                          string  `json:"ip1,omitempty" yaml:"ip1,omitempty" required:"false" doc:"The IP of the management CNode on one of the cluster's internal data networks."`
	Ip2                          string  `json:"ip2,omitempty" yaml:"ip2,omitempty" required:"false" doc:"The IP of the management CNode on the second of the cluster's internal data networks."`
	Ipv6Support                  bool    `json:"ipv6_support,omitempty" yaml:"ipv6_support,omitempty" required:"false" doc:"Parameter that controls visibility of ipv6 fields for VIP Pools"`
	LoginBanner                  string  `json:"login_banner,omitempty" yaml:"login_banner,omitempty" required:"false" doc:"The login banner for the VMS Web UI and CLI, if customized."`
	MaxApiTokensPerUser          int64   `json:"max_api_tokens_per_user,omitempty" yaml:"max_api_tokens_per_user,omitempty" required:"false" doc:"Max active API tokens allowed per VMS user"`
	MgmtCnode                    string  `json:"mgmt_cnode,omitempty" yaml:"mgmt_cnode,omitempty" required:"false" doc:"The name of the CNode currently running VMS"`
	MgmtDataInterface            string  `json:"mgmt_data_interface,omitempty" yaml:"mgmt_data_interface,omitempty" required:"false" doc:"Management Data Interface name for L3 networks"`
	MgmtDataNetmask              string  `json:"mgmt_data_netmask,omitempty" yaml:"mgmt_data_netmask,omitempty" required:"false" doc:"Management Data Interface Netmask for L3 networks"`
	MgmtDataVip                  string  `json:"mgmt_data_vip,omitempty" yaml:"mgmt_data_vip,omitempty" required:"false" doc:"Management Data Interface VIP for L3 networks"`
	MgmtDataVipVlan              string  `json:"mgmt_data_vip_vlan,omitempty" yaml:"mgmt_data_vip_vlan,omitempty" required:"false" doc:"Management Data Interface VLAN for L3 networks"`
	MgmtInnerVip                 string  `json:"mgmt_inner_vip,omitempty" yaml:"mgmt_inner_vip,omitempty" required:"false" doc:"A virtual IP on the internal network used for mounting the VMS database."`
	MgmtInnerVipCnode            string  `json:"mgmt_inner_vip_cnode,omitempty" yaml:"mgmt_inner_vip_cnode,omitempty" required:"false" doc:"The CNode currently hosting virtual IP on the internal network used for mounting the VMS database (mgmt_inner_vip)."`
	MgmtIp                       string  `json:"mgmt_ip,omitempty" yaml:"mgmt_ip,omitempty" required:"false" doc:"The external management IP of the management CNode, the CNode currently hosting VMS"`
	MgmtVip                      string  `json:"mgmt_vip,omitempty" yaml:"mgmt_vip,omitempty" required:"false" doc:"Management virtual IP (IPv4). A single virtual IP configured on the management interfaces on all CNodes. VAST Management System (VMS) listens on this IP. It is used to access the VMS interfaces."`
	MgmtVipIpv6                  string  `json:"mgmt_vip_ipv6,omitempty" yaml:"mgmt_vip_ipv6,omitempty" required:"false" doc:"Management virtual IP (IPv6). A single virtual IP configured on the management interfaces on all CNodes. VAST Management System (VMS) listens on this IP. It is used to access the VMS interfaces."`
	MinPwdLength                 int64   `json:"min_pwd_length,omitempty" yaml:"min_pwd_length,omitempty" required:"false" doc:"Minimum password length for new VMS managers. Default: 8"`
	MinQosSupported              bool    `json:"min_qos_supported,omitempty" yaml:"min_qos_supported,omitempty" required:"false" doc:"Minimum QoS supported"`
	MinTlsVersion                string  `json:"min_tls_version,omitempty" yaml:"min_tls_version,omitempty" required:"false" doc:"Minimum TLS version supported by VMS. The default is 1.2."`
	PerformanceBase10            bool    `json:"performance_base_10,omitempty" yaml:"performance_base_10,omitempty" required:"false" doc:"True if performance properties are formatted in base 10. False if performance properties are formatted in base 2"`
	RefreshTokenLifetime         string  `json:"refresh_token_lifetime,omitempty" yaml:"refresh_token_lifetime,omitempty" required:"false" doc:"Validity duration for JWT refresh tokens. Specify as [DD [HH:[MM:]]]ss"`
	SslCertificate               string  `json:"ssl_certificate,omitempty" yaml:"ssl_certificate,omitempty" required:"false" doc:"The SSL Certificate file content, including the BEGIN CERTIFICATE and END CERTIFICATE lines"`
	SslKeyfile                   string  `json:"ssl_keyfile,omitempty" yaml:"ssl_keyfile,omitempty" required:"false" doc:"The SSL private key file content, include the BEGIN PRIVATE KEY and END PRIVATE KEY lines"`
	SslPort                      int64   `json:"ssl_port,omitempty" yaml:"ssl_port,omitempty" required:"false" doc:"The SSL port through which VMS is accessed."`
	State                        string  `json:"state,omitempty" yaml:"state,omitempty" required:"false" doc:"The state of VMS."`
	SwVersion                    string  `json:"sw_version,omitempty" yaml:"sw_version,omitempty" required:"false" doc:"The current VMS software version running on the cluster."`
	TabularSupport               string  `json:"tabular_support,omitempty" yaml:"tabular_support,omitempty" required:"false" doc:"Parameter that controls everything related to database"`
	Title                        string  `json:"title,omitempty" yaml:"title,omitempty" required:"false" doc:"VMS name"`
	TotalActiveCapacity          float64 `json:"total_active_capacity,omitempty" yaml:"total_active_capacity,omitempty" required:"false" doc:"The total licensed capacity, which is the sum of capacity licensed by all active licenses"`
	TotalRemainingCapacity       float64 `json:"total_remaining_capacity,omitempty" yaml:"total_remaining_capacity,omitempty" required:"false" doc:"The amount of licensed capacity that remains available for use."`
	TotalUsageCapacityPercentage float64 `json:"total_usage_capacity_percentage,omitempty" yaml:"total_usage_capacity_percentage,omitempty" required:"false" doc:"The percentage of total licensed capacity that is in use."`
	Url                          string  `json:"url,omitempty" yaml:"url,omitempty" required:"false" doc:"Endpoint URL of the VMS object"`
}

// VmsLoginBannerWithContext_GET
// method: GET
// url: /vms/{id}/login_banner/
// summary: Return VMS login banner (Authentication Not Required)
func (r *Vms) VmsLoginBannerWithContext_GET(ctx context.Context, id any) (*VmsLoginBanner_GET_Model, error) {
	resourcePath := core.BuildResourcePathWithID("vms", id, "login_banner")

	var reqParams core.Params
	var reqBody core.Params

	record, err := core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodGet, resourcePath, reqParams, reqBody)
	if err != nil {
		return nil, err
	}

	var response VmsLoginBanner_GET_Model
	if err := record.Fill(&response); err != nil {
		return nil, err
	}
	return &response, nil

}

// VmsLoginBanner_GET
// method: GET
// url: /vms/{id}/login_banner/
// summary: Return VMS login banner (Authentication Not Required)
func (r *Vms) VmsLoginBanner_GET(id any) (*VmsLoginBanner_GET_Model, error) {
	return r.VmsLoginBannerWithContext_GET(r.Untyped.GetCtx(), id)
}

// VmsNetworkSettings_GET_Model represents the response model for VmsNetworkSettings
type VmsNetworkSettings_GET_Model struct {
	AutoPortsExtIface string                               `json:"auto_ports_ext_iface,omitempty" yaml:"auto_ports_ext_iface,omitempty" required:"false" doc:"Allocates the external management IP to one of the following: - Outband. Allocates the external management IP to the onboard left or right port, depending whether B2B is enabled or not. - Inband. Allocates the external management IP to the bond0 interface. - Bond. Creates a bond interface (bond1) on the two RJ45 ports, allowing for redundancy. Negates the ability to have a technician interface. - Northband. For clusters with dual NIC CNodes where one NIC on each CNode is directly connected to the an external client network, this option allocates the external management IP to the externally connected NIC."`
	B2bIpmi           bool                                 `json:"b2b_ipmi,omitempty" yaml:"b2b_ipmi,omitempty" required:"false" doc:"Enables auto configuring the IPMI ports on the nodes with IP addresses according to the B2B template."`
	Boxes             *[]VmsNetworkSettingsModel_BoxesItem `json:"boxes,omitempty" yaml:"boxes,omitempty" required:"false" doc:""`
	Dns               *[]string                            `json:"dns,omitempty" yaml:"dns,omitempty" required:"false" doc:""`
	EthMtu            int64                                `json:"eth_mtu,omitempty" yaml:"eth_mtu,omitempty" required:"false" doc:"The MTU size for the CNode and DNode internal network interfaces, for clusters with Ethernet internal network infrastructure. The MTU should be aligned with the switches. Default=9216."`
	ExtNetmask        string                               `json:"ext_netmask,omitempty" yaml:"ext_netmask,omitempty" required:"false" doc:"The subnet mask of the management subnet"`
	ExternalGateways  *[]string                            `json:"external_gateways,omitempty" yaml:"external_gateways,omitempty" required:"false" doc:""`
	IbMtu             int64                                `json:"ib_mtu,omitempty" yaml:"ib_mtu,omitempty" required:"false" doc:"The MTU size for the CNode and DNode internal network interfaces, for clusters with IB internal network infrastructure. Default=2044. Set a supported MTU for the NIC mode: If IB type is Connected, the maximum IB NB MTU is 65520. If IB type is Datagram, the maximum IB NB MTU is 4092"`
	IpmiGateway       string                               `json:"ipmi_gateway,omitempty" yaml:"ipmi_gateway,omitempty" required:"false" doc:"The IP of a default gateway for the IPMI interfaces on the CNodes and DNodes, if different from the management network default gateway."`
	IpmiNetmask       string                               `json:"ipmi_netmask,omitempty" yaml:"ipmi_netmask,omitempty" required:"false" doc:"The subnet mask for the IPMI gateway."`
	ManagementVips    *[]string                            `json:"management_vips,omitempty" yaml:"management_vips,omitempty" required:"false" doc:""`
	Ntp               *[]string                            `json:"ntp,omitempty" yaml:"ntp,omitempty" required:"false" doc:""`
}

// VmsNetworkSettingsWithContext_GET
// method: GET
// url: /vms/{id}/network_settings/
// summary: Return the network settings of VMS
func (r *Vms) VmsNetworkSettingsWithContext_GET(ctx context.Context, id any) (*VmsNetworkSettings_GET_Model, error) {
	resourcePath := core.BuildResourcePathWithID("vms", id, "network_settings")

	var reqParams core.Params
	var reqBody core.Params

	record, err := core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodGet, resourcePath, reqParams, reqBody)
	if err != nil {
		return nil, err
	}

	var response VmsNetworkSettings_GET_Model
	if err := record.Fill(&response); err != nil {
		return nil, err
	}
	return &response, nil

}

// VmsNetworkSettings_GET
// method: GET
// url: /vms/{id}/network_settings/
// summary: Return the network settings of VMS
func (r *Vms) VmsNetworkSettings_GET(id any) (*VmsNetworkSettings_GET_Model, error) {
	return r.VmsNetworkSettingsWithContext_GET(r.Untyped.GetCtx(), id)
}

// VmsNetworkSettings_PATCH_Body represents the request body for VmsNetworkSettings
type VmsNetworkSettings_PATCH_Body struct {
	AutoPortsExtIface string                              `json:"auto_ports_ext_iface,omitempty" yaml:"auto_ports_ext_iface,omitempty" required:"false" doc:""`
	B2bIpmi           bool                                `json:"b2b_ipmi,omitempty" yaml:"b2b_ipmi,omitempty" required:"false" doc:""`
	Dns               *[]string                           `json:"dns,omitempty" yaml:"dns,omitempty" required:"false" doc:""`
	EthMtu            int64                               `json:"eth_mtu,omitempty" yaml:"eth_mtu,omitempty" required:"false" doc:"The MTU size for the CNode and DNode internal network interfaces, for clusters with Ethernet internal network infrastructure. The MTU should be aligned with the switches. Default=9216."`
	ExtNetmask        string                              `json:"ext_netmask,omitempty" yaml:"ext_netmask,omitempty" required:"false" doc:"The subnet mask of the management subnet"`
	ExternalGateways  *[]string                           `json:"external_gateways,omitempty" yaml:"external_gateways,omitempty" required:"false" doc:""`
	Hosts             *[]VmsNetworkSettingsBody_HostsItem `json:"hosts,omitempty" yaml:"hosts,omitempty" required:"false" doc:""`
	IbMtu             int64                               `json:"ib_mtu,omitempty" yaml:"ib_mtu,omitempty" required:"false" doc:"The MTU size for the CNode and DNode internal network interfaces, for clusters with IB internal network infrastructure. Default=2044. Set a supported MTU for the NIC mode: If IB type is Connected, the maximum IB NB MTU is 65520. If IB type is Datagram, the maximum IB NB MTU is 4092"`
	IpmiGateway       string                              `json:"ipmi_gateway,omitempty" yaml:"ipmi_gateway,omitempty" required:"false" doc:"The IP of a default gateway for the IPMI interfaces on the CNodes and DNodes, if different from the management network default gateway."`
	IpmiNetmask       string                              `json:"ipmi_netmask,omitempty" yaml:"ipmi_netmask,omitempty" required:"false" doc:"The network mask for the IPMI default gateway."`
	ManagementVips    *[]string                           `json:"management_vips,omitempty" yaml:"management_vips,omitempty" required:"false" doc:""`
	Ntp               *[]string                           `json:"ntp,omitempty" yaml:"ntp,omitempty" required:"false" doc:""`
}

// VmsNetworkSettingsWithContext_PATCH
// method: PATCH
// url: /vms/{id}/network_settings/
// summary: Modify the network settings of VMS
//
// Parameters:
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (r *Vms) VmsNetworkSettingsWithContext_PATCH(ctx context.Context, id any, body *VmsNetworkSettings_PATCH_Body, waitTimeout time.Duration) (*untyped.AsyncResult, error) {
	resourcePath := core.BuildResourcePathWithID("vms", id, "network_settings")

	var reqParams core.Params
	reqBody, err := core.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	result, err := core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodPatch, resourcePath, reqParams, reqBody)
	if err != nil {
		return nil, err
	}

	asyncResult, _, err := untyped.MaybeWaitAsyncResultWithContext(ctx, result, r.Untyped, waitTimeout)
	return asyncResult, err

}

// VmsNetworkSettings_PATCH
// method: PATCH
// url: /vms/{id}/network_settings/
// summary: Modify the network settings of VMS
//
// Parameters:
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (r *Vms) VmsNetworkSettings_PATCH(id any, body *VmsNetworkSettings_PATCH_Body, waitTimeout time.Duration) (*untyped.AsyncResult, error) {
	return r.VmsNetworkSettingsWithContext_PATCH(r.Untyped.GetCtx(), id, body, waitTimeout)
}

// VmsPwdSettings_GET_Model represents the response model for VmsPwdSettings
type VmsPwdSettings_GET_Model struct {
	MaxFailedLoginAttempts        int64  `json:"max_failed_login_attempts,omitempty" yaml:"max_failed_login_attempts,omitempty" required:"false" doc:"The number of failed login attempts after which password lockout occurs if enabled. Default: 10"`
	MaxFailedLoginAttemptsEnabled bool   `json:"max_failed_login_attempts_enabled,omitempty" yaml:"max_failed_login_attempts_enabled,omitempty" required:"false" doc:"Password lockout after failed log in attempts. The number of failed login attempts is configured by max_failed_login_attempts."`
	MinPwdLength                  int64  `json:"min_pwd_length,omitempty" yaml:"min_pwd_length,omitempty" required:"false" doc:"Minimum password length for new VMS managers"`
	PwdChangeTimeout              string `json:"pwd_change_timeout,omitempty" yaml:"pwd_change_timeout,omitempty" required:"false" doc:"The time frame within which VMS managers may not change their passwords again after setting a new password if password change timeout is enabled. Default: 24H"`
	PwdChangeTimeoutEnabled       bool   `json:"pwd_change_timeout_enabled,omitempty" yaml:"pwd_change_timeout_enabled,omitempty" required:"false" doc:"Prevents password change for VMS users (managers) for a period after the last password change. The period is configured by pwd_change_timeout."`
	PwdExpirationTimeout          string `json:"pwd_expiration_timeout,omitempty" yaml:"pwd_expiration_timeout,omitempty" required:"false" doc:"Password expiration timeout, which applies if password expiration timeout is enabled. Default: 180D"`
	PwdExpirationTimeoutEnabled   bool   `json:"pwd_expiration_timeout_enabled,omitempty" yaml:"pwd_expiration_timeout_enabled,omitempty" required:"false" doc:"Password expiration, timeout configured by pwd_expiration_timeout."`
	PwdHistoryNoReuseCount        int64  `json:"pwd_history_no_reuse_count,omitempty" yaml:"pwd_history_no_reuse_count,omitempty" required:"false" doc:"The number of previous passwords that VMS managers may not reuse if prevention of password reuse is enabled. Default: 8"`
	PwdHistoryNoReuseCountEnabled bool   `json:"pwd_history_no_reuse_count_enabled,omitempty" yaml:"pwd_history_no_reuse_count_enabled,omitempty" required:"false" doc:"Prevention of reuse of previous passwords. Affects the number of previous passwords set by pwd_histor_no_reuse_count."`
	PwdRequiresLowercase          bool   `json:"pwd_requires_lowercase,omitempty" yaml:"pwd_requires_lowercase,omitempty" required:"false" doc:"Password requires at least one lowercase character"`
	PwdRequiresNumeric            bool   `json:"pwd_requires_numeric,omitempty" yaml:"pwd_requires_numeric,omitempty" required:"false" doc:"Password requires at least one numeric character"`
	PwdRequiresSpecialChars       bool   `json:"pwd_requires_special_chars,omitempty" yaml:"pwd_requires_special_chars,omitempty" required:"false" doc:"Password requires at least one non-alphanumeric character"`
	PwdRequiresUppercase          bool   `json:"pwd_requires_uppercase,omitempty" yaml:"pwd_requires_uppercase,omitempty" required:"false" doc:"Password requires at least one uppercase character"`
	TmpPwdExpirationTimeout       string `json:"tmp_pwd_expiration_timeout,omitempty" yaml:"tmp_pwd_expiration_timeout,omitempty" required:"false" doc:"Expiration timeout for new managers' temporary passwords. Default: 7D"`
}

// VmsPwdSettingsWithContext_GET
// method: GET
// url: /vms/{id}/pwd_settings/
// summary: Return password settings of VMS
func (r *Vms) VmsPwdSettingsWithContext_GET(ctx context.Context, id any) (*VmsPwdSettings_GET_Model, error) {
	resourcePath := core.BuildResourcePathWithID("vms", id, "pwd_settings")

	var reqParams core.Params
	var reqBody core.Params

	record, err := core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodGet, resourcePath, reqParams, reqBody)
	if err != nil {
		return nil, err
	}

	var response VmsPwdSettings_GET_Model
	if err := record.Fill(&response); err != nil {
		return nil, err
	}
	return &response, nil

}

// VmsPwdSettings_GET
// method: GET
// url: /vms/{id}/pwd_settings/
// summary: Return password settings of VMS
func (r *Vms) VmsPwdSettings_GET(id any) (*VmsPwdSettings_GET_Model, error) {
	return r.VmsPwdSettingsWithContext_GET(r.Untyped.GetCtx(), id)
}

// VmsPwdSettings_PATCH_Body represents the request body for VmsPwdSettings
type VmsPwdSettings_PATCH_Body struct {
	MaxFailedLoginAttempts        int64  `json:"max_failed_login_attempts,omitempty" yaml:"max_failed_login_attempts,omitempty" required:"false" doc:"The number of failed login attempts after which password lockout occurs if enabled. Default: 10"`
	MaxFailedLoginAttemptsEnabled bool   `json:"max_failed_login_attempts_enabled,omitempty" yaml:"max_failed_login_attempts_enabled,omitempty" required:"false" doc:"Password lockout after failed log in attempts. The number of failed login attempts is configured by max_failed_login_attempts."`
	MinPwdLength                  int64  `json:"min_pwd_length,omitempty" yaml:"min_pwd_length,omitempty" required:"false" doc:"Minimum password length for new VMS managers"`
	PwdChangeTimeout              string `json:"pwd_change_timeout,omitempty" yaml:"pwd_change_timeout,omitempty" required:"false" doc:"The time frame within which VMS managers may not change their passwords again after setting a new password if password change timeout is enabled. Default: 24H"`
	PwdChangeTimeoutEnabled       bool   `json:"pwd_change_timeout_enabled,omitempty" yaml:"pwd_change_timeout_enabled,omitempty" required:"false" doc:"Prevents password change for VMS users (managers) for a period after the last password change. The period is configured by pwd_change_timeout."`
	PwdExpirationTimeout          string `json:"pwd_expiration_timeout,omitempty" yaml:"pwd_expiration_timeout,omitempty" required:"false" doc:"Password expiration timeout, which applies if password expiration timeout is enabled. Default: 180D"`
	PwdExpirationTimeoutEnabled   bool   `json:"pwd_expiration_timeout_enabled,omitempty" yaml:"pwd_expiration_timeout_enabled,omitempty" required:"false" doc:"Password expiration, timeout configured by pwd_expiration_timeout."`
	PwdHistoryNoReuseCount        int64  `json:"pwd_history_no_reuse_count,omitempty" yaml:"pwd_history_no_reuse_count,omitempty" required:"false" doc:"The number of previous passwords that VMS managers may not reuse if prevention of password reuse is enabled. Default: 8"`
	PwdHistoryNoReuseCountEnabled bool   `json:"pwd_history_no_reuse_count_enabled,omitempty" yaml:"pwd_history_no_reuse_count_enabled,omitempty" required:"false" doc:"Prevention of reuse of previous passwords. Affects the number of previous passwords set by pwd_histor_no_reuse_count."`
	PwdRequiresLowercase          bool   `json:"pwd_requires_lowercase,omitempty" yaml:"pwd_requires_lowercase,omitempty" required:"false" doc:"Password requires at least one lowercase character"`
	PwdRequiresNumeric            bool   `json:"pwd_requires_numeric,omitempty" yaml:"pwd_requires_numeric,omitempty" required:"false" doc:"Password requires at least one numeric character"`
	PwdRequiresSpecialChars       bool   `json:"pwd_requires_special_chars,omitempty" yaml:"pwd_requires_special_chars,omitempty" required:"false" doc:"Password requires at least one non-alphanumeric character"`
	PwdRequiresUppercase          bool   `json:"pwd_requires_uppercase,omitempty" yaml:"pwd_requires_uppercase,omitempty" required:"false" doc:"Password requires at least one uppercase character"`
	TmpPwdExpirationTimeout       string `json:"tmp_pwd_expiration_timeout,omitempty" yaml:"tmp_pwd_expiration_timeout,omitempty" required:"false" doc:"Expiration timeout for new managers' temporary passwords. Default: 7D"`
}

// VmsPwdSettings_PATCH_Model represents the response model for VmsPwdSettings
type VmsPwdSettings_PATCH_Model struct {
	MaxFailedLoginAttempts        int64  `json:"max_failed_login_attempts,omitempty" yaml:"max_failed_login_attempts,omitempty" required:"false" doc:"The number of failed login attempts after which password lockout occurs if enabled. Default: 10"`
	MaxFailedLoginAttemptsEnabled bool   `json:"max_failed_login_attempts_enabled,omitempty" yaml:"max_failed_login_attempts_enabled,omitempty" required:"false" doc:"Password lockout after failed log in attempts. The number of failed login attempts is configured by max_failed_login_attempts."`
	MinPwdLength                  int64  `json:"min_pwd_length,omitempty" yaml:"min_pwd_length,omitempty" required:"false" doc:"Minimum password length for new VMS managers"`
	PwdChangeTimeout              string `json:"pwd_change_timeout,omitempty" yaml:"pwd_change_timeout,omitempty" required:"false" doc:"The time frame within which VMS managers may not change their passwords again after setting a new password if password change timeout is enabled. Default: 24H"`
	PwdChangeTimeoutEnabled       bool   `json:"pwd_change_timeout_enabled,omitempty" yaml:"pwd_change_timeout_enabled,omitempty" required:"false" doc:"Prevents password change for VMS users (managers) for a period after the last password change. The period is configured by pwd_change_timeout."`
	PwdExpirationTimeout          string `json:"pwd_expiration_timeout,omitempty" yaml:"pwd_expiration_timeout,omitempty" required:"false" doc:"Password expiration timeout, which applies if password expiration timeout is enabled. Default: 180D"`
	PwdExpirationTimeoutEnabled   bool   `json:"pwd_expiration_timeout_enabled,omitempty" yaml:"pwd_expiration_timeout_enabled,omitempty" required:"false" doc:"Password expiration, timeout configured by pwd_expiration_timeout."`
	PwdHistoryNoReuseCount        int64  `json:"pwd_history_no_reuse_count,omitempty" yaml:"pwd_history_no_reuse_count,omitempty" required:"false" doc:"The number of previous passwords that VMS managers may not reuse if prevention of password reuse is enabled. Default: 8"`
	PwdHistoryNoReuseCountEnabled bool   `json:"pwd_history_no_reuse_count_enabled,omitempty" yaml:"pwd_history_no_reuse_count_enabled,omitempty" required:"false" doc:"Prevention of reuse of previous passwords. Affects the number of previous passwords set by pwd_histor_no_reuse_count."`
	PwdRequiresLowercase          bool   `json:"pwd_requires_lowercase,omitempty" yaml:"pwd_requires_lowercase,omitempty" required:"false" doc:"Password requires at least one lowercase character"`
	PwdRequiresNumeric            bool   `json:"pwd_requires_numeric,omitempty" yaml:"pwd_requires_numeric,omitempty" required:"false" doc:"Password requires at least one numeric character"`
	PwdRequiresSpecialChars       bool   `json:"pwd_requires_special_chars,omitempty" yaml:"pwd_requires_special_chars,omitempty" required:"false" doc:"Password requires at least one non-alphanumeric character"`
	PwdRequiresUppercase          bool   `json:"pwd_requires_uppercase,omitempty" yaml:"pwd_requires_uppercase,omitempty" required:"false" doc:"Password requires at least one uppercase character"`
	TmpPwdExpirationTimeout       string `json:"tmp_pwd_expiration_timeout,omitempty" yaml:"tmp_pwd_expiration_timeout,omitempty" required:"false" doc:"Expiration timeout for new managers' temporary passwords. Default: 7D"`
}

// VmsPwdSettingsWithContext_PATCH
// method: PATCH
// url: /vms/{id}/pwd_settings/
// summary: Modify password settings of VMS
func (r *Vms) VmsPwdSettingsWithContext_PATCH(ctx context.Context, id any, body *VmsPwdSettings_PATCH_Body) (*VmsPwdSettings_PATCH_Model, error) {
	resourcePath := core.BuildResourcePathWithID("vms", id, "pwd_settings")

	var reqParams core.Params
	reqBody, err := core.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodPatch, resourcePath, reqParams, reqBody)
	if err != nil {
		return nil, err
	}

	var response VmsPwdSettings_PATCH_Model
	if err := record.Fill(&response); err != nil {
		return nil, err
	}
	return &response, nil

}

// VmsPwdSettings_PATCH
// method: PATCH
// url: /vms/{id}/pwd_settings/
// summary: Modify password settings of VMS
func (r *Vms) VmsPwdSettings_PATCH(id any, body *VmsPwdSettings_PATCH_Body) (*VmsPwdSettings_PATCH_Model, error) {
	return r.VmsPwdSettingsWithContext_PATCH(r.Untyped.GetCtx(), id, body)
}

// VmsSamlConfigWithContext_DELETE
// method: DELETE
// url: /vms/{id}/saml_config/
// summary: Delete SAML configuration for a specific IdP
func (r *Vms) VmsSamlConfigWithContext_DELETE(ctx context.Context, id any) (string, error) {
	resourcePath := core.BuildResourcePathWithID("vms", id, "saml_config")

	var reqParams core.Params
	var reqBody core.Params

	record, err := core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodDelete, resourcePath, reqParams, reqBody)
	if err != nil {
		return "", err
	}
	// Extract primitive response from @raw key
	if rawVal, ok := record["@raw"]; ok {
		if rawBytes, ok := rawVal.([]byte); ok {
			return string(rawBytes), nil
		}
		return fmt.Sprintf("%v", rawVal), nil
	}
	return "", fmt.Errorf("@raw key not found in response")

}

// VmsSamlConfig_DELETE
// method: DELETE
// url: /vms/{id}/saml_config/
// summary: Delete SAML configuration for a specific IdP
func (r *Vms) VmsSamlConfig_DELETE(id any) (string, error) {
	return r.VmsSamlConfigWithContext_DELETE(r.Untyped.GetCtx(), id)
}

// VmsSamlConfigWithContext_PATCH
// method: PATCH
// url: /vms/{id}/saml_config/
// summary: Remove SP sign response or assertions request from an IdP
func (r *Vms) VmsSamlConfigWithContext_PATCH(ctx context.Context, id any) (string, error) {
	resourcePath := core.BuildResourcePathWithID("vms", id, "saml_config")

	var reqParams core.Params
	var reqBody core.Params

	record, err := core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodPatch, resourcePath, reqParams, reqBody)
	if err != nil {
		return "", err
	}
	// Extract primitive response from @raw key
	if rawVal, ok := record["@raw"]; ok {
		if rawBytes, ok := rawVal.([]byte); ok {
			return string(rawBytes), nil
		}
		return fmt.Sprintf("%v", rawVal), nil
	}
	return "", fmt.Errorf("@raw key not found in response")

}

// VmsSamlConfig_PATCH
// method: PATCH
// url: /vms/{id}/saml_config/
// summary: Remove SP sign response or assertions request from an IdP
func (r *Vms) VmsSamlConfig_PATCH(id any) (string, error) {
	return r.VmsSamlConfigWithContext_PATCH(r.Untyped.GetCtx(), id)
}

// VmsSamlConfig_POST_Body represents the request body for VmsSamlConfig
type VmsSamlConfig_POST_Body struct {
	SamlSettings VmsSamlConfigBody_SamlSettings `json:"saml_settings,omitempty" yaml:"saml_settings,omitempty" required:"false" doc:""`
}

// VmsSamlConfigWithContext_POST
// method: POST
// url: /vms/{id}/saml_config/
// summary: Modify or Create a SAML configuration for a specific IdP.
func (r *Vms) VmsSamlConfigWithContext_POST(ctx context.Context, id any, body *VmsSamlConfig_POST_Body) (string, error) {
	resourcePath := core.BuildResourcePathWithID("vms", id, "saml_config")

	var reqParams core.Params
	reqBody, err := core.NewParamsFromStruct(body)
	if err != nil {
		return "", err
	}

	record, err := core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodPost, resourcePath, reqParams, reqBody)
	if err != nil {
		return "", err
	}
	// Extract primitive response from @raw key
	if rawVal, ok := record["@raw"]; ok {
		if rawBytes, ok := rawVal.([]byte); ok {
			return string(rawBytes), nil
		}
		return fmt.Sprintf("%v", rawVal), nil
	}
	return "", fmt.Errorf("@raw key not found in response")

}

// VmsSamlConfig_POST
// method: POST
// url: /vms/{id}/saml_config/
// summary: Modify or Create a SAML configuration for a specific IdP.
func (r *Vms) VmsSamlConfig_POST(id any, body *VmsSamlConfig_POST_Body) (string, error) {
	return r.VmsSamlConfigWithContext_POST(r.Untyped.GetCtx(), id, body)
}

// VmsToggleMaintenanceModeWithContext_PATCH
// method: PATCH
// url: /vms/{id}/toggle_maintenance_mode/
// summary: Toggle maintenance mode
//
// Parameters:
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (r *Vms) VmsToggleMaintenanceModeWithContext_PATCH(ctx context.Context, id any, waitTimeout time.Duration) (*untyped.AsyncResult, error) {
	resourcePath := core.BuildResourcePathWithID("vms", id, "toggle_maintenance_mode")

	var reqParams core.Params
	var reqBody core.Params

	result, err := core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodPatch, resourcePath, reqParams, reqBody)
	if err != nil {
		return nil, err
	}

	asyncResult, _, err := untyped.MaybeWaitAsyncResultWithContext(ctx, result, r.Untyped, waitTimeout)
	return asyncResult, err

}

// VmsToggleMaintenanceMode_PATCH
// method: PATCH
// url: /vms/{id}/toggle_maintenance_mode/
// summary: Toggle maintenance mode
//
// Parameters:
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (r *Vms) VmsToggleMaintenanceMode_PATCH(id any, waitTimeout time.Duration) (*untyped.AsyncResult, error) {
	return r.VmsToggleMaintenanceModeWithContext_PATCH(r.Untyped.GetCtx(), id, waitTimeout)
}

// -----------------------------------------------------
// GENERATION ISSUES
// -----------------------------------------------------
//   - Extra method GET /vms/{id}/saml_config/ skipped: GET /vms/{id}/saml_config/ - Response schema contains ambiguous nested objects (objects with no properties)
//   - Extra method PATCH /vms/{id}/remove_client_certificate/ skipped: PATCH /vms/{id}/remove_client_certificate/ - No response schema defined in OpenAPI spec. Error: no valid schema found in PATCH response (200/201/202/204) for resource /vms/{id}/remove_client_certificate/
//   - Extra method PATCH /vms/{id}/reset_certificate/ skipped: PATCH /vms/{id}/reset_certificate/ - No response schema defined in OpenAPI spec. Error: no valid schema found in PATCH response (200/201/202/204) for resource /vms/{id}/reset_certificate/
//   - Extra method PATCH /vms/{id}/reset_ssl_ciphers/ skipped: PATCH /vms/{id}/reset_ssl_ciphers/ - No response schema defined in OpenAPI spec. Error: no valid schema found in PATCH response (200/201/202/204) for resource /vms/{id}/reset_ssl_ciphers/
//   - Extra method PATCH /vms/{id}/set_certificate/ skipped: PATCH /vms/{id}/set_certificate/ - No response schema defined in OpenAPI spec. Error: no valid schema found in PATCH response (200/201/202/204) for resource /vms/{id}/set_certificate/
//   - Extra method PATCH /vms/{id}/set_client_certificate/ skipped: PATCH /vms/{id}/set_client_certificate/ - No response schema defined in OpenAPI spec. Error: no valid schema found in PATCH response (200/201/202/204) for resource /vms/{id}/set_client_certificate/
//   - Extra method PATCH /vms/{id}/set_max_api_tokens_per_user/ skipped: PATCH /vms/{id}/set_max_api_tokens_per_user/ - No response schema defined in OpenAPI spec. Error: no valid schema found in PATCH response (200/201/202/204) for resource /vms/{id}/set_max_api_tokens_per_user/
//   - Extra method PATCH /vms/{id}/set_ssl_ciphers/ skipped: PATCH /vms/{id}/set_ssl_ciphers/ - No response schema defined in OpenAPI spec. Error: no valid schema found in PATCH response (200/201/202/204) for resource /vms/{id}/set_ssl_ciphers/
//   - Extra method PATCH /vms/{id}/set_ssl_port/ skipped: PATCH /vms/{id}/set_ssl_port/ - No response schema defined in OpenAPI spec. Error: no valid schema found in PATCH response (200/201/202/204) for resource /vms/{id}/set_ssl_port/
//   - Extra method POST /vms/{id}/network_settings_summary/ skipped: POST /vms/{id}/network_settings_summary/ - Response schema contains ambiguous nested objects (objects with no properties)
//   - UPDATE operation excluded: PATCH/PUT /vms/{id}/ has no response schema and doesn't return 204 NO CONTENT
