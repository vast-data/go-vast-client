// Code generated by generate-typed-resources. DO NOT EDIT.
// Template: LIST|READ

package typed

import (
	"context"
	"net/http"
	"time"

	"github.com/vast-data/go-vast-client/core"
	"github.com/vast-data/go-vast-client/resources/untyped"
)

// -----------------------------------------------------
// RESOURCE TYPE
// -----------------------------------------------------

// EventDefinition represents a typed resource for eventdefinition operations
type EventDefinition struct {
	*core.TypedVastResource
}

// -----------------------------------------------------
// SEARCH PARAMS
// -----------------------------------------------------

// EventDefinitionSearchParams represents the search parameters for EventDefinition operations
type EventDefinitionSearchParams struct {
	EventType  string `json:"event_type,omitempty" yaml:"event_type,omitempty" required:"false" doc:""`
	Name       string `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:""`
	ObjectType string `json:"object_type,omitempty" yaml:"object_type,omitempty" required:"false" doc:""`

	// RawData allows passing arbitrary search parameters as key-value pairs.
	//
	// Use this field when you need query parameters that are not covered by the typed fields above.
	// This is particularly useful for:
	//   - Dynamic filter operations (e.g., "path__contains", "name__icontains")
	//   - Django-style query filters
	//   - Custom backend-specific parameters
	//
	// Example:
	//   params := &EventDefinitionSearchParams{
	//       RawData: core.Params{"path__contains": "/foo", "name__icontains": "bar"},
	//   }
	//
	// Note: You can use either the typed fields or RawData, or combine both.
	RawData core.Params `json:"-" yaml:"-"`
}

// -----------------------------------------------------
// MODELS
// -----------------------------------------------------

// EventDefinitionDetailsModel represents the detailed model returned by GET/List operations
// Type alias to component definition: #/components/schemas/EventDefinition
type EventDefinitionDetailsModel = Component_EventDefinition

// -----------------------------------------------------
// LIST
// -----------------------------------------------------

// List retrieves multiple eventdefinitions with typed request/response
// summary: List Event Definitions
func (r *EventDefinition) List(req *EventDefinitionSearchParams) ([]*EventDefinitionDetailsModel, error) {
	return r.ListWithContext(r.Untyped.GetCtx(), req)
}

// ListWithContext retrieves multiple eventdefinitions with typed request/response using provided context
// summary: List Event Definitions
func (r *EventDefinition) ListWithContext(ctx context.Context, req *EventDefinitionSearchParams) ([]*EventDefinitionDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.GetResourceMap()[r.GetResourceType()].ListWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response []*EventDefinitionDetailsModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// Get retrieves a single eventdefinition with typed request/response
// summary: List Event Definitions
func (r *EventDefinition) Get(req *EventDefinitionSearchParams) (*EventDefinitionDetailsModel, error) {
	return r.GetWithContext(r.Untyped.GetCtx(), req)
}

// GetWithContext retrieves a single eventdefinition with typed request/response using provided context
// summary: List Event Definitions
func (r *EventDefinition) GetWithContext(ctx context.Context, req *EventDefinitionSearchParams) (*EventDefinitionDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response EventDefinitionDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// READ
// -----------------------------------------------------

// GetById retrieves a single eventdefinition by ID
// summary: Return Details of an Event Definition
func (r *EventDefinition) GetById(id any) (*EventDefinitionDetailsModel, error) {
	return r.GetByIdWithContext(r.Untyped.GetCtx(), id)
}

// GetByIdWithContext retrieves a single eventdefinition by ID using provided context
// summary: Return Details of an Event Definition
func (r *EventDefinition) GetByIdWithContext(ctx context.Context, id any) (*EventDefinitionDetailsModel, error) {
	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetByIdWithContext(ctx, id)
	if err != nil {
		return nil, err
	}

	var response EventDefinitionDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Exists checks if a eventdefinition exists
func (r *EventDefinition) Exists(req *EventDefinitionSearchParams) (bool, error) {
	return r.ExistsWithContext(r.Untyped.GetCtx(), req)
}

// ExistsWithContext checks if a eventdefinition exists using provided context
func (r *EventDefinition) ExistsWithContext(ctx context.Context, req *EventDefinitionSearchParams) (bool, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].ExistsWithContext(ctx, params)
}

// MustExists checks if a eventdefinition exists and panics if not
func (r *EventDefinition) MustExists(req *EventDefinitionSearchParams) bool {
	return r.MustExistsWithContext(r.Untyped.GetCtx(), req)
}

// MustExistsWithContext checks if a eventdefinition exists and panics if not using provided context
func (r *EventDefinition) MustExistsWithContext(ctx context.Context, req *EventDefinitionSearchParams) bool {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].MustExistsWithContext(ctx, params)
}

// -----------------------------------------------------
// EXTRA METHODS
// -----------------------------------------------------

// EventDefinitionTestWithContext_PATCH
// method: PATCH
// url: /eventdefinitions/{id}/test/
// summary: Test Event Definition
//
// Parameters:
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (r *EventDefinition) EventDefinitionTestWithContext_PATCH(ctx context.Context, id any, waitTimeout time.Duration) (*untyped.AsyncResult, error) {
	resourcePath := core.BuildResourcePathWithID("eventdefinitions", id, "test")

	var reqParams core.Params
	var reqBody core.Params

	result, err := core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodPatch, resourcePath, reqParams, reqBody)
	if err != nil {
		return nil, err
	}

	asyncResult, _, err := untyped.MaybeWaitAsyncResultWithContext(ctx, result, r.Untyped, waitTimeout)
	return asyncResult, err

}

// EventDefinitionTest_PATCH
// method: PATCH
// url: /eventdefinitions/{id}/test/
// summary: Test Event Definition
//
// Parameters:
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (r *EventDefinition) EventDefinitionTest_PATCH(id any, waitTimeout time.Duration) (*untyped.AsyncResult, error) {
	return r.EventDefinitionTestWithContext_PATCH(r.Untyped.GetCtx(), id, waitTimeout)
}

// -----------------------------------------------------
// GENERATION ISSUES
// -----------------------------------------------------
//   - CREATE operation excluded: POST eventdefinitions has no response schema and doesn't return 204 NO CONTENT
//   - UPDATE operation excluded: PATCH/PUT /eventdefinitions/{id}/ has no response schema and doesn't return 204 NO CONTENT
