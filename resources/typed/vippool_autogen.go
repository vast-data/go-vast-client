// Code generated by generate-typed-resources. DO NOT EDIT.
// Template: CREATE|LIST|READ|UPDATE|DELETE

package typed

import (
	"context"

	"github.com/vast-data/go-vast-client/core"
)

// -----------------------------------------------------
// RESOURCE TYPE
// -----------------------------------------------------

// VipPool represents a typed resource for vippool operations
type VipPool struct {
	*core.TypedVastResource
}

// -----------------------------------------------------
// SEARCH PARAMS
// -----------------------------------------------------

// VipPoolSearchParams represents the search parameters for VipPool operations
type VipPoolSearchParams struct {
	EndIp          string `json:"end_ip,omitempty" yaml:"end_ip,omitempty" required:"false" doc:"Filter by end IP of VIP pool range"`
	Guid           string `json:"guid,omitempty" yaml:"guid,omitempty" required:"false" doc:"Global unique ID"`
	Name           string `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:"VIP pool name"`
	PortMembership string `json:"port_membership,omitempty" yaml:"port_membership,omitempty" required:"false" doc:"Filters pools by port affinity"`
	ServesTenant   string `json:"serves_tenant,omitempty" yaml:"serves_tenant,omitempty" required:"false" doc:"Filter by served tenants. Accepts tenant ID or \"all\" for all served tenants."`
	StartIp        string `json:"start_ip,omitempty" yaml:"start_ip,omitempty" required:"false" doc:"Filter by start IP of VIP pool range"`
	TenantId       int64  `json:"tenant_id,omitempty" yaml:"tenant_id,omitempty" required:"false" doc:"Filter by tenant. Specify tenant ID."`

	// RawData allows passing arbitrary search parameters as key-value pairs.
	//
	// Use this field when you need query parameters that are not covered by the typed fields above.
	// This is particularly useful for:
	//   - Dynamic filter operations (e.g., "path__contains", "name__icontains")
	//   - Django-style query filters
	//   - Custom backend-specific parameters
	//
	// Example:
	//   params := &VipPoolSearchParams{
	//       RawData: core.Params{"path__contains": "/foo", "name__icontains": "bar"},
	//   }
	//
	// Note: You can use either the typed fields or RawData, or combine both.
	RawData core.Params `json:"-" yaml:"-"`
}

// -----------------------------------------------------
// REQUEST BODY
// -----------------------------------------------------

// VipPoolRequestBody represents the request body for VipPool operations
type VipPoolRequestBody struct {
	IpRanges                *[][]string `json:"ip_ranges,omitempty" yaml:"ip_ranges,omitempty" required:"true" doc:"Array of IP ranges to include in the vippool."`
	SubnetCidr              int64       `json:"subnet_cidr,omitempty" yaml:"subnet_cidr,omitempty" required:"true" doc:"The subnet expressed as a CIDR index (number of bits in each IP that belong to the subnet)"`
	BgpConfigId             int64       `json:"bgp_config_id,omitempty" yaml:"bgp_config_id,omitempty" required:"false" doc:"The ID of the BGP configuration to use for layer 3 connectivity. configuration"`
	ClientMonitoringIps     *[][]string `json:"client_monitoring_ips,omitempty" yaml:"client_monitoring_ips,omitempty" required:"false" doc:"External client monitoring IP ranges for VIP pool connectivity monitoring"`
	ClusterId               int64       `json:"cluster_id,omitempty" yaml:"cluster_id,omitempty" required:"false" doc:""`
	CnodeIds                *[]int64    `json:"cnode_ids,omitempty" yaml:"cnode_ids,omitempty" required:"false" doc:"Dedicates a specific group of CNodes to the VIP pool. List the IDs of the CNodes. Separate IDs by commas. This is a way to dedicate a specific set of CNodes to a specific set of client hosts or applications. Overridden if cnode_names is passed."`
	CnodeNames              string      `json:"cnode_names,omitempty" yaml:"cnode_names,omitempty" required:"false" doc:"Dedicates a specific group of CNodes to the VIP pool. List the names of the CNodes. Separate names by commas. This is a way to dedicate a specific set of CNodes to a specific set of client hosts or applications. Overrides cnode_ids."`
	DomainName              string      `json:"domain_name,omitempty" yaml:"domain_name,omitempty" required:"false" doc:"Domain name for the VAST DNS server. If a DNS configuration exists, the domain suffix defined in the DNS server configuration is appended to this domain name to form a FQDN which the DNS server resolves to this VIP pool."`
	EnableL3                bool        `json:"enable_l3,omitempty" yaml:"enable_l3,omitempty" required:"false" doc:"Enables L3 networking, in which the cluster's CNodes act as Border Gateway Protocol (BGP) peers belonging to a VAST Autonomous system (AS) which is connected to the client network's AS"`
	EnableWeightedBalancing bool        `json:"enable_weighted_balancing,omitempty" yaml:"enable_weighted_balancing,omitempty" required:"false" doc:"Enable weighted balancing"`
	Enabled                 bool        `json:"enabled,omitempty" yaml:"enabled,omitempty" required:"false" doc:"Set to false to disable the pool."`
	EndIp                   string      `json:"end_ip,omitempty" yaml:"end_ip,omitempty" required:"false" doc:"Not currently in use. Use ip_ranges instead."`
	GwIp                    string      `json:"gw_ip,omitempty" yaml:"gw_ip,omitempty" required:"false" doc:"The IP address of a local gateway device if client traffic is routed through one."`
	GwIpv6                  string      `json:"gw_ipv6,omitempty" yaml:"gw_ipv6,omitempty" required:"false" doc:"The IP address of a local gateway device if client traffic is routed through one."`
	Name                    string      `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:""`
	PeerAsn                 int64       `json:"peer_asn,omitempty" yaml:"peer_asn,omitempty" required:"false" doc:"The client network's ASN. Must not be equal to vast_asn. Applicable only if enable_ls is true."`
	PortMembership          string      `json:"port_membership,omitempty" yaml:"port_membership,omitempty" required:"false" doc:"Allocates left, right or all CNode ports to the VIP pool. Allocating the left port and the right port in different VIP pools enables the CNodes to be connected to multiple networks simultaneously. Default: all"`
	Role                    string      `json:"role,omitempty" yaml:"role,omitempty" required:"false" doc:"'PROTOCOLS' dedicates the VIP pool to client traffic from all of the supported access protocols (NFSv3, NFSv4.2, SMBv2, S3, Database). At least one VIP pool must be created to enable client access. 'REPLICATION' dedicates the VIP pool for connectivity with an async replication peer cluster. This is needed for async replication. 'BIG_CATALOG' dedicates the VIP pool to VAST Catalog query access from the client network."`
	StartIp                 string      `json:"start_ip,omitempty" yaml:"start_ip,omitempty" required:"false" doc:"Not currently in use. Use ip_ranges instead."`
	SubnetCidrIpv6          int64       `json:"subnet_cidr_ipv6,omitempty" yaml:"subnet_cidr_ipv6,omitempty" required:"false" doc:"The subnet expressed as a CIDR index (number of bits in each IP that belong to the subnet)"`
	TenantId                int64       `json:"tenant_id,omitempty" yaml:"tenant_id,omitempty" required:"false" doc:"Tenant ID"`
	VastAsn                 int64       `json:"vast_asn,omitempty" yaml:"vast_asn,omitempty" required:"false" doc:"The cluster's ASN. Must not be equal to peer_asn. Applicable only if enable_ls is true."`
	Vlan                    int64       `json:"vlan,omitempty" yaml:"vlan,omitempty" required:"false" doc:"To tag the VIP pool with a specific VLAN on the data network, specify the VLAN (0-4096). The VIP pool will be exposed only to the specified VLAN on the client network."`
	VmsPreferred            bool        `json:"vms_preferred,omitempty" yaml:"vms_preferred,omitempty" required:"false" doc:"If true, CNodes participating in the vip pool are preferred in VMS host election."`
}

// -----------------------------------------------------
// MODELS
// -----------------------------------------------------

// VipPoolDetailsModel represents the detailed model returned by GET/List operations
// Type alias to component definition: #/components/schemas/VIPPool
type VipPoolDetailsModel = Component_VIPPool

// VipPoolUpsertModel represents the model returned by Create/Update operations
// Type alias to component definition: #/components/schemas/VIPPool
type VipPoolUpsertModel = Component_VIPPool

// -----------------------------------------------------
// LIST
// -----------------------------------------------------

// List retrieves multiple vippools with typed request/response
// summary:  List VIP Pools
func (r *VipPool) List(req *VipPoolSearchParams) ([]*VipPoolDetailsModel, error) {
	return r.ListWithContext(r.Untyped.GetCtx(), req)
}

// ListWithContext retrieves multiple vippools with typed request/response using provided context
// summary:  List VIP Pools
func (r *VipPool) ListWithContext(ctx context.Context, req *VipPoolSearchParams) ([]*VipPoolDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.GetResourceMap()[r.GetResourceType()].ListWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response []*VipPoolDetailsModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// Get retrieves a single vippool with typed request/response
// summary:  List VIP Pools
func (r *VipPool) Get(req *VipPoolSearchParams) (*VipPoolDetailsModel, error) {
	return r.GetWithContext(r.Untyped.GetCtx(), req)
}

// GetWithContext retrieves a single vippool with typed request/response using provided context
// summary:  List VIP Pools
func (r *VipPool) GetWithContext(ctx context.Context, req *VipPoolSearchParams) (*VipPoolDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response VipPoolDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// READ
// -----------------------------------------------------

// GetById retrieves a single vippool by ID
// summary: Return Details of a VIP Pool
func (r *VipPool) GetById(id any) (*VipPoolDetailsModel, error) {
	return r.GetByIdWithContext(r.Untyped.GetCtx(), id)
}

// GetByIdWithContext retrieves a single vippool by ID using provided context
// summary: Return Details of a VIP Pool
func (r *VipPool) GetByIdWithContext(ctx context.Context, id any) (*VipPoolDetailsModel, error) {
	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetByIdWithContext(ctx, id)
	if err != nil {
		return nil, err
	}

	var response VipPoolDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// CREATE
// -----------------------------------------------------

// Create creates a new vippool with typed request/response
// summary: Create VIP Pool
func (r *VipPool) Create(req *VipPoolRequestBody) (*VipPoolUpsertModel, error) {
	return r.CreateWithContext(r.Untyped.GetCtx(), req)
}

// CreateWithContext creates a new vippool with typed request/response using provided context
// summary: Create VIP Pool
func (r *VipPool) CreateWithContext(ctx context.Context, req *VipPoolRequestBody) (*VipPoolUpsertModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].CreateWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response VipPoolUpsertModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// UPDATE
// -----------------------------------------------------

// Update updates an existing vippool with typed request/response
func (r *VipPool) Update(id any, req *VipPoolRequestBody) (*VipPoolUpsertModel, error) {
	return r.UpdateWithContext(r.Untyped.GetCtx(), id, req)
}

// UpdateWithContext updates an existing vippool with typed request/response using provided context
func (r *VipPool) UpdateWithContext(ctx context.Context, id any, req *VipPoolRequestBody) (*VipPoolUpsertModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].UpdateWithContext(ctx, id, params)
	if err != nil {
		return nil, err
	}

	var response VipPoolUpsertModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// DELETE
// -----------------------------------------------------

// Delete deletes a vippool with search parameters
func (r *VipPool) Delete(req *VipPoolSearchParams) error {
	return r.DeleteWithContext(r.Untyped.GetCtx(), req)
}

// DeleteWithContext deletes a vippool with search parameters using provided context
func (r *VipPool) DeleteWithContext(ctx context.Context, req *VipPoolSearchParams) error {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return err
	}
	_, err = r.Untyped.GetResourceMap()[r.GetResourceType()].DeleteWithContext(ctx, params, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteById deletes a vippool by ID
// summary: Delete VIP Pool
//
// Parameters:
//   - id: VIP Pool ID
func (r *VipPool) DeleteById(id any) error {
	return r.DeleteByIdWithContext(r.Untyped.GetCtx(), id)
}

// DeleteByIdWithContext deletes a vippool by ID using provided context
// summary: Delete VIP Pool
//
// Parameters:
//   - id: VIP Pool ID
func (r *VipPool) DeleteByIdWithContext(ctx context.Context, id any) error {
	_, err := r.Untyped.GetResourceMap()[r.GetResourceType()].DeleteByIdWithContext(ctx, id, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// -----------------------------------------------------
// ENSURE
// -----------------------------------------------------

// Ensure ensures a vippool exists with typed response
func (r *VipPool) Ensure(searchParams *VipPoolSearchParams, body *VipPoolRequestBody) (*VipPoolUpsertModel, error) {
	return r.EnsureWithContext(r.Untyped.GetCtx(), searchParams, body)
}

// EnsureWithContext ensures a vippool exists with typed response using provided context
func (r *VipPool) EnsureWithContext(ctx context.Context, searchParams *VipPoolSearchParams, body *VipPoolRequestBody) (*VipPoolUpsertModel, error) {
	searchParamsConverted, err := core.NewParamsFromStruct(searchParams)
	if err != nil {
		return nil, err
	}
	bodyConverted, err := core.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].EnsureWithContext(ctx, searchParamsConverted, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response VipPoolUpsertModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Exists checks if a vippool exists
func (r *VipPool) Exists(req *VipPoolSearchParams) (bool, error) {
	return r.ExistsWithContext(r.Untyped.GetCtx(), req)
}

// ExistsWithContext checks if a vippool exists using provided context
func (r *VipPool) ExistsWithContext(ctx context.Context, req *VipPoolSearchParams) (bool, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].ExistsWithContext(ctx, params)
}

// MustExists checks if a vippool exists and panics if not
func (r *VipPool) MustExists(req *VipPoolSearchParams) bool {
	return r.MustExistsWithContext(r.Untyped.GetCtx(), req)
}

// MustExistsWithContext checks if a vippool exists and panics if not using provided context
func (r *VipPool) MustExistsWithContext(ctx context.Context, req *VipPoolSearchParams) bool {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].MustExistsWithContext(ctx, params)
}
