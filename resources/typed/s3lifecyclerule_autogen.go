// Code generated by generate-typed-resources. DO NOT EDIT.
// Template: CREATE|LIST|READ|DELETE

package typed

import (
	"context"

	"github.com/vast-data/go-vast-client/core"
)

// -----------------------------------------------------
// RESOURCE TYPE
// -----------------------------------------------------

// S3LifeCycleRule represents a typed resource for s3lifecyclerule operations
type S3LifeCycleRule struct {
	*core.TypedVastResource
}

// -----------------------------------------------------
// SEARCH PARAMS
// -----------------------------------------------------

// S3LifeCycleRuleSearchParams represents the search parameters for S3LifeCycleRule operations
type S3LifeCycleRuleSearchParams struct {
	Name string `json:"name,omitempty" yaml:"name,omitempty" required:"true" doc:"A unique name"`
	Guid string `json:"guid,omitempty" yaml:"guid,omitempty" required:"false" doc:""`

	// RawData allows passing arbitrary search parameters as key-value pairs.
	//
	// Use this field when you need query parameters that are not covered by the typed fields above.
	// This is particularly useful for:
	//   - Dynamic filter operations (e.g., "path__contains", "name__icontains")
	//   - Django-style query filters
	//   - Custom backend-specific parameters
	//
	// Example:
	//   params := &S3LifeCycleRuleSearchParams{
	//       RawData: core.Params{"path__contains": "/foo", "name__icontains": "bar"},
	//   }
	//
	// Note: You can use either the typed fields or RawData, or combine both.
	RawData core.Params `json:"-" yaml:"-"`
}

// -----------------------------------------------------
// REQUEST BODY
// -----------------------------------------------------

// S3LifeCycleRuleRequestBody represents the request body for S3LifeCycleRule operations
type S3LifeCycleRuleRequestBody struct {
	Name                        string `json:"name,omitempty" yaml:"name,omitempty" required:"true" doc:"A name for the rule."`
	ViewId                      string `json:"view_id,omitempty" yaml:"view_id,omitempty" required:"true" doc:"ID of the view on a specific bucket. The rule will apply to objects within that specific bucket."`
	AbortMpuDaysAfterInitiation int64  `json:"abort_mpu_days_after_initiation,omitempty" yaml:"abort_mpu_days_after_initiation,omitempty" required:"false" doc:""`
	Enabled                     bool   `json:"enabled,omitempty" yaml:"enabled,omitempty" required:"false" doc:"True by default. Set to false if you do not want lifestyle actions defined in the rule to become effective immediately after the rule is created."`
	ExpirationDate              string `json:"expiration_date,omitempty" yaml:"expiration_date,omitempty" required:"false" doc:"Expires current versions of objects on a specified date. Alternatively, specify expiration_days instead, which sets a numner of days after creation to expire current versions of objects. If the date is in the past when set, all qualified objects become immediately eligible for expiration. Note also that the policy continues to apply the rule after the date passes. Specify the date value in the ISO 8601 format without the time part. (YYYY-MM-DD). The time of expiration is always midnight UTC. Do not set expired_obj_delete_marker to true in the same rule. To clean up expired object delete markers before they reach age criteria, create a separate rule with expired_obj_delete_marker set to true."`
	ExpirationDays              int64  `json:"expiration_days,omitempty" yaml:"expiration_days,omitempty" required:"false" doc:"Expires current versions of objects after a specified number of days counted from object creation. Alternatively, specify expiration_date instead, which sets a date to expire current versions of objects. In a non-versioned bucket, the expiration action results in permanent removal of affected objects. In a versioned bucket, if the current version of an object is not a delete marker, a delete marker is created and becomes the current version, while the existing current version is retained as a non-current version. Versioned objects where the only version is a delete marker are deleted when they meet the age criteria. Do not set expired_obj_delete_marker to true in the same rule. To clean up expired object delete markers before they reach age criteria, create a separate rule with expired_obj_delete_marker set to true. The time of expiration is the next midnight UTC after the number of days following object creation time."`
	ExpiredObjDeleteMarker      bool   `json:"expired_obj_delete_marker,omitempty" yaml:"expired_obj_delete_marker,omitempty" required:"false" doc:"Set to true to delete versioned objects where the only version is a delete marker. Do not include in the same rule as expiration_days or expiration_date."`
	MaxSize                     int64  `json:"max_size,omitempty" yaml:"max_size,omitempty" required:"false" doc:"Maximum object size. Restricts the rule to objects with the specified maximum size."`
	MinSize                     int64  `json:"min_size,omitempty" yaml:"min_size,omitempty" required:"false" doc:"Minimum object size. Restricts the rule to objects with the specified minimum size."`
	NewerNoncurrentVersions     int64  `json:"newer_noncurrent_versions,omitempty" yaml:"newer_noncurrent_versions,omitempty" required:"false" doc:"A number of newest non-current versions of an object to retain. Specifying this value protects the specified number of non-current versions from being eligible for deletion due to a noncurrent_days setting."`
	NoncurrentDays              int64  `json:"noncurrent_days,omitempty" yaml:"noncurrent_days,omitempty" required:"false" doc:"A number of days after which to permanently delete non-current versions of objects. The number of days is timed from when the object becomes non-current, which is when a versioned object is deleted or overwritten."`
	ObjectAgeAttr               string `json:"object_age_attr,omitempty" yaml:"object_age_attr,omitempty" required:"false" doc:"Defines which time to use for expiration. Default - M_TIME."`
	Prefix                      string `json:"prefix,omitempty" yaml:"prefix,omitempty" required:"false" doc:"A path prefix. The rule will be restricted to objects with the specified prefix. If not specified, the rule will apply to all objects in the bucket."`
}

// -----------------------------------------------------
// MODELS
// -----------------------------------------------------

// S3LifeCycleRuleDetailsModel represents the detailed model returned by GET/List operations
// Type alias to component definition: #/components/schemas/S3LifeCycleRule
type S3LifeCycleRuleDetailsModel = Component_S3LifeCycleRule

// S3LifeCycleRuleUpsertModel represents the model returned by Create/Update operations
// Type alias to component definition: #/components/schemas/S3LifeCycleRule
type S3LifeCycleRuleUpsertModel = Component_S3LifeCycleRule

// -----------------------------------------------------
// LIST
// -----------------------------------------------------

// List retrieves multiple s3lifecyclerules with typed request/response
// summary: List S3 life cycle rules
func (r *S3LifeCycleRule) List(req *S3LifeCycleRuleSearchParams) ([]*S3LifeCycleRuleDetailsModel, error) {
	return r.ListWithContext(r.Untyped.GetCtx(), req)
}

// ListWithContext retrieves multiple s3lifecyclerules with typed request/response using provided context
// summary: List S3 life cycle rules
func (r *S3LifeCycleRule) ListWithContext(ctx context.Context, req *S3LifeCycleRuleSearchParams) ([]*S3LifeCycleRuleDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.GetResourceMap()[r.GetResourceType()].ListWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response []*S3LifeCycleRuleDetailsModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// Get retrieves a single s3lifecyclerule with typed request/response
// summary: List S3 life cycle rules
func (r *S3LifeCycleRule) Get(req *S3LifeCycleRuleSearchParams) (*S3LifeCycleRuleDetailsModel, error) {
	return r.GetWithContext(r.Untyped.GetCtx(), req)
}

// GetWithContext retrieves a single s3lifecyclerule with typed request/response using provided context
// summary: List S3 life cycle rules
func (r *S3LifeCycleRule) GetWithContext(ctx context.Context, req *S3LifeCycleRuleSearchParams) (*S3LifeCycleRuleDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response S3LifeCycleRuleDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// READ
// -----------------------------------------------------

// GetById retrieves a single s3lifecyclerule by ID
// summary: Get an S3 Lifecycle Rule
func (r *S3LifeCycleRule) GetById(id any) (*S3LifeCycleRuleDetailsModel, error) {
	return r.GetByIdWithContext(r.Untyped.GetCtx(), id)
}

// GetByIdWithContext retrieves a single s3lifecyclerule by ID using provided context
// summary: Get an S3 Lifecycle Rule
func (r *S3LifeCycleRule) GetByIdWithContext(ctx context.Context, id any) (*S3LifeCycleRuleDetailsModel, error) {
	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetByIdWithContext(ctx, id)
	if err != nil {
		return nil, err
	}

	var response S3LifeCycleRuleDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// CREATE
// -----------------------------------------------------

// Create creates a new s3lifecyclerule with typed request/response
// summary: Create an S3 Lifecycle Rule
func (r *S3LifeCycleRule) Create(req *S3LifeCycleRuleRequestBody) (*S3LifeCycleRuleUpsertModel, error) {
	return r.CreateWithContext(r.Untyped.GetCtx(), req)
}

// CreateWithContext creates a new s3lifecyclerule with typed request/response using provided context
// summary: Create an S3 Lifecycle Rule
func (r *S3LifeCycleRule) CreateWithContext(ctx context.Context, req *S3LifeCycleRuleRequestBody) (*S3LifeCycleRuleUpsertModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].CreateWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response S3LifeCycleRuleUpsertModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// DELETE
// -----------------------------------------------------

// Delete deletes a s3lifecyclerule with search parameters
func (r *S3LifeCycleRule) Delete(req *S3LifeCycleRuleSearchParams) error {
	return r.DeleteWithContext(r.Untyped.GetCtx(), req)
}

// DeleteWithContext deletes a s3lifecyclerule with search parameters using provided context
func (r *S3LifeCycleRule) DeleteWithContext(ctx context.Context, req *S3LifeCycleRuleSearchParams) error {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return err
	}
	_, err = r.Untyped.GetResourceMap()[r.GetResourceType()].DeleteWithContext(ctx, params, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteById deletes a s3lifecyclerule by ID
// summary: Delete an S3 Lifecycle Rule
//
// Parameters:
//   - id: The ID of an S3 lifecycle rule
func (r *S3LifeCycleRule) DeleteById(id any) error {
	return r.DeleteByIdWithContext(r.Untyped.GetCtx(), id)
}

// DeleteByIdWithContext deletes a s3lifecyclerule by ID using provided context
// summary: Delete an S3 Lifecycle Rule
//
// Parameters:
//   - id: The ID of an S3 lifecycle rule
func (r *S3LifeCycleRule) DeleteByIdWithContext(ctx context.Context, id any) error {
	_, err := r.Untyped.GetResourceMap()[r.GetResourceType()].DeleteByIdWithContext(ctx, id, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// -----------------------------------------------------
// ENSURE
// -----------------------------------------------------

// Ensure ensures a s3lifecyclerule exists with typed response
func (r *S3LifeCycleRule) Ensure(searchParams *S3LifeCycleRuleSearchParams, body *S3LifeCycleRuleRequestBody) (*S3LifeCycleRuleUpsertModel, error) {
	return r.EnsureWithContext(r.Untyped.GetCtx(), searchParams, body)
}

// EnsureWithContext ensures a s3lifecyclerule exists with typed response using provided context
func (r *S3LifeCycleRule) EnsureWithContext(ctx context.Context, searchParams *S3LifeCycleRuleSearchParams, body *S3LifeCycleRuleRequestBody) (*S3LifeCycleRuleUpsertModel, error) {
	searchParamsConverted, err := core.NewParamsFromStruct(searchParams)
	if err != nil {
		return nil, err
	}
	bodyConverted, err := core.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].EnsureWithContext(ctx, searchParamsConverted, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response S3LifeCycleRuleUpsertModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Exists checks if a s3lifecyclerule exists
func (r *S3LifeCycleRule) Exists(req *S3LifeCycleRuleSearchParams) (bool, error) {
	return r.ExistsWithContext(r.Untyped.GetCtx(), req)
}

// ExistsWithContext checks if a s3lifecyclerule exists using provided context
func (r *S3LifeCycleRule) ExistsWithContext(ctx context.Context, req *S3LifeCycleRuleSearchParams) (bool, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].ExistsWithContext(ctx, params)
}

// MustExists checks if a s3lifecyclerule exists and panics if not
func (r *S3LifeCycleRule) MustExists(req *S3LifeCycleRuleSearchParams) bool {
	return r.MustExistsWithContext(r.Untyped.GetCtx(), req)
}

// MustExistsWithContext checks if a s3lifecyclerule exists and panics if not using provided context
func (r *S3LifeCycleRule) MustExistsWithContext(ctx context.Context, req *S3LifeCycleRuleSearchParams) bool {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].MustExistsWithContext(ctx, params)
}

// -----------------------------------------------------
// GENERATION ISSUES
// -----------------------------------------------------
//   - Extra method GET /s3lifecyclerules/get_object_expiration/ skipped: GET /s3lifecyclerules/get_object_expiration/ - Response schema contains ambiguous nested objects (objects with no properties)
//   - UPDATE operation excluded: PATCH/PUT /s3lifecyclerules/{id}/ has no response schema and doesn't return 204 NO CONTENT
