// Code generated by generate-typed-resources. DO NOT EDIT.
// Template: CREATE|LIST|READ|UPDATE|DELETE

package typed

import (
	"context"

	"github.com/vast-data/go-vast-client/core"
)

// -----------------------------------------------------
// RESOURCE TYPE
// -----------------------------------------------------

// CnodeGroup represents a typed resource for cnodegroup operations
type CnodeGroup struct {
	*core.TypedVastResource
}

// -----------------------------------------------------
// SEARCH PARAMS
// -----------------------------------------------------

// CnodeGroupSearchParams represents the search parameters for CnodeGroup operations
type CnodeGroupSearchParams struct {
	Guid string `json:"guid,omitempty" yaml:"guid,omitempty" required:"false" doc:""`
	Name string `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:"CNode Group name"`

	// RawData allows passing arbitrary search parameters as key-value pairs.
	//
	// Use this field when you need query parameters that are not covered by the typed fields above.
	// This is particularly useful for:
	//   - Dynamic filter operations (e.g., "path__contains", "name__icontains")
	//   - Django-style query filters
	//   - Custom backend-specific parameters
	//
	// Example:
	//   params := &CnodeGroupSearchParams{
	//       RawData: core.Params{"path__contains": "/foo", "name__icontains": "bar"},
	//   }
	//
	// Note: You can use either the typed fields or RawData, or combine both.
	RawData core.Params `json:"-" yaml:"-"`
}

// -----------------------------------------------------
// REQUEST BODY
// -----------------------------------------------------

// CnodeGroupRequestBody represents the request body for CnodeGroup operations
type CnodeGroupRequestBody struct {
	ApplicationType     string  `json:"application_type,omitempty" yaml:"application_type,omitempty" required:"false" doc:"Specify application_type"`
	CnodeIds            string  `json:"cnode_ids,omitempty" yaml:"cnode_ids,omitempty" required:"false" doc:"Specify CNodes. Specify as a comma separated array of CNode IDs."`
	Name                string  `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:"CNode Group name"`
	ResourcesPercentage float32 `json:"resources_percentage,omitempty" yaml:"resources_percentage,omitempty" required:"false" doc:"Resources percentage, dedicated to CNode Group"`
}

// -----------------------------------------------------
// MODELS
// -----------------------------------------------------

// CnodeGroupDetailsModel represents the detailed model returned by GET/List operations
// Type alias to component definition: #/components/schemas/CNodeGroup
type CnodeGroupDetailsModel = Component_CNodeGroup

// CnodeGroupUpsertModel represents the model returned by Create/Update operations
// Type alias to component definition: #/components/schemas/AsyncCNodeGroup
type CnodeGroupUpsertModel = Component_AsyncCNodeGroup

// -----------------------------------------------------
// LIST
// -----------------------------------------------------

// List retrieves multiple cnodegroups with typed request/response
// summary: Get all existing CNode Groups
func (r *CnodeGroup) List(req *CnodeGroupSearchParams) ([]*CnodeGroupDetailsModel, error) {
	return r.ListWithContext(r.Untyped.GetCtx(), req)
}

// ListWithContext retrieves multiple cnodegroups with typed request/response using provided context
// summary: Get all existing CNode Groups
func (r *CnodeGroup) ListWithContext(ctx context.Context, req *CnodeGroupSearchParams) ([]*CnodeGroupDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.GetResourceMap()[r.GetResourceType()].ListWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response []*CnodeGroupDetailsModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// Get retrieves a single cnodegroup with typed request/response
// summary: Get all existing CNode Groups
func (r *CnodeGroup) Get(req *CnodeGroupSearchParams) (*CnodeGroupDetailsModel, error) {
	return r.GetWithContext(r.Untyped.GetCtx(), req)
}

// GetWithContext retrieves a single cnodegroup with typed request/response using provided context
// summary: Get all existing CNode Groups
func (r *CnodeGroup) GetWithContext(ctx context.Context, req *CnodeGroupSearchParams) (*CnodeGroupDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response CnodeGroupDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// READ
// -----------------------------------------------------

// GetById retrieves a single cnodegroup by ID
// summary: Return Details of a CNode Group
func (r *CnodeGroup) GetById(id any) (*CnodeGroupDetailsModel, error) {
	return r.GetByIdWithContext(r.Untyped.GetCtx(), id)
}

// GetByIdWithContext retrieves a single cnodegroup by ID using provided context
// summary: Return Details of a CNode Group
func (r *CnodeGroup) GetByIdWithContext(ctx context.Context, id any) (*CnodeGroupDetailsModel, error) {
	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetByIdWithContext(ctx, id)
	if err != nil {
		return nil, err
	}

	var response CnodeGroupDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// CREATE
// -----------------------------------------------------

// Create creates a new cnodegroup with typed request/response
// summary: Create a CNode Group
func (r *CnodeGroup) Create(req *CnodeGroupRequestBody) (*CnodeGroupUpsertModel, error) {
	return r.CreateWithContext(r.Untyped.GetCtx(), req)
}

// CreateWithContext creates a new cnodegroup with typed request/response using provided context
// summary: Create a CNode Group
func (r *CnodeGroup) CreateWithContext(ctx context.Context, req *CnodeGroupRequestBody) (*CnodeGroupUpsertModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].CreateWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response CnodeGroupUpsertModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// UPDATE
// -----------------------------------------------------

// Update updates an existing cnodegroup with typed request/response
func (r *CnodeGroup) Update(id any, req *CnodeGroupRequestBody) (*CnodeGroupUpsertModel, error) {
	return r.UpdateWithContext(r.Untyped.GetCtx(), id, req)
}

// UpdateWithContext updates an existing cnodegroup with typed request/response using provided context
func (r *CnodeGroup) UpdateWithContext(ctx context.Context, id any, req *CnodeGroupRequestBody) (*CnodeGroupUpsertModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].UpdateWithContext(ctx, id, params)
	if err != nil {
		return nil, err
	}

	var response CnodeGroupUpsertModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// DELETE
// -----------------------------------------------------

// Delete deletes a cnodegroup with search parameters
func (r *CnodeGroup) Delete(req *CnodeGroupSearchParams) error {
	return r.DeleteWithContext(r.Untyped.GetCtx(), req)
}

// DeleteWithContext deletes a cnodegroup with search parameters using provided context
func (r *CnodeGroup) DeleteWithContext(ctx context.Context, req *CnodeGroupSearchParams) error {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return err
	}
	_, err = r.Untyped.GetResourceMap()[r.GetResourceType()].DeleteWithContext(ctx, params, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteById deletes a cnodegroup by ID
// summary: Delete CNodeGroup
func (r *CnodeGroup) DeleteById(id any) error {
	return r.DeleteByIdWithContext(r.Untyped.GetCtx(), id)
}

// DeleteByIdWithContext deletes a cnodegroup by ID using provided context
// summary: Delete CNodeGroup
func (r *CnodeGroup) DeleteByIdWithContext(ctx context.Context, id any) error {
	_, err := r.Untyped.GetResourceMap()[r.GetResourceType()].DeleteByIdWithContext(ctx, id, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// -----------------------------------------------------
// ENSURE
// -----------------------------------------------------

// Ensure ensures a cnodegroup exists with typed response
func (r *CnodeGroup) Ensure(searchParams *CnodeGroupSearchParams, body *CnodeGroupRequestBody) (*CnodeGroupUpsertModel, error) {
	return r.EnsureWithContext(r.Untyped.GetCtx(), searchParams, body)
}

// EnsureWithContext ensures a cnodegroup exists with typed response using provided context
func (r *CnodeGroup) EnsureWithContext(ctx context.Context, searchParams *CnodeGroupSearchParams, body *CnodeGroupRequestBody) (*CnodeGroupUpsertModel, error) {
	searchParamsConverted, err := core.NewParamsFromStruct(searchParams)
	if err != nil {
		return nil, err
	}
	bodyConverted, err := core.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].EnsureWithContext(ctx, searchParamsConverted, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response CnodeGroupUpsertModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Exists checks if a cnodegroup exists
func (r *CnodeGroup) Exists(req *CnodeGroupSearchParams) (bool, error) {
	return r.ExistsWithContext(r.Untyped.GetCtx(), req)
}

// ExistsWithContext checks if a cnodegroup exists using provided context
func (r *CnodeGroup) ExistsWithContext(ctx context.Context, req *CnodeGroupSearchParams) (bool, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].ExistsWithContext(ctx, params)
}

// MustExists checks if a cnodegroup exists and panics if not
func (r *CnodeGroup) MustExists(req *CnodeGroupSearchParams) bool {
	return r.MustExistsWithContext(r.Untyped.GetCtx(), req)
}

// MustExistsWithContext checks if a cnodegroup exists and panics if not using provided context
func (r *CnodeGroup) MustExistsWithContext(ctx context.Context, req *CnodeGroupSearchParams) bool {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].MustExistsWithContext(ctx, params)
}
