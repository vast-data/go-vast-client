// Code generated by generate-typed-resources. DO NOT EDIT.
// Template: CREATE|LIST|READ|DELETE

package typed

import (
	"context"

	"github.com/vast-data/go-vast-client/core"
)

// -----------------------------------------------------
// RESOURCE TYPE
// -----------------------------------------------------

// UserQuota represents a typed resource for userquota operations
type UserQuota struct {
	*core.TypedVastResource
}

// -----------------------------------------------------
// SEARCH PARAMS
// -----------------------------------------------------

// UserQuotaSearchParams represents the search parameters for UserQuota operations
type UserQuotaSearchParams struct {
	Guid          string `json:"guid,omitempty" yaml:"guid,omitempty" required:"false" doc:"Quota guid"`
	IsAccountable bool   `json:"is_accountable,omitempty" yaml:"is_accountable,omitempty" required:"false" doc:""`
	Name          string `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:"The name"`
	Path          string `json:"path,omitempty" yaml:"path,omitempty" required:"false" doc:""`
	QuotaId       int64  `json:"quota_id,omitempty" yaml:"quota_id,omitempty" required:"false" doc:""`
	QuotaSystemId int64  `json:"quota_system_id,omitempty" yaml:"quota_system_id,omitempty" required:"false" doc:""`
	RefreshData   bool   `json:"refresh_data,omitempty" yaml:"refresh_data,omitempty" required:"false" doc:""`

	// RawData allows passing arbitrary search parameters as key-value pairs.
	//
	// Use this field when you need query parameters that are not covered by the typed fields above.
	// This is particularly useful for:
	//   - Dynamic filter operations (e.g., "path__contains", "name__icontains")
	//   - Django-style query filters
	//   - Custom backend-specific parameters
	//
	// Example:
	//   params := &UserQuotaSearchParams{
	//       RawData: core.Params{"path__contains": "/foo", "name__icontains": "bar"},
	//   }
	//
	// Note: You can use either the typed fields or RawData, or combine both.
	RawData core.Params `json:"-" yaml:"-"`
}

// -----------------------------------------------------
// REQUEST BODY
// -----------------------------------------------------

// UserQuotaRequestBody represents the request body for UserQuota operations
type UserQuotaRequestBody struct {
	GracePeriod     string `json:"grace_period,omitempty" yaml:"grace_period,omitempty" required:"false" doc:"Quota enforcement grace period for the user/group. An alarm is triggered and write operations are blocked if storage usage continues to exceed the soft limit for the grace period. Format: [DD] [HH:[MM:]]ss"`
	HardLimit       int64  `json:"hard_limit,omitempty" yaml:"hard_limit,omitempty" required:"false" doc:"Storage usage limit beyond which no writes will be allowed in the quota directory for the user/group."`
	HardLimitInodes int64  `json:"hard_limit_inodes,omitempty" yaml:"hard_limit_inodes,omitempty" required:"false" doc:"Number of directories and unique files under the quota path beyond which no writes will be allowed for the user/group. A file with multiple hardlinks is counted only once."`
	Identifier      string `json:"identifier,omitempty" yaml:"identifier,omitempty" required:"false" doc:""`
	IdentifierType  string `json:"identifier_type,omitempty" yaml:"identifier_type,omitempty" required:"false" doc:"Set to True for a group. Set to false for a user."`
	IsGroup         bool   `json:"is_group,omitempty" yaml:"is_group,omitempty" required:"false" doc:""`
	Name            string `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:"A user name or group name."`
	QuotaId         int64  `json:"quota_id,omitempty" yaml:"quota_id,omitempty" required:"false" doc:"The ID of the quota to which the user/group quota should be added."`
	SoftLimit       int64  `json:"soft_limit,omitempty" yaml:"soft_limit,omitempty" required:"false" doc:"Storage usage limit at which warnings of exceeding the quota are issued for the user/group."`
	SoftLimitInodes int64  `json:"soft_limit_inodes,omitempty" yaml:"soft_limit_inodes,omitempty" required:"false" doc:"Number of directories and unique files under the path at which warnings of exceeding the quota will be issued for the user/group. A file with multiple hardlinks is counted only once."`
}

// -----------------------------------------------------
// MODELS
// -----------------------------------------------------

// UserQuotaDetailsModel represents the detailed model returned by GET/List operations
// Type alias to component definition: #/components/schemas/UserQuota
type UserQuotaDetailsModel = Component_UserQuota

// UserQuotaUpsertModel represents the model returned by Create/Update operations
// Type alias to component definition: #/components/schemas/UserQuota
type UserQuotaUpsertModel = Component_UserQuota

// -----------------------------------------------------
// LIST
// -----------------------------------------------------

// List retrieves multiple userquotas with typed request/response
// summary: List User Quotas
func (r *UserQuota) List(req *UserQuotaSearchParams) ([]*UserQuotaDetailsModel, error) {
	return r.ListWithContext(r.Untyped.GetCtx(), req)
}

// ListWithContext retrieves multiple userquotas with typed request/response using provided context
// summary: List User Quotas
func (r *UserQuota) ListWithContext(ctx context.Context, req *UserQuotaSearchParams) ([]*UserQuotaDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.GetResourceMap()[r.GetResourceType()].ListWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response []*UserQuotaDetailsModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// Get retrieves a single userquota with typed request/response
// summary: List User Quotas
func (r *UserQuota) Get(req *UserQuotaSearchParams) (*UserQuotaDetailsModel, error) {
	return r.GetWithContext(r.Untyped.GetCtx(), req)
}

// GetWithContext retrieves a single userquota with typed request/response using provided context
// summary: List User Quotas
func (r *UserQuota) GetWithContext(ctx context.Context, req *UserQuotaSearchParams) (*UserQuotaDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response UserQuotaDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// READ
// -----------------------------------------------------

// GetById retrieves a single userquota by ID
// summary: Return Details of a User Quota
func (r *UserQuota) GetById(id any) (*UserQuotaDetailsModel, error) {
	return r.GetByIdWithContext(r.Untyped.GetCtx(), id)
}

// GetByIdWithContext retrieves a single userquota by ID using provided context
// summary: Return Details of a User Quota
func (r *UserQuota) GetByIdWithContext(ctx context.Context, id any) (*UserQuotaDetailsModel, error) {
	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetByIdWithContext(ctx, id)
	if err != nil {
		return nil, err
	}

	var response UserQuotaDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// CREATE
// -----------------------------------------------------

// Create creates a new userquota with typed request/response
// summary: Create a User Quota
func (r *UserQuota) Create(req *UserQuotaRequestBody) (*UserQuotaUpsertModel, error) {
	return r.CreateWithContext(r.Untyped.GetCtx(), req)
}

// CreateWithContext creates a new userquota with typed request/response using provided context
// summary: Create a User Quota
func (r *UserQuota) CreateWithContext(ctx context.Context, req *UserQuotaRequestBody) (*UserQuotaUpsertModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].CreateWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response UserQuotaUpsertModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// DELETE
// -----------------------------------------------------

// Delete deletes a userquota with search parameters
func (r *UserQuota) Delete(req *UserQuotaSearchParams) error {
	return r.DeleteWithContext(r.Untyped.GetCtx(), req)
}

// DeleteWithContext deletes a userquota with search parameters using provided context
func (r *UserQuota) DeleteWithContext(ctx context.Context, req *UserQuotaSearchParams) error {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return err
	}
	_, err = r.Untyped.GetResourceMap()[r.GetResourceType()].DeleteWithContext(ctx, params, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteById deletes a userquota by ID
// summary: Delete User Quota
//
// Parameters:
//   - id: User Quota ID
func (r *UserQuota) DeleteById(id any) error {
	return r.DeleteByIdWithContext(r.Untyped.GetCtx(), id)
}

// DeleteByIdWithContext deletes a userquota by ID using provided context
// summary: Delete User Quota
//
// Parameters:
//   - id: User Quota ID
func (r *UserQuota) DeleteByIdWithContext(ctx context.Context, id any) error {
	_, err := r.Untyped.GetResourceMap()[r.GetResourceType()].DeleteByIdWithContext(ctx, id, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// -----------------------------------------------------
// ENSURE
// -----------------------------------------------------

// Ensure ensures a userquota exists with typed response
func (r *UserQuota) Ensure(searchParams *UserQuotaSearchParams, body *UserQuotaRequestBody) (*UserQuotaUpsertModel, error) {
	return r.EnsureWithContext(r.Untyped.GetCtx(), searchParams, body)
}

// EnsureWithContext ensures a userquota exists with typed response using provided context
func (r *UserQuota) EnsureWithContext(ctx context.Context, searchParams *UserQuotaSearchParams, body *UserQuotaRequestBody) (*UserQuotaUpsertModel, error) {
	searchParamsConverted, err := core.NewParamsFromStruct(searchParams)
	if err != nil {
		return nil, err
	}
	bodyConverted, err := core.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].EnsureWithContext(ctx, searchParamsConverted, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response UserQuotaUpsertModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Exists checks if a userquota exists
func (r *UserQuota) Exists(req *UserQuotaSearchParams) (bool, error) {
	return r.ExistsWithContext(r.Untyped.GetCtx(), req)
}

// ExistsWithContext checks if a userquota exists using provided context
func (r *UserQuota) ExistsWithContext(ctx context.Context, req *UserQuotaSearchParams) (bool, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].ExistsWithContext(ctx, params)
}

// MustExists checks if a userquota exists and panics if not
func (r *UserQuota) MustExists(req *UserQuotaSearchParams) bool {
	return r.MustExistsWithContext(r.Untyped.GetCtx(), req)
}

// MustExistsWithContext checks if a userquota exists and panics if not using provided context
func (r *UserQuota) MustExistsWithContext(ctx context.Context, req *UserQuotaSearchParams) bool {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].MustExistsWithContext(ctx, params)
}

// -----------------------------------------------------
// GENERATION ISSUES
// -----------------------------------------------------
//   - UPDATE operation excluded: PATCH/PUT /userquotas/{id}/ has no response schema and doesn't return 204 NO CONTENT
