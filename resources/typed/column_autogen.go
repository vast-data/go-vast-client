// Code generated by generate-typed-resources. DO NOT EDIT.
// Template: LIST

package typed

import (
	"context"
	"net/http"

	"github.com/vast-data/go-vast-client/core"
)

// -----------------------------------------------------
// RESOURCE TYPE
// -----------------------------------------------------

// Column represents a typed resource for column operations
type Column struct {
	*core.TypedVastResource
}

// -----------------------------------------------------
// SEARCH PARAMS
// -----------------------------------------------------

// ColumnSearchParams represents the search parameters for Column operations
type ColumnSearchParams struct {
	CountOnly         bool   `json:"count_only,omitempty" yaml:"count_only,omitempty" required:"false" doc:"Whether to only return count of objects"`
	DatabaseName      string `json:"database_name,omitempty" yaml:"database_name,omitempty" required:"false" doc:"Getting list of objects by database_name"`
	IsImportsTable    bool   `json:"is_imports_table,omitempty" yaml:"is_imports_table,omitempty" required:"false" doc:"Is table actually a sub-table to track imported .parquet files."`
	ListSortedColumns bool   `json:"list_sorted_columns,omitempty" yaml:"list_sorted_columns,omitempty" required:"false" doc:"List only columns that are sorted."`
	Name              string `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:"Getting list of objects by exact match"`
	SchemaName        string `json:"schema_name,omitempty" yaml:"schema_name,omitempty" required:"false" doc:"Getting list of objects by schema_name"`
	TableName         string `json:"table_name,omitempty" yaml:"table_name,omitempty" required:"false" doc:"Getting list of objects by table_name"`
	TenantId          int64  `json:"tenant_id,omitempty" yaml:"tenant_id,omitempty" required:"false" doc:"Filter by tenant. Specify tenant ID."`

	// RawData allows passing arbitrary search parameters as key-value pairs.
	//
	// Use this field when you need query parameters that are not covered by the typed fields above.
	// This is particularly useful for:
	//   - Dynamic filter operations (e.g., "path__contains", "name__icontains")
	//   - Django-style query filters
	//   - Custom backend-specific parameters
	//
	// Example:
	//   params := &ColumnSearchParams{
	//       RawData: core.Params{"path__contains": "/foo", "name__icontains": "bar"},
	//   }
	//
	// Note: You can use either the typed fields or RawData, or combine both.
	RawData core.Params `json:"-" yaml:"-"`
}

// -----------------------------------------------------
// MODELS
// -----------------------------------------------------

// ColumnDetailsModel represents the detailed model returned by GET/List operations
// Type alias to component definition: #/components/schemas/Column
type ColumnDetailsModel = Component_Column

// -----------------------------------------------------
// LIST
// -----------------------------------------------------

// List retrieves multiple columns with typed request/response
// summary: List Database Table Columns
func (r *Column) List(req *ColumnSearchParams) ([]*ColumnDetailsModel, error) {
	return r.ListWithContext(r.Untyped.GetCtx(), req)
}

// ListWithContext retrieves multiple columns with typed request/response using provided context
// summary: List Database Table Columns
func (r *Column) ListWithContext(ctx context.Context, req *ColumnSearchParams) ([]*ColumnDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.GetResourceMap()[r.GetResourceType()].ListWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response []*ColumnDetailsModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// Get retrieves a single column with typed request/response
// summary: List Database Table Columns
func (r *Column) Get(req *ColumnSearchParams) (*ColumnDetailsModel, error) {
	return r.GetWithContext(r.Untyped.GetCtx(), req)
}

// GetWithContext retrieves a single column with typed request/response using provided context
// summary: List Database Table Columns
func (r *Column) GetWithContext(ctx context.Context, req *ColumnSearchParams) (*ColumnDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response ColumnDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Exists checks if a column exists
func (r *Column) Exists(req *ColumnSearchParams) (bool, error) {
	return r.ExistsWithContext(r.Untyped.GetCtx(), req)
}

// ExistsWithContext checks if a column exists using provided context
func (r *Column) ExistsWithContext(ctx context.Context, req *ColumnSearchParams) (bool, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].ExistsWithContext(ctx, params)
}

// MustExists checks if a column exists and panics if not
func (r *Column) MustExists(req *ColumnSearchParams) bool {
	return r.MustExistsWithContext(r.Untyped.GetCtx(), req)
}

// MustExistsWithContext checks if a column exists and panics if not using provided context
func (r *Column) MustExistsWithContext(ctx context.Context, req *ColumnSearchParams) bool {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].MustExistsWithContext(ctx, params)
}

// -----------------------------------------------------
// EXTRA METHODS
// -----------------------------------------------------

// ColumnDeleteBody_ArrowSchema represents a nested type for Column extra method body
type ColumnDeleteBody_ArrowSchema struct {
	Field ColumnDeleteBody_ArrowSchema_Field `json:"field,omitempty" yaml:"field,omitempty" required:"true" doc:"Column type"`
	Name  string                             `json:"name,omitempty" yaml:"name,omitempty" required:"true" doc:"Name of the object"`
}

// ColumnDeleteBody_ArrowSchema_Field represents a nested type for Column extra method body
type ColumnDeleteBody_ArrowSchema_Field struct {
	ColumnType string                                       `json:"column_type,omitempty" yaml:"column_type,omitempty" required:"false" doc:""`
	KeyType    ColumnDeleteBody_ArrowSchema_Field_KeyType   `json:"key_type,omitempty" yaml:"key_type,omitempty" required:"false" doc:"Column type for the map key (only when 'column_type' is \"map\")"`
	ValueType  ColumnDeleteBody_ArrowSchema_Field_ValueType `json:"value_type,omitempty" yaml:"value_type,omitempty" required:"false" doc:"Column type for the map value (only when 'column_type' is \"map\")"`
}

// ColumnDeleteBody_ArrowSchema_Field_KeyType represents a nested type for Column extra method body
type ColumnDeleteBody_ArrowSchema_Field_KeyType struct {
	ColumnType string `json:"column_type,omitempty" yaml:"column_type,omitempty" required:"false" doc:"The type of the key (e.g., \"string\", \"bool\")"`
}

// ColumnDeleteBody_ArrowSchema_Field_ValueType represents a nested type for Column extra method body
type ColumnDeleteBody_ArrowSchema_Field_ValueType struct {
	ColumnType string `json:"column_type,omitempty" yaml:"column_type,omitempty" required:"false" doc:"The type of the value (e.g., \"string\", \"bool\")"`
}

// ColumnDelete_DELETE_Body represents the request body for ColumnDelete
type ColumnDelete_DELETE_Body struct {
	ArrowSchema  ColumnDeleteBody_ArrowSchema `json:"arrow_schema,omitempty" yaml:"arrow_schema,omitempty" required:"true" doc:""`
	DatabaseName string                       `json:"database_name,omitempty" yaml:"database_name,omitempty" required:"true" doc:"Name of the Database"`
	SchemaName   string                       `json:"schema_name,omitempty" yaml:"schema_name,omitempty" required:"true" doc:"Name of the Schema"`
	TableName    string                       `json:"table_name,omitempty" yaml:"table_name,omitempty" required:"true" doc:"Name of the Table"`
	TenantId     int64                        `json:"tenant_id,omitempty" yaml:"tenant_id,omitempty" required:"false" doc:"Tenant ID"`
}

// ColumnDeleteWithContext_DELETE
// method: DELETE
// url: /columns/delete/
// summary: Delete a Database Table Column
func (r *Column) ColumnDeleteWithContext_DELETE(ctx context.Context, body *ColumnDelete_DELETE_Body) error {
	resourcePath := "/columns/delete/"

	var reqParams core.Params
	reqBody, err := core.NewParamsFromStruct(body)
	if err != nil {
		return err
	}

	_, err = core.Request[core.EmptyRecord](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodDelete, resourcePath, reqParams, reqBody)
	return err

}

// ColumnDelete_DELETE
// method: DELETE
// url: /columns/delete/
// summary: Delete a Database Table Column
func (r *Column) ColumnDelete_DELETE(body *ColumnDelete_DELETE_Body) error {
	return r.ColumnDeleteWithContext_DELETE(r.Untyped.GetCtx(), body)
}

// ColumnRename_PATCH_Body represents the request body for ColumnRename
type ColumnRename_PATCH_Body struct {
	DatabaseName  string `json:"database_name,omitempty" yaml:"database_name,omitempty" required:"true" doc:"Name of the Database"`
	Name          string `json:"name,omitempty" yaml:"name,omitempty" required:"true" doc:"Name of the object"`
	NewName       string `json:"new_name,omitempty" yaml:"new_name,omitempty" required:"true" doc:"New name of the Column"`
	SchemaName    string `json:"schema_name,omitempty" yaml:"schema_name,omitempty" required:"true" doc:"Name of the Schema"`
	TableName     string `json:"table_name,omitempty" yaml:"table_name,omitempty" required:"true" doc:"Name of the Table"`
	NewColumnName string `json:"new_column_name,omitempty" yaml:"new_column_name,omitempty" required:"false" doc:"New Name of the Column (deprecated since 5.0)"`
	TenantId      int64  `json:"tenant_id,omitempty" yaml:"tenant_id,omitempty" required:"false" doc:"Tenant ID"`
}

// ColumnRenameWithContext_PATCH
// method: PATCH
// url: /columns/rename/
// summary: Rename a Database Table Column
func (r *Column) ColumnRenameWithContext_PATCH(ctx context.Context, body *ColumnRename_PATCH_Body) error {
	resourcePath := "/columns/rename/"

	var reqParams core.Params
	reqBody, err := core.NewParamsFromStruct(body)
	if err != nil {
		return err
	}

	_, err = core.Request[core.EmptyRecord](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodPatch, resourcePath, reqParams, reqBody)
	return err

}

// ColumnRename_PATCH
// method: PATCH
// url: /columns/rename/
// summary: Rename a Database Table Column
func (r *Column) ColumnRename_PATCH(body *ColumnRename_PATCH_Body) error {
	return r.ColumnRenameWithContext_PATCH(r.Untyped.GetCtx(), body)
}

// -----------------------------------------------------
// GENERATION ISSUES
// -----------------------------------------------------
//   - Extra method GET /columns/show/ skipped: GET /columns/show/ - Response schema contains ambiguous nested objects (objects with no properties)
