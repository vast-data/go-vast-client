// Code generated by generate-typed-resources. DO NOT EDIT.
// Template: LIST

package typed

import (
	"context"
	"net/http"

	"github.com/vast-data/go-vast-client/core"
)

// -----------------------------------------------------
// RESOURCE TYPE
// -----------------------------------------------------

// Table represents a typed resource for table operations
type Table struct {
	*core.TypedVastResource
}

// -----------------------------------------------------
// SEARCH PARAMS
// -----------------------------------------------------

// TableSearchParams represents the search parameters for Table operations
type TableSearchParams struct {
	CountOnly    bool   `json:"count_only,omitempty" yaml:"count_only,omitempty" required:"false" doc:"Whether to only return count of objects"`
	DatabaseName string `json:"database_name,omitempty" yaml:"database_name,omitempty" required:"false" doc:"Getting list of objects by database_name"`
	Name         string `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:"Getting list of objects by exact match"`
	SchemaName   string `json:"schema_name,omitempty" yaml:"schema_name,omitempty" required:"false" doc:"Getting list of objects by schema_name"`
	TenantId     int64  `json:"tenant_id,omitempty" yaml:"tenant_id,omitempty" required:"false" doc:"Filter by tenant. Specify tenant ID."`

	// RawData allows passing arbitrary search parameters as key-value pairs.
	//
	// Use this field when you need query parameters that are not covered by the typed fields above.
	// This is particularly useful for:
	//   - Dynamic filter operations (e.g., "path__contains", "name__icontains")
	//   - Django-style query filters
	//   - Custom backend-specific parameters
	//
	// Example:
	//   params := &TableSearchParams{
	//       RawData: core.Params{"path__contains": "/foo", "name__icontains": "bar"},
	//   }
	//
	// Note: You can use either the typed fields or RawData, or combine both.
	RawData core.Params `json:"-" yaml:"-"`
}

// -----------------------------------------------------
// MODELS
// -----------------------------------------------------

// TableDetailsModel represents the detailed model returned by GET/List operations
// Type alias to component definition: #/components/schemas/Table
type TableDetailsModel = Component_Table

// -----------------------------------------------------
// LIST
// -----------------------------------------------------

// List retrieves multiple tables with typed request/response
// summary: List Database Tables
func (r *Table) List(req *TableSearchParams) ([]*TableDetailsModel, error) {
	return r.ListWithContext(r.Untyped.GetCtx(), req)
}

// ListWithContext retrieves multiple tables with typed request/response using provided context
// summary: List Database Tables
func (r *Table) ListWithContext(ctx context.Context, req *TableSearchParams) ([]*TableDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.GetResourceMap()[r.GetResourceType()].ListWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response []*TableDetailsModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// Get retrieves a single table with typed request/response
// summary: List Database Tables
func (r *Table) Get(req *TableSearchParams) (*TableDetailsModel, error) {
	return r.GetWithContext(r.Untyped.GetCtx(), req)
}

// GetWithContext retrieves a single table with typed request/response using provided context
// summary: List Database Tables
func (r *Table) GetWithContext(ctx context.Context, req *TableSearchParams) (*TableDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response TableDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Exists checks if a table exists
func (r *Table) Exists(req *TableSearchParams) (bool, error) {
	return r.ExistsWithContext(r.Untyped.GetCtx(), req)
}

// ExistsWithContext checks if a table exists using provided context
func (r *Table) ExistsWithContext(ctx context.Context, req *TableSearchParams) (bool, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].ExistsWithContext(ctx, params)
}

// MustExists checks if a table exists and panics if not
func (r *Table) MustExists(req *TableSearchParams) bool {
	return r.MustExistsWithContext(r.Untyped.GetCtx(), req)
}

// MustExistsWithContext checks if a table exists and panics if not using provided context
func (r *Table) MustExistsWithContext(ctx context.Context, req *TableSearchParams) bool {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].MustExistsWithContext(ctx, params)
}

// -----------------------------------------------------
// EXTRA METHODS
// -----------------------------------------------------

// TableAddColumnsBody_ArrowSchemaItem represents a nested type for Table extra method body
type TableAddColumnsBody_ArrowSchemaItem struct {
	Field TableAddColumnsBody_ArrowSchemaItem_Field `json:"field,omitempty" yaml:"field,omitempty" required:"true" doc:"Column type"`
	Name  string                                    `json:"name,omitempty" yaml:"name,omitempty" required:"true" doc:"Name of the object"`
}

// TableAddColumnsBody_ArrowSchemaItem_Field represents a nested type for Table extra method body
type TableAddColumnsBody_ArrowSchemaItem_Field struct {
	ColumnType string                                              `json:"column_type,omitempty" yaml:"column_type,omitempty" required:"false" doc:""`
	KeyType    TableAddColumnsBody_ArrowSchemaItem_Field_KeyType   `json:"key_type,omitempty" yaml:"key_type,omitempty" required:"false" doc:"Column type for the map key (only when 'column_type' is \"map\")"`
	ValueType  TableAddColumnsBody_ArrowSchemaItem_Field_ValueType `json:"value_type,omitempty" yaml:"value_type,omitempty" required:"false" doc:"Column type for the map value (only when 'column_type' is \"map\")"`
}

// TableAddColumnsBody_ArrowSchemaItem_Field_KeyType represents a nested type for Table extra method body
type TableAddColumnsBody_ArrowSchemaItem_Field_KeyType struct {
	ColumnType string `json:"column_type,omitempty" yaml:"column_type,omitempty" required:"false" doc:"The type of the key (e.g., \"string\", \"bool\")"`
}

// TableAddColumnsBody_ArrowSchemaItem_Field_ValueType represents a nested type for Table extra method body
type TableAddColumnsBody_ArrowSchemaItem_Field_ValueType struct {
	ColumnType string `json:"column_type,omitempty" yaml:"column_type,omitempty" required:"false" doc:"The type of the value (e.g., \"string\", \"bool\")"`
}

// TableAddColumns_PATCH_Body represents the request body for TableAddColumns
type TableAddColumns_PATCH_Body struct {
	ArrowSchema       *[]TableAddColumnsBody_ArrowSchemaItem `json:"arrow_schema,omitempty" yaml:"arrow_schema,omitempty" required:"true" doc:"Description of table columns"`
	DatabaseName      string                                 `json:"database_name,omitempty" yaml:"database_name,omitempty" required:"true" doc:"Name of the Database"`
	Name              string                                 `json:"name,omitempty" yaml:"name,omitempty" required:"true" doc:"Name of the object"`
	SchemaName        string                                 `json:"schema_name,omitempty" yaml:"schema_name,omitempty" required:"true" doc:"Name of the Schema"`
	IsImportsTable    bool                                   `json:"is_imports_table,omitempty" yaml:"is_imports_table,omitempty" required:"false" doc:"Is table actually a sub-table to track imported .parquet files."`
	SortedColumnNames *[]string                              `json:"sorted_column_names,omitempty" yaml:"sorted_column_names,omitempty" required:"false" doc:"Array of sorted column names"`
	TenantId          int64                                  `json:"tenant_id,omitempty" yaml:"tenant_id,omitempty" required:"false" doc:"Tenant ID"`
}

// TableAddColumnsWithContext_PATCH
// method: PATCH
// url: /tables/add_columns/
// summary: Add Columns to a Database Table
func (r *Table) TableAddColumnsWithContext_PATCH(ctx context.Context, body *TableAddColumns_PATCH_Body) error {
	resourcePath := "/tables/add_columns/"

	var reqParams core.Params
	reqBody, err := core.NewParamsFromStruct(body)
	if err != nil {
		return err
	}

	_, err = core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodPatch, resourcePath, reqParams, reqBody)
	return err

}

// TableAddColumns_PATCH
// method: PATCH
// url: /tables/add_columns/
// summary: Add Columns to a Database Table
func (r *Table) TableAddColumns_PATCH(body *TableAddColumns_PATCH_Body) error {
	return r.TableAddColumnsWithContext_PATCH(r.Untyped.GetCtx(), body)
}

// TableDelete_DELETE_Body represents the request body for TableDelete
type TableDelete_DELETE_Body struct {
	DatabaseName   string `json:"database_name,omitempty" yaml:"database_name,omitempty" required:"true" doc:"Name of the Database"`
	Name           string `json:"name,omitempty" yaml:"name,omitempty" required:"true" doc:"Name of the object"`
	SchemaName     string `json:"schema_name,omitempty" yaml:"schema_name,omitempty" required:"true" doc:"Name of the Schema"`
	IsImportsTable bool   `json:"is_imports_table,omitempty" yaml:"is_imports_table,omitempty" required:"false" doc:"Is table actually a sub-table to track imported .parquet files."`
	TenantId       int64  `json:"tenant_id,omitempty" yaml:"tenant_id,omitempty" required:"false" doc:"Tenant ID"`
}

// TableDeleteWithContext_DELETE
// method: DELETE
// url: /tables/delete/
// summary: Delete a Database Table
func (r *Table) TableDeleteWithContext_DELETE(ctx context.Context, body *TableDelete_DELETE_Body) error {
	resourcePath := "/tables/delete/"

	var reqParams core.Params
	reqBody, err := core.NewParamsFromStruct(body)
	if err != nil {
		return err
	}

	_, err = core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodDelete, resourcePath, reqParams, reqBody)
	return err

}

// TableDelete_DELETE
// method: DELETE
// url: /tables/delete/
// summary: Delete a Database Table
func (r *Table) TableDelete_DELETE(body *TableDelete_DELETE_Body) error {
	return r.TableDeleteWithContext_DELETE(r.Untyped.GetCtx(), body)
}

// TableRename_PATCH_Body represents the request body for TableRename
type TableRename_PATCH_Body struct {
	DatabaseName string `json:"database_name,omitempty" yaml:"database_name,omitempty" required:"true" doc:"Name of the Database"`
	Name         string `json:"name,omitempty" yaml:"name,omitempty" required:"true" doc:"Name of the object"`
	NewName      string `json:"new_name,omitempty" yaml:"new_name,omitempty" required:"true" doc:"New name of the Table"`
	SchemaName   string `json:"schema_name,omitempty" yaml:"schema_name,omitempty" required:"true" doc:"Name of the Schema"`
	NewTableName string `json:"new_table_name,omitempty" yaml:"new_table_name,omitempty" required:"false" doc:"New name of the Table (deprecated since 5.0)"`
	TenantId     int64  `json:"tenant_id,omitempty" yaml:"tenant_id,omitempty" required:"false" doc:"Tenant ID"`
}

// TableRenameWithContext_PATCH
// method: PATCH
// url: /tables/rename/
// summary: Rename a Database Table
func (r *Table) TableRenameWithContext_PATCH(ctx context.Context, body *TableRename_PATCH_Body) error {
	resourcePath := "/tables/rename/"

	var reqParams core.Params
	reqBody, err := core.NewParamsFromStruct(body)
	if err != nil {
		return err
	}

	_, err = core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodPatch, resourcePath, reqParams, reqBody)
	return err

}

// TableRename_PATCH
// method: PATCH
// url: /tables/rename/
// summary: Rename a Database Table
func (r *Table) TableRename_PATCH(body *TableRename_PATCH_Body) error {
	return r.TableRenameWithContext_PATCH(r.Untyped.GetCtx(), body)
}

// TableShow_GET_Body represents the request body for TableShow
type TableShow_GET_Body struct {
	DatabaseName   string `json:"database_name,omitempty" yaml:"database_name,omitempty" required:"false" doc:"Getting list of objects by database_name"`
	IsImportsTable bool   `json:"is_imports_table,omitempty" yaml:"is_imports_table,omitempty" required:"false" doc:"Is table actually a sub-table to track imported .parquet files."`
	Name           string `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:"Getting object by exact match"`
	SchemaName     string `json:"schema_name,omitempty" yaml:"schema_name,omitempty" required:"false" doc:"Getting list of objects by schema_name"`
	TenantId       int64  `json:"tenant_id,omitempty" yaml:"tenant_id,omitempty" required:"false" doc:"Filter by tenant. Specify tenant ID."`
}

// TableShow_GET_Model represents the response model for TableShow
type TableShow_GET_Model struct {
	DatabaseName                  string  `json:"database_name,omitempty" yaml:"database_name,omitempty" required:"true" doc:"Name of the Database"`
	Name                          string  `json:"name,omitempty" yaml:"name,omitempty" required:"true" doc:"Name of the object"`
	NumRows                       int64   `json:"num_rows,omitempty" yaml:"num_rows,omitempty" required:"true" doc:"Total number of rows"`
	SchemaName                    string  `json:"schema_name,omitempty" yaml:"schema_name,omitempty" required:"true" doc:"Name of the Schema"`
	Size                          int64   `json:"size,omitempty" yaml:"size,omitempty" required:"true" doc:"Size of the Table"`
	SortingKeyEnabled             bool    `json:"sorting_key_enabled,omitempty" yaml:"sorting_key_enabled,omitempty" required:"true" doc:"Sorting key enabled"`
	AcummulativeRowInsertionCount float64 `json:"acummulative_row_insertion_count,omitempty" yaml:"acummulative_row_insertion_count,omitempty" required:"false" doc:"Accumulative row insertion count."`
	IsExternalRowidAlloc          bool    `json:"is_external_rowid_alloc,omitempty" yaml:"is_external_rowid_alloc,omitempty" required:"false" doc:"Indicates whether table row IDs are user-defined (user-defined PK)"`
	Properties                    string  `json:"properties,omitempty" yaml:"properties,omitempty" required:"false" doc:"Misc properties of the Table"`
	SortingDone                   bool    `json:"sorting_done,omitempty" yaml:"sorting_done,omitempty" required:"false" doc:"Sorting done flag."`
	SortingLabel                  string  `json:"sorting_label,omitempty" yaml:"sorting_label,omitempty" required:"false" doc:"Sorting label. Higher label means higher sorting quality."`
	SortingScore                  float64 `json:"sorting_score,omitempty" yaml:"sorting_score,omitempty" required:"false" doc:"Sorting score. Higher score means higher sorting quality."`
	WriteAmplification            float64 `json:"write_amplification,omitempty" yaml:"write_amplification,omitempty" required:"false" doc:"Write amplification."`
}

// TableShowWithContext_GET
// method: GET
// url: /tables/show/
// summary: Show a Database Table
func (r *Table) TableShowWithContext_GET(ctx context.Context, params *TableShow_GET_Body) (*TableShow_GET_Model, error) {
	resourcePath := "/tables/show/"

	reqParams, err := core.NewParamsFromStruct(params)
	if err != nil {
		return nil, err
	}
	var reqBody core.Params

	record, err := core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodGet, resourcePath, reqParams, reqBody)
	if err != nil {
		return nil, err
	}

	var response TableShow_GET_Model
	if err := record.Fill(&response); err != nil {
		return nil, err
	}
	return &response, nil

}

// TableShow_GET
// method: GET
// url: /tables/show/
// summary: Show a Database Table
func (r *Table) TableShow_GET(params *TableShow_GET_Body) (*TableShow_GET_Model, error) {
	return r.TableShowWithContext_GET(r.Untyped.GetCtx(), params)
}

// -----------------------------------------------------
// GENERATION ISSUES
// -----------------------------------------------------
//   - CREATE operation excluded: POST tables has no response schema and doesn't return 204 NO CONTENT
//   - UPDATE operation excluded: PATCH/PUT /tables/{id}/ has no response schema and doesn't return 204 NO CONTENT
