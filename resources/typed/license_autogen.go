// Code generated by generate-typed-resources. DO NOT EDIT.
// Template: CREATE|LIST|READ|DELETE

package typed

import (
	"context"

	"github.com/vast-data/go-vast-client/core"
)

// -----------------------------------------------------
// RESOURCE TYPE
// -----------------------------------------------------

// License represents a typed resource for license operations
type License struct {
	*core.TypedVastResource
}

// -----------------------------------------------------
// SEARCH PARAMS
// -----------------------------------------------------

// LicenseSearchParams represents the search parameters for License operations
type LicenseSearchParams struct {
	Guid string `json:"guid,omitempty" yaml:"guid,omitempty" required:"false" doc:""`
	Name string `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:""`

	// RawData allows passing arbitrary search parameters as key-value pairs.
	//
	// Use this field when you need query parameters that are not covered by the typed fields above.
	// This is particularly useful for:
	//   - Dynamic filter operations (e.g., "path__contains", "name__icontains")
	//   - Django-style query filters
	//   - Custom backend-specific parameters
	//
	// Example:
	//   params := &LicenseSearchParams{
	//       RawData: core.Params{"path__contains": "/foo", "name__icontains": "bar"},
	//   }
	//
	// Note: You can use either the typed fields or RawData, or combine both.
	RawData core.Params `json:"-" yaml:"-"`
}

// -----------------------------------------------------
// REQUEST BODY
// -----------------------------------------------------

// LicenseRequestBody represents the request body for License operations
type LicenseRequestBody struct {
	LicenseKey string `json:"license_key,omitempty" yaml:"license_key,omitempty" required:"false" doc:"License key"`
}

// -----------------------------------------------------
// MODELS
// -----------------------------------------------------

// LicenseDetailsModel represents the detailed model returned by GET/List operations
// Type alias to component definition: #/components/schemas/License
type LicenseDetailsModel = Component_License

// LicenseUpsertModel represents the model returned by Create/Update operations
// Type alias to component definition: #/components/schemas/License
type LicenseUpsertModel = Component_License

// -----------------------------------------------------
// LIST
// -----------------------------------------------------

// List retrieves multiple licenses with typed request/response
// summary: List Licenses
func (r *License) List(req *LicenseSearchParams) ([]*LicenseDetailsModel, error) {
	return r.ListWithContext(r.Untyped.GetCtx(), req)
}

// ListWithContext retrieves multiple licenses with typed request/response using provided context
// summary: List Licenses
func (r *License) ListWithContext(ctx context.Context, req *LicenseSearchParams) ([]*LicenseDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.GetResourceMap()[r.GetResourceType()].ListWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response []*LicenseDetailsModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// Get retrieves a single license with typed request/response
// summary: List Licenses
func (r *License) Get(req *LicenseSearchParams) (*LicenseDetailsModel, error) {
	return r.GetWithContext(r.Untyped.GetCtx(), req)
}

// GetWithContext retrieves a single license with typed request/response using provided context
// summary: List Licenses
func (r *License) GetWithContext(ctx context.Context, req *LicenseSearchParams) (*LicenseDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response LicenseDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// READ
// -----------------------------------------------------

// GetById retrieves a single license by ID
// summary: Return Details of a License
func (r *License) GetById(id any) (*LicenseDetailsModel, error) {
	return r.GetByIdWithContext(r.Untyped.GetCtx(), id)
}

// GetByIdWithContext retrieves a single license by ID using provided context
// summary: Return Details of a License
func (r *License) GetByIdWithContext(ctx context.Context, id any) (*LicenseDetailsModel, error) {
	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetByIdWithContext(ctx, id)
	if err != nil {
		return nil, err
	}

	var response LicenseDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// CREATE
// -----------------------------------------------------

// Create creates a new license with typed request/response
// summary: Add a license key
func (r *License) Create(req *LicenseRequestBody) (*LicenseUpsertModel, error) {
	return r.CreateWithContext(r.Untyped.GetCtx(), req)
}

// CreateWithContext creates a new license with typed request/response using provided context
// summary: Add a license key
func (r *License) CreateWithContext(ctx context.Context, req *LicenseRequestBody) (*LicenseUpsertModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].CreateWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response LicenseUpsertModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// DELETE
// -----------------------------------------------------

// Delete deletes a license with search parameters
func (r *License) Delete(req *LicenseSearchParams) error {
	return r.DeleteWithContext(r.Untyped.GetCtx(), req)
}

// DeleteWithContext deletes a license with search parameters using provided context
func (r *License) DeleteWithContext(ctx context.Context, req *LicenseSearchParams) error {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return err
	}
	_, err = r.Untyped.GetResourceMap()[r.GetResourceType()].DeleteWithContext(ctx, params, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteById deletes a license by ID
// summary: Remove a License
//
// Parameters:
//   - id: License ID
func (r *License) DeleteById(id any) error {
	return r.DeleteByIdWithContext(r.Untyped.GetCtx(), id)
}

// DeleteByIdWithContext deletes a license by ID using provided context
// summary: Remove a License
//
// Parameters:
//   - id: License ID
func (r *License) DeleteByIdWithContext(ctx context.Context, id any) error {
	_, err := r.Untyped.GetResourceMap()[r.GetResourceType()].DeleteByIdWithContext(ctx, id, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// -----------------------------------------------------
// ENSURE
// -----------------------------------------------------

// Ensure ensures a license exists with typed response
func (r *License) Ensure(searchParams *LicenseSearchParams, body *LicenseRequestBody) (*LicenseUpsertModel, error) {
	return r.EnsureWithContext(r.Untyped.GetCtx(), searchParams, body)
}

// EnsureWithContext ensures a license exists with typed response using provided context
func (r *License) EnsureWithContext(ctx context.Context, searchParams *LicenseSearchParams, body *LicenseRequestBody) (*LicenseUpsertModel, error) {
	searchParamsConverted, err := core.NewParamsFromStruct(searchParams)
	if err != nil {
		return nil, err
	}
	bodyConverted, err := core.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].EnsureWithContext(ctx, searchParamsConverted, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response LicenseUpsertModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Exists checks if a license exists
func (r *License) Exists(req *LicenseSearchParams) (bool, error) {
	return r.ExistsWithContext(r.Untyped.GetCtx(), req)
}

// ExistsWithContext checks if a license exists using provided context
func (r *License) ExistsWithContext(ctx context.Context, req *LicenseSearchParams) (bool, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].ExistsWithContext(ctx, params)
}

// MustExists checks if a license exists and panics if not
func (r *License) MustExists(req *LicenseSearchParams) bool {
	return r.MustExistsWithContext(r.Untyped.GetCtx(), req)
}

// MustExistsWithContext checks if a license exists and panics if not using provided context
func (r *License) MustExistsWithContext(ctx context.Context, req *LicenseSearchParams) bool {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].MustExistsWithContext(ctx, params)
}
