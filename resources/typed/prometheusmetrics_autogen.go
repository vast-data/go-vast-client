// Code generated by generate-typed-resources. DO NOT EDIT.
// Template: EXTRA_METHODS_ONLY

package typed

import (
	"context"
	"fmt"
	"net/http"

	"github.com/vast-data/go-vast-client/core"
)

// PrometheusMetrics provides typed access to PrometheusMetrics extra methods
type PrometheusMetrics struct {
	*core.TypedVastResource
}

// -----------------------------------------------------
// EXTRA METHODS
// -----------------------------------------------------

// PrometheusMetricsAllWithContext_GET
// method: GET
// url: /prometheusmetrics/all/
// summary: all prometheus metrics
func (r *PrometheusMetrics) PrometheusMetricsAllWithContext_GET(ctx context.Context) (string, error) {
	resourcePath := "/prometheusmetrics/all/"

	var reqParams core.Params
	var reqBody core.Params

	record, err := core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodGet, resourcePath, reqParams, reqBody)
	if err != nil {
		return "", err
	}
	// Extract text/plain response from @raw key
	if rawVal, ok := record["@raw"]; ok {
		if rawBytes, ok := rawVal.([]byte); ok {
			return string(rawBytes), nil
		}
		return fmt.Sprintf("%v", rawVal), nil
	}
	return "", fmt.Errorf("@raw key not found in response")

}

// PrometheusMetricsAll_GET
// method: GET
// url: /prometheusmetrics/all/
// summary: all prometheus metrics
func (r *PrometheusMetrics) PrometheusMetricsAll_GET() (string, error) {
	return r.PrometheusMetricsAllWithContext_GET(r.Untyped.GetCtx())
}

// PrometheusMetricsDefragWithContext_GET
// method: GET
// url: /prometheusmetrics/defrag/
// summary: prometheus defrag metrics
func (r *PrometheusMetrics) PrometheusMetricsDefragWithContext_GET(ctx context.Context) (string, error) {
	resourcePath := "/prometheusmetrics/defrag/"

	var reqParams core.Params
	var reqBody core.Params

	record, err := core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodGet, resourcePath, reqParams, reqBody)
	if err != nil {
		return "", err
	}
	// Extract text/plain response from @raw key
	if rawVal, ok := record["@raw"]; ok {
		if rawBytes, ok := rawVal.([]byte); ok {
			return string(rawBytes), nil
		}
		return fmt.Sprintf("%v", rawVal), nil
	}
	return "", fmt.Errorf("@raw key not found in response")

}

// PrometheusMetricsDefrag_GET
// method: GET
// url: /prometheusmetrics/defrag/
// summary: prometheus defrag metrics
func (r *PrometheusMetrics) PrometheusMetricsDefrag_GET() (string, error) {
	return r.PrometheusMetricsDefragWithContext_GET(r.Untyped.GetCtx())
}

// PrometheusMetricsDevicesWithContext_GET
// method: GET
// url: /prometheusmetrics/devices/
// summary: prometheus devices metrics
func (r *PrometheusMetrics) PrometheusMetricsDevicesWithContext_GET(ctx context.Context) (string, error) {
	resourcePath := "/prometheusmetrics/devices/"

	var reqParams core.Params
	var reqBody core.Params

	record, err := core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodGet, resourcePath, reqParams, reqBody)
	if err != nil {
		return "", err
	}
	// Extract text/plain response from @raw key
	if rawVal, ok := record["@raw"]; ok {
		if rawBytes, ok := rawVal.([]byte); ok {
			return string(rawBytes), nil
		}
		return fmt.Sprintf("%v", rawVal), nil
	}
	return "", fmt.Errorf("@raw key not found in response")

}

// PrometheusMetricsDevices_GET
// method: GET
// url: /prometheusmetrics/devices/
// summary: prometheus devices metrics
func (r *PrometheusMetrics) PrometheusMetricsDevices_GET() (string, error) {
	return r.PrometheusMetricsDevicesWithContext_GET(r.Untyped.GetCtx())
}

// PrometheusMetricsQuotasWithContext_GET
// method: GET
// url: /prometheusmetrics/quotas/
// summary: prometheus quotas metrics
func (r *PrometheusMetrics) PrometheusMetricsQuotasWithContext_GET(ctx context.Context) (string, error) {
	resourcePath := "/prometheusmetrics/quotas/"

	var reqParams core.Params
	var reqBody core.Params

	record, err := core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodGet, resourcePath, reqParams, reqBody)
	if err != nil {
		return "", err
	}
	// Extract text/plain response from @raw key
	if rawVal, ok := record["@raw"]; ok {
		if rawBytes, ok := rawVal.([]byte); ok {
			return string(rawBytes), nil
		}
		return fmt.Sprintf("%v", rawVal), nil
	}
	return "", fmt.Errorf("@raw key not found in response")

}

// PrometheusMetricsQuotas_GET
// method: GET
// url: /prometheusmetrics/quotas/
// summary: prometheus quotas metrics
func (r *PrometheusMetrics) PrometheusMetricsQuotas_GET() (string, error) {
	return r.PrometheusMetricsQuotasWithContext_GET(r.Untyped.GetCtx())
}

// PrometheusMetricsSwitchesWithContext_GET
// method: GET
// url: /prometheusmetrics/switches/
// summary: prometheus switches metrics
func (r *PrometheusMetrics) PrometheusMetricsSwitchesWithContext_GET(ctx context.Context) (string, error) {
	resourcePath := "/prometheusmetrics/switches/"

	var reqParams core.Params
	var reqBody core.Params

	record, err := core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodGet, resourcePath, reqParams, reqBody)
	if err != nil {
		return "", err
	}
	// Extract text/plain response from @raw key
	if rawVal, ok := record["@raw"]; ok {
		if rawBytes, ok := rawVal.([]byte); ok {
			return string(rawBytes), nil
		}
		return fmt.Sprintf("%v", rawVal), nil
	}
	return "", fmt.Errorf("@raw key not found in response")

}

// PrometheusMetricsSwitches_GET
// method: GET
// url: /prometheusmetrics/switches/
// summary: prometheus switches metrics
func (r *PrometheusMetrics) PrometheusMetricsSwitches_GET() (string, error) {
	return r.PrometheusMetricsSwitchesWithContext_GET(r.Untyped.GetCtx())
}

// PrometheusMetricsUsersWithContext_GET
// method: GET
// url: /prometheusmetrics/users/
// summary: prometheus users metrics
func (r *PrometheusMetrics) PrometheusMetricsUsersWithContext_GET(ctx context.Context) (string, error) {
	resourcePath := "/prometheusmetrics/users/"

	var reqParams core.Params
	var reqBody core.Params

	record, err := core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodGet, resourcePath, reqParams, reqBody)
	if err != nil {
		return "", err
	}
	// Extract text/plain response from @raw key
	if rawVal, ok := record["@raw"]; ok {
		if rawBytes, ok := rawVal.([]byte); ok {
			return string(rawBytes), nil
		}
		return fmt.Sprintf("%v", rawVal), nil
	}
	return "", fmt.Errorf("@raw key not found in response")

}

// PrometheusMetricsUsers_GET
// method: GET
// url: /prometheusmetrics/users/
// summary: prometheus users metrics
func (r *PrometheusMetrics) PrometheusMetricsUsers_GET() (string, error) {
	return r.PrometheusMetricsUsersWithContext_GET(r.Untyped.GetCtx())
}

// PrometheusMetricsViewsWithContext_GET
// method: GET
// url: /prometheusmetrics/views/
// summary: prometheus views metrics
func (r *PrometheusMetrics) PrometheusMetricsViewsWithContext_GET(ctx context.Context) (string, error) {
	resourcePath := "/prometheusmetrics/views/"

	var reqParams core.Params
	var reqBody core.Params

	record, err := core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodGet, resourcePath, reqParams, reqBody)
	if err != nil {
		return "", err
	}
	// Extract text/plain response from @raw key
	if rawVal, ok := record["@raw"]; ok {
		if rawBytes, ok := rawVal.([]byte); ok {
			return string(rawBytes), nil
		}
		return fmt.Sprintf("%v", rawVal), nil
	}
	return "", fmt.Errorf("@raw key not found in response")

}

// PrometheusMetricsViews_GET
// method: GET
// url: /prometheusmetrics/views/
// summary: prometheus views metrics
func (r *PrometheusMetrics) PrometheusMetricsViews_GET() (string, error) {
	return r.PrometheusMetricsViewsWithContext_GET(r.Untyped.GetCtx())
}
