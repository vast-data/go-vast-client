// Code generated by generate-typed-resources. DO NOT EDIT.
// Template: LIST

package typed

import (
	"context"
	"net/http"

	"github.com/vast-data/go-vast-client/core"
)

// -----------------------------------------------------
// RESOURCE TYPE
// -----------------------------------------------------

// Schema represents a typed resource for schema operations
type Schema struct {
	*core.TypedVastResource
}

// -----------------------------------------------------
// SEARCH PARAMS
// -----------------------------------------------------

// SchemaSearchParams represents the search parameters for Schema operations
type SchemaSearchParams struct {
	ByLevel      string `json:"by_level,omitempty" yaml:"by_level,omitempty" required:"false" doc:"Can be true or false. If this by_level is true, the VMS will provide a list of all schemas of only one level. to get the next level, need to make another request with the name of the parent scheme"`
	CountOnly    bool   `json:"count_only,omitempty" yaml:"count_only,omitempty" required:"false" doc:"Whether to only return count of objects"`
	DatabaseName string `json:"database_name,omitempty" yaml:"database_name,omitempty" required:"false" doc:"Filter by database in which the schemas reside"`
	Name         string `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:"Getting list of objects by exact match"`
	SchemaName   string `json:"schema_name,omitempty" yaml:"schema_name,omitempty" required:"false" doc:"Get list of schemas by schema_name"`
	TenantId     int64  `json:"tenant_id,omitempty" yaml:"tenant_id,omitempty" required:"false" doc:"Filter by tenant. Specify tenant ID."`

	// RawData allows passing arbitrary search parameters as key-value pairs.
	//
	// Use this field when you need query parameters that are not covered by the typed fields above.
	// This is particularly useful for:
	//   - Dynamic filter operations (e.g., "path__contains", "name__icontains")
	//   - Django-style query filters
	//   - Custom backend-specific parameters
	//
	// Example:
	//   params := &SchemaSearchParams{
	//       RawData: core.Params{"path__contains": "/foo", "name__icontains": "bar"},
	//   }
	//
	// Note: You can use either the typed fields or RawData, or combine both.
	RawData core.Params `json:"-" yaml:"-"`
}

// -----------------------------------------------------
// MODELS
// -----------------------------------------------------

// SchemaDetailsModel represents the detailed model returned by GET/List operations
// Type alias to component definition: #/components/schemas/Schema
type SchemaDetailsModel = Component_Schema

// -----------------------------------------------------
// LIST
// -----------------------------------------------------

// List retrieves multiple schemas with typed request/response
// summary: List Database Schemas
func (r *Schema) List(req *SchemaSearchParams) ([]*SchemaDetailsModel, error) {
	return r.ListWithContext(r.Untyped.GetCtx(), req)
}

// ListWithContext retrieves multiple schemas with typed request/response using provided context
// summary: List Database Schemas
func (r *Schema) ListWithContext(ctx context.Context, req *SchemaSearchParams) ([]*SchemaDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.GetResourceMap()[r.GetResourceType()].ListWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response []*SchemaDetailsModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// Get retrieves a single schema with typed request/response
// summary: List Database Schemas
func (r *Schema) Get(req *SchemaSearchParams) (*SchemaDetailsModel, error) {
	return r.GetWithContext(r.Untyped.GetCtx(), req)
}

// GetWithContext retrieves a single schema with typed request/response using provided context
// summary: List Database Schemas
func (r *Schema) GetWithContext(ctx context.Context, req *SchemaSearchParams) (*SchemaDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response SchemaDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Exists checks if a schema exists
func (r *Schema) Exists(req *SchemaSearchParams) (bool, error) {
	return r.ExistsWithContext(r.Untyped.GetCtx(), req)
}

// ExistsWithContext checks if a schema exists using provided context
func (r *Schema) ExistsWithContext(ctx context.Context, req *SchemaSearchParams) (bool, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].ExistsWithContext(ctx, params)
}

// MustExists checks if a schema exists and panics if not
func (r *Schema) MustExists(req *SchemaSearchParams) bool {
	return r.MustExistsWithContext(r.Untyped.GetCtx(), req)
}

// MustExistsWithContext checks if a schema exists and panics if not using provided context
func (r *Schema) MustExistsWithContext(ctx context.Context, req *SchemaSearchParams) bool {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].MustExistsWithContext(ctx, params)
}

// -----------------------------------------------------
// EXTRA METHODS
// -----------------------------------------------------

// SchemaDeleteWithContext_DELETE
// method: DELETE
// url: /schemas/delete/
// summary: Delete Schema
//
// Parameters:
//   - databaseName (body): Name of the Database
//   - name (body): Name of the object
//   - tenantId (body): Tenant ID
func (r *Schema) SchemaDeleteWithContext_DELETE(ctx context.Context, databaseName string, name string, tenantId int64) error {
	resourcePath := "/schemas/delete/"

	var reqParams core.Params
	reqBody := core.Params{}
	reqBody["database_name"] = databaseName
	reqBody["name"] = name
	if tenantId != 0 {
		reqBody["tenant_id"] = tenantId
	}

	_, err := core.Request[core.EmptyRecord](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodDelete, resourcePath, reqParams, reqBody)
	return err

}

// SchemaDelete_DELETE
// method: DELETE
// url: /schemas/delete/
// summary: Delete Schema
//
// Parameters:
//   - databaseName (body): Name of the Database
//   - name (body): Name of the object
//   - tenantId (body): Tenant ID
func (r *Schema) SchemaDelete_DELETE(databaseName string, name string, tenantId int64) error {
	return r.SchemaDeleteWithContext_DELETE(r.Untyped.GetCtx(), databaseName, name, tenantId)
}

// SchemaRename_PATCH_Body represents the request body for SchemaRename
type SchemaRename_PATCH_Body struct {
	DatabaseName  string `json:"database_name,omitempty" yaml:"database_name,omitempty" required:"true" doc:"Name of the Database"`
	Name          string `json:"name,omitempty" yaml:"name,omitempty" required:"true" doc:"Name of the object"`
	NewName       string `json:"new_name,omitempty" yaml:"new_name,omitempty" required:"true" doc:"New name of the Schema"`
	NewSchemaName string `json:"new_schema_name,omitempty" yaml:"new_schema_name,omitempty" required:"false" doc:"New name of the Schema (deprecated since 5.0)"`
	TenantId      int64  `json:"tenant_id,omitempty" yaml:"tenant_id,omitempty" required:"false" doc:"Tenant ID"`
}

// SchemaRenameWithContext_PATCH
// method: PATCH
// url: /schemas/rename/
// summary: Rename a database schema
func (r *Schema) SchemaRenameWithContext_PATCH(ctx context.Context, body *SchemaRename_PATCH_Body) error {
	resourcePath := "/schemas/rename/"

	var reqParams core.Params
	reqBody, err := core.NewParamsFromStruct(body)
	if err != nil {
		return err
	}

	_, err = core.Request[core.EmptyRecord](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodPatch, resourcePath, reqParams, reqBody)
	return err

}

// SchemaRename_PATCH
// method: PATCH
// url: /schemas/rename/
// summary: Rename a database schema
func (r *Schema) SchemaRename_PATCH(body *SchemaRename_PATCH_Body) error {
	return r.SchemaRenameWithContext_PATCH(r.Untyped.GetCtx(), body)
}

// SchemaShow_GET_Body represents the request body for SchemaShow
type SchemaShow_GET_Body struct {
	DatabaseName string `json:"database_name,omitempty" yaml:"database_name,omitempty" required:"false" doc:"Getting list of objects by database_name"`
	Name         string `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:"Getting object by exact match"`
	TenantId     int64  `json:"tenant_id,omitempty" yaml:"tenant_id,omitempty" required:"false" doc:"Filter by tenant. Specify tenant ID."`
}

// SchemaShow_GET_Model represents the response model for SchemaShow
type SchemaShow_GET_Model struct {
	DatabaseName string `json:"database_name,omitempty" yaml:"database_name,omitempty" required:"true" doc:"Name of the Database"`
	Name         string `json:"name,omitempty" yaml:"name,omitempty" required:"true" doc:"Name of the object"`
	Properties   string `json:"properties,omitempty" yaml:"properties,omitempty" required:"false" doc:"Misc properties of the Schema"`
}

// SchemaShowWithContext_GET
// method: GET
// url: /schemas/show/
// summary: Show a Database Schema
func (r *Schema) SchemaShowWithContext_GET(ctx context.Context, params *SchemaShow_GET_Body) (*SchemaShow_GET_Model, error) {
	resourcePath := "/schemas/show/"

	reqParams, err := core.NewParamsFromStruct(params)
	if err != nil {
		return nil, err
	}
	var reqBody core.Params

	record, err := core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodGet, resourcePath, reqParams, reqBody)
	if err != nil {
		return nil, err
	}

	var response SchemaShow_GET_Model
	if err := record.Fill(&response); err != nil {
		return nil, err
	}
	return &response, nil

}

// SchemaShow_GET
// method: GET
// url: /schemas/show/
// summary: Show a Database Schema
func (r *Schema) SchemaShow_GET(params *SchemaShow_GET_Body) (*SchemaShow_GET_Model, error) {
	return r.SchemaShowWithContext_GET(r.Untyped.GetCtx(), params)
}

// -----------------------------------------------------
// GENERATION ISSUES
// -----------------------------------------------------
//   - CREATE operation excluded: POST schemas has no response schema and doesn't return 204 NO CONTENT
