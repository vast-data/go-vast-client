// Code generated by generate-typed-resources. DO NOT EDIT.
// Template: CREATE|LIST|READ|UPDATE|DELETE

package typed

import (
	"context"
	"fmt"
	"net/http"
	"time"

	"github.com/vast-data/go-vast-client/core"
	"github.com/vast-data/go-vast-client/resources/untyped"
)

// -----------------------------------------------------
// RESOURCE TYPE
// -----------------------------------------------------

// Tenant represents a typed resource for tenant operations
type Tenant struct {
	*core.TypedVastResource
}

// -----------------------------------------------------
// SEARCH PARAMS
// -----------------------------------------------------

// TenantSearchParams represents the search parameters for Tenant operations
type TenantSearchParams struct {
	Name string `json:"name,omitempty" yaml:"name,omitempty" required:"true" doc:""`
	Guid string `json:"guid,omitempty" yaml:"guid,omitempty" required:"false" doc:"Tenant guid"`

	// RawData allows passing arbitrary search parameters as key-value pairs.
	//
	// Use this field when you need query parameters that are not covered by the typed fields above.
	// This is particularly useful for:
	//   - Dynamic filter operations (e.g., "path__contains", "name__icontains")
	//   - Django-style query filters
	//   - Custom backend-specific parameters
	//
	// Example:
	//   params := &TenantSearchParams{
	//       RawData: core.Params{"path__contains": "/foo", "name__icontains": "bar"},
	//   }
	//
	// Note: You can use either the typed fields or RawData, or combine both.
	RawData core.Params `json:"-" yaml:"-"`
}

// -----------------------------------------------------
// REQUEST BODY
// -----------------------------------------------------

// TenantRequestBody_CapacityRules represents a nested type for request body
type TenantRequestBody_CapacityRules struct {
	GracePeriod     string `json:"grace_period,omitempty" yaml:"grace_period,omitempty" required:"false" doc:"Quota enforcement grace period for tenant capacity limit, in seconds"`
	HardLimit       int64  `json:"hard_limit,omitempty" yaml:"hard_limit,omitempty" required:"false" doc:"Capacity hard limit for the tenant"`
	HardLimitInodes int64  `json:"hard_limit_inodes,omitempty" yaml:"hard_limit_inodes,omitempty" required:"false" doc:"Hard limit on the number of files or directories for the tenant"`
	NotifyHardLimit bool   `json:"notify_hard_limit,omitempty" yaml:"notify_hard_limit,omitempty" required:"false" doc:"Notify on reaching hard limit"`
	NotifySoftLimit bool   `json:"notify_soft_limit,omitempty" yaml:"notify_soft_limit,omitempty" required:"false" doc:"Notify on reaching soft limit"`
	SoftLimit       int64  `json:"soft_limit,omitempty" yaml:"soft_limit,omitempty" required:"false" doc:"Capacity soft limit for the tenant"`
	SoftLimitInodes int64  `json:"soft_limit_inodes,omitempty" yaml:"soft_limit_inodes,omitempty" required:"false" doc:"Soft limit on the number of files or directories for the tenant"`
}

// TenantRequestBody_Qos represents a nested type for request body
type TenantRequestBody_Qos struct {
	StaticLimits TenantRequestBody_Qos_StaticLimits `json:"static_limits,omitempty" yaml:"static_limits,omitempty" required:"false" doc:"Performance limits per view. Maximum limits define maximum provisioning in the absence of resource contention. Valid values: 0-4294967296. 0 means unlimited."`
}

// TenantRequestBody_Qos_StaticLimits represents a nested type for request body
type TenantRequestBody_Qos_StaticLimits struct {
	BurstReadsBwMb      int64 `json:"burst_reads_bw_mb,omitempty" yaml:"burst_reads_bw_mb,omitempty" required:"false" doc:"Burst reads BW Mb"`
	BurstReadsIops      int64 `json:"burst_reads_iops,omitempty" yaml:"burst_reads_iops,omitempty" required:"false" doc:"Burst reads IOPS"`
	BurstReadsLoanIops  int64 `json:"burst_reads_loan_iops,omitempty" yaml:"burst_reads_loan_iops,omitempty" required:"false" doc:"Burst reads loan IOPS"`
	BurstReadsLoanMb    int64 `json:"burst_reads_loan_mb,omitempty" yaml:"burst_reads_loan_mb,omitempty" required:"false" doc:"Burst reads loan Mb"`
	BurstWritesBwMb     int64 `json:"burst_writes_bw_mb,omitempty" yaml:"burst_writes_bw_mb,omitempty" required:"false" doc:"Burst writes BW Mb"`
	BurstWritesIops     int64 `json:"burst_writes_iops,omitempty" yaml:"burst_writes_iops,omitempty" required:"false" doc:"Burst writes IOPS"`
	BurstWritesLoanIops int64 `json:"burst_writes_loan_iops,omitempty" yaml:"burst_writes_loan_iops,omitempty" required:"false" doc:"Burst writes loan IOPS"`
	BurstWritesLoanMb   int64 `json:"burst_writes_loan_mb,omitempty" yaml:"burst_writes_loan_mb,omitempty" required:"false" doc:"Burst writes loan Mb"`
	MaxReadsBwMbps      int64 `json:"max_reads_bw_mbps,omitempty" yaml:"max_reads_bw_mbps,omitempty" required:"false" doc:"Maximal amount of performance to provide when there is no resource contention"`
	MaxReadsIops        int64 `json:"max_reads_iops,omitempty" yaml:"max_reads_iops,omitempty" required:"false" doc:"Maximal amount of performance to provide when there is no resource contention"`
	MaxWritesBwMbps     int64 `json:"max_writes_bw_mbps,omitempty" yaml:"max_writes_bw_mbps,omitempty" required:"false" doc:"Maximal amount of performance to provide when there is no resource contention"`
	MaxWritesIops       int64 `json:"max_writes_iops,omitempty" yaml:"max_writes_iops,omitempty" required:"false" doc:"Maximal amount of performance to provide when there is no resource contention"`
}

// TenantRequestBody represents the request body for Tenant operations
type TenantRequestBody struct {
	Name                                 string                          `json:"name,omitempty" yaml:"name,omitempty" required:"true" doc:"A name for the tenant"`
	AccessIpRanges                       *[]string                       `json:"access_ip_ranges,omitempty" yaml:"access_ip_ranges,omitempty" required:"false" doc:"Restricts tenant login access to specified source IP ranges. Enter as single IPs (1.1.1.1), ranges (1.2.3.4 - 1.2.3.6), or CIDR (1.1.1.0/24)."`
	AdProviderId                         int64                           `json:"ad_provider_id,omitempty" yaml:"ad_provider_id,omitempty" required:"false" doc:"The ID of an Active Directory provider configured on the cluster. Enables the specified provider for the tenant."`
	AllowDisabledUsers                   bool                            `json:"allow_disabled_users,omitempty" yaml:"allow_disabled_users,omitempty" required:"false" doc:"Allow IO from users whose Active Directory accounts are explicitly disabled."`
	AllowLockedUsers                     bool                            `json:"allow_locked_users,omitempty" yaml:"allow_locked_users,omitempty" required:"false" doc:"Allow IO from users whose Active Directory accounts are locked out by lockout policies due to unsuccessful login attempts."`
	AllowedDelegations                   string                          `json:"allowed_delegations,omitempty" yaml:"allowed_delegations,omitempty" required:"false" doc:"Defines the possible types of NFSv4 delegations"`
	ApplicationUsersGroupName            string                          `json:"application_users_group_name,omitempty" yaml:"application_users_group_name,omitempty" required:"false" doc:"The name of the group that will be used for application users"`
	CapacityRules                        TenantRequestBody_CapacityRules `json:"capacity_rules,omitempty" yaml:"capacity_rules,omitempty" required:"false" doc:""`
	ClientIpRanges                       *[][]string                     `json:"client_ip_ranges,omitempty" yaml:"client_ip_ranges,omitempty" required:"false" doc:"Array of ranges of client IPs to be served by the tenant. For client requests made to a VIP that belongs to a VIP Pool that is not associated to a specific tenant, the client's source IP is checked against the Client IPs that are defined within each tenant. That check determines access. The client IPs that you associate with each tenant must be unique per tenant."`
	DefaultOthersShareLevelPerm          string                          `json:"default_others_share_level_perm,omitempty" yaml:"default_others_share_level_perm,omitempty" required:"false" doc:"Default Share-level permissions for Others"`
	DomainName                           string                          `json:"domain_name,omitempty" yaml:"domain_name,omitempty" required:"false" doc:"Domain name to incorporate into the VMS tenant login page URL."`
	EncryptionCrn                        string                          `json:"encryption_crn,omitempty" yaml:"encryption_crn,omitempty" required:"false" doc:"Tenant's encryption group unique identifier (deprecated)"`
	EncryptionGroup                      string                          `json:"encryption_group,omitempty" yaml:"encryption_group,omitempty" required:"false" doc:"Tenant's encryption group unique identifier"`
	GrantUnrequestedDelegationsByDefault bool                            `json:"grant_unrequested_delegations_by_default,omitempty" yaml:"grant_unrequested_delegations_by_default,omitempty" required:"false" doc:"When enabled, the server may grant delegations based on share access even if not explicitly requested by the client"`
	IdentityProviderName                 string                          `json:"identity_provider_name,omitempty" yaml:"identity_provider_name,omitempty" required:"false" doc:"The ID of a SAML provider configured on the cluster. Connects the specified provider to the tenant."`
	IsNfsv42Supported                    bool                            `json:"is_nfsv42_supported,omitempty" yaml:"is_nfsv42_supported,omitempty" required:"false" doc:"Enable NFSv4.2"`
	KrbProviderId                        int64                           `json:"krb_provider_id,omitempty" yaml:"krb_provider_id,omitempty" required:"false" doc:"Kerberos provider ID"`
	LdapProviderId                       int64                           `json:"ldap_provider_id,omitempty" yaml:"ldap_provider_id,omitempty" required:"false" doc:"The ID of an LDAP provider configured on the cluster. Enables the specified provider for the tenant."`
	LocalProviderId                      int64                           `json:"local_provider_id,omitempty" yaml:"local_provider_id,omitempty" required:"false" doc:"The ID of a local provider configured on the cluster. Connects the specified provider to the tenant."`
	LoginNamePrimaryProvider             string                          `json:"login_name_primary_provider,omitempty" yaml:"login_name_primary_provider,omitempty" required:"false" doc:"Login name primary provider type"`
	MaxViews                             int64                           `json:"max_views,omitempty" yaml:"max_views,omitempty" required:"false" doc:"Max views we can create on this tenant (0:unlimted as default)"`
	NisProviderId                        int64                           `json:"nis_provider_id,omitempty" yaml:"nis_provider_id,omitempty" required:"false" doc:"The ID of a NIS provider configured on the cluster. Enables the specified provider for the tenant."`
	OidcProviderId                       int64                           `json:"oidc_provider_id,omitempty" yaml:"oidc_provider_id,omitempty" required:"false" doc:"OIDC provider ID"`
	PosixPrimaryProvider                 string                          `json:"posix_primary_provider,omitempty" yaml:"posix_primary_provider,omitempty" required:"false" doc:"Specifies which provider takes precedence over other providers in case of any conflicts between attribute values when user information is retrieved from the providers. Relevant only if more than one provider is enabled for the tenant."`
	PreferredOwningGroup                 string                          `json:"preferred_owning_group,omitempty" yaml:"preferred_owning_group,omitempty" required:"false" doc:"Set to prefer GID of the user as the owning group of the file"`
	Qos                                  TenantRequestBody_Qos           `json:"qos,omitempty" yaml:"qos,omitempty" required:"false" doc:""`
	RequireSmbSigning                    bool                            `json:"require_smb_signing,omitempty" yaml:"require_smb_signing,omitempty" required:"false" doc:"Require SMB signing"`
	SmbAdministratorsGroupName           string                          `json:"smb_administrators_group_name,omitempty" yaml:"smb_administrators_group_name,omitempty" required:"false" doc:"Optional custom name to specify a non default privileged group. If not set, privileged group is the Backup Operators domain group."`
	SmbEncryptionState                   string                          `json:"smb_encryption_state,omitempty" yaml:"smb_encryption_state,omitempty" required:"false" doc:"Defines the encryption level for SMB"`
	SmbPrivilegedGroupFullAccess         bool                            `json:"smb_privileged_group_full_access,omitempty" yaml:"smb_privileged_group_full_access,omitempty" required:"false" doc:"True=The SMB privileged user group has read and write control access. Members of the group can perform backup and restore operations on all files and directories, without requiring read or write access to the specific files and directories. False=the privileged group has read only access."`
	SmbPrivilegedGroupSid                string                          `json:"smb_privileged_group_sid,omitempty" yaml:"smb_privileged_group_sid,omitempty" required:"false" doc:"Optional custom SID to specify a non default SMB privileged group. If not set, SMB privileged group is the Backup Operators domain group."`
	SmbPrivilegedUserName                string                          `json:"smb_privileged_user_name,omitempty" yaml:"smb_privileged_user_name,omitempty" required:"false" doc:"Optional custom username for the SMB privileged user. If not set, the SMB privileged user name is 'vastadmin'"`
	TenantAdminsGroupName                string                          `json:"tenant_admins_group_name,omitempty" yaml:"tenant_admins_group_name,omitempty" required:"false" doc:"Specifies a group on an AD or LDAP provider. Enables users in the group to log into the tenant VMS as Tenant Admin users. In order to be granted permissions to do any configuration, the same users need to belong to groups on the provider that are associated with VMS manager user roles for tenant admin type users on the tenant."`
	TrashGid                             int64                           `json:"trash_gid,omitempty" yaml:"trash_gid,omitempty" required:"false" doc:"GID of group of NFSv3 users to which to grant permission to move files into the trash folder. If not set, the operation of moving files into the trash folder is supported for the root user only."`
	UseSmbNative                         bool                            `json:"use_smb_native,omitempty" yaml:"use_smb_native,omitempty" required:"false" doc:"Use native SMB authentication"`
	UseSmbPrivilegedGroup                bool                            `json:"use_smb_privileged_group,omitempty" yaml:"use_smb_privileged_group,omitempty" required:"false" doc:"Enables SMB privileged user group"`
	UseSmbPrivilegedUser                 bool                            `json:"use_smb_privileged_user,omitempty" yaml:"use_smb_privileged_user,omitempty" required:"false" doc:"Enables SMB privileged user"`
}

// -----------------------------------------------------
// MODELS
// -----------------------------------------------------

// TenantDetailsModel represents the detailed model returned by GET/List operations
// Type alias to component definition: #/components/schemas/Tenant
type TenantDetailsModel = Component_Tenant

// TenantUpsertModel represents the model returned by Create/Update operations
// Type alias to component definition: #/components/schemas/Tenant
type TenantUpsertModel = Component_Tenant

// -----------------------------------------------------
// LIST
// -----------------------------------------------------

// List retrieves multiple tenants with typed request/response
// summary: List Tenants
func (r *Tenant) List(req *TenantSearchParams) ([]*TenantDetailsModel, error) {
	return r.ListWithContext(r.Untyped.GetCtx(), req)
}

// ListWithContext retrieves multiple tenants with typed request/response using provided context
// summary: List Tenants
func (r *Tenant) ListWithContext(ctx context.Context, req *TenantSearchParams) ([]*TenantDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.GetResourceMap()[r.GetResourceType()].ListWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response []*TenantDetailsModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// Get retrieves a single tenant with typed request/response
// summary: List Tenants
func (r *Tenant) Get(req *TenantSearchParams) (*TenantDetailsModel, error) {
	return r.GetWithContext(r.Untyped.GetCtx(), req)
}

// GetWithContext retrieves a single tenant with typed request/response using provided context
// summary: List Tenants
func (r *Tenant) GetWithContext(ctx context.Context, req *TenantSearchParams) (*TenantDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response TenantDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// READ
// -----------------------------------------------------

// GetById retrieves a single tenant by ID
// summary: Return Details of Tenant
func (r *Tenant) GetById(id any) (*TenantDetailsModel, error) {
	return r.GetByIdWithContext(r.Untyped.GetCtx(), id)
}

// GetByIdWithContext retrieves a single tenant by ID using provided context
// summary: Return Details of Tenant
func (r *Tenant) GetByIdWithContext(ctx context.Context, id any) (*TenantDetailsModel, error) {
	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetByIdWithContext(ctx, id)
	if err != nil {
		return nil, err
	}

	var response TenantDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// CREATE
// -----------------------------------------------------

// Create creates a new tenant with typed request/response
// summary: Create Tenant
func (r *Tenant) Create(req *TenantRequestBody) (*TenantUpsertModel, error) {
	return r.CreateWithContext(r.Untyped.GetCtx(), req)
}

// CreateWithContext creates a new tenant with typed request/response using provided context
// summary: Create Tenant
func (r *Tenant) CreateWithContext(ctx context.Context, req *TenantRequestBody) (*TenantUpsertModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].CreateWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response TenantUpsertModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// UPDATE
// -----------------------------------------------------

// Update updates an existing tenant with typed request/response
func (r *Tenant) Update(id any, req *TenantRequestBody) (*TenantUpsertModel, error) {
	return r.UpdateWithContext(r.Untyped.GetCtx(), id, req)
}

// UpdateWithContext updates an existing tenant with typed request/response using provided context
func (r *Tenant) UpdateWithContext(ctx context.Context, id any, req *TenantRequestBody) (*TenantUpsertModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].UpdateWithContext(ctx, id, params)
	if err != nil {
		return nil, err
	}

	var response TenantUpsertModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// -----------------------------------------------------
// DELETE
// -----------------------------------------------------

// Delete deletes a tenant with search parameters
//
// Parameters:
//   - forceRemove: Forces deletion of the tenant, even if files exist in the tenant directory.
func (r *Tenant) Delete(req *TenantSearchParams, forceRemove bool) error {
	return r.DeleteWithContext(r.Untyped.GetCtx(), req, forceRemove)
}

// DeleteWithContext deletes a tenant with search parameters using provided context
//
// Parameters:
//   - forceRemove: Forces deletion of the tenant, even if files exist in the tenant directory.
func (r *Tenant) DeleteWithContext(ctx context.Context, req *TenantSearchParams, forceRemove bool) error {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return err
	}

	// Build DELETE query params
	deleteQueryParams := core.Params{"force_remove": forceRemove}
	// Build DELETE body params
	var deleteBody core.Params
	_, err = r.Untyped.GetResourceMap()[r.GetResourceType()].DeleteWithContext(ctx, params, deleteQueryParams, deleteBody)
	if err != nil {
		return err
	}
	return nil
}

// DeleteById deletes a tenant by ID and returns an async task
// summary: Delete Tenant
//
// Parameters:
//   - id: Tenant ID
//   - forceRemove: Forces deletion of the tenant, even if files exist in the tenant directory.
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (r *Tenant) DeleteById(id any, forceRemove bool, waitTimeout time.Duration) (*untyped.AsyncResult, error) {
	return r.DeleteByIdWithContext(r.Untyped.GetCtx(), id, forceRemove, waitTimeout)
}

// DeleteByIdWithContext deletes a tenant by ID and returns an async task using provided context
// summary: Delete Tenant
//
// Parameters:
//   - id: Tenant ID
//   - forceRemove: Forces deletion of the tenant, even if files exist in the tenant directory.
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (r *Tenant) DeleteByIdWithContext(ctx context.Context, id any, forceRemove bool, waitTimeout time.Duration) (*untyped.AsyncResult, error) {
	// For async DELETE, call core.Request directly to get the task response
	path := core.BuildResourcePathWithID(r.Untyped.GetResourceMap()[r.GetResourceType()].GetResourcePath(), id)

	// Build DELETE query params
	deleteQueryParams := core.Params{"force_remove": forceRemove}
	// Build DELETE body params
	var deleteBody core.Params
	record, err := core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodDelete, path, deleteQueryParams, deleteBody)
	if err != nil {
		return nil, err
	}

	return untyped.MaybeWaitAsyncResultWithContext(ctx, record, r.Untyped, waitTimeout)
}

// -----------------------------------------------------
// ENSURE
// -----------------------------------------------------

// Ensure ensures a tenant exists with typed response
func (r *Tenant) Ensure(searchParams *TenantSearchParams, body *TenantRequestBody) (*TenantUpsertModel, error) {
	return r.EnsureWithContext(r.Untyped.GetCtx(), searchParams, body)
}

// EnsureWithContext ensures a tenant exists with typed response using provided context
func (r *Tenant) EnsureWithContext(ctx context.Context, searchParams *TenantSearchParams, body *TenantRequestBody) (*TenantUpsertModel, error) {
	searchParamsConverted, err := core.NewParamsFromStruct(searchParams)
	if err != nil {
		return nil, err
	}
	bodyConverted, err := core.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].EnsureWithContext(ctx, searchParamsConverted, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response TenantUpsertModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Exists checks if a tenant exists
func (r *Tenant) Exists(req *TenantSearchParams) (bool, error) {
	return r.ExistsWithContext(r.Untyped.GetCtx(), req)
}

// ExistsWithContext checks if a tenant exists using provided context
func (r *Tenant) ExistsWithContext(ctx context.Context, req *TenantSearchParams) (bool, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].ExistsWithContext(ctx, params)
}

// MustExists checks if a tenant exists and panics if not
func (r *Tenant) MustExists(req *TenantSearchParams) bool {
	return r.MustExistsWithContext(r.Untyped.GetCtx(), req)
}

// MustExistsWithContext checks if a tenant exists and panics if not using provided context
func (r *Tenant) MustExistsWithContext(ctx context.Context, req *TenantSearchParams) bool {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].MustExistsWithContext(ctx, params)
}

// -----------------------------------------------------
// EXTRA METHODS
// -----------------------------------------------------

// TenantClientIpRangesModel_CapacityRules represents a nested type for Tenant extra method response
type TenantClientIpRangesModel_CapacityRules struct {
	GracePeriod     string `json:"grace_period,omitempty" yaml:"grace_period,omitempty" required:"false" doc:"Quota enforcement grace period for tenant capacity limit, in seconds"`
	HardLimit       int64  `json:"hard_limit,omitempty" yaml:"hard_limit,omitempty" required:"false" doc:"Capacity hard limit for the tenant"`
	HardLimitInodes int64  `json:"hard_limit_inodes,omitempty" yaml:"hard_limit_inodes,omitempty" required:"false" doc:"Hard limit on the number of files or directories for the tenant"`
	NotifyHardLimit bool   `json:"notify_hard_limit,omitempty" yaml:"notify_hard_limit,omitempty" required:"false" doc:"Notify on reaching hard limit"`
	NotifySoftLimit bool   `json:"notify_soft_limit,omitempty" yaml:"notify_soft_limit,omitempty" required:"false" doc:"Notify on reaching soft limit"`
	SoftLimit       int64  `json:"soft_limit,omitempty" yaml:"soft_limit,omitempty" required:"false" doc:"Capacity soft limit for the tenant"`
	SoftLimitInodes int64  `json:"soft_limit_inodes,omitempty" yaml:"soft_limit_inodes,omitempty" required:"false" doc:"Soft limit on the number of files or directories for the tenant"`
}

// TenantClientIpRangesModel_LocalProvider represents a nested type for Tenant extra method response
type TenantClientIpRangesModel_LocalProvider struct {
	Id   int64  `json:"id,omitempty" yaml:"id,omitempty" required:"false" doc:"ID of the local provider"`
	Name string `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:"Name of the local provider"`
}

// TenantClientIpRangesModel_Qos represents a nested type for Tenant extra method response
type TenantClientIpRangesModel_Qos struct {
	StaticLimits TenantClientIpRangesModel_Qos_StaticLimits `json:"static_limits,omitempty" yaml:"static_limits,omitempty" required:"true" doc:""`
}

// TenantClientIpRangesModel_Qos_StaticLimits represents a nested type for Tenant extra method response
type TenantClientIpRangesModel_Qos_StaticLimits struct {
	BurstReadsBwMb      int64 `json:"burst_reads_bw_mb,omitempty" yaml:"burst_reads_bw_mb,omitempty" required:"true" doc:"Burst reads BW Mb"`
	BurstReadsIops      int64 `json:"burst_reads_iops,omitempty" yaml:"burst_reads_iops,omitempty" required:"true" doc:"Burst reads IOPS"`
	BurstReadsLoanIops  int64 `json:"burst_reads_loan_iops,omitempty" yaml:"burst_reads_loan_iops,omitempty" required:"true" doc:"Burst reads loan IOPS"`
	BurstReadsLoanMb    int64 `json:"burst_reads_loan_mb,omitempty" yaml:"burst_reads_loan_mb,omitempty" required:"true" doc:"Burst reads loan Mb"`
	BurstWritesBwMb     int64 `json:"burst_writes_bw_mb,omitempty" yaml:"burst_writes_bw_mb,omitempty" required:"true" doc:"Burst writes BW Mb"`
	BurstWritesIops     int64 `json:"burst_writes_iops,omitempty" yaml:"burst_writes_iops,omitempty" required:"true" doc:"Burst writes IOPS"`
	BurstWritesLoanIops int64 `json:"burst_writes_loan_iops,omitempty" yaml:"burst_writes_loan_iops,omitempty" required:"true" doc:"Burst writes loan IOPS"`
	BurstWritesLoanMb   int64 `json:"burst_writes_loan_mb,omitempty" yaml:"burst_writes_loan_mb,omitempty" required:"true" doc:"Burst writes loan Mb"`
	MaxReadsBwMbps      int64 `json:"max_reads_bw_mbps,omitempty" yaml:"max_reads_bw_mbps,omitempty" required:"true" doc:"Maximal amount of performance to provide when there is no resource contention"`
	MaxReadsIops        int64 `json:"max_reads_iops,omitempty" yaml:"max_reads_iops,omitempty" required:"true" doc:"Maximal amount of performance to provide when there is no resource contention"`
	MaxWritesBwMbps     int64 `json:"max_writes_bw_mbps,omitempty" yaml:"max_writes_bw_mbps,omitempty" required:"true" doc:"Maximal amount of performance to provide when there is no resource contention"`
	MaxWritesIops       int64 `json:"max_writes_iops,omitempty" yaml:"max_writes_iops,omitempty" required:"true" doc:"Maximal amount of performance to provide when there is no resource contention"`
}

// TenantClientIpRangesModel_VippoolsItem represents a nested type for Tenant extra method response
type TenantClientIpRangesModel_VippoolsItem struct {
	Id   int64  `json:"id,omitempty" yaml:"id,omitempty" required:"false" doc:""`
	Name string `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:""`
}

// TenantNfs4DelegsModel_DelegateInfoItem represents a nested type for Tenant extra method response
type TenantNfs4DelegsModel_DelegateInfoItem struct {
	ClientId          int64  `json:"client_id,omitempty" yaml:"client_id,omitempty" required:"false" doc:""`
	DelegationStateid int64  `json:"delegation_stateid,omitempty" yaml:"delegation_stateid,omitempty" required:"false" doc:""`
	DelegationType    string `json:"delegation_type,omitempty" yaml:"delegation_type,omitempty" required:"false" doc:""`
	RevokeInProgress  bool   `json:"revoke_in_progress,omitempty" yaml:"revoke_in_progress,omitempty" required:"false" doc:""`
	VipAddr           string `json:"vip_addr,omitempty" yaml:"vip_addr,omitempty" required:"false" doc:""`
}

// TenantRemoteObjectsItem represents a nested type for Tenant extra method response
type TenantRemoteObjectsItem struct {
	Guid string `json:"guid,omitempty" yaml:"guid,omitempty" required:"false" doc:"Remote Tenant guid"`
	Name string `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:"Remote Tenant name"`
}

// TenantClientIpRanges_PATCH_Body represents the request body for TenantClientIpRanges
type TenantClientIpRanges_PATCH_Body struct {
	ClientIpRangesToAdd    *[][]string `json:"client_ip_ranges_to_add,omitempty" yaml:"client_ip_ranges_to_add,omitempty" required:"false" doc:"Array of source IP ranges to allow for the tenant."`
	ClientIpRangesToRemove *[][]string `json:"client_ip_ranges_to_remove,omitempty" yaml:"client_ip_ranges_to_remove,omitempty" required:"false" doc:"Array of source IP ranges to disallow for the tenant."`
}

// TenantClientIpRanges_PATCH_Model represents the response model for TenantClientIpRanges
type TenantClientIpRanges_PATCH_Model struct {
	Name                                 string                                    `json:"name,omitempty" yaml:"name,omitempty" required:"true" doc:""`
	AccessIpRanges                       *[]string                                 `json:"access_ip_ranges,omitempty" yaml:"access_ip_ranges,omitempty" required:"false" doc:"Restricts tenant login access to specified source IP ranges. Enter as single IPs (1.1.1.1), ranges (1.2.3.4 - 1.2.3.6), or CIDR (1.1.1.0/24)."`
	AdProviderId                         int64                                     `json:"ad_provider_id,omitempty" yaml:"ad_provider_id,omitempty" required:"false" doc:"Active Directory provider ID"`
	AdTitle                              string                                    `json:"ad_title,omitempty" yaml:"ad_title,omitempty" required:"false" doc:""`
	AllowDisabledUsers                   bool                                      `json:"allow_disabled_users,omitempty" yaml:"allow_disabled_users,omitempty" required:"false" doc:"Allow IO from users whose Active Directory accounts are explicitly disabled."`
	AllowLockedUsers                     bool                                      `json:"allow_locked_users,omitempty" yaml:"allow_locked_users,omitempty" required:"false" doc:"Allow IO from users whose Active Directory accounts are locked out by lockout policies due to unsuccessful login attempts."`
	AllowedDelegations                   string                                    `json:"allowed_delegations,omitempty" yaml:"allowed_delegations,omitempty" required:"false" doc:"Defines the possible types of NFSv4 delegations"`
	ApplicationUsersGroupName            string                                    `json:"application_users_group_name,omitempty" yaml:"application_users_group_name,omitempty" required:"false" doc:"The name of the group that will be used for application users"`
	CapacityRules                        TenantClientIpRangesModel_CapacityRules   `json:"capacity_rules,omitempty" yaml:"capacity_rules,omitempty" required:"false" doc:""`
	ClientIpRanges                       *[][]string                               `json:"client_ip_ranges,omitempty" yaml:"client_ip_ranges,omitempty" required:"false" doc:"Array of source IP ranges to allow for the tenant."`
	ClientIpRangesSummary                string                                    `json:"client_ip_ranges_summary,omitempty" yaml:"client_ip_ranges_summary,omitempty" required:"false" doc:""`
	DataEngineEnabled                    bool                                      `json:"data_engine_enabled,omitempty" yaml:"data_engine_enabled,omitempty" required:"false" doc:"True if DataEngine is enabled on this tenant"`
	DefaultOthersShareLevelPerm          string                                    `json:"default_others_share_level_perm,omitempty" yaml:"default_others_share_level_perm,omitempty" required:"false" doc:"Default Share-level permissions for 'Everyone' Group"`
	Dir                                  string                                    `json:"dir,omitempty" yaml:"dir,omitempty" required:"false" doc:""`
	DomainName                           string                                    `json:"domain_name,omitempty" yaml:"domain_name,omitempty" required:"false" doc:"Domain name to incorporate into the VMS tenant login page URL."`
	EncryptionCrn                        string                                    `json:"encryption_crn,omitempty" yaml:"encryption_crn,omitempty" required:"false" doc:"Tenant's encryption group unique identifier (deprecated)"`
	EncryptionGroup                      string                                    `json:"encryption_group,omitempty" yaml:"encryption_group,omitempty" required:"false" doc:"Tenant's encryption group unique identifier"`
	EncryptionGroupId                    int64                                     `json:"encryption_group_id,omitempty" yaml:"encryption_group_id,omitempty" required:"false" doc:"Encryption Group ID"`
	EncryptionGroupState                 string                                    `json:"encryption_group_state,omitempty" yaml:"encryption_group_state,omitempty" required:"false" doc:"Tenant's encryption group state"`
	GrantUnrequestedDelegationsByDefault bool                                      `json:"grant_unrequested_delegations_by_default,omitempty" yaml:"grant_unrequested_delegations_by_default,omitempty" required:"false" doc:"When enabled, the server may grant delegations based on share access even if not explicitly requested by the client"`
	Guid                                 string                                    `json:"guid,omitempty" yaml:"guid,omitempty" required:"false" doc:"Tenant guid"`
	Id                                   int64                                     `json:"id,omitempty" yaml:"id,omitempty" required:"false" doc:""`
	IdentityProviderName                 string                                    `json:"identity_provider_name,omitempty" yaml:"identity_provider_name,omitempty" required:"false" doc:"Sets a configured SAML login provider to enable for the tenant. When set, users defined on the specified SAML provider with relevant roles and user types can login to the tenant VMS."`
	IsNfsv42Supported                    bool                                      `json:"is_nfsv42_supported,omitempty" yaml:"is_nfsv42_supported,omitempty" required:"false" doc:"Enable NFSv4.2"`
	KrbProviderId                        int64                                     `json:"krb_provider_id,omitempty" yaml:"krb_provider_id,omitempty" required:"false" doc:"Kerberos provider ID"`
	KrbProviderTitle                     string                                    `json:"krb_provider_title,omitempty" yaml:"krb_provider_title,omitempty" required:"false" doc:"Kerberos provider title"`
	LdapProviderId                       int64                                     `json:"ldap_provider_id,omitempty" yaml:"ldap_provider_id,omitempty" required:"false" doc:"Open-LDAP provider ID"`
	LdapTitle                            string                                    `json:"ldap_title,omitempty" yaml:"ldap_title,omitempty" required:"false" doc:""`
	LocalProvider                        TenantClientIpRangesModel_LocalProvider   `json:"local_provider,omitempty" yaml:"local_provider,omitempty" required:"false" doc:""`
	LocalProviderId                      int64                                     `json:"local_provider_id,omitempty" yaml:"local_provider_id,omitempty" required:"false" doc:"Local provider ID"`
	LocalProviderTitle                   string                                    `json:"local_provider_title,omitempty" yaml:"local_provider_title,omitempty" required:"false" doc:"The local provider associated with the tenant"`
	LoginNamePrimaryProvider             string                                    `json:"login_name_primary_provider,omitempty" yaml:"login_name_primary_provider,omitempty" required:"false" doc:"Primary provider for the user's login name"`
	MaxViews                             int64                                     `json:"max_views,omitempty" yaml:"max_views,omitempty" required:"false" doc:"Max views we can create on this tenant (0:unlimted as default)"`
	NisProviderId                        int64                                     `json:"nis_provider_id,omitempty" yaml:"nis_provider_id,omitempty" required:"false" doc:"NIS provider ID"`
	NisTitle                             string                                    `json:"nis_title,omitempty" yaml:"nis_title,omitempty" required:"false" doc:""`
	OidcProviderId                       int64                                     `json:"oidc_provider_id,omitempty" yaml:"oidc_provider_id,omitempty" required:"false" doc:"OIDC provider ID"`
	OidcProviderTitle                    string                                    `json:"oidc_provider_title,omitempty" yaml:"oidc_provider_title,omitempty" required:"false" doc:""`
	PosixPrimaryProvider                 string                                    `json:"posix_primary_provider,omitempty" yaml:"posix_primary_provider,omitempty" required:"false" doc:"The primary provider that takes precedence for POSIX user attributes in case of conflict between two providers that both have POSIX user attributes"`
	PreferredOwningGroup                 string                                    `json:"preferred_owning_group,omitempty" yaml:"preferred_owning_group,omitempty" required:"false" doc:"Set to prefer GID of the user as the owning group of the file"`
	Qos                                  TenantClientIpRangesModel_Qos             `json:"qos,omitempty" yaml:"qos,omitempty" required:"false" doc:""`
	RequireSmbSigning                    bool                                      `json:"require_smb_signing,omitempty" yaml:"require_smb_signing,omitempty" required:"false" doc:"Require SMB clients to perform SMB message signing. SMB messages with invalid or missing signatures will be blocked."`
	SmbAdministratorsGroupName           string                                    `json:"smb_administrators_group_name,omitempty" yaml:"smb_administrators_group_name,omitempty" required:"false" doc:"Optional custom name to specify a non default privileged group. If not set, privileged group is the BUILTIN\Administrators group."`
	SmbAllowed                           bool                                      `json:"smb_allowed,omitempty" yaml:"smb_allowed,omitempty" required:"false" doc:""`
	SmbEncryptionState                   string                                    `json:"smb_encryption_state,omitempty" yaml:"smb_encryption_state,omitempty" required:"false" doc:"Defines the encryption level for SMB"`
	SmbPrivilegedGroupFullAccess         bool                                      `json:"smb_privileged_group_full_access,omitempty" yaml:"smb_privileged_group_full_access,omitempty" required:"false" doc:"If true, the privileged group has full access. Otherwise, read only"`
	SmbPrivilegedGroupSid                string                                    `json:"smb_privileged_group_sid,omitempty" yaml:"smb_privileged_group_sid,omitempty" required:"false" doc:"Optional custom SID to specify a non default SMB privileged group. If not set, SMB privileged group is the Backup Operators domain group."`
	SmbPrivilegedUserName                string                                    `json:"smb_privileged_user_name,omitempty" yaml:"smb_privileged_user_name,omitempty" required:"false" doc:"Optional custom username for the SMB privileged user. If not set, the SMB privileged user name is 'vastadmin'"`
	Sync                                 string                                    `json:"sync,omitempty" yaml:"sync,omitempty" required:"false" doc:"Synchronization state with leader"`
	SyncTime                             string                                    `json:"sync_time,omitempty" yaml:"sync_time,omitempty" required:"false" doc:"Synchronization time with leader"`
	TenantAdminsGroupName                string                                    `json:"tenant_admins_group_name,omitempty" yaml:"tenant_admins_group_name,omitempty" required:"false" doc:"Sets a group on an AD or LDAP provider. Enables users in the group to log into the tenant VMS as Tenant Admin users. Tenant Admin is a type of VMS manager user that has management access to a specific tenant's VMS."`
	Title                                string                                    `json:"title,omitempty" yaml:"title,omitempty" required:"false" doc:""`
	TrashGid                             int64                                     `json:"trash_gid,omitempty" yaml:"trash_gid,omitempty" required:"false" doc:"GID of group of NFSv3 users that have permission to move files into the trash folder. If not set, the operation of moving files into the trash folder is supported for the root user only."`
	Url                                  string                                    `json:"url,omitempty" yaml:"url,omitempty" required:"false" doc:""`
	UseSmbNative                         bool                                      `json:"use_smb_native,omitempty" yaml:"use_smb_native,omitempty" required:"false" doc:"Access check decisions will be made based on user and group information from the Kerberos ticket. Use this if your Active Directory has a one-way trust. This is relevant for SMB only."`
	UseSmbPrivilegedGroup                bool                                      `json:"use_smb_privileged_group,omitempty" yaml:"use_smb_privileged_group,omitempty" required:"false" doc:"If true, the privileged group is enabled"`
	UseSmbPrivilegedUser                 bool                                      `json:"use_smb_privileged_user,omitempty" yaml:"use_smb_privileged_user,omitempty" required:"false" doc:"If true, the privileged user is enabled"`
	VippoolNames                         *[]string                                 `json:"vippool_names,omitempty" yaml:"vippool_names,omitempty" required:"false" doc:"Array of VIP Pools that can be used with the tenant."`
	Vippools                             *[]TenantClientIpRangesModel_VippoolsItem `json:"vippools,omitempty" yaml:"vippools,omitempty" required:"false" doc:"Array of VIP Pools names and IDs that can be used with the tenant."`
}

// TenantClientIpRangesWithContext_PATCH
// method: PATCH
// url: /tenants/{id}/client_ip_ranges/
// summary: Update tenant Client IP ranges
func (r *Tenant) TenantClientIpRangesWithContext_PATCH(ctx context.Context, id any, body *TenantClientIpRanges_PATCH_Body) (*TenantClientIpRanges_PATCH_Model, error) {
	resourcePath := core.BuildResourcePathWithID("tenants", id, "client_ip_ranges")

	var reqParams core.Params
	reqBody, err := core.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodPatch, resourcePath, reqParams, reqBody)
	if err != nil {
		return nil, err
	}

	var response TenantClientIpRanges_PATCH_Model
	if err := record.Fill(&response); err != nil {
		return nil, err
	}
	return &response, nil

}

// TenantClientIpRanges_PATCH
// method: PATCH
// url: /tenants/{id}/client_ip_ranges/
// summary: Update tenant Client IP ranges
func (r *Tenant) TenantClientIpRanges_PATCH(id any, body *TenantClientIpRanges_PATCH_Body) (*TenantClientIpRanges_PATCH_Model, error) {
	return r.TenantClientIpRangesWithContext_PATCH(r.Untyped.GetCtx(), id, body)
}

// TenantConfiguredIdp_GET_Body represents the request body for TenantConfiguredIdp
type TenantConfiguredIdp_GET_Body struct {
	Name string `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:"Tenant name"`
}

// TenantConfiguredIdp_GET_Model represents the response model for TenantConfiguredIdp
type TenantConfiguredIdp_GET_Model struct {
	IdentityProviderName string `json:"identity_provider_name,omitempty" yaml:"identity_provider_name,omitempty" required:"false" doc:""`
}

// TenantConfiguredIdpWithContext_GET
// method: GET
// url: /tenants/configured_idp/
// summary: Return Configured Identity Provider for Tenant
func (r *Tenant) TenantConfiguredIdpWithContext_GET(ctx context.Context, params *TenantConfiguredIdp_GET_Body) (*TenantConfiguredIdp_GET_Model, error) {
	resourcePath := "/tenants/configured_idp/"

	reqParams, err := core.NewParamsFromStruct(params)
	if err != nil {
		return nil, err
	}
	var reqBody core.Params

	record, err := core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodGet, resourcePath, reqParams, reqBody)
	if err != nil {
		return nil, err
	}

	var response TenantConfiguredIdp_GET_Model
	if err := record.Fill(&response); err != nil {
		return nil, err
	}
	return &response, nil

}

// TenantConfiguredIdp_GET
// method: GET
// url: /tenants/configured_idp/
// summary: Return Configured Identity Provider for Tenant
func (r *Tenant) TenantConfiguredIdp_GET(params *TenantConfiguredIdp_GET_Body) (*TenantConfiguredIdp_GET_Model, error) {
	return r.TenantConfiguredIdpWithContext_GET(r.Untyped.GetCtx(), params)
}

// TenantDeactivateEncryptionGroupWithContext_POST
// method: POST
// url: /tenants/{id}/deactivate_encryption_group/
// summary: Deactivate tenant's encryption group.
func (r *Tenant) TenantDeactivateEncryptionGroupWithContext_POST(ctx context.Context, id any) error {
	resourcePath := core.BuildResourcePathWithID("tenants", id, "deactivate_encryption_group")

	var reqParams core.Params
	var reqBody core.Params

	_, err := core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodPost, resourcePath, reqParams, reqBody)
	return err

}

// TenantDeactivateEncryptionGroup_POST
// method: POST
// url: /tenants/{id}/deactivate_encryption_group/
// summary: Deactivate tenant's encryption group.
func (r *Tenant) TenantDeactivateEncryptionGroup_POST(id any) error {
	return r.TenantDeactivateEncryptionGroupWithContext_POST(r.Untyped.GetCtx(), id)
}

// TenantIsOperationHealthy_POST_Body represents the request body for TenantIsOperationHealthy
type TenantIsOperationHealthy_POST_Body struct {
	AdProviderId                 int64       `json:"ad_provider_id,omitempty" yaml:"ad_provider_id,omitempty" required:"false" doc:"Active Directory provider ID"`
	ClientIpRanges               *[][]string `json:"client_ip_ranges,omitempty" yaml:"client_ip_ranges,omitempty" required:"false" doc:"Array of source IP ranges to allow for the tenant."`
	DefaultOthersShareLevelPerm  string      `json:"default_others_share_level_perm,omitempty" yaml:"default_others_share_level_perm,omitempty" required:"false" doc:"Default Share-level permissions for Others"`
	LdapProviderId               int64       `json:"ldap_provider_id,omitempty" yaml:"ldap_provider_id,omitempty" required:"false" doc:"Open-LDAP provider ID specified separately by the user"`
	LocalProviderId              int64       `json:"local_provider_id,omitempty" yaml:"local_provider_id,omitempty" required:"false" doc:"Local provider ID"`
	NisProviderId                int64       `json:"nis_provider_id,omitempty" yaml:"nis_provider_id,omitempty" required:"false" doc:"NIS provider ID"`
	PosixPrimaryProvider         string      `json:"posix_primary_provider,omitempty" yaml:"posix_primary_provider,omitempty" required:"false" doc:"POSIX primary provider type"`
	SmbAdministratorsGroupName   string      `json:"smb_administrators_group_name,omitempty" yaml:"smb_administrators_group_name,omitempty" required:"false" doc:"Optional custom name to specify a non default privileged group. If not set, privileged group is the BUILTIN\Administrators group."`
	SmbPrivilegedGroupFullAccess bool        `json:"smb_privileged_group_full_access,omitempty" yaml:"smb_privileged_group_full_access,omitempty" required:"false" doc:"If true, the privileged group has full access. Otherwise, read only"`
	SmbPrivilegedGroupSid        string      `json:"smb_privileged_group_sid,omitempty" yaml:"smb_privileged_group_sid,omitempty" required:"false" doc:"Optional custom SID to specify a non default SMB privileged group. If not set, SMB privileged group is the Backup Operators domain group."`
	SmbPrivilegedUserName        string      `json:"smb_privileged_user_name,omitempty" yaml:"smb_privileged_user_name,omitempty" required:"false" doc:"Optional custom username for the SMB privileged user. If not set, the SMB privileged user name is 'vastadmin'"`
	TrashGid                     int64       `json:"trash_gid,omitempty" yaml:"trash_gid,omitempty" required:"false" doc:"GID with permissions to the trash folder"`
	UseSmbPrivilegedGroup        bool        `json:"use_smb_privileged_group,omitempty" yaml:"use_smb_privileged_group,omitempty" required:"false" doc:"If true, the privileged group is enabled"`
	UseSmbPrivilegedUser         bool        `json:"use_smb_privileged_user,omitempty" yaml:"use_smb_privileged_user,omitempty" required:"false" doc:"If true, the privileged user is enabled"`
}

// TenantIsOperationHealthy_POST_Model represents the response model for TenantIsOperationHealthy
type TenantIsOperationHealthy_POST_Model struct {
	Warnings *[]string `json:"warnings,omitempty" yaml:"warnings,omitempty" required:"true" doc:""`
}

// TenantIsOperationHealthyWithContext_POST
// method: POST
// url: /tenants/{id}/is_operation_healthy/
// summary: Check whether an operation may be successfully performed
func (r *Tenant) TenantIsOperationHealthyWithContext_POST(ctx context.Context, id any, body *TenantIsOperationHealthy_POST_Body) (*TenantIsOperationHealthy_POST_Model, error) {
	resourcePath := core.BuildResourcePathWithID("tenants", id, "is_operation_healthy")

	var reqParams core.Params
	reqBody, err := core.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodPost, resourcePath, reqParams, reqBody)
	if err != nil {
		return nil, err
	}

	var response TenantIsOperationHealthy_POST_Model
	if err := record.Fill(&response); err != nil {
		return nil, err
	}
	return &response, nil

}

// TenantIsOperationHealthy_POST
// method: POST
// url: /tenants/{id}/is_operation_healthy/
// summary: Check whether an operation may be successfully performed
func (r *Tenant) TenantIsOperationHealthy_POST(id any, body *TenantIsOperationHealthy_POST_Body) (*TenantIsOperationHealthy_POST_Model, error) {
	return r.TenantIsOperationHealthyWithContext_POST(r.Untyped.GetCtx(), id, body)
}

// TenantNfs4DelegWithContext_DELETE
// method: DELETE
// url: /tenants/{id}/nfs4_deleg/
// summary: Remove NFSv4 delegation
func (r *Tenant) TenantNfs4DelegWithContext_DELETE(ctx context.Context, id any) error {
	resourcePath := core.BuildResourcePathWithID("tenants", id, "nfs4_deleg")

	var reqParams core.Params
	var reqBody core.Params

	_, err := core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodDelete, resourcePath, reqParams, reqBody)
	return err

}

// TenantNfs4Deleg_DELETE
// method: DELETE
// url: /tenants/{id}/nfs4_deleg/
// summary: Remove NFSv4 delegation
func (r *Tenant) TenantNfs4Deleg_DELETE(id any) error {
	return r.TenantNfs4DelegWithContext_DELETE(r.Untyped.GetCtx(), id)
}

// TenantNfs4Delegs_GET_Body represents the request body for TenantNfs4Delegs
type TenantNfs4Delegs_GET_Body struct {
	FilePath                       string `json:"file_path,omitempty" yaml:"file_path,omitempty" required:"false" doc:"File path"`
	XeystorePaginationNextClientId int64  `json:"xeystore_pagination_next_client_id,omitempty" yaml:"xeystore_pagination_next_client_id,omitempty" required:"false" doc:"Xeystore pagination"`
}

// TenantNfs4Delegs_GET_Model represents the response model for TenantNfs4Delegs
type TenantNfs4Delegs_GET_Model struct {
	DelegateInfo                   *[]TenantNfs4DelegsModel_DelegateInfoItem `json:"delegate_info,omitempty" yaml:"delegate_info,omitempty" required:"false" doc:""`
	DelegateInfoCountTotal         int64                                     `json:"delegate_info_count_total,omitempty" yaml:"delegate_info_count_total,omitempty" required:"false" doc:""`
	XeystorePagination             bool                                      `json:"xeystore_pagination,omitempty" yaml:"xeystore_pagination,omitempty" required:"false" doc:""`
	XeystorePaginationNextClientId int64                                     `json:"xeystore_pagination_next_client_id,omitempty" yaml:"xeystore_pagination_next_client_id,omitempty" required:"false" doc:""`
}

// TenantNfs4DelegsWithContext_GET
// method: GET
// url: /tenants/{id}/nfs4_delegs/
// summary: Query list of NFSv4 delegations
func (r *Tenant) TenantNfs4DelegsWithContext_GET(ctx context.Context, id any, params *TenantNfs4Delegs_GET_Body) (*TenantNfs4Delegs_GET_Model, error) {
	resourcePath := core.BuildResourcePathWithID("tenants", id, "nfs4_delegs")

	reqParams, err := core.NewParamsFromStruct(params)
	if err != nil {
		return nil, err
	}
	var reqBody core.Params

	record, err := core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodGet, resourcePath, reqParams, reqBody)
	if err != nil {
		return nil, err
	}

	var response TenantNfs4Delegs_GET_Model
	if err := record.Fill(&response); err != nil {
		return nil, err
	}
	return &response, nil

}

// TenantNfs4Delegs_GET
// method: GET
// url: /tenants/{id}/nfs4_delegs/
// summary: Query list of NFSv4 delegations
func (r *Tenant) TenantNfs4Delegs_GET(id any, params *TenantNfs4Delegs_GET_Body) (*TenantNfs4Delegs_GET_Model, error) {
	return r.TenantNfs4DelegsWithContext_GET(r.Untyped.GetCtx(), id, params)
}

// TenantReinstateEncryptionGroupWithContext_POST
// method: POST
// url: /tenants/{id}/reinstate_encryption_group/
// summary: Reinstate tenant's encryption group.
func (r *Tenant) TenantReinstateEncryptionGroupWithContext_POST(ctx context.Context, id any) error {
	resourcePath := core.BuildResourcePathWithID("tenants", id, "reinstate_encryption_group")

	var reqParams core.Params
	var reqBody core.Params

	_, err := core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodPost, resourcePath, reqParams, reqBody)
	return err

}

// TenantReinstateEncryptionGroup_POST
// method: POST
// url: /tenants/{id}/reinstate_encryption_group/
// summary: Reinstate tenant's encryption group.
func (r *Tenant) TenantReinstateEncryptionGroup_POST(id any) error {
	return r.TenantReinstateEncryptionGroupWithContext_POST(r.Untyped.GetCtx(), id)
}

// TenantRemoteObjects_GET_Body represents the request body for TenantRemoteObjects
type TenantRemoteObjects_GET_Body struct {
	Name     string `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:"Filter remote tenants by name"`
	TargetId string `json:"target_id,omitempty" yaml:"target_id,omitempty" required:"false" doc:"Filter remote tenants by target"`
}

// TenantRemoteObjectsWithContext_GET
// method: GET
// url: /tenants/remote_objects/
// summary: Return Details of Remote Tenants
func (r *Tenant) TenantRemoteObjectsWithContext_GET(ctx context.Context, params *TenantRemoteObjects_GET_Body) ([]TenantRemoteObjectsItem, error) {
	resourcePath := "/tenants/remote_objects/"

	reqParams, err := core.NewParamsFromStruct(params)
	if err != nil {
		return nil, err
	}
	var reqBody core.Params

	record, err := core.Request[core.RecordSet](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodGet, resourcePath, reqParams, reqBody)
	if err != nil {
		return nil, err
	}
	// Convert RecordSet ([]core.Record) to typed array ([]TenantRemoteObjectsItem)
	result := make([]TenantRemoteObjectsItem, len(record))
	for i, item := range record {
		if err := item.Fill(&result[i]); err != nil {
			return nil, fmt.Errorf("failed to unmarshal array item %d: %w", i, err)
		}
	}
	return result, nil

}

// TenantRemoteObjects_GET
// method: GET
// url: /tenants/remote_objects/
// summary: Return Details of Remote Tenants
func (r *Tenant) TenantRemoteObjects_GET(params *TenantRemoteObjects_GET_Body) ([]TenantRemoteObjectsItem, error) {
	return r.TenantRemoteObjectsWithContext_GET(r.Untyped.GetCtx(), params)
}

// TenantRevokeEncryptionGroupWithContext_POST
// method: POST
// url: /tenants/{id}/revoke_encryption_group/
// summary: Revoke tenant's encryption group.
func (r *Tenant) TenantRevokeEncryptionGroupWithContext_POST(ctx context.Context, id any) error {
	resourcePath := core.BuildResourcePathWithID("tenants", id, "revoke_encryption_group")

	var reqParams core.Params
	var reqBody core.Params

	_, err := core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodPost, resourcePath, reqParams, reqBody)
	return err

}

// TenantRevokeEncryptionGroup_POST
// method: POST
// url: /tenants/{id}/revoke_encryption_group/
// summary: Revoke tenant's encryption group.
func (r *Tenant) TenantRevokeEncryptionGroup_POST(id any) error {
	return r.TenantRevokeEncryptionGroupWithContext_POST(r.Untyped.GetCtx(), id)
}

// TenantRotateEncryptionGroupKeyWithContext_POST
// method: POST
// url: /tenants/{id}/rotate_encryption_group_key/
// summary: Rotate tenant's encryption group key.
func (r *Tenant) TenantRotateEncryptionGroupKeyWithContext_POST(ctx context.Context, id any) error {
	resourcePath := core.BuildResourcePathWithID("tenants", id, "rotate_encryption_group_key")

	var reqParams core.Params
	var reqBody core.Params

	_, err := core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodPost, resourcePath, reqParams, reqBody)
	return err

}

// TenantRotateEncryptionGroupKey_POST
// method: POST
// url: /tenants/{id}/rotate_encryption_group_key/
// summary: Rotate tenant's encryption group key.
func (r *Tenant) TenantRotateEncryptionGroupKey_POST(id any) error {
	return r.TenantRotateEncryptionGroupKeyWithContext_POST(r.Untyped.GetCtx(), id)
}

// TenantSameEncryptionGroupTenantsWithContext_GET
// method: GET
// url: /tenants/{id}/same_encryption_group_tenants/
// summary: Get tenants with the same encryption group
func (r *Tenant) TenantSameEncryptionGroupTenantsWithContext_GET(ctx context.Context, id any) ([]string, error) {
	resourcePath := core.BuildResourcePathWithID("tenants", id, "same_encryption_group_tenants")

	var reqParams core.Params
	var reqBody core.Params

	record, err := core.Request[core.RecordSet](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodGet, resourcePath, reqParams, reqBody)
	if err != nil {
		return nil, err
	}
	// Convert RecordSet ([]core.Record) to typed array ([]string)
	result := make([]string, len(record))
	for i, item := range record {
		if err := item.Fill(&result[i]); err != nil {
			return nil, fmt.Errorf("failed to unmarshal array item %d: %w", i, err)
		}
	}
	return result, nil

}

// TenantSameEncryptionGroupTenants_GET
// method: GET
// url: /tenants/{id}/same_encryption_group_tenants/
// summary: Get tenants with the same encryption group
func (r *Tenant) TenantSameEncryptionGroupTenants_GET(id any) ([]string, error) {
	return r.TenantSameEncryptionGroupTenantsWithContext_GET(r.Untyped.GetCtx(), id)
}

// TenantVippoolIpRanges_GET_Model represents the response model for TenantVippoolIpRanges
type TenantVippoolIpRanges_GET_Model struct {
	VippoolIpRanges *[]string `json:"vippool_ip_ranges,omitempty" yaml:"vippool_ip_ranges,omitempty" required:"false" doc:""`
}

// TenantVippoolIpRangesWithContext_GET
// method: GET
// url: /tenants/{id}/vippool_ip_ranges/
// summary: Get tenant VIP pools IP ranges
func (r *Tenant) TenantVippoolIpRangesWithContext_GET(ctx context.Context, id any) (*TenantVippoolIpRanges_GET_Model, error) {
	resourcePath := core.BuildResourcePathWithID("tenants", id, "vippool_ip_ranges")

	var reqParams core.Params
	var reqBody core.Params

	record, err := core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodGet, resourcePath, reqParams, reqBody)
	if err != nil {
		return nil, err
	}

	var response TenantVippoolIpRanges_GET_Model
	if err := record.Fill(&response); err != nil {
		return nil, err
	}
	return &response, nil

}

// TenantVippoolIpRanges_GET
// method: GET
// url: /tenants/{id}/vippool_ip_ranges/
// summary: Get tenant VIP pools IP ranges
func (r *Tenant) TenantVippoolIpRanges_GET(id any) (*TenantVippoolIpRanges_GET_Model, error) {
	return r.TenantVippoolIpRangesWithContext_GET(r.Untyped.GetCtx(), id)
}

// -----------------------------------------------------
// GENERATION ISSUES
// -----------------------------------------------------
//   - Extra method GET /tenants/{id}/client_metrics/ skipped: GET /tenants/{id}/client_metrics/ - Response schema contains ambiguous nested objects (objects with no properties)
//   - Extra method PATCH /tenants/{id}/client_metrics/ skipped: PATCH /tenants/{id}/client_metrics/ - Response schema contains ambiguous nested objects (objects with no properties)
