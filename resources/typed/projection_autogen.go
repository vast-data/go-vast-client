// Code generated by generate-typed-resources. DO NOT EDIT.
// Template: LIST

package typed

import (
	"context"
	"net/http"

	"github.com/vast-data/go-vast-client/core"
)

// -----------------------------------------------------
// RESOURCE TYPE
// -----------------------------------------------------

// Projection represents a typed resource for projection operations
type Projection struct {
	*core.TypedVastResource
}

// -----------------------------------------------------
// SEARCH PARAMS
// -----------------------------------------------------

// ProjectionSearchParams represents the search parameters for Projection operations
type ProjectionSearchParams struct {
	CountOnly    bool   `json:"count_only,omitempty" yaml:"count_only,omitempty" required:"false" doc:"Whether to only return count of objects"`
	DatabaseName string `json:"database_name,omitempty" yaml:"database_name,omitempty" required:"false" doc:"Getting list of objects by database_name"`
	Name         string `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:"Getting list of objects by exact match"`
	SchemaName   string `json:"schema_name,omitempty" yaml:"schema_name,omitempty" required:"false" doc:"Getting list of objects by schema_name"`
	TableName    string `json:"table_name,omitempty" yaml:"table_name,omitempty" required:"false" doc:"Getting list of objects by table_name"`
	TenantId     int64  `json:"tenant_id,omitempty" yaml:"tenant_id,omitempty" required:"false" doc:"Filter by tenant. Specify tenant ID."`

	// RawData allows passing arbitrary search parameters as key-value pairs.
	//
	// Use this field when you need query parameters that are not covered by the typed fields above.
	// This is particularly useful for:
	//   - Dynamic filter operations (e.g., "path__contains", "name__icontains")
	//   - Django-style query filters
	//   - Custom backend-specific parameters
	//
	// Example:
	//   params := &ProjectionSearchParams{
	//       RawData: core.Params{"path__contains": "/foo", "name__icontains": "bar"},
	//   }
	//
	// Note: You can use either the typed fields or RawData, or combine both.
	RawData core.Params `json:"-" yaml:"-"`
}

// -----------------------------------------------------
// MODELS
// -----------------------------------------------------

// ProjectionDetailsModel represents the detailed model returned by GET/List operations
// Type alias to component definition: #/components/schemas/Projection
type ProjectionDetailsModel = Component_Projection

// -----------------------------------------------------
// LIST
// -----------------------------------------------------

// List retrieves multiple projections with typed request/response
// summary: List Database Table Semi-Sorted Projections
func (r *Projection) List(req *ProjectionSearchParams) ([]*ProjectionDetailsModel, error) {
	return r.ListWithContext(r.Untyped.GetCtx(), req)
}

// ListWithContext retrieves multiple projections with typed request/response using provided context
// summary: List Database Table Semi-Sorted Projections
func (r *Projection) ListWithContext(ctx context.Context, req *ProjectionSearchParams) ([]*ProjectionDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.GetResourceMap()[r.GetResourceType()].ListWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response []*ProjectionDetailsModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// Get retrieves a single projection with typed request/response
// summary: List Database Table Semi-Sorted Projections
func (r *Projection) Get(req *ProjectionSearchParams) (*ProjectionDetailsModel, error) {
	return r.GetWithContext(r.Untyped.GetCtx(), req)
}

// GetWithContext retrieves a single projection with typed request/response using provided context
// summary: List Database Table Semi-Sorted Projections
func (r *Projection) GetWithContext(ctx context.Context, req *ProjectionSearchParams) (*ProjectionDetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response ProjectionDetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Exists checks if a projection exists
func (r *Projection) Exists(req *ProjectionSearchParams) (bool, error) {
	return r.ExistsWithContext(r.Untyped.GetCtx(), req)
}

// ExistsWithContext checks if a projection exists using provided context
func (r *Projection) ExistsWithContext(ctx context.Context, req *ProjectionSearchParams) (bool, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].ExistsWithContext(ctx, params)
}

// MustExists checks if a projection exists and panics if not
func (r *Projection) MustExists(req *ProjectionSearchParams) bool {
	return r.MustExistsWithContext(r.Untyped.GetCtx(), req)
}

// MustExistsWithContext checks if a projection exists and panics if not using provided context
func (r *Projection) MustExistsWithContext(ctx context.Context, req *ProjectionSearchParams) bool {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].MustExistsWithContext(ctx, params)
}

// -----------------------------------------------------
// EXTRA METHODS
// -----------------------------------------------------

// ProjectionDelete_DELETE_Body represents the request body for ProjectionDelete
type ProjectionDelete_DELETE_Body struct {
	DatabaseName string `json:"database_name,omitempty" yaml:"database_name,omitempty" required:"true" doc:"Name of the Database"`
	Name         string `json:"name,omitempty" yaml:"name,omitempty" required:"true" doc:"Name of the object"`
	SchemaName   string `json:"schema_name,omitempty" yaml:"schema_name,omitempty" required:"true" doc:"Name of the Schema"`
	TableName    string `json:"table_name,omitempty" yaml:"table_name,omitempty" required:"true" doc:"Name of the Table"`
	TenantId     int64  `json:"tenant_id,omitempty" yaml:"tenant_id,omitempty" required:"false" doc:"Tenant ID"`
}

// ProjectionDeleteWithContext_DELETE
// method: DELETE
// url: /projections/delete/
// summary: Delete a Database Table Semi-Sorted Projection
func (r *Projection) ProjectionDeleteWithContext_DELETE(ctx context.Context, body *ProjectionDelete_DELETE_Body) error {
	resourcePath := "/projections/delete/"

	var reqParams core.Params
	reqBody, err := core.NewParamsFromStruct(body)
	if err != nil {
		return err
	}

	_, err = core.Request[core.EmptyRecord](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodDelete, resourcePath, reqParams, reqBody)
	return err

}

// ProjectionDelete_DELETE
// method: DELETE
// url: /projections/delete/
// summary: Delete a Database Table Semi-Sorted Projection
func (r *Projection) ProjectionDelete_DELETE(body *ProjectionDelete_DELETE_Body) error {
	return r.ProjectionDeleteWithContext_DELETE(r.Untyped.GetCtx(), body)
}

// ProjectionRename_PATCH_Body represents the request body for ProjectionRename
type ProjectionRename_PATCH_Body struct {
	DatabaseName string `json:"database_name,omitempty" yaml:"database_name,omitempty" required:"true" doc:"Name of the Database"`
	Name         string `json:"name,omitempty" yaml:"name,omitempty" required:"true" doc:"Name of the object"`
	NewName      string `json:"new_name,omitempty" yaml:"new_name,omitempty" required:"true" doc:"New name of the Projection"`
	SchemaName   string `json:"schema_name,omitempty" yaml:"schema_name,omitempty" required:"true" doc:"Name of the Schema"`
	TableName    string `json:"table_name,omitempty" yaml:"table_name,omitempty" required:"true" doc:"Name of the Table"`
	TenantId     int64  `json:"tenant_id,omitempty" yaml:"tenant_id,omitempty" required:"false" doc:"Tenant ID"`
}

// ProjectionRenameWithContext_PATCH
// method: PATCH
// url: /projections/rename/
// summary: Rename a Database Table Semi-Sorted Projection
func (r *Projection) ProjectionRenameWithContext_PATCH(ctx context.Context, body *ProjectionRename_PATCH_Body) error {
	resourcePath := "/projections/rename/"

	var reqParams core.Params
	reqBody, err := core.NewParamsFromStruct(body)
	if err != nil {
		return err
	}

	_, err = core.Request[core.EmptyRecord](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodPatch, resourcePath, reqParams, reqBody)
	return err

}

// ProjectionRename_PATCH
// method: PATCH
// url: /projections/rename/
// summary: Rename a Database Table Semi-Sorted Projection
func (r *Projection) ProjectionRename_PATCH(body *ProjectionRename_PATCH_Body) error {
	return r.ProjectionRenameWithContext_PATCH(r.Untyped.GetCtx(), body)
}

// ProjectionShow_GET_Body represents the request body for ProjectionShow
type ProjectionShow_GET_Body struct {
	DatabaseName string `json:"database_name,omitempty" yaml:"database_name,omitempty" required:"false" doc:"Getting list of objects by database_name"`
	Name         string `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:"Getting object by exact match"`
	SchemaName   string `json:"schema_name,omitempty" yaml:"schema_name,omitempty" required:"false" doc:"Getting list of objects by schema_name"`
	TableName    string `json:"table_name,omitempty" yaml:"table_name,omitempty" required:"false" doc:"Getting list of objects by table_name"`
	TenantId     int64  `json:"tenant_id,omitempty" yaml:"tenant_id,omitempty" required:"false" doc:"Filter by tenant. Specify tenant ID."`
}

// ProjectionShow_GET_Model represents the response model for ProjectionShow
type ProjectionShow_GET_Model struct {
	DatabaseName        string `json:"database_name,omitempty" yaml:"database_name,omitempty" required:"true" doc:"Name of the Database"`
	InitialSyncProgress int64  `json:"initial_sync_progress,omitempty" yaml:"initial_sync_progress,omitempty" required:"true" doc:"Initial sync progress"`
	Name                string `json:"name,omitempty" yaml:"name,omitempty" required:"true" doc:"Name of the object"`
	NumRows             int64  `json:"num_rows,omitempty" yaml:"num_rows,omitempty" required:"true" doc:"Total number of rows"`
	SchemaName          string `json:"schema_name,omitempty" yaml:"schema_name,omitempty" required:"true" doc:"Name of the Schema"`
	Size                int64  `json:"size,omitempty" yaml:"size,omitempty" required:"true" doc:"Size of the Projection"`
	TableName           string `json:"table_name,omitempty" yaml:"table_name,omitempty" required:"true" doc:"Name of the Table"`
	Properties          string `json:"properties,omitempty" yaml:"properties,omitempty" required:"false" doc:"Misc properties of the Projection"`
}

// ProjectionShowWithContext_GET
// method: GET
// url: /projections/show/
// summary: Return a Database Table Semi-Sorted Projection
func (r *Projection) ProjectionShowWithContext_GET(ctx context.Context, params *ProjectionShow_GET_Body) (*ProjectionShow_GET_Model, error) {
	resourcePath := "/projections/show/"

	reqParams, err := core.NewParamsFromStruct(params)
	if err != nil {
		return nil, err
	}
	var reqBody core.Params

	record, err := core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodGet, resourcePath, reqParams, reqBody)
	if err != nil {
		return nil, err
	}

	var response ProjectionShow_GET_Model
	if err := record.Fill(&response); err != nil {
		return nil, err
	}
	return &response, nil

}

// ProjectionShow_GET
// method: GET
// url: /projections/show/
// summary: Return a Database Table Semi-Sorted Projection
func (r *Projection) ProjectionShow_GET(params *ProjectionShow_GET_Body) (*ProjectionShow_GET_Model, error) {
	return r.ProjectionShowWithContext_GET(r.Untyped.GetCtx(), params)
}

// -----------------------------------------------------
// GENERATION ISSUES
// -----------------------------------------------------
//   - CREATE operation excluded: POST projections has no response schema and doesn't return 204 NO CONTENT
