// Code generated by generate-typed-resources. DO NOT EDIT.

package typed

import (
	"context"
	"encoding/json"
	"fmt"
	"reflect"

	vast_client "github.com/vast-data/go-vast-client"
)

// -----------------------------------------------------
// SEARCH PARAMS
// -----------------------------------------------------

// QosPolicySearchParams represents the search parameters for QosPolicy operations
// Generated from GET query parameters for resource: qospolicies
type QosPolicySearchParams struct {
	Guid     string `json:"guid,omitempty" yaml:"guid,omitempty" required:"true" doc:"QoS Policy guid"`
	Name     string `json:"name,omitempty" yaml:"name,omitempty" required:"true" doc:""`
	TenantId int64  `json:"tenant_id,omitempty" yaml:"tenant_id,omitempty" required:"false" doc:"Tenant ID"`
}

// -----------------------------------------------------
// REQUEST BODY
// -----------------------------------------------------

// QospolicieRequestBody_AttachedUsersItem represents a nested type for request body
type QospolicieRequestBody_AttachedUsersItem struct {
	Fqdn            string `json:"fqdn,omitempty" yaml:"fqdn,omitempty" required:"true" doc:"The Fully Qualified Domain Name (FQDN) of the user's domain."`
	IdentifierType  string `json:"identifier_type,omitempty" yaml:"identifier_type,omitempty" required:"true" doc:"The attribute used to identify the user."`
	IdentifierValue string `json:"identifier_value,omitempty" yaml:"identifier_value,omitempty" required:"true" doc:"The value of the identifying attribute for the user. Must be of the attribute specified as identifier_type."`
	Name            string `json:"name,omitempty" yaml:"name,omitempty" required:"true" doc:"User's name"`
	Label           string `json:"label,omitempty" yaml:"label,omitempty" required:"false" doc:"A label for the user"`
}

// QospolicieRequestBody_CapacityLimits represents a nested type for request body
type QospolicieRequestBody_CapacityLimits struct {
	MaxReadsBwMbpsPerGbCapacity  int64 `json:"max_reads_bw_mbps_per_gb_capacity,omitempty" yaml:"max_reads_bw_mbps_per_gb_capacity,omitempty" required:"false" doc:"Maximal amount of performance per GB to provide when there is no resource contention"`
	MaxReadsIopsPerGbCapacity    int64 `json:"max_reads_iops_per_gb_capacity,omitempty" yaml:"max_reads_iops_per_gb_capacity,omitempty" required:"false" doc:"Maximal amount of performance per GB to provide when there is no resource contention"`
	MaxWritesBwMbpsPerGbCapacity int64 `json:"max_writes_bw_mbps_per_gb_capacity,omitempty" yaml:"max_writes_bw_mbps_per_gb_capacity,omitempty" required:"false" doc:"Maximal amount of performance per GB to provide when there is no resource contention"`
	MaxWritesIopsPerGbCapacity   int64 `json:"max_writes_iops_per_gb_capacity,omitempty" yaml:"max_writes_iops_per_gb_capacity,omitempty" required:"false" doc:"Maximal amount of performance per GB to provide when there is no resource contention"`
}

// QospolicieRequestBody_CapacityTotalLimits represents a nested type for request body
type QospolicieRequestBody_CapacityTotalLimits struct {
	MaxBwMbpsPerGbCapacity int64 `json:"max_bw_mbps_per_gb_capacity,omitempty" yaml:"max_bw_mbps_per_gb_capacity,omitempty" required:"false" doc:"Maximal amount of performance per GB to provide when there is no resource contention"`
	MaxIopsPerGbCapacity   int64 `json:"max_iops_per_gb_capacity,omitempty" yaml:"max_iops_per_gb_capacity,omitempty" required:"false" doc:"Maximal amount of performance per GB to provide when there is no resource contention"`
}

// QospolicieRequestBody_StaticTotalLimits represents a nested type for request body
type QospolicieRequestBody_StaticTotalLimits struct {
	BurstBwMb     int64 `json:"burst_bw_mb,omitempty" yaml:"burst_bw_mb,omitempty" required:"false" doc:"Burst BW Mb"`
	BurstIops     int64 `json:"burst_iops,omitempty" yaml:"burst_iops,omitempty" required:"false" doc:"Burst IOPS"`
	BurstLoanIops int64 `json:"burst_loan_iops,omitempty" yaml:"burst_loan_iops,omitempty" required:"false" doc:"Burst loan IOPS"`
	BurstLoanMb   int64 `json:"burst_loan_mb,omitempty" yaml:"burst_loan_mb,omitempty" required:"false" doc:"Burst loan Mb"`
	MaxBwMbps     int64 `json:"max_bw_mbps,omitempty" yaml:"max_bw_mbps,omitempty" required:"false" doc:"Maximal BW Mb/s"`
	MaxIops       int64 `json:"max_iops,omitempty" yaml:"max_iops,omitempty" required:"false" doc:"Maximal IOPS"`
	MinBwMbps     int64 `json:"min_bw_mbps,omitempty" yaml:"min_bw_mbps,omitempty" required:"false" doc:"Minimal BW Mb/s"`
	MinIops       int64 `json:"min_iops,omitempty" yaml:"min_iops,omitempty" required:"false" doc:"Minimal IOPS"`
}

// QosPolicyRequestBody represents the request body for QosPolicy operations
// Generated from POST request body for resource: qospolicies
type QosPolicyRequestBody struct {
	Name                string                                     `json:"name,omitempty" yaml:"name,omitempty" required:"true" doc:""`
	AttachedUsers       *[]QospolicieRequestBody_AttachedUsersItem `json:"attached_users,omitempty" yaml:"attached_users,omitempty" required:"false" doc:"The users to which to attach the policy, for a user QOS policy"`
	CapacityLimits      QospolicieRequestBody_CapacityLimits       `json:"capacity_limits,omitempty" yaml:"capacity_limits,omitempty" required:"false" doc:"Performance limits per unit of either used logical capacity or provisioned capacity, depending on the mode. Units are stated per limit. Valid values: 0-4294967296. 0 means unlimited."`
	CapacityTotalLimits QospolicieRequestBody_CapacityTotalLimits  `json:"capacity_total_limits,omitempty" yaml:"capacity_total_limits,omitempty" required:"false" doc:""`
	IsDefault           bool                                       `json:"is_default,omitempty" yaml:"is_default,omitempty" required:"false" doc:"Is default User QOS Policy"`
	IsGold              bool                                       `json:"is_gold,omitempty" yaml:"is_gold,omitempty" required:"false" doc:"Grants priority QoS over views that do not have this setting enabled"`
	LimitBy             string                                     `json:"limit_by,omitempty" yaml:"limit_by,omitempty" required:"false" doc:"Specifies which performance parameter(s) are limited by the policy. BW_IOPS=The policy limits service according to bandwidth (BW) and IO per second (IOPS). BW=The policy limits service according to BW only. IOPS=The policy limits service according to IOPS only."`
	Mode                string                                     `json:"mode,omitempty" yaml:"mode,omitempty" required:"false" doc:"QoS provisioning mode"`
	PolicyType          string                                     `json:"policy_type,omitempty" yaml:"policy_type,omitempty" required:"false" doc:"QOS Policy type"`
	StaticLimits        string                                     `json:"static_limits,omitempty" yaml:"static_limits,omitempty" required:"false" doc:""`
	StaticTotalLimits   QospolicieRequestBody_StaticTotalLimits    `json:"static_total_limits,omitempty" yaml:"static_total_limits,omitempty" required:"false" doc:""`
	TenantId            int64                                      `json:"tenant_id,omitempty" yaml:"tenant_id,omitempty" required:"false" doc:"Tenant ID"`
	UseTotalLimits      bool                                       `json:"use_total_limits,omitempty" yaml:"use_total_limits,omitempty" required:"false" doc:""`
}

// -----------------------------------------------------
// MODEL
// -----------------------------------------------------

// QOSPolicyModel_AttachedUsersItem represents a nested type for model
type QOSPolicyModel_AttachedUsersItem struct {
	Fqdn            string `json:"fqdn,omitempty" yaml:"fqdn,omitempty" required:"true" doc:"The Fully Qualified Domain Name (FQDN) of the user's domain."`
	IdentifierType  string `json:"identifier_type,omitempty" yaml:"identifier_type,omitempty" required:"true" doc:"The attribute used to identify the user."`
	IdentifierValue string `json:"identifier_value,omitempty" yaml:"identifier_value,omitempty" required:"true" doc:"The value of the identifying attribute for the user. Must be of the attribute specified as identifier_type."`
	Name            string `json:"name,omitempty" yaml:"name,omitempty" required:"true" doc:"User's name"`
	Label           string `json:"label,omitempty" yaml:"label,omitempty" required:"false" doc:"A label for the user"`
}

// QOSPolicyModel_CapacityLimits represents a nested type for model
type QOSPolicyModel_CapacityLimits struct {
	MaxReadsBwMbpsPerGbCapacity  int64 `json:"max_reads_bw_mbps_per_gb_capacity,omitempty" yaml:"max_reads_bw_mbps_per_gb_capacity,omitempty" required:"true" doc:"Maximal amount of performance per GB to provide when there is no resource contention"`
	MaxReadsIopsPerGbCapacity    int64 `json:"max_reads_iops_per_gb_capacity,omitempty" yaml:"max_reads_iops_per_gb_capacity,omitempty" required:"true" doc:"Maximal amount of performance per GB to provide when there is no resource contention"`
	MaxWritesBwMbpsPerGbCapacity int64 `json:"max_writes_bw_mbps_per_gb_capacity,omitempty" yaml:"max_writes_bw_mbps_per_gb_capacity,omitempty" required:"true" doc:"Maximal amount of performance per GB to provide when there is no resource contention"`
	MaxWritesIopsPerGbCapacity   int64 `json:"max_writes_iops_per_gb_capacity,omitempty" yaml:"max_writes_iops_per_gb_capacity,omitempty" required:"true" doc:"Maximal amount of performance per GB to provide when there is no resource contention"`
}

// QOSPolicyModel_CapacityTotalLimits represents a nested type for model
type QOSPolicyModel_CapacityTotalLimits struct {
	MaxBwMbpsPerGbCapacity int64 `json:"max_bw_mbps_per_gb_capacity,omitempty" yaml:"max_bw_mbps_per_gb_capacity,omitempty" required:"false" doc:"Maximal amount of performance per GB to provide when there is no resource contention"`
	MaxIopsPerGbCapacity   int64 `json:"max_iops_per_gb_capacity,omitempty" yaml:"max_iops_per_gb_capacity,omitempty" required:"false" doc:"Maximal amount of performance per GB to provide when there is no resource contention"`
}

// QOSPolicyModel_StaticTotalLimits represents a nested type for model
type QOSPolicyModel_StaticTotalLimits struct {
	BurstBwMb     int64 `json:"burst_bw_mb,omitempty" yaml:"burst_bw_mb,omitempty" required:"false" doc:"Burst BW Mb"`
	BurstIops     int64 `json:"burst_iops,omitempty" yaml:"burst_iops,omitempty" required:"false" doc:"Burst IOPS"`
	BurstLoanIops int64 `json:"burst_loan_iops,omitempty" yaml:"burst_loan_iops,omitempty" required:"false" doc:"Burst loan IOPS"`
	BurstLoanMb   int64 `json:"burst_loan_mb,omitempty" yaml:"burst_loan_mb,omitempty" required:"false" doc:"Burst loan Mb"`
	MaxBwMbps     int64 `json:"max_bw_mbps,omitempty" yaml:"max_bw_mbps,omitempty" required:"false" doc:"Maximal BW Mb/s"`
	MaxIops       int64 `json:"max_iops,omitempty" yaml:"max_iops,omitempty" required:"false" doc:"Maximal IOPS"`
	MinBwMbps     int64 `json:"min_bw_mbps,omitempty" yaml:"min_bw_mbps,omitempty" required:"false" doc:"Minimal BW Mb/s"`
	MinIops       int64 `json:"min_iops,omitempty" yaml:"min_iops,omitempty" required:"false" doc:"Minimal IOPS"`
}

// QosPolicyModel represents the model data for QosPolicy operations
// Generated from schema: QOSPolicy
type QosPolicyModel struct {
	Guid                string                              `json:"guid,omitempty" yaml:"guid,omitempty" required:"true" doc:"QoS Policy guid"`
	Id                  int64                               `json:"id,omitempty" yaml:"id,omitempty" required:"true" doc:""`
	Name                string                              `json:"name,omitempty" yaml:"name,omitempty" required:"true" doc:""`
	PolicyType          string                              `json:"policy_type,omitempty" yaml:"policy_type,omitempty" required:"true" doc:"QOS Policy type - VIEW or USER"`
	StaticLimits        string                              `json:"static_limits,omitempty" yaml:"static_limits,omitempty" required:"true" doc:""`
	AttachedUsers       *[]QOSPolicyModel_AttachedUsersItem `json:"attached_users,omitempty" yaml:"attached_users,omitempty" required:"false" doc:"The users to which to attach the policy, for a user QOS policy"`
	CapacityLimits      QOSPolicyModel_CapacityLimits       `json:"capacity_limits,omitempty" yaml:"capacity_limits,omitempty" required:"false" doc:""`
	CapacityTotalLimits QOSPolicyModel_CapacityTotalLimits  `json:"capacity_total_limits,omitempty" yaml:"capacity_total_limits,omitempty" required:"false" doc:""`
	IoSizeBytes         int64                               `json:"io_size_bytes,omitempty" yaml:"io_size_bytes,omitempty" required:"false" doc:"Sets the size of IO for static and capacity limit definitions. The number of IOs per request is obtained by dividing request size by IO size. Default: 64K, Recommended range: 4K - 1M"`
	IsDefault           bool                                `json:"is_default,omitempty" yaml:"is_default,omitempty" required:"false" doc:"Is default User QOS Policy"`
	IsGold              bool                                `json:"is_gold,omitempty" yaml:"is_gold,omitempty" required:"false" doc:"Grants priority QoS over views that do not have this setting enabled"`
	LimitBy             string                              `json:"limit_by,omitempty" yaml:"limit_by,omitempty" required:"false" doc:"Specifies which performance parameter(s) are limited by the policy. BW_IOPS=The policy limits service according to bandwidth (BW) and IO per second (IOPS). BW=The policy limits service according to BW only. IOPS=The policy limits service according to IOPS only."`
	Mode                string                              `json:"mode,omitempty" yaml:"mode,omitempty" required:"false" doc:"The mode of provisioning quality of service per view. STATIC=read and/or write BW and/or IOPS may be limited to a set maximum limit. USED_CAPACITY=BW and IOPS may be limited set per unit of used logical capacity. Static limits are also configurable and define boundaries of performance allowance. PROVISIONED_CAPACITY=BW and IOPS may be limited per unit of logical capacity, as provisioned by the soft limit of a quota on the view path. Static limits are also configurable and define boundaries of performance allowance."`
	StaticTotalLimits   QOSPolicyModel_StaticTotalLimits    `json:"static_total_limits,omitempty" yaml:"static_total_limits,omitempty" required:"false" doc:""`
	TenantId            int64                               `json:"tenant_id,omitempty" yaml:"tenant_id,omitempty" required:"false" doc:"Tenant ID"`
	TenantName          string                              `json:"tenant_name,omitempty" yaml:"tenant_name,omitempty" required:"false" doc:"Tenant Name"`
	UseTotalLimits      bool                                `json:"use_total_limits,omitempty" yaml:"use_total_limits,omitempty" required:"false" doc:"If true - total limits are used instead of separate read/write limits"`
}

// -----------------------------------------------------
// RESOURCE METHODS
// -----------------------------------------------------

// QosPolicy represents a typed resource for qospolicy operations
type QosPolicy struct {
	Untyped *vast_client.VMSRest
}

// Get retrieves a single qospolicy with typed request/response
func (r *QosPolicy) Get(req *QosPolicySearchParams) (*QosPolicyModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.QosPolicies.Get(params)
	if err != nil {
		return nil, err
	}

	var response QosPolicyModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// GetWithContext retrieves a single qospolicy with typed request/response using provided context
func (r *QosPolicy) GetWithContext(ctx context.Context, req *QosPolicySearchParams) (*QosPolicyModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.QosPolicies.GetWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response QosPolicyModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// GetById retrieves a single qospolicy by ID
func (r *QosPolicy) GetById(id any) (*QosPolicyModel, error) {
	record, err := r.Untyped.QosPolicies.GetById(id)
	if err != nil {
		return nil, err
	}

	var response QosPolicyModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// GetByIdWithContext retrieves a single qospolicy by ID using provided context
func (r *QosPolicy) GetByIdWithContext(ctx context.Context, id any) (*QosPolicyModel, error) {
	record, err := r.Untyped.QosPolicies.GetByIdWithContext(ctx, id)
	if err != nil {
		return nil, err
	}

	var response QosPolicyModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// List retrieves multiple qospolicys with typed request/response
func (r *QosPolicy) List(req *QosPolicySearchParams) ([]*QosPolicyModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.QosPolicies.List(params)
	if err != nil {
		return nil, err
	}

	var response []*QosPolicyModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// ListWithContext retrieves multiple qospolicys with typed request/response using provided context
func (r *QosPolicy) ListWithContext(ctx context.Context, req *QosPolicySearchParams) ([]*QosPolicyModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.QosPolicies.ListWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response []*QosPolicyModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// Create creates a new qospolicy with typed request/response
func (r *QosPolicy) Create(req *QosPolicyRequestBody) (*QosPolicyModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.QosPolicies.Create(params)
	if err != nil {
		return nil, err
	}

	var response QosPolicyModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// CreateWithContext creates a new qospolicy with typed request/response using provided context
func (r *QosPolicy) CreateWithContext(ctx context.Context, req *QosPolicyRequestBody) (*QosPolicyModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.QosPolicies.CreateWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response QosPolicyModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Update updates an existing qospolicy with typed request/response
func (r *QosPolicy) Update(id any, req *QosPolicyRequestBody) (*QosPolicyModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.QosPolicies.Update(id, params)
	if err != nil {
		return nil, err
	}

	var response QosPolicyModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// UpdateWithContext updates an existing qospolicy with typed request/response using provided context
func (r *QosPolicy) UpdateWithContext(ctx context.Context, id any, req *QosPolicyRequestBody) (*QosPolicyModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.QosPolicies.UpdateWithContext(ctx, id, params)
	if err != nil {
		return nil, err
	}

	var response QosPolicyModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Delete deletes a qospolicy with search parameters
func (r *QosPolicy) Delete(req *QosPolicySearchParams) error {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return err
	}
	_, err = r.Untyped.QosPolicies.Delete(params, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteWithContext deletes a qospolicy with search parameters using provided context
func (r *QosPolicy) DeleteWithContext(ctx context.Context, req *QosPolicySearchParams) error {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return err
	}
	_, err = r.Untyped.QosPolicies.DeleteWithContext(ctx, params, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteById deletes a qospolicy by ID
func (r *QosPolicy) DeleteById(id any) error {
	_, err := r.Untyped.QosPolicies.DeleteById(id, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteByIdWithContext deletes a qospolicy by ID using provided context
func (r *QosPolicy) DeleteByIdWithContext(ctx context.Context, id any) error {
	_, err := r.Untyped.QosPolicies.DeleteByIdWithContext(ctx, id, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// Ensure ensures a qospolicy exists with typed response
func (r *QosPolicy) Ensure(searchParams *QosPolicySearchParams, body *QosPolicyRequestBody) (*QosPolicyModel, error) {
	searchParamsConverted, err := vast_client.NewParamsFromStruct(searchParams)
	if err != nil {
		return nil, err
	}
	bodyConverted, err := vast_client.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.QosPolicies.Ensure(searchParamsConverted, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response QosPolicyModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// EnsureWithContext ensures a qospolicy exists with typed response using provided context
func (r *QosPolicy) EnsureWithContext(ctx context.Context, searchParams *QosPolicySearchParams, body *QosPolicyRequestBody) (*QosPolicyModel, error) {
	searchParamsConverted, err := vast_client.NewParamsFromStruct(searchParams)
	if err != nil {
		return nil, err
	}
	bodyConverted, err := vast_client.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.QosPolicies.EnsureWithContext(ctx, searchParamsConverted, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response QosPolicyModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// EnsureByName ensures a qospolicy exists by name with typed response
func (r *QosPolicy) EnsureByName(name string, body *QosPolicyRequestBody) (*QosPolicyModel, error) {
	bodyConverted, err := vast_client.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.QosPolicies.EnsureByName(name, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response QosPolicyModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// EnsureByNameWithContext ensures a qospolicy exists by name with typed response using provided context
func (r *QosPolicy) EnsureByNameWithContext(ctx context.Context, name string, body *QosPolicyRequestBody) (*QosPolicyModel, error) {
	bodyConverted, err := vast_client.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.QosPolicies.EnsureByNameWithContext(ctx, name, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response QosPolicyModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Exists checks if a qospolicy exists
func (r *QosPolicy) Exists(req *QosPolicySearchParams) (bool, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.QosPolicies.Exists(params)
}

// ExistsWithContext checks if a qospolicy exists using provided context
func (r *QosPolicy) ExistsWithContext(ctx context.Context, req *QosPolicySearchParams) (bool, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.QosPolicies.ExistsWithContext(ctx, params)
}

// MustExists checks if a qospolicy exists and panics if not
func (r *QosPolicy) MustExists(req *QosPolicySearchParams) bool {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.QosPolicies.MustExists(params)
}

// MustExistsWithContext checks if a qospolicy exists and panics if not using provided context
func (r *QosPolicy) MustExistsWithContext(ctx context.Context, req *QosPolicySearchParams) bool {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.QosPolicies.MustExistsWithContext(ctx, params)
}

// -----------------------------------------------------
// RENDERABLE INTERFACE METHODS
// -----------------------------------------------------

// PrettyTable returns a formatted table representation of the QosPolicyModel
func (m *QosPolicyModel) PrettyTable() string {
	return m.toRecord().PrettyTable()
}

// PrettyJson returns a JSON representation of the QosPolicyModel
func (m *QosPolicyModel) PrettyJson(indent ...string) string {
	return m.toRecord().PrettyJson(indent...)
}

// toRecord converts the QosPolicyModel to a Record (map[string]any) with @resourceType
func (m *QosPolicyModel) toRecord() vast_client.Record {
	// Convert struct to map using JSON marshaling
	jsonBytes, err := json.Marshal(m)
	if err != nil {
		return vast_client.Record{"error": fmt.Sprintf("failed to marshal struct: %v", err)}
	}

	var record vast_client.Record
	if err := json.Unmarshal(jsonBytes, &record); err != nil {
		return vast_client.Record{"error": fmt.Sprintf("failed to unmarshal to record: %v", err)}
	}

	// Add resource type using reflection
	record["@resourceType"] = reflect.TypeOf(*m).Name()

	return record
}
