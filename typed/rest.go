// Code generated by generate-typed-resources. DO NOT EDIT.

package typed

import (
	"context"

	vast_client "github.com/vast-data/go-vast-client"
)

// VMSRest provides typed access to VAST resources
type VMSRest struct {
	// Untyped provides access to the underlying untyped VMSRest client when needed
	Untyped *vast_client.VMSRest

	// Typed resources - only resources with apibuilder markers are included
	ActiveDirectories      *ActiveDirectory
	ApiTokens              *ApiToken
	BGPConfigs             *BGPConfig
	BlockHosts             *BlockHost
	Cnodes                 *Cnode
	Dns                    *Dns
	EncryptionGroups       *EncryptionGroup
	EventDefinitions       *EventDefinition
	EventDefinitionConfigs *EventDefinitionConfig
	GlobalSnapshotStreams  *GlobalSnapshotStream
	Groups                 *Group
	KafkaBrokers           *KafkaBroker
	Ldaps                  *Ldap
	LocalProviders         *LocalProvider
	LocalS3Keys            *LocalS3Key
	Managers               *Manager
	Nis                    *Nis
	ProtectedPaths         *ProtectedPath
	ProtectionPolicies     *ProtectionPolicy
	QosPolicies            *QosPolicy
	Quotas                 *Quota
	Realms                 *Realm
	ReplicationPeers       *ReplicationPeers
	Roles                  *Role
	S3LifeCycleRules       *S3LifeCycleRule
	S3Policies             *S3Policy
	S3replicationPeers     *S3replicationPeers
	Snapshots              *Snapshot
	Tenants                *Tenant
	Topics                 *Topic
	Users                  *User
	Versions               *Version
	Views                  *View
	ViewPolies             *ViewPolicy
	VipPools               *VipPool
	Vms                    *Vms
	Volumes                *Volume
}

// NewTypedVMSRest creates a new typed VMSRest client from configuration
func NewTypedVMSRest(config *vast_client.VMSConfig) (*VMSRest, error) {
	rawClient, err := vast_client.NewVMSRest(config)
	if err != nil {
		return nil, err
	}

	typedRest := &VMSRest{
		Untyped: rawClient,
	}

	// Initialize typed resources
	typedRest.ActiveDirectories = &ActiveDirectory{Untyped: rawClient}
	typedRest.ApiTokens = &ApiToken{Untyped: rawClient}
	typedRest.BGPConfigs = &BGPConfig{Untyped: rawClient}
	typedRest.BlockHosts = &BlockHost{Untyped: rawClient}
	typedRest.Cnodes = &Cnode{Untyped: rawClient}
	typedRest.Dns = &Dns{Untyped: rawClient}
	typedRest.EncryptionGroups = &EncryptionGroup{Untyped: rawClient}
	typedRest.EventDefinitions = &EventDefinition{Untyped: rawClient}
	typedRest.EventDefinitionConfigs = &EventDefinitionConfig{Untyped: rawClient}
	typedRest.GlobalSnapshotStreams = &GlobalSnapshotStream{Untyped: rawClient}
	typedRest.Groups = &Group{Untyped: rawClient}
	typedRest.KafkaBrokers = &KafkaBroker{Untyped: rawClient}
	typedRest.Ldaps = &Ldap{Untyped: rawClient}
	typedRest.LocalProviders = &LocalProvider{Untyped: rawClient}
	typedRest.LocalS3Keys = &LocalS3Key{Untyped: rawClient}
	typedRest.Managers = &Manager{Untyped: rawClient}
	typedRest.Nis = &Nis{Untyped: rawClient}
	typedRest.ProtectedPaths = &ProtectedPath{Untyped: rawClient}
	typedRest.ProtectionPolicies = &ProtectionPolicy{Untyped: rawClient}
	typedRest.QosPolicies = &QosPolicy{Untyped: rawClient}
	typedRest.Quotas = &Quota{Untyped: rawClient}
	typedRest.Realms = &Realm{Untyped: rawClient}
	typedRest.ReplicationPeers = &ReplicationPeers{Untyped: rawClient}
	typedRest.Roles = &Role{Untyped: rawClient}
	typedRest.S3LifeCycleRules = &S3LifeCycleRule{Untyped: rawClient}
	typedRest.S3Policies = &S3Policy{Untyped: rawClient}
	typedRest.S3replicationPeers = &S3replicationPeers{Untyped: rawClient}
	typedRest.Snapshots = &Snapshot{Untyped: rawClient}
	typedRest.Tenants = &Tenant{Untyped: rawClient}
	typedRest.Topics = &Topic{Untyped: rawClient}
	typedRest.Users = &User{Untyped: rawClient}
	typedRest.Versions = &Version{Untyped: rawClient}
	typedRest.Views = &View{Untyped: rawClient}
	typedRest.ViewPolies = &ViewPolicy{Untyped: rawClient}
	typedRest.VipPools = &VipPool{Untyped: rawClient}
	typedRest.Vms = &Vms{Untyped: rawClient}
	typedRest.Volumes = &Volume{Untyped: rawClient}

	return typedRest, nil
}

// SetCtx sets the context for the underlying untyped client
// This is a convenience method to avoid having to call r.Untyped.SetCtx(ctx)
func (r *VMSRest) SetCtx(ctx context.Context) {
	r.Untyped.SetCtx(ctx)
}

// GetSession returns the REST session from the underlying untyped client
// This is a convenience method to avoid having to call r.Untyped.Session
func (r *VMSRest) GetSession() vast_client.RESTSession {
	return r.Untyped.Session
}
