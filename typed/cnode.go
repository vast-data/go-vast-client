// Code generated by generate-typed-resources. DO NOT EDIT.

package typed

import (
	"context"
	"encoding/json"
	"fmt"
	"reflect"

	vast_client "github.com/vast-data/go-vast-client"
)

// -----------------------------------------------------
// SEARCH PARAMS
// -----------------------------------------------------

// CnodeSearchParams represents the search parameters for Cnode operations
// Generated from GET query parameters for resource: cnodes
type CnodeSearchParams struct {
	ClusterId   int64  `json:"cluster_id,omitempty" yaml:"cluster_id,omitempty" required:"false" doc:""`
	ClusterName string `json:"cluster_name,omitempty" yaml:"cluster_name,omitempty" required:"false" doc:""`
	Enabled     bool   `json:"enabled,omitempty" yaml:"enabled,omitempty" required:"false" doc:"Return only enabled CNodes"`
	Guid        string `json:"guid,omitempty" yaml:"guid,omitempty" required:"false" doc:"Global unique ID"`
	Ip          string `json:"ip,omitempty" yaml:"ip,omitempty" required:"false" doc:"Filter by CNode IP"`
	Name        string `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:"Filter by CNode name"`
	State       string `json:"state,omitempty" yaml:"state,omitempty" required:"false" doc:"Filter by state"`
	VippoolId   int64  `json:"vippool_id,omitempty" yaml:"vippool_id,omitempty" required:"false" doc:""`
}

// -----------------------------------------------------
// REQUEST BODY
// -----------------------------------------------------

// CnodeRequestBody represents the request body for Cnode operations
// Generated from POST request body for resource: cnodes
type CnodeRequestBody struct {
	Ip        string `json:"ip,omitempty" yaml:"ip,omitempty" required:"true" doc:"The bond internal IP of the new CNode."`
	ClusterId int64  `json:"cluster_id,omitempty" yaml:"cluster_id,omitempty" required:"false" doc:""`
	Cores     int64  `json:"cores,omitempty" yaml:"cores,omitempty" required:"false" doc:"The number of cores the CNode will use"`
	DpuIps    string `json:"dpu_ips,omitempty" yaml:"dpu_ips,omitempty" required:"false" doc:"A list of IPv4 addresses and IP ranges."`
	Force     bool   `json:"force,omitempty" yaml:"force,omitempty" required:"false" doc:"Force adding the CNode"`
}

// -----------------------------------------------------
// MODEL
// -----------------------------------------------------

// CnodeModel represents the model data for Cnode operations
// Generated from schema: CNode
type CnodeModel struct {
	Name                       string `json:"name,omitempty" yaml:"name,omitempty" required:"true" doc:""`
	BiosVersion                string `json:"bios_version,omitempty" yaml:"bios_version,omitempty" required:"false" doc:"BIOS version"`
	BmcFwVersion               string `json:"bmc_fw_version,omitempty" yaml:"bmc_fw_version,omitempty" required:"false" doc:"BMC FW version"`
	BmcState                   string `json:"bmc_state,omitempty" yaml:"bmc_state,omitempty" required:"false" doc:"BMC State"`
	BmcStateReason             string `json:"bmc_state_reason,omitempty" yaml:"bmc_state_reason,omitempty" required:"false" doc:"BMC state reason"`
	BoxVendor                  string `json:"box_vendor,omitempty" yaml:"box_vendor,omitempty" required:"false" doc:"Parent box model description including hardware vendor"`
	Build                      string `json:"build,omitempty" yaml:"build,omitempty" required:"false" doc:""`
	Cbox                       string `json:"cbox,omitempty" yaml:"cbox,omitempty" required:"false" doc:"Parent CBox"`
	CboxId                     int64  `json:"cbox_id,omitempty" yaml:"cbox_id,omitempty" required:"false" doc:"Parent CBox ID"`
	Cluster                    string `json:"cluster,omitempty" yaml:"cluster,omitempty" required:"false" doc:"Parent Cluster"`
	ClusterId                  int64  `json:"cluster_id,omitempty" yaml:"cluster_id,omitempty" required:"false" doc:"Parent Cluster ID"`
	Cores                      int64  `json:"cores,omitempty" yaml:"cores,omitempty" required:"false" doc:"Number of CNode cores"`
	Cpld                       string `json:"cpld,omitempty" yaml:"cpld,omitempty" required:"false" doc:""`
	DataRdmaPort               int64  `json:"data_rdma_port,omitempty" yaml:"data_rdma_port,omitempty" required:"false" doc:"port for internal use"`
	DataTcpPort                int64  `json:"data_tcp_port,omitempty" yaml:"data_tcp_port,omitempty" required:"false" doc:"port for internal use"`
	DisplayName                string `json:"display_name,omitempty" yaml:"display_name,omitempty" required:"false" doc:""`
	DisplayState               string `json:"display_state,omitempty" yaml:"display_state,omitempty" required:"false" doc:"State"`
	Enabled                    bool   `json:"enabled,omitempty" yaml:"enabled,omitempty" required:"false" doc:"True if the CNode is enabled"`
	Guid                       string `json:"guid,omitempty" yaml:"guid,omitempty" required:"false" doc:"Global unique ID"`
	HostLabel                  string `json:"host_label,omitempty" yaml:"host_label,omitempty" required:"false" doc:"Host label, used to label container, e.g. 11.0.0.1-4000"`
	HostOpensmMaster           string `json:"host_opensm_master,omitempty" yaml:"host_opensm_master,omitempty" required:"false" doc:"If OpenSM master"`
	Hostname                   string `json:"hostname,omitempty" yaml:"hostname,omitempty" required:"false" doc:"Host Name"`
	Id                         int64  `json:"id,omitempty" yaml:"id,omitempty" required:"false" doc:"CNode ID"`
	Ip                         string `json:"ip,omitempty" yaml:"ip,omitempty" required:"false" doc:"The IP of the bond interface of ip1 and ip2."`
	Ip1                        string `json:"ip1,omitempty" yaml:"ip1,omitempty" required:"false" doc:"1st of two IP addresses on the cluster's internal network"`
	Ip2                        string `json:"ip2,omitempty" yaml:"ip2,omitempty" required:"false" doc:"2nd of two IP addresses on the cluster's internal network"`
	IpmiIp                     string `json:"ipmi_ip,omitempty" yaml:"ipmi_ip,omitempty" required:"false" doc:"IP of IPMI"`
	Ipv6                       string `json:"ipv6,omitempty" yaml:"ipv6,omitempty" required:"false" doc:"External IPv6 Address"`
	IsMgmt                     bool   `json:"is_mgmt,omitempty" yaml:"is_mgmt,omitempty" required:"false" doc:"True if the CNode is currently hosting VMS"`
	LedStatus                  string `json:"led_status,omitempty" yaml:"led_status,omitempty" required:"false" doc:"LED status"`
	MgmtIp                     string `json:"mgmt_ip,omitempty" yaml:"mgmt_ip,omitempty" required:"false" doc:"IP address for management access"`
	NewName                    string `json:"new_name,omitempty" yaml:"new_name,omitempty" required:"false" doc:"Name"`
	OpensmState                bool   `json:"opensm_state,omitempty" yaml:"opensm_state,omitempty" required:"false" doc:"opensm service state"`
	OsVersion                  string `json:"os_version,omitempty" yaml:"os_version,omitempty" required:"false" doc:"VAST OS version"`
	PlatformRdmaPort           int64  `json:"platform_rdma_port,omitempty" yaml:"platform_rdma_port,omitempty" required:"false" doc:"port for internal use"`
	PlatformTcpPort            int64  `json:"platform_tcp_port,omitempty" yaml:"platform_tcp_port,omitempty" required:"false" doc:"port for internal use"`
	Position                   string `json:"position,omitempty" yaml:"position,omitempty" required:"false" doc:"position of CNode in CBox"`
	Sn                         string `json:"sn,omitempty" yaml:"sn,omitempty" required:"false" doc:"The host serial number"`
	State                      string `json:"state,omitempty" yaml:"state,omitempty" required:"false" doc:"State, e.g. active"`
	Sync                       string `json:"sync,omitempty" yaml:"sync,omitempty" required:"false" doc:"Synchronization state with leader"`
	SyncTime                   string `json:"sync_time,omitempty" yaml:"sync_time,omitempty" required:"false" doc:"Synchronization time with leader"`
	Title                      string `json:"title,omitempty" yaml:"title,omitempty" required:"false" doc:""`
	TpmBootDevEncryptionStatus string `json:"tpm_boot_dev_encryption_status,omitempty" yaml:"tpm_boot_dev_encryption_status,omitempty" required:"false" doc:"Boot encryption status"`
	TurboBoost                 bool   `json:"turbo_boost,omitempty" yaml:"turbo_boost,omitempty" required:"false" doc:""`
	Url                        string `json:"url,omitempty" yaml:"url,omitempty" required:"false" doc:""`
	Vlan                       string `json:"vlan,omitempty" yaml:"vlan,omitempty" required:"false" doc:"VLAN ID"`
	VmsPreferred               bool   `json:"vms_preferred,omitempty" yaml:"vms_preferred,omitempty" required:"false" doc:"VMS preferred CNode"`
}

// -----------------------------------------------------
// RESOURCE METHODS
// -----------------------------------------------------

// Cnode represents a typed resource for cnode operations
type Cnode struct {
	Untyped *vast_client.VMSRest
}

// Get retrieves a single cnode with typed request/response
func (r *Cnode) Get(req *CnodeSearchParams) (*CnodeModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Cnodes.Get(params)
	if err != nil {
		return nil, err
	}

	var response CnodeModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// GetWithContext retrieves a single cnode with typed request/response using provided context
func (r *Cnode) GetWithContext(ctx context.Context, req *CnodeSearchParams) (*CnodeModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Cnodes.GetWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response CnodeModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// GetById retrieves a single cnode by ID
func (r *Cnode) GetById(id any) (*CnodeModel, error) {
	record, err := r.Untyped.Cnodes.GetById(id)
	if err != nil {
		return nil, err
	}

	var response CnodeModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// GetByIdWithContext retrieves a single cnode by ID using provided context
func (r *Cnode) GetByIdWithContext(ctx context.Context, id any) (*CnodeModel, error) {
	record, err := r.Untyped.Cnodes.GetByIdWithContext(ctx, id)
	if err != nil {
		return nil, err
	}

	var response CnodeModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// List retrieves multiple cnodes with typed request/response
func (r *Cnode) List(req *CnodeSearchParams) ([]*CnodeModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.Cnodes.List(params)
	if err != nil {
		return nil, err
	}

	var response []*CnodeModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// ListWithContext retrieves multiple cnodes with typed request/response using provided context
func (r *Cnode) ListWithContext(ctx context.Context, req *CnodeSearchParams) ([]*CnodeModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.Cnodes.ListWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response []*CnodeModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// Create creates a new cnode with typed request/response
func (r *Cnode) Create(req *CnodeRequestBody) (*CnodeModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Cnodes.Create(params)
	if err != nil {
		return nil, err
	}

	var response CnodeModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// CreateWithContext creates a new cnode with typed request/response using provided context
func (r *Cnode) CreateWithContext(ctx context.Context, req *CnodeRequestBody) (*CnodeModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Cnodes.CreateWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response CnodeModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Update updates an existing cnode with typed request/response
func (r *Cnode) Update(id any, req *CnodeRequestBody) (*CnodeModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Cnodes.Update(id, params)
	if err != nil {
		return nil, err
	}

	var response CnodeModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// UpdateWithContext updates an existing cnode with typed request/response using provided context
func (r *Cnode) UpdateWithContext(ctx context.Context, id any, req *CnodeRequestBody) (*CnodeModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Cnodes.UpdateWithContext(ctx, id, params)
	if err != nil {
		return nil, err
	}

	var response CnodeModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Delete deletes a cnode with search parameters
func (r *Cnode) Delete(req *CnodeSearchParams) error {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return err
	}
	_, err = r.Untyped.Cnodes.Delete(params, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteWithContext deletes a cnode with search parameters using provided context
func (r *Cnode) DeleteWithContext(ctx context.Context, req *CnodeSearchParams) error {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return err
	}
	_, err = r.Untyped.Cnodes.DeleteWithContext(ctx, params, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteById deletes a cnode by ID
func (r *Cnode) DeleteById(id any) error {
	_, err := r.Untyped.Cnodes.DeleteById(id, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteByIdWithContext deletes a cnode by ID using provided context
func (r *Cnode) DeleteByIdWithContext(ctx context.Context, id any) error {
	_, err := r.Untyped.Cnodes.DeleteByIdWithContext(ctx, id, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// Ensure ensures a cnode exists with typed response
func (r *Cnode) Ensure(searchParams *CnodeSearchParams, body *CnodeRequestBody) (*CnodeModel, error) {
	searchParamsConverted, err := vast_client.NewParamsFromStruct(searchParams)
	if err != nil {
		return nil, err
	}
	bodyConverted, err := vast_client.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Cnodes.Ensure(searchParamsConverted, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response CnodeModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// EnsureWithContext ensures a cnode exists with typed response using provided context
func (r *Cnode) EnsureWithContext(ctx context.Context, searchParams *CnodeSearchParams, body *CnodeRequestBody) (*CnodeModel, error) {
	searchParamsConverted, err := vast_client.NewParamsFromStruct(searchParams)
	if err != nil {
		return nil, err
	}
	bodyConverted, err := vast_client.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Cnodes.EnsureWithContext(ctx, searchParamsConverted, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response CnodeModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// EnsureByName ensures a cnode exists by name with typed response
func (r *Cnode) EnsureByName(name string, body *CnodeRequestBody) (*CnodeModel, error) {
	bodyConverted, err := vast_client.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Cnodes.EnsureByName(name, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response CnodeModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// EnsureByNameWithContext ensures a cnode exists by name with typed response using provided context
func (r *Cnode) EnsureByNameWithContext(ctx context.Context, name string, body *CnodeRequestBody) (*CnodeModel, error) {
	bodyConverted, err := vast_client.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Cnodes.EnsureByNameWithContext(ctx, name, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response CnodeModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Exists checks if a cnode exists
func (r *Cnode) Exists(req *CnodeSearchParams) (bool, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.Cnodes.Exists(params)
}

// ExistsWithContext checks if a cnode exists using provided context
func (r *Cnode) ExistsWithContext(ctx context.Context, req *CnodeSearchParams) (bool, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.Cnodes.ExistsWithContext(ctx, params)
}

// MustExists checks if a cnode exists and panics if not
func (r *Cnode) MustExists(req *CnodeSearchParams) bool {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.Cnodes.MustExists(params)
}

// MustExistsWithContext checks if a cnode exists and panics if not using provided context
func (r *Cnode) MustExistsWithContext(ctx context.Context, req *CnodeSearchParams) bool {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.Cnodes.MustExistsWithContext(ctx, params)
}

// -----------------------------------------------------
// RENDERABLE INTERFACE METHODS
// -----------------------------------------------------

// PrettyTable returns a formatted table representation of the CnodeModel
func (m *CnodeModel) PrettyTable() string {
	return m.toRecord().PrettyTable()
}

// PrettyJson returns a JSON representation of the CnodeModel
func (m *CnodeModel) PrettyJson(indent ...string) string {
	return m.toRecord().PrettyJson(indent...)
}

// toRecord converts the CnodeModel to a Record (map[string]any) with @resourceType
func (m *CnodeModel) toRecord() vast_client.Record {
	// Convert struct to map using JSON marshaling
	jsonBytes, err := json.Marshal(m)
	if err != nil {
		return vast_client.Record{"error": fmt.Sprintf("failed to marshal struct: %v", err)}
	}

	var record vast_client.Record
	if err := json.Unmarshal(jsonBytes, &record); err != nil {
		return vast_client.Record{"error": fmt.Sprintf("failed to unmarshal to record: %v", err)}
	}

	// Add resource type using reflection
	record["@resourceType"] = reflect.TypeOf(*m).Name()

	return record
}
