// Code generated by generate-typed-resources. DO NOT EDIT.

package typed

import (
	"context"
	"encoding/json"
	"fmt"
	"reflect"

	vast_client "github.com/vast-data/go-vast-client"
)

// -----------------------------------------------------
// SEARCH PARAMS
// -----------------------------------------------------

// RealmSearchParams represents the search parameters for Realm operations
// Generated from GET query parameters for resource: realms
type RealmSearchParams struct {
	Guid     string `json:"guid,omitempty" yaml:"guid,omitempty" required:"false" doc:""`
	Name     string `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:"The name of the realm"`
	TenantId int64  `json:"tenant_id,omitempty" yaml:"tenant_id,omitempty" required:"false" doc:"Tenant ID"`
}

// -----------------------------------------------------
// REQUEST BODY
// -----------------------------------------------------

// RealmRequestBody represents the request body for Realm operations
// Generated from POST request body for resource: realms
type RealmRequestBody struct {
	Name        string    `json:"name,omitempty" yaml:"name,omitempty" required:"true" doc:"Realm name"`
	ObjectTypes *[]string `json:"object_types,omitempty" yaml:"object_types,omitempty" required:"false" doc:""`
	TenantId    int64     `json:"tenant_id,omitempty" yaml:"tenant_id,omitempty" required:"false" doc:"Tenant ID"`
}

// -----------------------------------------------------
// MODEL
// -----------------------------------------------------

// RealmModel represents the model data for Realm operations
// Generated from schema: Realm
type RealmModel struct {
	Guid        string    `json:"guid,omitempty" yaml:"guid,omitempty" required:"false" doc:""`
	Id          int64     `json:"id,omitempty" yaml:"id,omitempty" required:"false" doc:""`
	Name        string    `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:"The name of the realm"`
	ObjectTypes *[]string `json:"object_types,omitempty" yaml:"object_types,omitempty" required:"false" doc:""`
	TenantId    int64     `json:"tenant_id,omitempty" yaml:"tenant_id,omitempty" required:"false" doc:"Tenant ID"`
}

// -----------------------------------------------------
// RESOURCE METHODS
// -----------------------------------------------------

// Realm represents a typed resource for realm operations
type Realm struct {
	Untyped *vast_client.VMSRest
}

// Get retrieves a single realm with typed request/response
func (r *Realm) Get(req *RealmSearchParams) (*RealmModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Realms.Get(params)
	if err != nil {
		return nil, err
	}

	var response RealmModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// GetWithContext retrieves a single realm with typed request/response using provided context
func (r *Realm) GetWithContext(ctx context.Context, req *RealmSearchParams) (*RealmModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Realms.GetWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response RealmModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// GetById retrieves a single realm by ID
func (r *Realm) GetById(id any) (*RealmModel, error) {
	record, err := r.Untyped.Realms.GetById(id)
	if err != nil {
		return nil, err
	}

	var response RealmModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// GetByIdWithContext retrieves a single realm by ID using provided context
func (r *Realm) GetByIdWithContext(ctx context.Context, id any) (*RealmModel, error) {
	record, err := r.Untyped.Realms.GetByIdWithContext(ctx, id)
	if err != nil {
		return nil, err
	}

	var response RealmModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// List retrieves multiple realms with typed request/response
func (r *Realm) List(req *RealmSearchParams) ([]*RealmModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.Realms.List(params)
	if err != nil {
		return nil, err
	}

	var response []*RealmModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// ListWithContext retrieves multiple realms with typed request/response using provided context
func (r *Realm) ListWithContext(ctx context.Context, req *RealmSearchParams) ([]*RealmModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.Realms.ListWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response []*RealmModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// Create creates a new realm with typed request/response
func (r *Realm) Create(req *RealmRequestBody) (*RealmModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Realms.Create(params)
	if err != nil {
		return nil, err
	}

	var response RealmModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// CreateWithContext creates a new realm with typed request/response using provided context
func (r *Realm) CreateWithContext(ctx context.Context, req *RealmRequestBody) (*RealmModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Realms.CreateWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response RealmModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Update updates an existing realm with typed request/response
func (r *Realm) Update(id any, req *RealmRequestBody) (*RealmModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Realms.Update(id, params)
	if err != nil {
		return nil, err
	}

	var response RealmModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// UpdateWithContext updates an existing realm with typed request/response using provided context
func (r *Realm) UpdateWithContext(ctx context.Context, id any, req *RealmRequestBody) (*RealmModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Realms.UpdateWithContext(ctx, id, params)
	if err != nil {
		return nil, err
	}

	var response RealmModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Delete deletes a realm with search parameters
func (r *Realm) Delete(req *RealmSearchParams) error {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return err
	}
	_, err = r.Untyped.Realms.Delete(params, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteWithContext deletes a realm with search parameters using provided context
func (r *Realm) DeleteWithContext(ctx context.Context, req *RealmSearchParams) error {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return err
	}
	_, err = r.Untyped.Realms.DeleteWithContext(ctx, params, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteById deletes a realm by ID
func (r *Realm) DeleteById(id any) error {
	_, err := r.Untyped.Realms.DeleteById(id, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteByIdWithContext deletes a realm by ID using provided context
func (r *Realm) DeleteByIdWithContext(ctx context.Context, id any) error {
	_, err := r.Untyped.Realms.DeleteByIdWithContext(ctx, id, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// Ensure ensures a realm exists with typed response
func (r *Realm) Ensure(searchParams *RealmSearchParams, body *RealmRequestBody) (*RealmModel, error) {
	searchParamsConverted, err := vast_client.NewParamsFromStruct(searchParams)
	if err != nil {
		return nil, err
	}
	bodyConverted, err := vast_client.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Realms.Ensure(searchParamsConverted, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response RealmModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// EnsureWithContext ensures a realm exists with typed response using provided context
func (r *Realm) EnsureWithContext(ctx context.Context, searchParams *RealmSearchParams, body *RealmRequestBody) (*RealmModel, error) {
	searchParamsConverted, err := vast_client.NewParamsFromStruct(searchParams)
	if err != nil {
		return nil, err
	}
	bodyConverted, err := vast_client.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Realms.EnsureWithContext(ctx, searchParamsConverted, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response RealmModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// EnsureByName ensures a realm exists by name with typed response
func (r *Realm) EnsureByName(name string, body *RealmRequestBody) (*RealmModel, error) {
	bodyConverted, err := vast_client.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Realms.EnsureByName(name, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response RealmModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// EnsureByNameWithContext ensures a realm exists by name with typed response using provided context
func (r *Realm) EnsureByNameWithContext(ctx context.Context, name string, body *RealmRequestBody) (*RealmModel, error) {
	bodyConverted, err := vast_client.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Realms.EnsureByNameWithContext(ctx, name, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response RealmModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Exists checks if a realm exists
func (r *Realm) Exists(req *RealmSearchParams) (bool, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.Realms.Exists(params)
}

// ExistsWithContext checks if a realm exists using provided context
func (r *Realm) ExistsWithContext(ctx context.Context, req *RealmSearchParams) (bool, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.Realms.ExistsWithContext(ctx, params)
}

// MustExists checks if a realm exists and panics if not
func (r *Realm) MustExists(req *RealmSearchParams) bool {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.Realms.MustExists(params)
}

// MustExistsWithContext checks if a realm exists and panics if not using provided context
func (r *Realm) MustExistsWithContext(ctx context.Context, req *RealmSearchParams) bool {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.Realms.MustExistsWithContext(ctx, params)
}

// -----------------------------------------------------
// RENDERABLE INTERFACE METHODS
// -----------------------------------------------------

// PrettyTable returns a formatted table representation of the RealmModel
func (m *RealmModel) PrettyTable() string {
	return m.toRecord().PrettyTable()
}

// PrettyJson returns a JSON representation of the RealmModel
func (m *RealmModel) PrettyJson(indent ...string) string {
	return m.toRecord().PrettyJson(indent...)
}

// toRecord converts the RealmModel to a Record (map[string]any) with @resourceType
func (m *RealmModel) toRecord() vast_client.Record {
	// Convert struct to map using JSON marshaling
	jsonBytes, err := json.Marshal(m)
	if err != nil {
		return vast_client.Record{"error": fmt.Sprintf("failed to marshal struct: %v", err)}
	}

	var record vast_client.Record
	if err := json.Unmarshal(jsonBytes, &record); err != nil {
		return vast_client.Record{"error": fmt.Sprintf("failed to unmarshal to record: %v", err)}
	}

	// Add resource type using reflection
	record["@resourceType"] = reflect.TypeOf(*m).Name()

	return record
}
