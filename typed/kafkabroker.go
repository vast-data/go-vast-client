// Code generated by generate-typed-resources. DO NOT EDIT.

package typed

import (
	"context"
	"encoding/json"
	"fmt"
	"reflect"

	vast_client "github.com/vast-data/go-vast-client"
)

// -----------------------------------------------------
// SEARCH PARAMS
// -----------------------------------------------------

// KafkaBrokerSearchParams represents the search parameters for KafkaBroker operations
// Generated from GET query parameters for resource: kafkabrokers
type KafkaBrokerSearchParams struct {
	Name     string `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:"Name of the Kafka broker configuration"`
	TenantId int64  `json:"tenant_id,omitempty" yaml:"tenant_id,omitempty" required:"false" doc:"Tenant ID. If missing, accessed by all tenants"`
}

// -----------------------------------------------------
// REQUEST BODY
// -----------------------------------------------------

// KafkabrokerRequestBody_AddressesItem represents a nested type for request body
type KafkabrokerRequestBody_AddressesItem struct {
	Host string `json:"host,omitempty" yaml:"host,omitempty" required:"false" doc:"IP or hostname of a Kafka broker server"`
	Port int64  `json:"port,omitempty" yaml:"port,omitempty" required:"false" doc:"Port of a Kafka broker server"`
}

// KafkaBrokerRequestBody represents the request body for KafkaBroker operations
// Generated from POST request body for resource: kafkabrokers
type KafkaBrokerRequestBody struct {
	Addresses *[]KafkabrokerRequestBody_AddressesItem `json:"addresses,omitempty" yaml:"addresses,omitempty" required:"true" doc:"List of Kafka server addresses"`
	Name      string                                  `json:"name,omitempty" yaml:"name,omitempty" required:"true" doc:"Name of the Kafka broker configuration"`
	TenantId  int64                                   `json:"tenant_id,omitempty" yaml:"tenant_id,omitempty" required:"false" doc:"Tenant ID. If missing, accessed by all tenants"`
}

// -----------------------------------------------------
// MODEL
// -----------------------------------------------------

// KafkaBrokerConfigModel_AddressesItem represents a nested type for model
type KafkaBrokerConfigModel_AddressesItem struct {
	Host string `json:"host,omitempty" yaml:"host,omitempty" required:"false" doc:"IP or hostname of a Kafka broker server"`
	Port int64  `json:"port,omitempty" yaml:"port,omitempty" required:"false" doc:"Port of a Kafka broker server"`
}

// KafkaBrokerModel represents the model data for KafkaBroker operations
// Generated from schema: KafkaBrokerConfig
type KafkaBrokerModel struct {
	Addresses *[]KafkaBrokerConfigModel_AddressesItem `json:"addresses,omitempty" yaml:"addresses,omitempty" required:"false" doc:"List of Kafka server addresses"`
	Id        int64                                   `json:"id,omitempty" yaml:"id,omitempty" required:"false" doc:"Kafka broker configuration ID"`
	Name      string                                  `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:"Name of the Kafka broker configuration"`
	TenantId  int64                                   `json:"tenant_id,omitempty" yaml:"tenant_id,omitempty" required:"false" doc:"Tenant ID. If missing, accessed by all tenants"`
}

// -----------------------------------------------------
// RESOURCE METHODS
// -----------------------------------------------------

// KafkaBroker represents a typed resource for kafkabroker operations
type KafkaBroker struct {
	Untyped *vast_client.VMSRest
}

// Get retrieves a single kafkabroker with typed request/response
func (r *KafkaBroker) Get(req *KafkaBrokerSearchParams) (*KafkaBrokerModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.KafkaBrokers.Get(params)
	if err != nil {
		return nil, err
	}

	var response KafkaBrokerModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// GetWithContext retrieves a single kafkabroker with typed request/response using provided context
func (r *KafkaBroker) GetWithContext(ctx context.Context, req *KafkaBrokerSearchParams) (*KafkaBrokerModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.KafkaBrokers.GetWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response KafkaBrokerModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// GetById retrieves a single kafkabroker by ID
func (r *KafkaBroker) GetById(id any) (*KafkaBrokerModel, error) {
	record, err := r.Untyped.KafkaBrokers.GetById(id)
	if err != nil {
		return nil, err
	}

	var response KafkaBrokerModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// GetByIdWithContext retrieves a single kafkabroker by ID using provided context
func (r *KafkaBroker) GetByIdWithContext(ctx context.Context, id any) (*KafkaBrokerModel, error) {
	record, err := r.Untyped.KafkaBrokers.GetByIdWithContext(ctx, id)
	if err != nil {
		return nil, err
	}

	var response KafkaBrokerModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// List retrieves multiple kafkabrokers with typed request/response
func (r *KafkaBroker) List(req *KafkaBrokerSearchParams) ([]*KafkaBrokerModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.KafkaBrokers.List(params)
	if err != nil {
		return nil, err
	}

	var response []*KafkaBrokerModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// ListWithContext retrieves multiple kafkabrokers with typed request/response using provided context
func (r *KafkaBroker) ListWithContext(ctx context.Context, req *KafkaBrokerSearchParams) ([]*KafkaBrokerModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.KafkaBrokers.ListWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response []*KafkaBrokerModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// Create creates a new kafkabroker with typed request/response
func (r *KafkaBroker) Create(req *KafkaBrokerRequestBody) (*KafkaBrokerModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.KafkaBrokers.Create(params)
	if err != nil {
		return nil, err
	}

	var response KafkaBrokerModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// CreateWithContext creates a new kafkabroker with typed request/response using provided context
func (r *KafkaBroker) CreateWithContext(ctx context.Context, req *KafkaBrokerRequestBody) (*KafkaBrokerModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.KafkaBrokers.CreateWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response KafkaBrokerModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Update updates an existing kafkabroker with typed request/response
func (r *KafkaBroker) Update(id any, req *KafkaBrokerRequestBody) (*KafkaBrokerModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.KafkaBrokers.Update(id, params)
	if err != nil {
		return nil, err
	}

	var response KafkaBrokerModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// UpdateWithContext updates an existing kafkabroker with typed request/response using provided context
func (r *KafkaBroker) UpdateWithContext(ctx context.Context, id any, req *KafkaBrokerRequestBody) (*KafkaBrokerModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.KafkaBrokers.UpdateWithContext(ctx, id, params)
	if err != nil {
		return nil, err
	}

	var response KafkaBrokerModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Delete deletes a kafkabroker with search parameters
func (r *KafkaBroker) Delete(req *KafkaBrokerSearchParams) error {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return err
	}
	_, err = r.Untyped.KafkaBrokers.Delete(params, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteWithContext deletes a kafkabroker with search parameters using provided context
func (r *KafkaBroker) DeleteWithContext(ctx context.Context, req *KafkaBrokerSearchParams) error {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return err
	}
	_, err = r.Untyped.KafkaBrokers.DeleteWithContext(ctx, params, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteById deletes a kafkabroker by ID
func (r *KafkaBroker) DeleteById(id any) error {
	_, err := r.Untyped.KafkaBrokers.DeleteById(id, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteByIdWithContext deletes a kafkabroker by ID using provided context
func (r *KafkaBroker) DeleteByIdWithContext(ctx context.Context, id any) error {
	_, err := r.Untyped.KafkaBrokers.DeleteByIdWithContext(ctx, id, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// Ensure ensures a kafkabroker exists with typed response
func (r *KafkaBroker) Ensure(searchParams *KafkaBrokerSearchParams, body *KafkaBrokerRequestBody) (*KafkaBrokerModel, error) {
	searchParamsConverted, err := vast_client.NewParamsFromStruct(searchParams)
	if err != nil {
		return nil, err
	}
	bodyConverted, err := vast_client.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.KafkaBrokers.Ensure(searchParamsConverted, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response KafkaBrokerModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// EnsureWithContext ensures a kafkabroker exists with typed response using provided context
func (r *KafkaBroker) EnsureWithContext(ctx context.Context, searchParams *KafkaBrokerSearchParams, body *KafkaBrokerRequestBody) (*KafkaBrokerModel, error) {
	searchParamsConverted, err := vast_client.NewParamsFromStruct(searchParams)
	if err != nil {
		return nil, err
	}
	bodyConverted, err := vast_client.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.KafkaBrokers.EnsureWithContext(ctx, searchParamsConverted, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response KafkaBrokerModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// EnsureByName ensures a kafkabroker exists by name with typed response
func (r *KafkaBroker) EnsureByName(name string, body *KafkaBrokerRequestBody) (*KafkaBrokerModel, error) {
	bodyConverted, err := vast_client.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.KafkaBrokers.EnsureByName(name, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response KafkaBrokerModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// EnsureByNameWithContext ensures a kafkabroker exists by name with typed response using provided context
func (r *KafkaBroker) EnsureByNameWithContext(ctx context.Context, name string, body *KafkaBrokerRequestBody) (*KafkaBrokerModel, error) {
	bodyConverted, err := vast_client.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.KafkaBrokers.EnsureByNameWithContext(ctx, name, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response KafkaBrokerModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Exists checks if a kafkabroker exists
func (r *KafkaBroker) Exists(req *KafkaBrokerSearchParams) (bool, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.KafkaBrokers.Exists(params)
}

// ExistsWithContext checks if a kafkabroker exists using provided context
func (r *KafkaBroker) ExistsWithContext(ctx context.Context, req *KafkaBrokerSearchParams) (bool, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.KafkaBrokers.ExistsWithContext(ctx, params)
}

// MustExists checks if a kafkabroker exists and panics if not
func (r *KafkaBroker) MustExists(req *KafkaBrokerSearchParams) bool {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.KafkaBrokers.MustExists(params)
}

// MustExistsWithContext checks if a kafkabroker exists and panics if not using provided context
func (r *KafkaBroker) MustExistsWithContext(ctx context.Context, req *KafkaBrokerSearchParams) bool {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.KafkaBrokers.MustExistsWithContext(ctx, params)
}

// -----------------------------------------------------
// RENDERABLE INTERFACE METHODS
// -----------------------------------------------------

// PrettyTable returns a formatted table representation of the KafkaBrokerModel
func (m *KafkaBrokerModel) PrettyTable() string {
	return m.toRecord().PrettyTable()
}

// PrettyJson returns a JSON representation of the KafkaBrokerModel
func (m *KafkaBrokerModel) PrettyJson(indent ...string) string {
	return m.toRecord().PrettyJson(indent...)
}

// toRecord converts the KafkaBrokerModel to a Record (map[string]any) with @resourceType
func (m *KafkaBrokerModel) toRecord() vast_client.Record {
	// Convert struct to map using JSON marshaling
	jsonBytes, err := json.Marshal(m)
	if err != nil {
		return vast_client.Record{"error": fmt.Sprintf("failed to marshal struct: %v", err)}
	}

	var record vast_client.Record
	if err := json.Unmarshal(jsonBytes, &record); err != nil {
		return vast_client.Record{"error": fmt.Sprintf("failed to unmarshal to record: %v", err)}
	}

	// Add resource type using reflection
	record["@resourceType"] = reflect.TypeOf(*m).Name()

	return record
}
