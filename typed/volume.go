// Code generated by generate-typed-resources. DO NOT EDIT.

package typed

import (
	"context"
	"encoding/json"
	"fmt"
	"reflect"

	vast_client "github.com/vast-data/go-vast-client"
)

// -----------------------------------------------------
// SEARCH PARAMS
// -----------------------------------------------------

// VolumeSearchParams represents the search parameters for Volume operations
// Generated from GET query parameters for resource: volumes
type VolumeSearchParams struct {
	Name string `json:"name,omitempty" yaml:"name,omitempty" required:"true" doc:"The path to the volume relative to the view path."`
}

// -----------------------------------------------------
// REQUEST BODY
// -----------------------------------------------------

// VolumeRequestBody represents the request body for Volume operations
// Generated from POST request body for resource: volumes
type VolumeRequestBody struct {
	Name   string `json:"name,omitempty" yaml:"name,omitempty" required:"true" doc:"The path to the volume relative to the subsystem directory. The path should not begin with a slash (/). You can include slashes inside the path to indicate a hierarchy of directories. The path will be created under the subsystem path for the volume. Any directory hierarchy indicated by slashes will be created accordingly. For example, if you specify b/c/d the directories <subsystem_path>/b and <subsystem_path>b/c will be created if they do not yet exist, as well as the new directory <subsystem_path>/b/c/d."`
	Size   int64  `json:"size,omitempty" yaml:"size,omitempty" required:"true" doc:"The volume size, in bytes."`
	ViewId int64  `json:"view_id,omitempty" yaml:"view_id,omitempty" required:"true" doc:"The ID of the subsystem view on which to create the volume."`
}

// -----------------------------------------------------
// MODEL
// -----------------------------------------------------

// VolumeModel represents the model data for Volume operations
// Generated from schema: Volume
type VolumeModel struct {
	Capacity                int64  `json:"capacity,omitempty" yaml:"capacity,omitempty" required:"true" doc:"The amount of data written to the volume."`
	Id                      int64  `json:"id,omitempty" yaml:"id,omitempty" required:"true" doc:"Volume ID"`
	Name                    string `json:"name,omitempty" yaml:"name,omitempty" required:"true" doc:"The path to the volume relative to the view path."`
	Size                    int64  `json:"size,omitempty" yaml:"size,omitempty" required:"true" doc:"The size of the volume, (in GB)"`
	ViewId                  int64  `json:"view_id,omitempty" yaml:"view_id,omitempty" required:"true" doc:"Id of the block subsystem view to which the volume belongs."`
	MappedBlockHostCount    int64  `json:"mapped_block_host_count,omitempty" yaml:"mapped_block_host_count,omitempty" required:"false" doc:"The number of block hosts mapped to the volume."`
	MappedBlockHostsPreview string `json:"mapped_block_hosts_preview,omitempty" yaml:"mapped_block_hosts_preview,omitempty" required:"false" doc:"Mapped block hosts preview."`
	NamespaceId             int64  `json:"namespace_id,omitempty" yaml:"namespace_id,omitempty" required:"false" doc:"Available for mapped volumes, the namespace ID as used by hosts to search the volume within the subsystem. Each namespace ID is unique within the subsystem. If a volume snapshot is mapped to any host(s), a snapshot volume is created with its own namespace ID."`
	Nguid                   string `json:"nguid,omitempty" yaml:"nguid,omitempty" required:"false" doc:"The NGUID used by block hosts to access the volume."`
	TenantName              string `json:"tenant_name,omitempty" yaml:"tenant_name,omitempty" required:"false" doc:"The name of the tenant to which the volume belongs."`
	Uuid                    string `json:"uuid,omitempty" yaml:"uuid,omitempty" required:"false" doc:"The UUID, used by hosts to search the volume in the subsystem."`
}

// -----------------------------------------------------
// RESOURCE METHODS
// -----------------------------------------------------

// Volume represents a typed resource for volume operations
type Volume struct {
	Untyped *vast_client.VMSRest
}

// Get retrieves a single volume with typed request/response
func (r *Volume) Get(req *VolumeSearchParams) (*VolumeModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Volumes.Get(params)
	if err != nil {
		return nil, err
	}

	var response VolumeModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// GetWithContext retrieves a single volume with typed request/response using provided context
func (r *Volume) GetWithContext(ctx context.Context, req *VolumeSearchParams) (*VolumeModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Volumes.GetWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response VolumeModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// GetById retrieves a single volume by ID
func (r *Volume) GetById(id any) (*VolumeModel, error) {
	record, err := r.Untyped.Volumes.GetById(id)
	if err != nil {
		return nil, err
	}

	var response VolumeModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// GetByIdWithContext retrieves a single volume by ID using provided context
func (r *Volume) GetByIdWithContext(ctx context.Context, id any) (*VolumeModel, error) {
	record, err := r.Untyped.Volumes.GetByIdWithContext(ctx, id)
	if err != nil {
		return nil, err
	}

	var response VolumeModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// List retrieves multiple volumes with typed request/response
func (r *Volume) List(req *VolumeSearchParams) ([]*VolumeModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.Volumes.List(params)
	if err != nil {
		return nil, err
	}

	var response []*VolumeModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// ListWithContext retrieves multiple volumes with typed request/response using provided context
func (r *Volume) ListWithContext(ctx context.Context, req *VolumeSearchParams) ([]*VolumeModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.Volumes.ListWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response []*VolumeModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// Create creates a new volume with typed request/response
func (r *Volume) Create(req *VolumeRequestBody) (*VolumeModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Volumes.Create(params)
	if err != nil {
		return nil, err
	}

	var response VolumeModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// CreateWithContext creates a new volume with typed request/response using provided context
func (r *Volume) CreateWithContext(ctx context.Context, req *VolumeRequestBody) (*VolumeModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Volumes.CreateWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response VolumeModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Update updates an existing volume with typed request/response
func (r *Volume) Update(id any, req *VolumeRequestBody) (*VolumeModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Volumes.Update(id, params)
	if err != nil {
		return nil, err
	}

	var response VolumeModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// UpdateWithContext updates an existing volume with typed request/response using provided context
func (r *Volume) UpdateWithContext(ctx context.Context, id any, req *VolumeRequestBody) (*VolumeModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Volumes.UpdateWithContext(ctx, id, params)
	if err != nil {
		return nil, err
	}

	var response VolumeModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Delete deletes a volume with search parameters
func (r *Volume) Delete(req *VolumeSearchParams) error {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return err
	}
	_, err = r.Untyped.Volumes.Delete(params, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteWithContext deletes a volume with search parameters using provided context
func (r *Volume) DeleteWithContext(ctx context.Context, req *VolumeSearchParams) error {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return err
	}
	_, err = r.Untyped.Volumes.DeleteWithContext(ctx, params, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteById deletes a volume by ID
func (r *Volume) DeleteById(id any) error {
	_, err := r.Untyped.Volumes.DeleteById(id, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteByIdWithContext deletes a volume by ID using provided context
func (r *Volume) DeleteByIdWithContext(ctx context.Context, id any) error {
	_, err := r.Untyped.Volumes.DeleteByIdWithContext(ctx, id, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// Ensure ensures a volume exists with typed response
func (r *Volume) Ensure(searchParams *VolumeSearchParams, body *VolumeRequestBody) (*VolumeModel, error) {
	searchParamsConverted, err := vast_client.NewParamsFromStruct(searchParams)
	if err != nil {
		return nil, err
	}
	bodyConverted, err := vast_client.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Volumes.Ensure(searchParamsConverted, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response VolumeModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// EnsureWithContext ensures a volume exists with typed response using provided context
func (r *Volume) EnsureWithContext(ctx context.Context, searchParams *VolumeSearchParams, body *VolumeRequestBody) (*VolumeModel, error) {
	searchParamsConverted, err := vast_client.NewParamsFromStruct(searchParams)
	if err != nil {
		return nil, err
	}
	bodyConverted, err := vast_client.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Volumes.EnsureWithContext(ctx, searchParamsConverted, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response VolumeModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// EnsureByName ensures a volume exists by name with typed response
func (r *Volume) EnsureByName(name string, body *VolumeRequestBody) (*VolumeModel, error) {
	bodyConverted, err := vast_client.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Volumes.EnsureByName(name, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response VolumeModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// EnsureByNameWithContext ensures a volume exists by name with typed response using provided context
func (r *Volume) EnsureByNameWithContext(ctx context.Context, name string, body *VolumeRequestBody) (*VolumeModel, error) {
	bodyConverted, err := vast_client.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Volumes.EnsureByNameWithContext(ctx, name, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response VolumeModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Exists checks if a volume exists
func (r *Volume) Exists(req *VolumeSearchParams) (bool, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.Volumes.Exists(params)
}

// ExistsWithContext checks if a volume exists using provided context
func (r *Volume) ExistsWithContext(ctx context.Context, req *VolumeSearchParams) (bool, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.Volumes.ExistsWithContext(ctx, params)
}

// MustExists checks if a volume exists and panics if not
func (r *Volume) MustExists(req *VolumeSearchParams) bool {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.Volumes.MustExists(params)
}

// MustExistsWithContext checks if a volume exists and panics if not using provided context
func (r *Volume) MustExistsWithContext(ctx context.Context, req *VolumeSearchParams) bool {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.Volumes.MustExistsWithContext(ctx, params)
}

// -----------------------------------------------------
// RENDERABLE INTERFACE METHODS
// -----------------------------------------------------

// PrettyTable returns a formatted table representation of the VolumeModel
func (m *VolumeModel) PrettyTable() string {
	return m.toRecord().PrettyTable()
}

// PrettyJson returns a JSON representation of the VolumeModel
func (m *VolumeModel) PrettyJson(indent ...string) string {
	return m.toRecord().PrettyJson(indent...)
}

// toRecord converts the VolumeModel to a Record (map[string]any) with @resourceType
func (m *VolumeModel) toRecord() vast_client.Record {
	// Convert struct to map using JSON marshaling
	jsonBytes, err := json.Marshal(m)
	if err != nil {
		return vast_client.Record{"error": fmt.Sprintf("failed to marshal struct: %v", err)}
	}

	var record vast_client.Record
	if err := json.Unmarshal(jsonBytes, &record); err != nil {
		return vast_client.Record{"error": fmt.Sprintf("failed to unmarshal to record: %v", err)}
	}

	// Add resource type using reflection
	record["@resourceType"] = reflect.TypeOf(*m).Name()

	return record
}
