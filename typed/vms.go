// Code generated by generate-typed-resources. DO NOT EDIT.

package typed

import (
	"context"
	"encoding/json"
	"fmt"
	"reflect"

	vast_client "github.com/vast-data/go-vast-client"
)

// -----------------------------------------------------
// SEARCH PARAMS
// -----------------------------------------------------

// VmsSearchParams represents the search parameters for Vms operations
// Generated from GET query parameters for resource: vmss
type VmsSearchParams struct {
	Name string `json:"name,omitempty" yaml:"name,omitempty" required:"true" doc:"The name of the VMS"`
	Guid string `json:"guid,omitempty" yaml:"guid,omitempty" required:"false" doc:""`
}

// -----------------------------------------------------
// MODEL
// -----------------------------------------------------

// VmsModel represents the model data for Vms operations
// Generated from schema: Vms
type VmsModel struct {
	Name                         string  `json:"name,omitempty" yaml:"name,omitempty" required:"true" doc:"The name of the VMS"`
	AccessTokenLifetime          string  `json:"access_token_lifetime,omitempty" yaml:"access_token_lifetime,omitempty" required:"false" doc:"Validity duration for JWT access tokens. Specify as [DD [HH:[MM:]]]ss"`
	AutoLogoutTimeout            int64   `json:"auto_logout_timeout,omitempty" yaml:"auto_logout_timeout,omitempty" required:"false" doc:"Inactivity period for auto logout"`
	Build                        string  `json:"build,omitempty" yaml:"build,omitempty" required:"false" doc:"The current VMS build running on the cluster."`
	CapacityBase10               bool    `json:"capacity_base_10,omitempty" yaml:"capacity_base_10,omitempty" required:"false" doc:"True if capacity properties are formatted in base 10. False if capacity properties are formatted in base 2"`
	CapacityUsable               bool    `json:"capacity_usable,omitempty" yaml:"capacity_usable,omitempty" required:"false" doc:"Toggles between showing usable capacity (true, default) or physical capacity (false) in the capacity card on the VMS web UI dashboard"`
	Created                      string  `json:"created,omitempty" yaml:"created,omitempty" required:"false" doc:"Date and time of creation"`
	DegradedReason               string  `json:"degraded_reason,omitempty" yaml:"degraded_reason,omitempty" required:"false" doc:"The reason for VMS degraded state"`
	DisableMgmtHa                bool    `json:"disable_mgmt_ha,omitempty" yaml:"disable_mgmt_ha,omitempty" required:"false" doc:"True if management HA is disabled"`
	DisableVmsMetrics            bool    `json:"disable_vms_metrics,omitempty" yaml:"disable_vms_metrics,omitempty" required:"false" doc:"True if VMS metrics collection is disabled"`
	Guid                         string  `json:"guid,omitempty" yaml:"guid,omitempty" required:"false" doc:""`
	Id                           int64   `json:"id,omitempty" yaml:"id,omitempty" required:"false" doc:"The ID of the VMS object."`
	Ip                           string  `json:"ip,omitempty" yaml:"ip,omitempty" required:"false" doc:"The bond interface IP for the cluster's internal data network, on the current management CNode, the CNode hosting VMS"`
	Ip1                          string  `json:"ip1,omitempty" yaml:"ip1,omitempty" required:"false" doc:"The IP of the management CNode on one of the cluster's internal data networks."`
	Ip2                          string  `json:"ip2,omitempty" yaml:"ip2,omitempty" required:"false" doc:"The IP of the management CNode on the second of the cluster's internal data networks."`
	Ipv6Support                  bool    `json:"ipv6_support,omitempty" yaml:"ipv6_support,omitempty" required:"false" doc:"Parameter that controls visibility of ipv6 fields for VIP Pools"`
	LoginBanner                  string  `json:"login_banner,omitempty" yaml:"login_banner,omitempty" required:"false" doc:"The login banner for the VMS Web UI and CLI, if customized."`
	MaxApiTokensPerUser          int64   `json:"max_api_tokens_per_user,omitempty" yaml:"max_api_tokens_per_user,omitempty" required:"false" doc:"Max active API tokens allowed per VMS user"`
	MgmtCnode                    string  `json:"mgmt_cnode,omitempty" yaml:"mgmt_cnode,omitempty" required:"false" doc:"The name of the CNode currently running VMS"`
	MgmtInnerVip                 string  `json:"mgmt_inner_vip,omitempty" yaml:"mgmt_inner_vip,omitempty" required:"false" doc:"A virtual IP on the internal network used for mounting the VMS database."`
	MgmtInnerVipCnode            string  `json:"mgmt_inner_vip_cnode,omitempty" yaml:"mgmt_inner_vip_cnode,omitempty" required:"false" doc:"The CNode currently hosting virtual IP on the internal network used for mounting the VMS database (mgmt_inner_vip)."`
	MgmtIp                       string  `json:"mgmt_ip,omitempty" yaml:"mgmt_ip,omitempty" required:"false" doc:"The external management IP of the management CNode, the CNode currently hosting VMS"`
	MgmtVip                      string  `json:"mgmt_vip,omitempty" yaml:"mgmt_vip,omitempty" required:"false" doc:"Management virtual IP (IPv4). A single virtual IP configured on the management interfaces on all CNodes. VAST Management System (VMS) listens on this IP. It is used to access the VMS interfaces."`
	MgmtVipIpv6                  string  `json:"mgmt_vip_ipv6,omitempty" yaml:"mgmt_vip_ipv6,omitempty" required:"false" doc:"Management virtual IP (IPv6). A single virtual IP configured on the management interfaces on all CNodes. VAST Management System (VMS) listens on this IP. It is used to access the VMS interfaces."`
	MinPwdLength                 int64   `json:"min_pwd_length,omitempty" yaml:"min_pwd_length,omitempty" required:"false" doc:"Minimum password length for new VMS managers. Default: 8"`
	MinQosSupported              bool    `json:"min_qos_supported,omitempty" yaml:"min_qos_supported,omitempty" required:"false" doc:"Minimum QoS supported"`
	MinTlsVersion                string  `json:"min_tls_version,omitempty" yaml:"min_tls_version,omitempty" required:"false" doc:"Minimum TLS version supported by VMS. The default is 1.2."`
	PerformanceBase10            bool    `json:"performance_base_10,omitempty" yaml:"performance_base_10,omitempty" required:"false" doc:"True if performance properties are formatted in base 10. False if performance properties are formatted in base 2"`
	RefreshTokenLifetime         string  `json:"refresh_token_lifetime,omitempty" yaml:"refresh_token_lifetime,omitempty" required:"false" doc:"Validity duration for JWT refresh tokens. Specify as [DD [HH:[MM:]]]ss"`
	SslCertificate               string  `json:"ssl_certificate,omitempty" yaml:"ssl_certificate,omitempty" required:"false" doc:"The SSL Certificate file content, including the BEGIN CERTIFICATE and END CERTIFICATE lines"`
	SslKeyfile                   string  `json:"ssl_keyfile,omitempty" yaml:"ssl_keyfile,omitempty" required:"false" doc:"The SSL private key file content, include the BEGIN PRIVATE KEY and END PRIVATE KEY lines"`
	SslPort                      int64   `json:"ssl_port,omitempty" yaml:"ssl_port,omitempty" required:"false" doc:"The SSL port through which VMS is accessed."`
	State                        string  `json:"state,omitempty" yaml:"state,omitempty" required:"false" doc:"The state of VMS."`
	SwVersion                    string  `json:"sw_version,omitempty" yaml:"sw_version,omitempty" required:"false" doc:"The current VMS software version running on the cluster."`
	TabularSupport               string  `json:"tabular_support,omitempty" yaml:"tabular_support,omitempty" required:"false" doc:"Parameter that controls everything related to database"`
	Title                        string  `json:"title,omitempty" yaml:"title,omitempty" required:"false" doc:"VMS name"`
	TotalActiveCapacity          float64 `json:"total_active_capacity,omitempty" yaml:"total_active_capacity,omitempty" required:"false" doc:"The total licensed capacity, which is the sum of capacity licensed by all active licenses"`
	TotalRemainingCapacity       float64 `json:"total_remaining_capacity,omitempty" yaml:"total_remaining_capacity,omitempty" required:"false" doc:"The amount of licensed capacity that remains available for use."`
	TotalUsageCapacityPercentage float64 `json:"total_usage_capacity_percentage,omitempty" yaml:"total_usage_capacity_percentage,omitempty" required:"false" doc:"The percentage of total licensed capacity that is in use."`
	Url                          string  `json:"url,omitempty" yaml:"url,omitempty" required:"false" doc:"Endpoint URL of the VMS object"`
}

// -----------------------------------------------------
// RESOURCE METHODS (READ-ONLY)
// -----------------------------------------------------

// Vms provides typed access to Vms resources (read-only)
type Vms struct {
	Untyped *vast_client.VMSRest
}

// Get retrieves a single vms with typed request/response
func (r *Vms) Get(req *VmsSearchParams) (*VmsModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Vms.Get(params)
	if err != nil {
		return nil, err
	}

	var response VmsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// GetWithContext retrieves a single vms with typed request/response using provided context
func (r *Vms) GetWithContext(ctx context.Context, req *VmsSearchParams) (*VmsModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Vms.GetWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response VmsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// GetById retrieves a single vms by ID with typed response
func (r *Vms) GetById(id any) (*VmsModel, error) {
	record, err := r.Untyped.Vms.GetById(id)
	if err != nil {
		return nil, err
	}

	var response VmsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// GetByIdWithContext retrieves a single vms by ID with typed response using provided context
func (r *Vms) GetByIdWithContext(ctx context.Context, id any) (*VmsModel, error) {
	record, err := r.Untyped.Vms.GetByIdWithContext(ctx, id)
	if err != nil {
		return nil, err
	}

	var response VmsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// List retrieves multiple vmss with typed request/response
func (r *Vms) List(req *VmsSearchParams) ([]*VmsModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.Vms.List(params)
	if err != nil {
		return nil, err
	}

	var response []*VmsModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// ListWithContext retrieves multiple vmss with typed request/response using provided context
func (r *Vms) ListWithContext(ctx context.Context, req *VmsSearchParams) ([]*VmsModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.Vms.ListWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response []*VmsModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// Exists checks if a vms exists with the given search parameters
func (r *Vms) Exists(req *VmsSearchParams) (bool, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}

	return r.Untyped.Vms.Exists(params)
}

// ExistsWithContext checks if a vms exists with the given search parameters using provided context
func (r *Vms) ExistsWithContext(ctx context.Context, req *VmsSearchParams) (bool, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}

	return r.Untyped.Vms.ExistsWithContext(ctx, params)
}

// MustExists checks if a vms exists with the given search parameters, panics on error
func (r *Vms) MustExists(req *VmsSearchParams) bool {
	exists, err := r.Exists(req)
	if err != nil {
		panic(err)
	}
	return exists
}

// MustExistsWithContext checks if a vms exists with the given search parameters using provided context, panics on error
func (r *Vms) MustExistsWithContext(ctx context.Context, req *VmsSearchParams) bool {
	exists, err := r.ExistsWithContext(ctx, req)
	if err != nil {
		panic(err)
	}
	return exists
}

// -----------------------------------------------------
// RENDERABLE INTERFACE METHODS
// -----------------------------------------------------

// PrettyTable returns a formatted table representation of the VmsModel
func (m *VmsModel) PrettyTable() string {
	return m.toRecord().PrettyTable()
}

// PrettyJson returns a JSON representation of the VmsModel
func (m *VmsModel) PrettyJson(indent ...string) string {
	return m.toRecord().PrettyJson(indent...)
}

// toRecord converts the VmsModel to a Record (map[string]any) with @resourceType
func (m *VmsModel) toRecord() vast_client.Record {
	// Convert struct to map using JSON marshaling
	jsonBytes, err := json.Marshal(m)
	if err != nil {
		return vast_client.Record{"error": fmt.Sprintf("failed to marshal struct: %v", err)}
	}

	var record vast_client.Record
	if err := json.Unmarshal(jsonBytes, &record); err != nil {
		return vast_client.Record{"error": fmt.Sprintf("failed to unmarshal to record: %v", err)}
	}

	// Add resource type using reflection
	record["@resourceType"] = reflect.TypeOf(*m).Name()

	return record
}
