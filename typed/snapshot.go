// Code generated by generate-typed-resources. DO NOT EDIT.

package typed

import (
	"context"
	"encoding/json"
	"fmt"
	"reflect"

	vast_client "github.com/vast-data/go-vast-client"
)

// -----------------------------------------------------
// SEARCH PARAMS
// -----------------------------------------------------

// SnapshotSearchParams represents the search parameters for Snapshot operations
// Generated from GET query parameters for resource: snapshots
type SnapshotSearchParams struct {
	Name           string `json:"name,omitempty" yaml:"name,omitempty" required:"true" doc:""`
	ExpirationTime string `json:"expiration_time,omitempty" yaml:"expiration_time,omitempty" required:"false" doc:"Filter by expiration time"`
	Guid           string `json:"guid,omitempty" yaml:"guid,omitempty" required:"false" doc:""`
	Locked         bool   `json:"locked,omitempty" yaml:"locked,omitempty" required:"false" doc:"Filter for locked snapshots"`
	Path           string `json:"path,omitempty" yaml:"path,omitempty" required:"false" doc:"Filter by snapshot path"`
	State          string `json:"state,omitempty" yaml:"state,omitempty" required:"false" doc:"Filter by state"`
	TenantId       int64  `json:"tenant_id,omitempty" yaml:"tenant_id,omitempty" required:"false" doc:"Filter by tenant. Specify tenant ID."`
}

// -----------------------------------------------------
// REQUEST BODY
// -----------------------------------------------------

// SnapshotRequestBody represents the request body for Snapshot operations
// Generated from POST request body for resource: snapshots
type SnapshotRequestBody struct {
	Name           string `json:"name,omitempty" yaml:"name,omitempty" required:"true" doc:"Snapshot name"`
	Path           string `json:"path,omitempty" yaml:"path,omitempty" required:"true" doc:"The path to take a snapshot on"`
	ClusterId      int64  `json:"cluster_id,omitempty" yaml:"cluster_id,omitempty" required:"false" doc:"Cluster ID"`
	ExpirationTime string `json:"expiration_time,omitempty" yaml:"expiration_time,omitempty" required:"false" doc:"Snapshot expiration time"`
	Indestructible bool   `json:"indestructible,omitempty" yaml:"indestructible,omitempty" required:"false" doc:"Set to true to protect the snapshot from accidental or malicious deletion with the indestructibility feature. If this setting is enabled, authorized unlocking of the cluster's indestructibility mechanism is required to do any of the following: deleting the snapshot, shortening its expiration time or disabling this setting."`
	Locked         bool   `json:"locked,omitempty" yaml:"locked,omitempty" required:"false" doc:"Not in use."`
	TenantId       int64  `json:"tenant_id,omitempty" yaml:"tenant_id,omitempty" required:"false" doc:"Tenant ID"`
}

// -----------------------------------------------------
// MODEL
// -----------------------------------------------------

// SnapshotModel represents the model data for Snapshot operations
// Generated from schema: Snapshot
type SnapshotModel struct {
	Name                 string  `json:"name,omitempty" yaml:"name,omitempty" required:"true" doc:""`
	AggrPhysEstimation   int64   `json:"aggr_phys_estimation,omitempty" yaml:"aggr_phys_estimation,omitempty" required:"false" doc:"The usable capacity reclaimable by deleting the snapshot and all older snapshots on the protected path"`
	Cluster              string  `json:"cluster,omitempty" yaml:"cluster,omitempty" required:"false" doc:"Parent Cluster"`
	Created              string  `json:"created,omitempty" yaml:"created,omitempty" required:"false" doc:"Snapshot created time"`
	EtaSec               float64 `json:"eta_sec,omitempty" yaml:"eta_sec,omitempty" required:"false" doc:"Time until completion, in seconds"`
	ExpirationTime       string  `json:"expiration_time,omitempty" yaml:"expiration_time,omitempty" required:"false" doc:"Snapshot expiration time UTC"`
	Guid                 string  `json:"guid,omitempty" yaml:"guid,omitempty" required:"false" doc:""`
	Id                   int64   `json:"id,omitempty" yaml:"id,omitempty" required:"false" doc:""`
	Indestructible       bool    `json:"indestructible,omitempty" yaml:"indestructible,omitempty" required:"false" doc:"Protected from accidental or malicious deletion by the indestructibility feature. Authorized unlocking of the cluster's indestructibility mechanism is required to do any of the following: deleting the snapshot, shortening its expiration time or disabling this setting."`
	Locked               bool    `json:"locked,omitempty" yaml:"locked,omitempty" required:"false" doc:"Lock the snapshot from being deleted by cleanup"`
	Path                 string  `json:"path,omitempty" yaml:"path,omitempty" required:"false" doc:"Snapshot path"`
	Policy               string  `json:"policy,omitempty" yaml:"policy,omitempty" required:"false" doc:"Associated snapshot policy"`
	PolicyId             int64   `json:"policy_id,omitempty" yaml:"policy_id,omitempty" required:"false" doc:"Associated snapshot policy ID"`
	ProtectionPolicy     string  `json:"protection_policy,omitempty" yaml:"protection_policy,omitempty" required:"false" doc:"Protection Policy Name"`
	ProtectionPolicyId   int64   `json:"protection_policy_id,omitempty" yaml:"protection_policy_id,omitempty" required:"false" doc:""`
	State                string  `json:"state,omitempty" yaml:"state,omitempty" required:"false" doc:"Snapshot stats"`
	SubsystemRelated     bool    `json:"subsystem_related,omitempty" yaml:"subsystem_related,omitempty" required:"false" doc:"If true, the snapshot path is above or below a subsystem view path or exactly on a subsystem view path."`
	TenantId             int64   `json:"tenant_id,omitempty" yaml:"tenant_id,omitempty" required:"false" doc:"Tenant ID"`
	TenantName           string  `json:"tenant_name,omitempty" yaml:"tenant_name,omitempty" required:"false" doc:"Tenant Name"`
	Title                string  `json:"title,omitempty" yaml:"title,omitempty" required:"false" doc:""`
	Type                 string  `json:"type,omitempty" yaml:"type,omitempty" required:"false" doc:""`
	UniquePhysEstimation int64   `json:"unique_phys_estimation,omitempty" yaml:"unique_phys_estimation,omitempty" required:"false" doc:"The usable capacity reclaimable by deleting the snapshot without deleting other snapshots on the path"`
	Url                  string  `json:"url,omitempty" yaml:"url,omitempty" required:"false" doc:"Endpoint URL for API operations on the snapshot"`
}

// -----------------------------------------------------
// RESOURCE METHODS
// -----------------------------------------------------

// Snapshot represents a typed resource for snapshot operations
type Snapshot struct {
	Untyped *vast_client.VMSRest
}

// Get retrieves a single snapshot with typed request/response
func (r *Snapshot) Get(req *SnapshotSearchParams) (*SnapshotModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Snapshots.Get(params)
	if err != nil {
		return nil, err
	}

	var response SnapshotModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// GetWithContext retrieves a single snapshot with typed request/response using provided context
func (r *Snapshot) GetWithContext(ctx context.Context, req *SnapshotSearchParams) (*SnapshotModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Snapshots.GetWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response SnapshotModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// GetById retrieves a single snapshot by ID
func (r *Snapshot) GetById(id any) (*SnapshotModel, error) {
	record, err := r.Untyped.Snapshots.GetById(id)
	if err != nil {
		return nil, err
	}

	var response SnapshotModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// GetByIdWithContext retrieves a single snapshot by ID using provided context
func (r *Snapshot) GetByIdWithContext(ctx context.Context, id any) (*SnapshotModel, error) {
	record, err := r.Untyped.Snapshots.GetByIdWithContext(ctx, id)
	if err != nil {
		return nil, err
	}

	var response SnapshotModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// List retrieves multiple snapshots with typed request/response
func (r *Snapshot) List(req *SnapshotSearchParams) ([]*SnapshotModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.Snapshots.List(params)
	if err != nil {
		return nil, err
	}

	var response []*SnapshotModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// ListWithContext retrieves multiple snapshots with typed request/response using provided context
func (r *Snapshot) ListWithContext(ctx context.Context, req *SnapshotSearchParams) ([]*SnapshotModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.Snapshots.ListWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response []*SnapshotModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// Create creates a new snapshot with typed request/response
func (r *Snapshot) Create(req *SnapshotRequestBody) (*SnapshotModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Snapshots.Create(params)
	if err != nil {
		return nil, err
	}

	var response SnapshotModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// CreateWithContext creates a new snapshot with typed request/response using provided context
func (r *Snapshot) CreateWithContext(ctx context.Context, req *SnapshotRequestBody) (*SnapshotModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Snapshots.CreateWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response SnapshotModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Update updates an existing snapshot with typed request/response
func (r *Snapshot) Update(id any, req *SnapshotRequestBody) (*SnapshotModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Snapshots.Update(id, params)
	if err != nil {
		return nil, err
	}

	var response SnapshotModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// UpdateWithContext updates an existing snapshot with typed request/response using provided context
func (r *Snapshot) UpdateWithContext(ctx context.Context, id any, req *SnapshotRequestBody) (*SnapshotModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Snapshots.UpdateWithContext(ctx, id, params)
	if err != nil {
		return nil, err
	}

	var response SnapshotModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Delete deletes a snapshot with search parameters
func (r *Snapshot) Delete(req *SnapshotSearchParams) error {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return err
	}
	_, err = r.Untyped.Snapshots.Delete(params, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteWithContext deletes a snapshot with search parameters using provided context
func (r *Snapshot) DeleteWithContext(ctx context.Context, req *SnapshotSearchParams) error {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return err
	}
	_, err = r.Untyped.Snapshots.DeleteWithContext(ctx, params, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteById deletes a snapshot by ID
func (r *Snapshot) DeleteById(id any) error {
	_, err := r.Untyped.Snapshots.DeleteById(id, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteByIdWithContext deletes a snapshot by ID using provided context
func (r *Snapshot) DeleteByIdWithContext(ctx context.Context, id any) error {
	_, err := r.Untyped.Snapshots.DeleteByIdWithContext(ctx, id, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// Ensure ensures a snapshot exists with typed response
func (r *Snapshot) Ensure(searchParams *SnapshotSearchParams, body *SnapshotRequestBody) (*SnapshotModel, error) {
	searchParamsConverted, err := vast_client.NewParamsFromStruct(searchParams)
	if err != nil {
		return nil, err
	}
	bodyConverted, err := vast_client.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Snapshots.Ensure(searchParamsConverted, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response SnapshotModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// EnsureWithContext ensures a snapshot exists with typed response using provided context
func (r *Snapshot) EnsureWithContext(ctx context.Context, searchParams *SnapshotSearchParams, body *SnapshotRequestBody) (*SnapshotModel, error) {
	searchParamsConverted, err := vast_client.NewParamsFromStruct(searchParams)
	if err != nil {
		return nil, err
	}
	bodyConverted, err := vast_client.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Snapshots.EnsureWithContext(ctx, searchParamsConverted, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response SnapshotModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// EnsureByName ensures a snapshot exists by name with typed response
func (r *Snapshot) EnsureByName(name string, body *SnapshotRequestBody) (*SnapshotModel, error) {
	bodyConverted, err := vast_client.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Snapshots.EnsureByName(name, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response SnapshotModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// EnsureByNameWithContext ensures a snapshot exists by name with typed response using provided context
func (r *Snapshot) EnsureByNameWithContext(ctx context.Context, name string, body *SnapshotRequestBody) (*SnapshotModel, error) {
	bodyConverted, err := vast_client.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Snapshots.EnsureByNameWithContext(ctx, name, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response SnapshotModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Exists checks if a snapshot exists
func (r *Snapshot) Exists(req *SnapshotSearchParams) (bool, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.Snapshots.Exists(params)
}

// ExistsWithContext checks if a snapshot exists using provided context
func (r *Snapshot) ExistsWithContext(ctx context.Context, req *SnapshotSearchParams) (bool, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.Snapshots.ExistsWithContext(ctx, params)
}

// MustExists checks if a snapshot exists and panics if not
func (r *Snapshot) MustExists(req *SnapshotSearchParams) bool {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.Snapshots.MustExists(params)
}

// MustExistsWithContext checks if a snapshot exists and panics if not using provided context
func (r *Snapshot) MustExistsWithContext(ctx context.Context, req *SnapshotSearchParams) bool {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.Snapshots.MustExistsWithContext(ctx, params)
}

// -----------------------------------------------------
// RENDERABLE INTERFACE METHODS
// -----------------------------------------------------

// PrettyTable returns a formatted table representation of the SnapshotModel
func (m *SnapshotModel) PrettyTable() string {
	return m.toRecord().PrettyTable()
}

// PrettyJson returns a JSON representation of the SnapshotModel
func (m *SnapshotModel) PrettyJson(indent ...string) string {
	return m.toRecord().PrettyJson(indent...)
}

// toRecord converts the SnapshotModel to a Record (map[string]any) with @resourceType
func (m *SnapshotModel) toRecord() vast_client.Record {
	// Convert struct to map using JSON marshaling
	jsonBytes, err := json.Marshal(m)
	if err != nil {
		return vast_client.Record{"error": fmt.Sprintf("failed to marshal struct: %v", err)}
	}

	var record vast_client.Record
	if err := json.Unmarshal(jsonBytes, &record); err != nil {
		return vast_client.Record{"error": fmt.Sprintf("failed to unmarshal to record: %v", err)}
	}

	// Add resource type using reflection
	record["@resourceType"] = reflect.TypeOf(*m).Name()

	return record
}
