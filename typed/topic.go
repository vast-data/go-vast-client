// Code generated by generate-typed-resources. DO NOT EDIT.

package typed

import (
	"context"
	"encoding/json"
	"fmt"
	"reflect"

	vast_client "github.com/vast-data/go-vast-client"
)

// -----------------------------------------------------
// SEARCH PARAMS
// -----------------------------------------------------

// TopicSearchParams represents the search parameters for Topic operations
// Generated from GET query parameters for resource: topics
type TopicSearchParams struct {
	CountOnly    bool   `json:"count_only,omitempty" yaml:"count_only,omitempty" required:"false" doc:"Whether to only return count of objects"`
	DatabaseName string `json:"database_name,omitempty" yaml:"database_name,omitempty" required:"false" doc:"Getting list of objects by database_name"`
	Name         string `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:"Getting list of objects by exact match"`
	TenantId     int64  `json:"tenant_id,omitempty" yaml:"tenant_id,omitempty" required:"false" doc:"Filter by tenant. Specify tenant ID."`
}

// -----------------------------------------------------
// REQUEST BODY
// -----------------------------------------------------

// TopicRequestBody represents the request body for Topic operations
// Generated from POST request body for resource: topics
type TopicRequestBody struct {
	DatabaseName                string `json:"database_name,omitempty" yaml:"database_name,omitempty" required:"true" doc:"Name of the Database"`
	Name                        string `json:"name,omitempty" yaml:"name,omitempty" required:"true" doc:"Name of the Topic"`
	TopicPartitions             int64  `json:"topic_partitions,omitempty" yaml:"topic_partitions,omitempty" required:"true" doc:"Amount of Kafka Topic partitions"`
	MessageTimestampAfterMaxMs  int64  `json:"message_timestamp_after_max_ms,omitempty" yaml:"message_timestamp_after_max_ms,omitempty" required:"false" doc:"Message timestamp 'after' threshold in milli-seconds"`
	MessageTimestampBeforeMaxMs int64  `json:"message_timestamp_before_max_ms,omitempty" yaml:"message_timestamp_before_max_ms,omitempty" required:"false" doc:"Message timestamp 'before' threshold in milli-seconds"`
	MessageTimestampType        string `json:"message_timestamp_type,omitempty" yaml:"message_timestamp_type,omitempty" required:"false" doc:"Message timestamp type"`
	RetentionMs                 int64  `json:"retention_ms,omitempty" yaml:"retention_ms,omitempty" required:"false" doc:"Retention period in milli-seconds"`
}

// -----------------------------------------------------
// MODEL
// -----------------------------------------------------

// TopicModel represents the model data for Topic operations
// Generated from schema: Topic
type TopicModel struct {
	Capacity                    int64  `json:"capacity,omitempty" yaml:"capacity,omitempty" required:"true" doc:"Capacity of the Topic"`
	DatabaseName                string `json:"database_name,omitempty" yaml:"database_name,omitempty" required:"true" doc:"Name of the Database"`
	Name                        string `json:"name,omitempty" yaml:"name,omitempty" required:"true" doc:"Name of the Topic"`
	NumEvents                   int64  `json:"num_events,omitempty" yaml:"num_events,omitempty" required:"true" doc:"Total number of events"`
	MessageTimestampAfterMaxMs  int64  `json:"message_timestamp_after_max_ms,omitempty" yaml:"message_timestamp_after_max_ms,omitempty" required:"false" doc:"If the message timestamp type is set to ?CreateTime??, this option determines how much later the message timestamp can be than the broker timestamp. If this value is exceeded, the message is rejected."`
	MessageTimestampBeforeMaxMs int64  `json:"message_timestamp_before_max_ms,omitempty" yaml:"message_timestamp_before_max_ms,omitempty" required:"false" doc:"If the message timestamp type is set to ?CreateTime??, this option determines how much earlier the message timestamp can be than the broker timestamp. If this value is exceeded, the message is rejected."`
	MessageTimestampType        string `json:"message_timestamp_type,omitempty" yaml:"message_timestamp_type,omitempty" required:"false" doc:"Determines how the event timestamp is set. CreateTime (default)=The timestamp is based on the time when the event was encountered at the event producer. LogAppendTime=The timestamp is based on the time when the event record was added to the log at the event broker."`
	RetentionMs                 int64  `json:"retention_ms,omitempty" yaml:"retention_ms,omitempty" required:"false" doc:"The amount of time, in milliseconds, to keep an event record in the topic. When the retention period for a record expires, the records is deleted from the topic."`
	TopicPartitions             int64  `json:"topic_partitions,omitempty" yaml:"topic_partitions,omitempty" required:"false" doc:"The number of partitions in the Kafka topic to be created.Each partition can hold up to 1000 topics. The number of partitions in a topic cannot be changed after the topic has been created."`
}

// -----------------------------------------------------
// RESOURCE METHODS
// -----------------------------------------------------

// Topic represents a typed resource for topic operations
type Topic struct {
	Untyped *vast_client.VMSRest
}

// Get retrieves a single topic with typed request/response
func (r *Topic) Get(req *TopicSearchParams) (*TopicModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Topics.Get(params)
	if err != nil {
		return nil, err
	}

	var response TopicModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// GetWithContext retrieves a single topic with typed request/response using provided context
func (r *Topic) GetWithContext(ctx context.Context, req *TopicSearchParams) (*TopicModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Topics.GetWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response TopicModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// GetById retrieves a single topic by ID
func (r *Topic) GetById(id any) (*TopicModel, error) {
	record, err := r.Untyped.Topics.GetById(id)
	if err != nil {
		return nil, err
	}

	var response TopicModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// GetByIdWithContext retrieves a single topic by ID using provided context
func (r *Topic) GetByIdWithContext(ctx context.Context, id any) (*TopicModel, error) {
	record, err := r.Untyped.Topics.GetByIdWithContext(ctx, id)
	if err != nil {
		return nil, err
	}

	var response TopicModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// List retrieves multiple topics with typed request/response
func (r *Topic) List(req *TopicSearchParams) ([]*TopicModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.Topics.List(params)
	if err != nil {
		return nil, err
	}

	var response []*TopicModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// ListWithContext retrieves multiple topics with typed request/response using provided context
func (r *Topic) ListWithContext(ctx context.Context, req *TopicSearchParams) ([]*TopicModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.Topics.ListWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response []*TopicModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// Create creates a new topic with typed request/response
func (r *Topic) Create(req *TopicRequestBody) (*TopicModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Topics.Create(params)
	if err != nil {
		return nil, err
	}

	var response TopicModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// CreateWithContext creates a new topic with typed request/response using provided context
func (r *Topic) CreateWithContext(ctx context.Context, req *TopicRequestBody) (*TopicModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Topics.CreateWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response TopicModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Update updates an existing topic with typed request/response
func (r *Topic) Update(id any, req *TopicRequestBody) (*TopicModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Topics.Update(id, params)
	if err != nil {
		return nil, err
	}

	var response TopicModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// UpdateWithContext updates an existing topic with typed request/response using provided context
func (r *Topic) UpdateWithContext(ctx context.Context, id any, req *TopicRequestBody) (*TopicModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Topics.UpdateWithContext(ctx, id, params)
	if err != nil {
		return nil, err
	}

	var response TopicModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Delete deletes a topic with search parameters
func (r *Topic) Delete(req *TopicSearchParams) error {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return err
	}
	_, err = r.Untyped.Topics.Delete(params, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteWithContext deletes a topic with search parameters using provided context
func (r *Topic) DeleteWithContext(ctx context.Context, req *TopicSearchParams) error {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return err
	}
	_, err = r.Untyped.Topics.DeleteWithContext(ctx, params, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteById deletes a topic by ID
func (r *Topic) DeleteById(id any) error {
	_, err := r.Untyped.Topics.DeleteById(id, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteByIdWithContext deletes a topic by ID using provided context
func (r *Topic) DeleteByIdWithContext(ctx context.Context, id any) error {
	_, err := r.Untyped.Topics.DeleteByIdWithContext(ctx, id, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// Ensure ensures a topic exists with typed response
func (r *Topic) Ensure(searchParams *TopicSearchParams, body *TopicRequestBody) (*TopicModel, error) {
	searchParamsConverted, err := vast_client.NewParamsFromStruct(searchParams)
	if err != nil {
		return nil, err
	}
	bodyConverted, err := vast_client.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Topics.Ensure(searchParamsConverted, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response TopicModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// EnsureWithContext ensures a topic exists with typed response using provided context
func (r *Topic) EnsureWithContext(ctx context.Context, searchParams *TopicSearchParams, body *TopicRequestBody) (*TopicModel, error) {
	searchParamsConverted, err := vast_client.NewParamsFromStruct(searchParams)
	if err != nil {
		return nil, err
	}
	bodyConverted, err := vast_client.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Topics.EnsureWithContext(ctx, searchParamsConverted, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response TopicModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// EnsureByName ensures a topic exists by name with typed response
func (r *Topic) EnsureByName(name string, body *TopicRequestBody) (*TopicModel, error) {
	bodyConverted, err := vast_client.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Topics.EnsureByName(name, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response TopicModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// EnsureByNameWithContext ensures a topic exists by name with typed response using provided context
func (r *Topic) EnsureByNameWithContext(ctx context.Context, name string, body *TopicRequestBody) (*TopicModel, error) {
	bodyConverted, err := vast_client.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Topics.EnsureByNameWithContext(ctx, name, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response TopicModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Exists checks if a topic exists
func (r *Topic) Exists(req *TopicSearchParams) (bool, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.Topics.Exists(params)
}

// ExistsWithContext checks if a topic exists using provided context
func (r *Topic) ExistsWithContext(ctx context.Context, req *TopicSearchParams) (bool, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.Topics.ExistsWithContext(ctx, params)
}

// MustExists checks if a topic exists and panics if not
func (r *Topic) MustExists(req *TopicSearchParams) bool {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.Topics.MustExists(params)
}

// MustExistsWithContext checks if a topic exists and panics if not using provided context
func (r *Topic) MustExistsWithContext(ctx context.Context, req *TopicSearchParams) bool {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.Topics.MustExistsWithContext(ctx, params)
}

// -----------------------------------------------------
// RENDERABLE INTERFACE METHODS
// -----------------------------------------------------

// PrettyTable returns a formatted table representation of the TopicModel
func (m *TopicModel) PrettyTable() string {
	return m.toRecord().PrettyTable()
}

// PrettyJson returns a JSON representation of the TopicModel
func (m *TopicModel) PrettyJson(indent ...string) string {
	return m.toRecord().PrettyJson(indent...)
}

// toRecord converts the TopicModel to a Record (map[string]any) with @resourceType
func (m *TopicModel) toRecord() vast_client.Record {
	// Convert struct to map using JSON marshaling
	jsonBytes, err := json.Marshal(m)
	if err != nil {
		return vast_client.Record{"error": fmt.Sprintf("failed to marshal struct: %v", err)}
	}

	var record vast_client.Record
	if err := json.Unmarshal(jsonBytes, &record); err != nil {
		return vast_client.Record{"error": fmt.Sprintf("failed to unmarshal to record: %v", err)}
	}

	// Add resource type using reflection
	record["@resourceType"] = reflect.TypeOf(*m).Name()

	return record
}
