// Code generated by generate-typed-resources. DO NOT EDIT.

package typed

import (
	"context"
	"encoding/json"
	"fmt"
	"reflect"

	vast_client "github.com/vast-data/go-vast-client"
)

// -----------------------------------------------------
// SEARCH PARAMS
// -----------------------------------------------------

// ApiTokenSearchParams represents the search parameters for ApiToken operations
// Generated from GET query parameters for resource: apitokens
type ApiTokenSearchParams struct {
	Archived string `json:"archived,omitempty" yaml:"archived,omitempty" required:"false" doc:""`
	Name     string `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:"The name of the Api token"`
	Owner    string `json:"owner,omitempty" yaml:"owner,omitempty" required:"false" doc:"Filter by token owner username"`
}

// -----------------------------------------------------
// REQUEST BODY
// -----------------------------------------------------

// ApiTokenRequestBody represents the request body for ApiToken operations
// Generated from POST request body for resource: apitokens
type ApiTokenRequestBody struct {
	ExpiryDate string `json:"expiry_date,omitempty" yaml:"expiry_date,omitempty" required:"false" doc:"Sets the token's expiration date by specifying an amount of time from token creation until the token should expire. The expiration date is equal to the token creation date in UTC + the specified time period. Specify as a whole integer followed by a unit of time: 'Y' for (365 day) years, 'M' for (30 day) months, 'w' or 'W' for weeks, 'd' or 'D' for days, 'h' or 'H' for hours, 'm' for minutes, 's' or 'S' for seconds. The maximum and default expiration time is the password expiration timeout."`
	Name       string `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:"Sets a custom name for the token. If not specified, the token is named OWNER_api_token, where OWNER is the user name of the token owner."`
	Owner      string `json:"owner,omitempty" yaml:"owner,omitempty" required:"false" doc:"The user name of the user for whom to create the API token. If not specified, the token is created for the requesting user."`
}

// -----------------------------------------------------
// MODEL
// -----------------------------------------------------

// ApiTokenModel represents the model data for ApiToken operations
// Generated from schema: ApiToken
type ApiTokenModel struct {
	Created        string `json:"created,omitempty" yaml:"created,omitempty" required:"false" doc:"Time of token creation"`
	ExpiryDate     string `json:"expiry_date,omitempty" yaml:"expiry_date,omitempty" required:"false" doc:"The token's expiration date."`
	Id             string `json:"id,omitempty" yaml:"id,omitempty" required:"false" doc:""`
	LastUsed       string `json:"last_used,omitempty" yaml:"last_used,omitempty" required:"false" doc:"Time of last use of the token for authentication"`
	Name           string `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:"The name of the Api token"`
	Owner          string `json:"owner,omitempty" yaml:"owner,omitempty" required:"false" doc:"The name of the owner of the Api token"`
	RevocationTime string `json:"revocation_time,omitempty" yaml:"revocation_time,omitempty" required:"false" doc:"The time at which the token was revoked, if applicable."`
	Revoked        bool   `json:"revoked,omitempty" yaml:"revoked,omitempty" required:"false" doc:"True if the token has been revoked. False otherwise."`
}

// -----------------------------------------------------
// RESOURCE METHODS
// -----------------------------------------------------

// ApiToken represents a typed resource for apitoken operations
type ApiToken struct {
	Untyped *vast_client.VMSRest
}

// Get retrieves a single apitoken with typed request/response
func (r *ApiToken) Get(req *ApiTokenSearchParams) (*ApiTokenModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.ApiTokens.Get(params)
	if err != nil {
		return nil, err
	}

	var response ApiTokenModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// GetWithContext retrieves a single apitoken with typed request/response using provided context
func (r *ApiToken) GetWithContext(ctx context.Context, req *ApiTokenSearchParams) (*ApiTokenModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.ApiTokens.GetWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response ApiTokenModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// GetById retrieves a single apitoken by ID
func (r *ApiToken) GetById(id any) (*ApiTokenModel, error) {
	record, err := r.Untyped.ApiTokens.GetById(id)
	if err != nil {
		return nil, err
	}

	var response ApiTokenModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// GetByIdWithContext retrieves a single apitoken by ID using provided context
func (r *ApiToken) GetByIdWithContext(ctx context.Context, id any) (*ApiTokenModel, error) {
	record, err := r.Untyped.ApiTokens.GetByIdWithContext(ctx, id)
	if err != nil {
		return nil, err
	}

	var response ApiTokenModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// List retrieves multiple apitokens with typed request/response
func (r *ApiToken) List(req *ApiTokenSearchParams) ([]*ApiTokenModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.ApiTokens.List(params)
	if err != nil {
		return nil, err
	}

	var response []*ApiTokenModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// ListWithContext retrieves multiple apitokens with typed request/response using provided context
func (r *ApiToken) ListWithContext(ctx context.Context, req *ApiTokenSearchParams) ([]*ApiTokenModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.ApiTokens.ListWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response []*ApiTokenModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// Create creates a new apitoken with typed request/response
func (r *ApiToken) Create(req *ApiTokenRequestBody) (*ApiTokenModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.ApiTokens.Create(params)
	if err != nil {
		return nil, err
	}

	var response ApiTokenModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// CreateWithContext creates a new apitoken with typed request/response using provided context
func (r *ApiToken) CreateWithContext(ctx context.Context, req *ApiTokenRequestBody) (*ApiTokenModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.ApiTokens.CreateWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response ApiTokenModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Update updates an existing apitoken with typed request/response
func (r *ApiToken) Update(id any, req *ApiTokenRequestBody) (*ApiTokenModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.ApiTokens.Update(id, params)
	if err != nil {
		return nil, err
	}

	var response ApiTokenModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// UpdateWithContext updates an existing apitoken with typed request/response using provided context
func (r *ApiToken) UpdateWithContext(ctx context.Context, id any, req *ApiTokenRequestBody) (*ApiTokenModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.ApiTokens.UpdateWithContext(ctx, id, params)
	if err != nil {
		return nil, err
	}

	var response ApiTokenModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Delete deletes a apitoken with search parameters
func (r *ApiToken) Delete(req *ApiTokenSearchParams) error {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return err
	}
	_, err = r.Untyped.ApiTokens.Delete(params, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteWithContext deletes a apitoken with search parameters using provided context
func (r *ApiToken) DeleteWithContext(ctx context.Context, req *ApiTokenSearchParams) error {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return err
	}
	_, err = r.Untyped.ApiTokens.DeleteWithContext(ctx, params, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteById deletes a apitoken by ID
func (r *ApiToken) DeleteById(id any) error {
	_, err := r.Untyped.ApiTokens.DeleteById(id, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteByIdWithContext deletes a apitoken by ID using provided context
func (r *ApiToken) DeleteByIdWithContext(ctx context.Context, id any) error {
	_, err := r.Untyped.ApiTokens.DeleteByIdWithContext(ctx, id, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// Ensure ensures a apitoken exists with typed response
func (r *ApiToken) Ensure(searchParams *ApiTokenSearchParams, body *ApiTokenRequestBody) (*ApiTokenModel, error) {
	searchParamsConverted, err := vast_client.NewParamsFromStruct(searchParams)
	if err != nil {
		return nil, err
	}
	bodyConverted, err := vast_client.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.ApiTokens.Ensure(searchParamsConverted, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response ApiTokenModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// EnsureWithContext ensures a apitoken exists with typed response using provided context
func (r *ApiToken) EnsureWithContext(ctx context.Context, searchParams *ApiTokenSearchParams, body *ApiTokenRequestBody) (*ApiTokenModel, error) {
	searchParamsConverted, err := vast_client.NewParamsFromStruct(searchParams)
	if err != nil {
		return nil, err
	}
	bodyConverted, err := vast_client.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.ApiTokens.EnsureWithContext(ctx, searchParamsConverted, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response ApiTokenModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// EnsureByName ensures a apitoken exists by name with typed response
func (r *ApiToken) EnsureByName(name string, body *ApiTokenRequestBody) (*ApiTokenModel, error) {
	bodyConverted, err := vast_client.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.ApiTokens.EnsureByName(name, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response ApiTokenModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// EnsureByNameWithContext ensures a apitoken exists by name with typed response using provided context
func (r *ApiToken) EnsureByNameWithContext(ctx context.Context, name string, body *ApiTokenRequestBody) (*ApiTokenModel, error) {
	bodyConverted, err := vast_client.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.ApiTokens.EnsureByNameWithContext(ctx, name, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response ApiTokenModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Exists checks if a apitoken exists
func (r *ApiToken) Exists(req *ApiTokenSearchParams) (bool, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.ApiTokens.Exists(params)
}

// ExistsWithContext checks if a apitoken exists using provided context
func (r *ApiToken) ExistsWithContext(ctx context.Context, req *ApiTokenSearchParams) (bool, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.ApiTokens.ExistsWithContext(ctx, params)
}

// MustExists checks if a apitoken exists and panics if not
func (r *ApiToken) MustExists(req *ApiTokenSearchParams) bool {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.ApiTokens.MustExists(params)
}

// MustExistsWithContext checks if a apitoken exists and panics if not using provided context
func (r *ApiToken) MustExistsWithContext(ctx context.Context, req *ApiTokenSearchParams) bool {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.ApiTokens.MustExistsWithContext(ctx, params)
}

// -----------------------------------------------------
// RENDERABLE INTERFACE METHODS
// -----------------------------------------------------

// PrettyTable returns a formatted table representation of the ApiTokenModel
func (m *ApiTokenModel) PrettyTable() string {
	return m.toRecord().PrettyTable()
}

// PrettyJson returns a JSON representation of the ApiTokenModel
func (m *ApiTokenModel) PrettyJson(indent ...string) string {
	return m.toRecord().PrettyJson(indent...)
}

// toRecord converts the ApiTokenModel to a Record (map[string]any) with @resourceType
func (m *ApiTokenModel) toRecord() vast_client.Record {
	// Convert struct to map using JSON marshaling
	jsonBytes, err := json.Marshal(m)
	if err != nil {
		return vast_client.Record{"error": fmt.Sprintf("failed to marshal struct: %v", err)}
	}

	var record vast_client.Record
	if err := json.Unmarshal(jsonBytes, &record); err != nil {
		return vast_client.Record{"error": fmt.Sprintf("failed to unmarshal to record: %v", err)}
	}

	// Add resource type using reflection
	record["@resourceType"] = reflect.TypeOf(*m).Name()

	return record
}
