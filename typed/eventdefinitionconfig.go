// Code generated by generate-typed-resources. DO NOT EDIT.

package typed

import (
	"context"
	"encoding/json"
	"fmt"
	"reflect"

	vast_client "github.com/vast-data/go-vast-client"
)

// -----------------------------------------------------
// SEARCH PARAMS
// -----------------------------------------------------

// EventDefinitionConfigSearchParams represents the search parameters for EventDefinitionConfig operations
// Generated from GET query parameters for resource: eventdefinitionconfigs
type EventDefinitionConfigSearchParams struct {
}

// -----------------------------------------------------
// MODEL
// -----------------------------------------------------

// EventDefinitionConfigModel represents the model data for EventDefinitionConfig operations
// Generated from schema: EventDefinitionConfig
type EventDefinitionConfigModel struct {
	AuditLogsRetention    int64     `json:"audit_logs_retention,omitempty" yaml:"audit_logs_retention,omitempty" required:"false" doc:"Audit logs retention in days"`
	CriticalValue         string    `json:"critical_value,omitempty" yaml:"critical_value,omitempty" required:"false" doc:"Maps CRITICAL severity to a different value. Default: CRITICAL"`
	DisableActions        bool      `json:"disable_actions,omitempty" yaml:"disable_actions,omitempty" required:"false" doc:""`
	EmailRecipients       *[]string `json:"email_recipients,omitempty" yaml:"email_recipients,omitempty" required:"false" doc:"List of emails you want to notify in case this alarm occurs"`
	EmailSender           string    `json:"email_sender,omitempty" yaml:"email_sender,omitempty" required:"false" doc:""`
	EmailSubject          string    `json:"email_subject,omitempty" yaml:"email_subject,omitempty" required:"false" doc:""`
	Id                    int64     `json:"id,omitempty" yaml:"id,omitempty" required:"false" doc:""`
	InfoValue             string    `json:"info_value,omitempty" yaml:"info_value,omitempty" required:"false" doc:"Maps INFO severity to a different severity value. Default: INFO"`
	MajorValue            string    `json:"major_value,omitempty" yaml:"major_value,omitempty" required:"false" doc:"Maps MAJOR severity to a different severity value. Default: MAJOR"`
	MinorValue            string    `json:"minor_value,omitempty" yaml:"minor_value,omitempty" required:"false" doc:"Maps MINOR severity to a different severity value. Default: MINOR"`
	QuotaEmailHourlyLimit int64     `json:"quota_email_hourly_limit,omitempty" yaml:"quota_email_hourly_limit,omitempty" required:"false" doc:"Maximum quota alert emails VMS will send per hour"`
	QuotaEmailInterval    string    `json:"quota_email_interval,omitempty" yaml:"quota_email_interval,omitempty" required:"false" doc:"Minimum interval between emails to the same address. D HH:MM:SS"`
	QuotaEmailProvider    string    `json:"quota_email_provider,omitempty" yaml:"quota_email_provider,omitempty" required:"false" doc:""`
	QuotaEmailSuffix      string    `json:"quota_email_suffix,omitempty" yaml:"quota_email_suffix,omitempty" required:"false" doc:""`
	SmtpHost              string    `json:"smtp_host,omitempty" yaml:"smtp_host,omitempty" required:"false" doc:"SMTP host for alert emails"`
	SmtpPassword          string    `json:"smtp_password,omitempty" yaml:"smtp_password,omitempty" required:"false" doc:"Password for SMTP authentication"`
	SmtpPort              int64     `json:"smtp_port,omitempty" yaml:"smtp_port,omitempty" required:"false" doc:"Connection port on the SMTP host"`
	SmtpUseTls            bool      `json:"smtp_use_tls,omitempty" yaml:"smtp_use_tls,omitempty" required:"false" doc:""`
	SmtpUser              string    `json:"smtp_user,omitempty" yaml:"smtp_user,omitempty" required:"false" doc:"User for SMTP authentication"`
	SyslogHost            string    `json:"syslog_host,omitempty" yaml:"syslog_host,omitempty" required:"false" doc:"Syslog host for events logging. Use commas for multiple hosts"`
	SyslogIpmiAudit       bool      `json:"syslog_ipmi_audit,omitempty" yaml:"syslog_ipmi_audit,omitempty" required:"false" doc:"Enable CNode and DNode IPMI commands audit"`
	SyslogPort            int64     `json:"syslog_port,omitempty" yaml:"syslog_port,omitempty" required:"false" doc:"Syslog port for events logging"`
	SyslogProtocol        string    `json:"syslog_protocol,omitempty" yaml:"syslog_protocol,omitempty" required:"false" doc:"Syslog protocol for events logging. Default is UDP"`
	SyslogShellAudit      bool      `json:"syslog_shell_audit,omitempty" yaml:"syslog_shell_audit,omitempty" required:"false" doc:"Enable login/logout (GUI/CLI/VMS/SSH/IPMI),shell, clush, sudo and docker commands audit for CNode and DNode"`
	SyslogVmsAudit        bool      `json:"syslog_vms_audit,omitempty" yaml:"syslog_vms_audit,omitempty" required:"false" doc:"Enable VMS audit"`
}

// -----------------------------------------------------
// RESOURCE METHODS (READ-ONLY)
// -----------------------------------------------------

// EventDefinitionConfig provides typed access to EventDefinitionConfig resources (read-only)
type EventDefinitionConfig struct {
	Untyped *vast_client.VMSRest
}

// Get retrieves a single eventdefinitionconfig with typed request/response
func (r *EventDefinitionConfig) Get(req *EventDefinitionConfigSearchParams) (*EventDefinitionConfigModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.EventDefinitionConfigs.Get(params)
	if err != nil {
		return nil, err
	}

	var response EventDefinitionConfigModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// GetWithContext retrieves a single eventdefinitionconfig with typed request/response using provided context
func (r *EventDefinitionConfig) GetWithContext(ctx context.Context, req *EventDefinitionConfigSearchParams) (*EventDefinitionConfigModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.EventDefinitionConfigs.GetWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response EventDefinitionConfigModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// GetById retrieves a single eventdefinitionconfig by ID with typed response
func (r *EventDefinitionConfig) GetById(id any) (*EventDefinitionConfigModel, error) {
	record, err := r.Untyped.EventDefinitionConfigs.GetById(id)
	if err != nil {
		return nil, err
	}

	var response EventDefinitionConfigModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// GetByIdWithContext retrieves a single eventdefinitionconfig by ID with typed response using provided context
func (r *EventDefinitionConfig) GetByIdWithContext(ctx context.Context, id any) (*EventDefinitionConfigModel, error) {
	record, err := r.Untyped.EventDefinitionConfigs.GetByIdWithContext(ctx, id)
	if err != nil {
		return nil, err
	}

	var response EventDefinitionConfigModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// List retrieves multiple eventdefinitionconfigs with typed request/response
func (r *EventDefinitionConfig) List(req *EventDefinitionConfigSearchParams) ([]*EventDefinitionConfigModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.EventDefinitionConfigs.List(params)
	if err != nil {
		return nil, err
	}

	var response []*EventDefinitionConfigModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// ListWithContext retrieves multiple eventdefinitionconfigs with typed request/response using provided context
func (r *EventDefinitionConfig) ListWithContext(ctx context.Context, req *EventDefinitionConfigSearchParams) ([]*EventDefinitionConfigModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.EventDefinitionConfigs.ListWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response []*EventDefinitionConfigModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// Exists checks if a eventdefinitionconfig exists with the given search parameters
func (r *EventDefinitionConfig) Exists(req *EventDefinitionConfigSearchParams) (bool, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}

	return r.Untyped.EventDefinitionConfigs.Exists(params)
}

// ExistsWithContext checks if a eventdefinitionconfig exists with the given search parameters using provided context
func (r *EventDefinitionConfig) ExistsWithContext(ctx context.Context, req *EventDefinitionConfigSearchParams) (bool, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}

	return r.Untyped.EventDefinitionConfigs.ExistsWithContext(ctx, params)
}

// MustExists checks if a eventdefinitionconfig exists with the given search parameters, panics on error
func (r *EventDefinitionConfig) MustExists(req *EventDefinitionConfigSearchParams) bool {
	exists, err := r.Exists(req)
	if err != nil {
		panic(err)
	}
	return exists
}

// MustExistsWithContext checks if a eventdefinitionconfig exists with the given search parameters using provided context, panics on error
func (r *EventDefinitionConfig) MustExistsWithContext(ctx context.Context, req *EventDefinitionConfigSearchParams) bool {
	exists, err := r.ExistsWithContext(ctx, req)
	if err != nil {
		panic(err)
	}
	return exists
}

// -----------------------------------------------------
// RENDERABLE INTERFACE METHODS
// -----------------------------------------------------

// PrettyTable returns a formatted table representation of the EventDefinitionConfigModel
func (m *EventDefinitionConfigModel) PrettyTable() string {
	return m.toRecord().PrettyTable()
}

// PrettyJson returns a JSON representation of the EventDefinitionConfigModel
func (m *EventDefinitionConfigModel) PrettyJson(indent ...string) string {
	return m.toRecord().PrettyJson(indent...)
}

// toRecord converts the EventDefinitionConfigModel to a Record (map[string]any) with @resourceType
func (m *EventDefinitionConfigModel) toRecord() vast_client.Record {
	// Convert struct to map using JSON marshaling
	jsonBytes, err := json.Marshal(m)
	if err != nil {
		return vast_client.Record{"error": fmt.Sprintf("failed to marshal struct: %v", err)}
	}

	var record vast_client.Record
	if err := json.Unmarshal(jsonBytes, &record); err != nil {
		return vast_client.Record{"error": fmt.Sprintf("failed to unmarshal to record: %v", err)}
	}

	// Add resource type using reflection
	record["@resourceType"] = reflect.TypeOf(*m).Name()

	return record
}
