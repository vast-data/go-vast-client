// Code generated by generate-typed-resources. DO NOT EDIT.

package typed

import (
	"context"
	"encoding/json"
	"fmt"
	"reflect"

	vast_client "github.com/vast-data/go-vast-client"
)

// -----------------------------------------------------
// SEARCH PARAMS
// -----------------------------------------------------

// NisSearchParams represents the search parameters for Nis operations
// Generated from GET query parameters for resource: nis
type NisSearchParams struct {
	Guid     string `json:"guid,omitempty" yaml:"guid,omitempty" required:"false" doc:""`
	Name     string `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:"Name of the NIS configuration"`
	TenantId int64  `json:"tenant_id,omitempty" yaml:"tenant_id,omitempty" required:"false" doc:""`
}

// -----------------------------------------------------
// REQUEST BODY
// -----------------------------------------------------

// NisRequestBody represents the request body for Nis operations
// Generated from POST request body for resource: nis
type NisRequestBody struct {
	DomainName string    `json:"domain_name,omitempty" yaml:"domain_name,omitempty" required:"true" doc:"The NIS domain name shared by all the NIS servers and clients on your network."`
	Ips        *[]string `json:"ips,omitempty" yaml:"ips,omitempty" required:"true" doc:"IP addresses of NIS master and slave servers."`
	Name       string    `json:"name,omitempty" yaml:"name,omitempty" required:"true" doc:"NIS name"`
	Hosts      *[]string `json:"hosts,omitempty" yaml:"hosts,omitempty" required:"false" doc:"Host names of NIS master and slave servers."`
	Servers    *[]string `json:"servers,omitempty" yaml:"servers,omitempty" required:"false" doc:"NIS master and slave servers (limited to ten servers). You can specify each server by its IP or host name, up to 48 characters. Separate hosts with commas."`
}

// -----------------------------------------------------
// MODEL
// -----------------------------------------------------

// NisModel represents the model data for Nis operations
// Generated from schema: NIS
type NisModel struct {
	DomainName           string    `json:"domain_name,omitempty" yaml:"domain_name,omitempty" required:"false" doc:"The NIS domain name shared by all the NIS servers and clients on the network."`
	Guid                 string    `json:"guid,omitempty" yaml:"guid,omitempty" required:"false" doc:""`
	Hosts                *[]string `json:"hosts,omitempty" yaml:"hosts,omitempty" required:"false" doc:"not in use"`
	Id                   int64     `json:"id,omitempty" yaml:"id,omitempty" required:"false" doc:""`
	Ips                  *[]string `json:"ips,omitempty" yaml:"ips,omitempty" required:"false" doc:""`
	Name                 string    `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:"Name of the NIS configuration"`
	PosixPrimaryProvider bool      `json:"posix_primary_provider,omitempty" yaml:"posix_primary_provider,omitempty" required:"false" doc:"POSIX primary provider"`
	Servers              *[]string `json:"servers,omitempty" yaml:"servers,omitempty" required:"false" doc:"NIS master and slave servers (limited to ten servers). Each server may be specified by its IP or host name, up to 48 characters."`
	State                string    `json:"state,omitempty" yaml:"state,omitempty" required:"false" doc:"Nis state"`
	TenantId             int64     `json:"tenant_id,omitempty" yaml:"tenant_id,omitempty" required:"false" doc:""`
	Title                string    `json:"title,omitempty" yaml:"title,omitempty" required:"false" doc:""`
	Url                  string    `json:"url,omitempty" yaml:"url,omitempty" required:"false" doc:""`
}

// -----------------------------------------------------
// RESOURCE METHODS
// -----------------------------------------------------

// Nis represents a typed resource for nis operations
type Nis struct {
	Untyped *vast_client.VMSRest
}

// Get retrieves a single nis with typed request/response
func (r *Nis) Get(req *NisSearchParams) (*NisModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Nis.Get(params)
	if err != nil {
		return nil, err
	}

	var response NisModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// GetWithContext retrieves a single nis with typed request/response using provided context
func (r *Nis) GetWithContext(ctx context.Context, req *NisSearchParams) (*NisModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Nis.GetWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response NisModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// GetById retrieves a single nis by ID
func (r *Nis) GetById(id any) (*NisModel, error) {
	record, err := r.Untyped.Nis.GetById(id)
	if err != nil {
		return nil, err
	}

	var response NisModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// GetByIdWithContext retrieves a single nis by ID using provided context
func (r *Nis) GetByIdWithContext(ctx context.Context, id any) (*NisModel, error) {
	record, err := r.Untyped.Nis.GetByIdWithContext(ctx, id)
	if err != nil {
		return nil, err
	}

	var response NisModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// List retrieves multiple niss with typed request/response
func (r *Nis) List(req *NisSearchParams) ([]*NisModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.Nis.List(params)
	if err != nil {
		return nil, err
	}

	var response []*NisModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// ListWithContext retrieves multiple niss with typed request/response using provided context
func (r *Nis) ListWithContext(ctx context.Context, req *NisSearchParams) ([]*NisModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.Nis.ListWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response []*NisModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// Create creates a new nis with typed request/response
func (r *Nis) Create(req *NisRequestBody) (*NisModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Nis.Create(params)
	if err != nil {
		return nil, err
	}

	var response NisModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// CreateWithContext creates a new nis with typed request/response using provided context
func (r *Nis) CreateWithContext(ctx context.Context, req *NisRequestBody) (*NisModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Nis.CreateWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response NisModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Update updates an existing nis with typed request/response
func (r *Nis) Update(id any, req *NisRequestBody) (*NisModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Nis.Update(id, params)
	if err != nil {
		return nil, err
	}

	var response NisModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// UpdateWithContext updates an existing nis with typed request/response using provided context
func (r *Nis) UpdateWithContext(ctx context.Context, id any, req *NisRequestBody) (*NisModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Nis.UpdateWithContext(ctx, id, params)
	if err != nil {
		return nil, err
	}

	var response NisModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Delete deletes a nis with search parameters
func (r *Nis) Delete(req *NisSearchParams) error {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return err
	}
	_, err = r.Untyped.Nis.Delete(params, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteWithContext deletes a nis with search parameters using provided context
func (r *Nis) DeleteWithContext(ctx context.Context, req *NisSearchParams) error {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return err
	}
	_, err = r.Untyped.Nis.DeleteWithContext(ctx, params, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteById deletes a nis by ID
func (r *Nis) DeleteById(id any) error {
	_, err := r.Untyped.Nis.DeleteById(id, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteByIdWithContext deletes a nis by ID using provided context
func (r *Nis) DeleteByIdWithContext(ctx context.Context, id any) error {
	_, err := r.Untyped.Nis.DeleteByIdWithContext(ctx, id, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// Ensure ensures a nis exists with typed response
func (r *Nis) Ensure(searchParams *NisSearchParams, body *NisRequestBody) (*NisModel, error) {
	searchParamsConverted, err := vast_client.NewParamsFromStruct(searchParams)
	if err != nil {
		return nil, err
	}
	bodyConverted, err := vast_client.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Nis.Ensure(searchParamsConverted, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response NisModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// EnsureWithContext ensures a nis exists with typed response using provided context
func (r *Nis) EnsureWithContext(ctx context.Context, searchParams *NisSearchParams, body *NisRequestBody) (*NisModel, error) {
	searchParamsConverted, err := vast_client.NewParamsFromStruct(searchParams)
	if err != nil {
		return nil, err
	}
	bodyConverted, err := vast_client.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Nis.EnsureWithContext(ctx, searchParamsConverted, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response NisModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// EnsureByName ensures a nis exists by name with typed response
func (r *Nis) EnsureByName(name string, body *NisRequestBody) (*NisModel, error) {
	bodyConverted, err := vast_client.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Nis.EnsureByName(name, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response NisModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// EnsureByNameWithContext ensures a nis exists by name with typed response using provided context
func (r *Nis) EnsureByNameWithContext(ctx context.Context, name string, body *NisRequestBody) (*NisModel, error) {
	bodyConverted, err := vast_client.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Nis.EnsureByNameWithContext(ctx, name, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response NisModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Exists checks if a nis exists
func (r *Nis) Exists(req *NisSearchParams) (bool, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.Nis.Exists(params)
}

// ExistsWithContext checks if a nis exists using provided context
func (r *Nis) ExistsWithContext(ctx context.Context, req *NisSearchParams) (bool, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.Nis.ExistsWithContext(ctx, params)
}

// MustExists checks if a nis exists and panics if not
func (r *Nis) MustExists(req *NisSearchParams) bool {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.Nis.MustExists(params)
}

// MustExistsWithContext checks if a nis exists and panics if not using provided context
func (r *Nis) MustExistsWithContext(ctx context.Context, req *NisSearchParams) bool {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.Nis.MustExistsWithContext(ctx, params)
}

// -----------------------------------------------------
// RENDERABLE INTERFACE METHODS
// -----------------------------------------------------

// PrettyTable returns a formatted table representation of the NisModel
func (m *NisModel) PrettyTable() string {
	return m.toRecord().PrettyTable()
}

// PrettyJson returns a JSON representation of the NisModel
func (m *NisModel) PrettyJson(indent ...string) string {
	return m.toRecord().PrettyJson(indent...)
}

// toRecord converts the NisModel to a Record (map[string]any) with @resourceType
func (m *NisModel) toRecord() vast_client.Record {
	// Convert struct to map using JSON marshaling
	jsonBytes, err := json.Marshal(m)
	if err != nil {
		return vast_client.Record{"error": fmt.Sprintf("failed to marshal struct: %v", err)}
	}

	var record vast_client.Record
	if err := json.Unmarshal(jsonBytes, &record); err != nil {
		return vast_client.Record{"error": fmt.Sprintf("failed to unmarshal to record: %v", err)}
	}

	// Add resource type using reflection
	record["@resourceType"] = reflect.TypeOf(*m).Name()

	return record
}
