// Code generated by generate-typed-resources. DO NOT EDIT.

package typed

import (
	"context"

	vast_client "github.com/vast-data/go-vast-client"
)

// -----------------------------------------------------
// SEARCH PARAMS
// -----------------------------------------------------

// VipPoolSearchParams represents the search parameters for VipPool operations
// Generated from GET query parameters for resource: vippools
type VipPoolSearchParams struct {
	EndIp          string `json:"end_ip,omitempty" yaml:"end_ip,omitempty" required:"false" doc:"Filter by end IP of VIP pool range"`
	Guid           string `json:"guid,omitempty" yaml:"guid,omitempty" required:"false" doc:"Global unique ID"`
	Name           string `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:"VIP pool name"`
	PortMembership int64  `json:"port_membership,omitempty" yaml:"port_membership,omitempty" required:"false" doc:"Filters pools by port affinity"`
	ServesTenant   string `json:"serves_tenant,omitempty" yaml:"serves_tenant,omitempty" required:"false" doc:"Filter by served tenants. Accepts tenant ID or \"all\" for all served tenants."`
	StartIp        string `json:"start_ip,omitempty" yaml:"start_ip,omitempty" required:"false" doc:"Filter by start IP of VIP pool range"`
	TenantId       int64  `json:"tenant_id,omitempty" yaml:"tenant_id,omitempty" required:"false" doc:"Filter by tenant. Specify tenant ID."`
}

// -----------------------------------------------------
// REQUEST BODY
// -----------------------------------------------------

// VipPoolRequestBody represents the request body for VipPool operations
// Generated from POST request body for resource: vippools
type VipPoolRequestBody struct {
	SubnetCidr              int64      `json:"subnet_cidr,omitempty" yaml:"subnet_cidr,omitempty" required:"true" doc:"The subnet expressed as a CIDR index (number of bits in each IP that belong to the subnet)"`
	BgpConfigId             int64      `json:"bgp_config_id,omitempty" yaml:"bgp_config_id,omitempty" required:"false" doc:"The ID of the BGP configuration to use for layer 3 connectivity configuration"`
	ClusterId               int64      `json:"cluster_id,omitempty" yaml:"cluster_id,omitempty" required:"false" doc:""`
	CnodeIds                string     `json:"cnode_ids,omitempty" yaml:"cnode_ids,omitempty" required:"false" doc:"Dedicates a specific group of CNodes to the VIP pool. List the IDs of the CNodes. Separate IDs by commas. This is a way to dedicate a specific set of CNodes to a specific set of client hosts or applications. Overridden if cnode_names is passed."`
	CnodeNames              string     `json:"cnode_names,omitempty" yaml:"cnode_names,omitempty" required:"false" doc:"Dedicates a specific group of CNodes to the VIP pool. List the names of the CNodes. Separate names by commas. This is a way to dedicate a specific set of CNodes to a specific set of client hosts or applications. Overrides cnode_ids."`
	DomainName              string     `json:"domain_name,omitempty" yaml:"domain_name,omitempty" required:"false" doc:"Domain name for the VAST DNS server. If a DNS configuration exists, the domain suffix defined in the DNS server configuration is appended to this domain name to form a FQDN which the DNS server resolves to this VIP pool."`
	EnableL3                bool       `json:"enable_l3,omitempty" yaml:"enable_l3,omitempty" required:"false" doc:"Enables L3 networking, in which the cluster's CNodes act as Border Gateway Protocol (BGP) peers belonging to a VAST Autonomous system (AS) which is  connected to the client network's AS"`
	EnableWeightedBalancing bool       `json:"enable_weighted_balancing,omitempty" yaml:"enable_weighted_balancing,omitempty" required:"false" doc:"Enable weighted balancing"`
	Enabled                 bool       `json:"enabled,omitempty" yaml:"enabled,omitempty" required:"false" doc:"Set to false to disable the pool"`
	EndIp                   string     `json:"end_ip,omitempty" yaml:"end_ip,omitempty" required:"false" doc:"Not currently in use. Use ip_ranges instead."`
	GwIp                    string     `json:"gw_ip,omitempty" yaml:"gw_ip,omitempty" required:"false" doc:"The IP address of a local gateway device if client traffic is routed through one"`
	GwIpv6                  string     `json:"gw_ipv6,omitempty" yaml:"gw_ipv6,omitempty" required:"false" doc:"The IP address of a local gateway device if client traffic is routed through one"`
	IpRanges                [][]string `json:"ip_ranges,omitempty" yaml:"ip_ranges,omitempty" required:"false" doc:"Array of IP ranges to include in the vippool."`
	Name                    string     `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:""`
	PeerAsn                 int64      `json:"peer_asn,omitempty" yaml:"peer_asn,omitempty" required:"false" doc:"The client network's ASN. Must not be equal to vast_asn. Applicable only if enable_ls is true."`
	PortMembership          string     `json:"port_membership,omitempty" yaml:"port_membership,omitempty" required:"false" doc:"Allocates left, right or all CNode ports to the VIP pool. Allocating the left port and the right port in different VIP pools enables the CNodes to be connected to multiple networks simultaneously. Default: all"`
	Role                    string     `json:"role,omitempty" yaml:"role,omitempty" required:"false" doc:"'PROTOCOLS' dedicates the VIP pool to client traffic from all of the supported access protocols (NFSv3, NFSv4.2, SMBv2, S3, Database). At least one VIP pool must be created to enable client access. 'REPLICATION' dedicates the VIP pool for connectivity with an async replication peer cluster. This is needed for async  replication. 'BIG_CATALOG' dedicates the VIP pool to VAST Catalog query access from the client network."`
	StartIp                 string     `json:"start_ip,omitempty" yaml:"start_ip,omitempty" required:"false" doc:"Not currently in use. Use ip_ranges instead."`
	SubnetCidrIpv6          int64      `json:"subnet_cidr_ipv6,omitempty" yaml:"subnet_cidr_ipv6,omitempty" required:"false" doc:"The subnet expressed as a CIDR index (number of bits in each IP that belong to the subnet)"`
	TenantId                int64      `json:"tenant_id,omitempty" yaml:"tenant_id,omitempty" required:"false" doc:"Tenant ID"`
	VastAsn                 int64      `json:"vast_asn,omitempty" yaml:"vast_asn,omitempty" required:"false" doc:"The cluster's ASN. Must not be equal to peer_asn. Applicable only if enable_ls is true."`
	Vlan                    int64      `json:"vlan,omitempty" yaml:"vlan,omitempty" required:"false" doc:"To tag the VIP pool with a specific VLAN on the data network, specify the VLAN (0-4096). The VIP pool will be exposed only to the specified VLAN on the client network."`
	VmsPreferred            bool       `json:"vms_preferred,omitempty" yaml:"vms_preferred,omitempty" required:"false" doc:"If true, CNodes participating in the vip pool are preferred in VMS host election"`
}

// -----------------------------------------------------
// RESPONSE BODY
// -----------------------------------------------------

// VipPoolResponseBody represents the response data for VipPool operations
// Generated from POST response body for resource: vippools
type VipPoolResponseBody struct {
	ActiveCnodeIds          []int64    `json:"active_cnode_ids,omitempty" yaml:"active_cnode_ids,omitempty" required:"false" doc:"IDs of active CNodes"`
	ActiveInterfaces        int64      `json:"active_interfaces,omitempty" yaml:"active_interfaces,omitempty" required:"false" doc:"Number of active interfaces"`
	BgpConfigId             int64      `json:"bgp_config_id,omitempty" yaml:"bgp_config_id,omitempty" required:"false" doc:"The ID of the BGP configuration applied for L3 connectivity"`
	Cluster                 string     `json:"cluster,omitempty" yaml:"cluster,omitempty" required:"false" doc:"Parent cluster"`
	ClusterId               int64      `json:"cluster_id,omitempty" yaml:"cluster_id,omitempty" required:"false" doc:"Cluster ID"`
	CnodeIds                []int64    `json:"cnode_ids,omitempty" yaml:"cnode_ids,omitempty" required:"false" doc:"If a group of CNodes is dedicated to the VIP Pool, these are the IDs of the CNodes comprising the group"`
	Cnodes                  []string   `json:"cnodes,omitempty" yaml:"cnodes,omitempty" required:"false" doc:""`
	DomainName              string     `json:"domain_name,omitempty" yaml:"domain_name,omitempty" required:"false" doc:"Domain name for the VAST DNS server. The domain suffix defined in the DNS server configuration is appended to this domain name to form a FQDN which the DNS server resolves to this VIP pool."`
	EnableL3                bool       `json:"enable_l3,omitempty" yaml:"enable_l3,omitempty" required:"false" doc:"When true, L3 networking is enabled."`
	EnableWeightedBalancing bool       `json:"enable_weighted_balancing,omitempty" yaml:"enable_weighted_balancing,omitempty" required:"false" doc:"Weighted Balancing Enabled"`
	Enabled                 bool       `json:"enabled,omitempty" yaml:"enabled,omitempty" required:"false" doc:"True if the VIP pool is enabled"`
	EndIp                   string     `json:"end_ip,omitempty" yaml:"end_ip,omitempty" required:"false" doc:"Not currently in use. Use ip_ranges instead."`
	Guid                    string     `json:"guid,omitempty" yaml:"guid,omitempty" required:"false" doc:"Global unique ID"`
	GwIp                    string     `json:"gw_ip,omitempty" yaml:"gw_ip,omitempty" required:"false" doc:"The IP address of a local gateway device if client traffic is routed through one"`
	GwIpv6                  string     `json:"gw_ipv6,omitempty" yaml:"gw_ipv6,omitempty" required:"false" doc:"GW IPv6 Address"`
	Id                      int64      `json:"id,omitempty" yaml:"id,omitempty" required:"false" doc:"VIP Pool ID"`
	IpRanges                [][]string `json:"ip_ranges,omitempty" yaml:"ip_ranges,omitempty" required:"false" doc:"The IP ranges that comprise the vippool"`
	Name                    string     `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:"VIP pool name"`
	PeerAsn                 int64      `json:"peer_asn,omitempty" yaml:"peer_asn,omitempty" required:"false" doc:"The client network's ASN. Applicable only if enable_l3 is true."`
	PortMembership          string     `json:"port_membership,omitempty" yaml:"port_membership,omitempty" required:"false" doc:"Allocation of left, right or all CNode ports to the VIP pool. Allocating the left port and the right port in different VIP pools enables the CNodes to be connected to multiple networks simultaneously. Default: all"`
	RangesSummary           string     `json:"ranges_summary,omitempty" yaml:"ranges_summary,omitempty" required:"false" doc:"IP ranges"`
	Role                    string     `json:"role,omitempty" yaml:"role,omitempty" required:"false" doc:"'PROTOCOLS' dedicates the VIP pool to client traffic from all of the supported access protocols (NFSv3, NFSv4.1, NFSv4.2, SMBv2, S3, Database, Block, Kafka). At least one VIP pool must be created to enable client access. 'REPLICATION' dedicates the VIP pool for connectivity with an async replication peer cluster. This is needed for async  replication. 'BIG_CATALOG' dedicates the VIP pool to VAST Catalog query access from the client network."`
	StartIp                 string     `json:"start_ip,omitempty" yaml:"start_ip,omitempty" required:"false" doc:"Not currently in use. Use ip_ranges instead."`
	State                   string     `json:"state,omitempty" yaml:"state,omitempty" required:"false" doc:"The state of the VIP pool"`
	SubnetCidr              int64      `json:"subnet_cidr,omitempty" yaml:"subnet_cidr,omitempty" required:"false" doc:"The subnet expressed as a CIDR index (number of bits in each IPv4 address that belong to the subnet)"`
	SubnetCidrIpv6          int64      `json:"subnet_cidr_ipv6,omitempty" yaml:"subnet_cidr_ipv6,omitempty" required:"false" doc:"IPv6 Subnet CIDR prefix (bits number)"`
	Sync                    string     `json:"sync,omitempty" yaml:"sync,omitempty" required:"false" doc:"Synchronization state with leader"`
	SyncTime                string     `json:"sync_time,omitempty" yaml:"sync_time,omitempty" required:"false" doc:"Synchronization time with leader"`
	TenantId                int64      `json:"tenant_id,omitempty" yaml:"tenant_id,omitempty" required:"false" doc:"Tenant ID. If set, only the tenant with this ID can access the VIP pool. If not set, the VIP pool is accessible to all tenants."`
	TenantName              string     `json:"tenant_name,omitempty" yaml:"tenant_name,omitempty" required:"false" doc:"Tenant Name"`
	Title                   string     `json:"title,omitempty" yaml:"title,omitempty" required:"false" doc:"IP range of the VIP pool"`
	Url                     string     `json:"url,omitempty" yaml:"url,omitempty" required:"false" doc:"The VIP Pool's endpoint URL for API operations"`
	VastAsn                 int64      `json:"vast_asn,omitempty" yaml:"vast_asn,omitempty" required:"false" doc:"The cluster's ASN. Applicable only if enable_l3 is true."`
	Vlan                    int64      `json:"vlan,omitempty" yaml:"vlan,omitempty" required:"false" doc:"VIPPool VLAN, if the VIP pool is tagged with a specific VLAN. The VIP pool is exposed only to the specified VLAN on the client data network"`
	VmsPreferred            bool       `json:"vms_preferred,omitempty" yaml:"vms_preferred,omitempty" required:"false" doc:"If true, CNodes participating in the vip pool are preferred in VMS host election"`
}

// -----------------------------------------------------
// RESOURCE METHODS
// -----------------------------------------------------

// VipPool represents a typed resource for vippool operations
type VipPool struct {
	Untyped *vast_client.VMSRest
}

// Get retrieves a single vippool with typed request/response
func (r *VipPool) Get(req *VipPoolSearchParams) (*VipPoolResponseBody, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.VipPools.Get(params)
	if err != nil {
		return nil, err
	}

	var response VipPoolResponseBody
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// GetWithContext retrieves a single vippool with typed request/response using provided context
func (r *VipPool) GetWithContext(ctx context.Context, req *VipPoolSearchParams) (*VipPoolResponseBody, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.VipPools.GetWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response VipPoolResponseBody
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// GetById retrieves a single vippool by ID
func (r *VipPool) GetById(id any) (*VipPoolResponseBody, error) {
	record, err := r.Untyped.VipPools.GetById(id)
	if err != nil {
		return nil, err
	}

	var response VipPoolResponseBody
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// GetByIdWithContext retrieves a single vippool by ID using provided context
func (r *VipPool) GetByIdWithContext(ctx context.Context, id any) (*VipPoolResponseBody, error) {
	record, err := r.Untyped.VipPools.GetByIdWithContext(ctx, id)
	if err != nil {
		return nil, err
	}

	var response VipPoolResponseBody
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// List retrieves multiple vippools with typed request/response
func (r *VipPool) List(req *VipPoolSearchParams) ([]*VipPoolResponseBody, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.VipPools.List(params)
	if err != nil {
		return nil, err
	}

	var response []*VipPoolResponseBody
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// ListWithContext retrieves multiple vippools with typed request/response using provided context
func (r *VipPool) ListWithContext(ctx context.Context, req *VipPoolSearchParams) ([]*VipPoolResponseBody, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.VipPools.ListWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response []*VipPoolResponseBody
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// Create creates a new vippool with typed request/response
func (r *VipPool) Create(req *VipPoolRequestBody) (*VipPoolResponseBody, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.VipPools.Create(params)
	if err != nil {
		return nil, err
	}

	var response VipPoolResponseBody
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// CreateWithContext creates a new vippool with typed request/response using provided context
func (r *VipPool) CreateWithContext(ctx context.Context, req *VipPoolRequestBody) (*VipPoolResponseBody, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.VipPools.CreateWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response VipPoolResponseBody
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Update updates an existing vippool with typed request/response
func (r *VipPool) Update(id any, req *VipPoolRequestBody) (*VipPoolResponseBody, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.VipPools.Update(id, params)
	if err != nil {
		return nil, err
	}

	var response VipPoolResponseBody
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// UpdateWithContext updates an existing vippool with typed request/response using provided context
func (r *VipPool) UpdateWithContext(ctx context.Context, id any, req *VipPoolRequestBody) (*VipPoolResponseBody, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.VipPools.UpdateWithContext(ctx, id, params)
	if err != nil {
		return nil, err
	}

	var response VipPoolResponseBody
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Delete deletes a vippool with search parameters
func (r *VipPool) Delete(req *VipPoolSearchParams) error {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return err
	}
	_, err = r.Untyped.VipPools.Delete(params, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteWithContext deletes a vippool with search parameters using provided context
func (r *VipPool) DeleteWithContext(ctx context.Context, req *VipPoolSearchParams) error {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return err
	}
	_, err = r.Untyped.VipPools.DeleteWithContext(ctx, params, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteById deletes a vippool by ID
func (r *VipPool) DeleteById(id any) error {
	_, err := r.Untyped.VipPools.DeleteById(id, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteByIdWithContext deletes a vippool by ID using provided context
func (r *VipPool) DeleteByIdWithContext(ctx context.Context, id any) error {
	_, err := r.Untyped.VipPools.DeleteByIdWithContext(ctx, id, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// Ensure ensures a vippool exists with typed response
func (r *VipPool) Ensure(searchParams *VipPoolSearchParams, body *VipPoolRequestBody) (*VipPoolResponseBody, error) {
	searchParamsConverted, err := vast_client.NewParamsFromStruct(searchParams)
	if err != nil {
		return nil, err
	}
	bodyConverted, err := vast_client.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.VipPools.Ensure(searchParamsConverted, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response VipPoolResponseBody
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// EnsureWithContext ensures a vippool exists with typed response using provided context
func (r *VipPool) EnsureWithContext(ctx context.Context, searchParams *VipPoolSearchParams, body *VipPoolRequestBody) (*VipPoolResponseBody, error) {
	searchParamsConverted, err := vast_client.NewParamsFromStruct(searchParams)
	if err != nil {
		return nil, err
	}
	bodyConverted, err := vast_client.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.VipPools.EnsureWithContext(ctx, searchParamsConverted, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response VipPoolResponseBody
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// EnsureByName ensures a vippool exists by name with typed response
func (r *VipPool) EnsureByName(name string, body *VipPoolRequestBody) (*VipPoolResponseBody, error) {
	bodyConverted, err := vast_client.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.VipPools.EnsureByName(name, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response VipPoolResponseBody
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// EnsureByNameWithContext ensures a vippool exists by name with typed response using provided context
func (r *VipPool) EnsureByNameWithContext(ctx context.Context, name string, body *VipPoolRequestBody) (*VipPoolResponseBody, error) {
	bodyConverted, err := vast_client.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.VipPools.EnsureByNameWithContext(ctx, name, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response VipPoolResponseBody
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Exists checks if a vippool exists
func (r *VipPool) Exists(req *VipPoolSearchParams) (bool, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.VipPools.Exists(params)
}

// ExistsWithContext checks if a vippool exists using provided context
func (r *VipPool) ExistsWithContext(ctx context.Context, req *VipPoolSearchParams) (bool, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.VipPools.ExistsWithContext(ctx, params)
}

// MustExists checks if a vippool exists and panics if not
func (r *VipPool) MustExists(req *VipPoolSearchParams) bool {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.VipPools.MustExists(params)
}

// MustExistsWithContext checks if a vippool exists and panics if not using provided context
func (r *VipPool) MustExistsWithContext(ctx context.Context, req *VipPoolSearchParams) bool {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.VipPools.MustExistsWithContext(ctx, params)
}
