// Code generated by generate-typed-resources. DO NOT EDIT.

package typed

import (
	"context"
	"encoding/json"
	"fmt"
	"reflect"

	vast_client "github.com/vast-data/go-vast-client"
)

// -----------------------------------------------------
// SEARCH PARAMS
// -----------------------------------------------------

// EncryptionGroupSearchParams represents the search parameters for EncryptionGroup operations
// Generated from GET query parameters for resource: encryptiongroups
type EncryptionGroupSearchParams struct {
	Guid string `json:"guid,omitempty" yaml:"guid,omitempty" required:"true" doc:""`
}

// -----------------------------------------------------
// MODEL
// -----------------------------------------------------

// EncryptionGroupModel represents the model data for EncryptionGroup operations
// Generated from schema: EncryptionGroup
type EncryptionGroupModel struct {
	Crn   string `json:"crn,omitempty" yaml:"crn,omitempty" required:"true" doc:"Encryption Group Cloud Resource Name"`
	Guid  string `json:"guid,omitempty" yaml:"guid,omitempty" required:"true" doc:""`
	Id    int64  `json:"id,omitempty" yaml:"id,omitempty" required:"true" doc:""`
	State string `json:"state,omitempty" yaml:"state,omitempty" required:"true" doc:"Encryption Group State"`
}

// -----------------------------------------------------
// RESOURCE METHODS (READ-ONLY)
// -----------------------------------------------------

// EncryptionGroup provides typed access to EncryptionGroup resources (read-only)
type EncryptionGroup struct {
	Untyped *vast_client.VMSRest
}

// Get retrieves a single encryptiongroup with typed request/response
func (r *EncryptionGroup) Get(req *EncryptionGroupSearchParams) (*EncryptionGroupModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.EncryptionGroups.Get(params)
	if err != nil {
		return nil, err
	}

	var response EncryptionGroupModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// GetWithContext retrieves a single encryptiongroup with typed request/response using provided context
func (r *EncryptionGroup) GetWithContext(ctx context.Context, req *EncryptionGroupSearchParams) (*EncryptionGroupModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.EncryptionGroups.GetWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response EncryptionGroupModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// GetById retrieves a single encryptiongroup by ID with typed response
func (r *EncryptionGroup) GetById(id any) (*EncryptionGroupModel, error) {
	record, err := r.Untyped.EncryptionGroups.GetById(id)
	if err != nil {
		return nil, err
	}

	var response EncryptionGroupModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// GetByIdWithContext retrieves a single encryptiongroup by ID with typed response using provided context
func (r *EncryptionGroup) GetByIdWithContext(ctx context.Context, id any) (*EncryptionGroupModel, error) {
	record, err := r.Untyped.EncryptionGroups.GetByIdWithContext(ctx, id)
	if err != nil {
		return nil, err
	}

	var response EncryptionGroupModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// List retrieves multiple encryptiongroups with typed request/response
func (r *EncryptionGroup) List(req *EncryptionGroupSearchParams) ([]*EncryptionGroupModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.EncryptionGroups.List(params)
	if err != nil {
		return nil, err
	}

	var response []*EncryptionGroupModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// ListWithContext retrieves multiple encryptiongroups with typed request/response using provided context
func (r *EncryptionGroup) ListWithContext(ctx context.Context, req *EncryptionGroupSearchParams) ([]*EncryptionGroupModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.EncryptionGroups.ListWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response []*EncryptionGroupModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// Exists checks if a encryptiongroup exists with the given search parameters
func (r *EncryptionGroup) Exists(req *EncryptionGroupSearchParams) (bool, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}

	return r.Untyped.EncryptionGroups.Exists(params)
}

// ExistsWithContext checks if a encryptiongroup exists with the given search parameters using provided context
func (r *EncryptionGroup) ExistsWithContext(ctx context.Context, req *EncryptionGroupSearchParams) (bool, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}

	return r.Untyped.EncryptionGroups.ExistsWithContext(ctx, params)
}

// MustExists checks if a encryptiongroup exists with the given search parameters, panics on error
func (r *EncryptionGroup) MustExists(req *EncryptionGroupSearchParams) bool {
	exists, err := r.Exists(req)
	if err != nil {
		panic(err)
	}
	return exists
}

// MustExistsWithContext checks if a encryptiongroup exists with the given search parameters using provided context, panics on error
func (r *EncryptionGroup) MustExistsWithContext(ctx context.Context, req *EncryptionGroupSearchParams) bool {
	exists, err := r.ExistsWithContext(ctx, req)
	if err != nil {
		panic(err)
	}
	return exists
}

// -----------------------------------------------------
// RENDERABLE INTERFACE METHODS
// -----------------------------------------------------

// PrettyTable returns a formatted table representation of the EncryptionGroupModel
func (m *EncryptionGroupModel) PrettyTable() string {
	return m.toRecord().PrettyTable()
}

// PrettyJson returns a JSON representation of the EncryptionGroupModel
func (m *EncryptionGroupModel) PrettyJson(indent ...string) string {
	return m.toRecord().PrettyJson(indent...)
}

// toRecord converts the EncryptionGroupModel to a Record (map[string]any) with @resourceType
func (m *EncryptionGroupModel) toRecord() vast_client.Record {
	// Convert struct to map using JSON marshaling
	jsonBytes, err := json.Marshal(m)
	if err != nil {
		return vast_client.Record{"error": fmt.Sprintf("failed to marshal struct: %v", err)}
	}

	var record vast_client.Record
	if err := json.Unmarshal(jsonBytes, &record); err != nil {
		return vast_client.Record{"error": fmt.Sprintf("failed to unmarshal to record: %v", err)}
	}

	// Add resource type using reflection
	record["@resourceType"] = reflect.TypeOf(*m).Name()

	return record
}
