// Code generated by generate-typed-resources. DO NOT EDIT.

package typed

import (
	"context"
	"encoding/json"
	"fmt"
	"reflect"

	vast_client "github.com/vast-data/go-vast-client"
)

// -----------------------------------------------------
// SEARCH PARAMS
// -----------------------------------------------------

// S3PolicySearchParams represents the search parameters for S3Policy operations
// Generated from GET query parameters for resource: s3policies
type S3PolicySearchParams struct {
	Guid     string `json:"guid,omitempty" yaml:"guid,omitempty" required:"false" doc:""`
	Name     string `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:"The name of the S3 identity policy."`
	TenantId int64  `json:"tenant_id,omitempty" yaml:"tenant_id,omitempty" required:"false" doc:""`
}

// -----------------------------------------------------
// REQUEST BODY
// -----------------------------------------------------

// S3PolicyRequestBody represents the request body for S3Policy operations
// Generated from POST request body for resource: s3policies
type S3PolicyRequestBody struct {
	Name     string `json:"name,omitempty" yaml:"name,omitempty" required:"true" doc:"A name for the S3 identity policy"`
	Policy   string `json:"policy,omitempty" yaml:"policy,omitempty" required:"true" doc:"JSON policy"`
	TenantId int64  `json:"tenant_id,omitempty" yaml:"tenant_id,omitempty" required:"true" doc:"Tenant ID"`
}

// -----------------------------------------------------
// MODEL
// -----------------------------------------------------

// S3PolicyModel represents the model data for S3Policy operations
// Generated from schema: S3Policy
type S3PolicyModel struct {
	Enabled      bool      `json:"enabled,omitempty" yaml:"enabled,omitempty" required:"false" doc:""`
	Groups       *[]string `json:"groups,omitempty" yaml:"groups,omitempty" required:"false" doc:"The groups to which the S3 identity policy is attached."`
	Guid         string    `json:"guid,omitempty" yaml:"guid,omitempty" required:"false" doc:""`
	Id           int64     `json:"id,omitempty" yaml:"id,omitempty" required:"false" doc:"The ID of an S3 identity policy."`
	IsReplicated bool      `json:"is_replicated,omitempty" yaml:"is_replicated,omitempty" required:"false" doc:""`
	Name         string    `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:"The name of the S3 identity policy."`
	Policy       string    `json:"policy,omitempty" yaml:"policy,omitempty" required:"false" doc:"The S3 identity policy in JSON format."`
	TenantId     int64     `json:"tenant_id,omitempty" yaml:"tenant_id,omitempty" required:"false" doc:""`
	TenantName   string    `json:"tenant_name,omitempty" yaml:"tenant_name,omitempty" required:"false" doc:""`
	Title        string    `json:"title,omitempty" yaml:"title,omitempty" required:"false" doc:""`
	Url          string    `json:"url,omitempty" yaml:"url,omitempty" required:"false" doc:""`
	Users        *[]string `json:"users,omitempty" yaml:"users,omitempty" required:"false" doc:"The users to which the S3 identity policy is attached."`
}

// -----------------------------------------------------
// RESOURCE METHODS
// -----------------------------------------------------

// S3Policy represents a typed resource for s3policy operations
type S3Policy struct {
	Untyped *vast_client.VMSRest
}

// Get retrieves a single s3policy with typed request/response
func (r *S3Policy) Get(req *S3PolicySearchParams) (*S3PolicyModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.S3Policies.Get(params)
	if err != nil {
		return nil, err
	}

	var response S3PolicyModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// GetWithContext retrieves a single s3policy with typed request/response using provided context
func (r *S3Policy) GetWithContext(ctx context.Context, req *S3PolicySearchParams) (*S3PolicyModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.S3Policies.GetWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response S3PolicyModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// GetById retrieves a single s3policy by ID
func (r *S3Policy) GetById(id any) (*S3PolicyModel, error) {
	record, err := r.Untyped.S3Policies.GetById(id)
	if err != nil {
		return nil, err
	}

	var response S3PolicyModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// GetByIdWithContext retrieves a single s3policy by ID using provided context
func (r *S3Policy) GetByIdWithContext(ctx context.Context, id any) (*S3PolicyModel, error) {
	record, err := r.Untyped.S3Policies.GetByIdWithContext(ctx, id)
	if err != nil {
		return nil, err
	}

	var response S3PolicyModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// List retrieves multiple s3policys with typed request/response
func (r *S3Policy) List(req *S3PolicySearchParams) ([]*S3PolicyModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.S3Policies.List(params)
	if err != nil {
		return nil, err
	}

	var response []*S3PolicyModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// ListWithContext retrieves multiple s3policys with typed request/response using provided context
func (r *S3Policy) ListWithContext(ctx context.Context, req *S3PolicySearchParams) ([]*S3PolicyModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.S3Policies.ListWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response []*S3PolicyModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// Create creates a new s3policy with typed request/response
func (r *S3Policy) Create(req *S3PolicyRequestBody) (*S3PolicyModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.S3Policies.Create(params)
	if err != nil {
		return nil, err
	}

	var response S3PolicyModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// CreateWithContext creates a new s3policy with typed request/response using provided context
func (r *S3Policy) CreateWithContext(ctx context.Context, req *S3PolicyRequestBody) (*S3PolicyModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.S3Policies.CreateWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response S3PolicyModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Update updates an existing s3policy with typed request/response
func (r *S3Policy) Update(id any, req *S3PolicyRequestBody) (*S3PolicyModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.S3Policies.Update(id, params)
	if err != nil {
		return nil, err
	}

	var response S3PolicyModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// UpdateWithContext updates an existing s3policy with typed request/response using provided context
func (r *S3Policy) UpdateWithContext(ctx context.Context, id any, req *S3PolicyRequestBody) (*S3PolicyModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.S3Policies.UpdateWithContext(ctx, id, params)
	if err != nil {
		return nil, err
	}

	var response S3PolicyModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Delete deletes a s3policy with search parameters
func (r *S3Policy) Delete(req *S3PolicySearchParams) error {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return err
	}
	_, err = r.Untyped.S3Policies.Delete(params, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteWithContext deletes a s3policy with search parameters using provided context
func (r *S3Policy) DeleteWithContext(ctx context.Context, req *S3PolicySearchParams) error {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return err
	}
	_, err = r.Untyped.S3Policies.DeleteWithContext(ctx, params, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteById deletes a s3policy by ID
func (r *S3Policy) DeleteById(id any) error {
	_, err := r.Untyped.S3Policies.DeleteById(id, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteByIdWithContext deletes a s3policy by ID using provided context
func (r *S3Policy) DeleteByIdWithContext(ctx context.Context, id any) error {
	_, err := r.Untyped.S3Policies.DeleteByIdWithContext(ctx, id, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// Ensure ensures a s3policy exists with typed response
func (r *S3Policy) Ensure(searchParams *S3PolicySearchParams, body *S3PolicyRequestBody) (*S3PolicyModel, error) {
	searchParamsConverted, err := vast_client.NewParamsFromStruct(searchParams)
	if err != nil {
		return nil, err
	}
	bodyConverted, err := vast_client.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.S3Policies.Ensure(searchParamsConverted, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response S3PolicyModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// EnsureWithContext ensures a s3policy exists with typed response using provided context
func (r *S3Policy) EnsureWithContext(ctx context.Context, searchParams *S3PolicySearchParams, body *S3PolicyRequestBody) (*S3PolicyModel, error) {
	searchParamsConverted, err := vast_client.NewParamsFromStruct(searchParams)
	if err != nil {
		return nil, err
	}
	bodyConverted, err := vast_client.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.S3Policies.EnsureWithContext(ctx, searchParamsConverted, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response S3PolicyModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// EnsureByName ensures a s3policy exists by name with typed response
func (r *S3Policy) EnsureByName(name string, body *S3PolicyRequestBody) (*S3PolicyModel, error) {
	bodyConverted, err := vast_client.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.S3Policies.EnsureByName(name, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response S3PolicyModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// EnsureByNameWithContext ensures a s3policy exists by name with typed response using provided context
func (r *S3Policy) EnsureByNameWithContext(ctx context.Context, name string, body *S3PolicyRequestBody) (*S3PolicyModel, error) {
	bodyConverted, err := vast_client.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.S3Policies.EnsureByNameWithContext(ctx, name, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response S3PolicyModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Exists checks if a s3policy exists
func (r *S3Policy) Exists(req *S3PolicySearchParams) (bool, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.S3Policies.Exists(params)
}

// ExistsWithContext checks if a s3policy exists using provided context
func (r *S3Policy) ExistsWithContext(ctx context.Context, req *S3PolicySearchParams) (bool, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.S3Policies.ExistsWithContext(ctx, params)
}

// MustExists checks if a s3policy exists and panics if not
func (r *S3Policy) MustExists(req *S3PolicySearchParams) bool {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.S3Policies.MustExists(params)
}

// MustExistsWithContext checks if a s3policy exists and panics if not using provided context
func (r *S3Policy) MustExistsWithContext(ctx context.Context, req *S3PolicySearchParams) bool {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.S3Policies.MustExistsWithContext(ctx, params)
}

// -----------------------------------------------------
// RENDERABLE INTERFACE METHODS
// -----------------------------------------------------

// PrettyTable returns a formatted table representation of the S3PolicyModel
func (m *S3PolicyModel) PrettyTable() string {
	return m.toRecord().PrettyTable()
}

// PrettyJson returns a JSON representation of the S3PolicyModel
func (m *S3PolicyModel) PrettyJson(indent ...string) string {
	return m.toRecord().PrettyJson(indent...)
}

// toRecord converts the S3PolicyModel to a Record (map[string]any) with @resourceType
func (m *S3PolicyModel) toRecord() vast_client.Record {
	// Convert struct to map using JSON marshaling
	jsonBytes, err := json.Marshal(m)
	if err != nil {
		return vast_client.Record{"error": fmt.Sprintf("failed to marshal struct: %v", err)}
	}

	var record vast_client.Record
	if err := json.Unmarshal(jsonBytes, &record); err != nil {
		return vast_client.Record{"error": fmt.Sprintf("failed to unmarshal to record: %v", err)}
	}

	// Add resource type using reflection
	record["@resourceType"] = reflect.TypeOf(*m).Name()

	return record
}
