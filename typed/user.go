// Code generated by generate-typed-resources. DO NOT EDIT.

package typed

import (
	"context"
	"encoding/json"
	"fmt"
	"reflect"

	vast_client "github.com/vast-data/go-vast-client"
)

// -----------------------------------------------------
// SEARCH PARAMS
// -----------------------------------------------------

// UserSearchParams represents the search parameters for User operations
// Generated from GET query parameters for resource: users
type UserSearchParams struct {
	Guid string `json:"guid,omitempty" yaml:"guid,omitempty" required:"false" doc:"Global unique ID"`
	Name string `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:"The name of the user"`
	Uid  int64  `json:"uid,omitempty" yaml:"uid,omitempty" required:"false" doc:"UID"`
}

// -----------------------------------------------------
// REQUEST BODY
// -----------------------------------------------------

// UserRequestBody represents the request body for User operations
// Generated from POST request body for resource: users
type UserRequestBody struct {
	Name              string   `json:"name,omitempty" yaml:"name,omitempty" required:"true" doc:"User name"`
	Uid               int64    `json:"uid,omitempty" yaml:"uid,omitempty" required:"true" doc:"NFS UID"`
	AllowCreateBucket bool     `json:"allow_create_bucket,omitempty" yaml:"allow_create_bucket,omitempty" required:"false" doc:"Set to true to give the user permission to create S3 buckets. In case of conflict with an S3 identity policy attached to the user or to a relevant group, this setting is overridden."`
	AllowDeleteBucket bool     `json:"allow_delete_bucket,omitempty" yaml:"allow_delete_bucket,omitempty" required:"false" doc:"Set to true to give the user permission to delete S3 buckets. In case of conflict with an S3 identity policy attached to the user or to a relevant group, this setting is overridden."`
	Gids              *[]int64 `json:"gids,omitempty" yaml:"gids,omitempty" required:"false" doc:"List of group GIDs of all groups to which the user should belong."`
	LeadingGid        int64    `json:"leading_gid,omitempty" yaml:"leading_gid,omitempty" required:"false" doc:"Leading GID"`
	Local             bool     `json:"local,omitempty" yaml:"local,omitempty" required:"false" doc:"Not in use"`
	LocalProviderId   int64    `json:"local_provider_id,omitempty" yaml:"local_provider_id,omitempty" required:"false" doc:"The ID of the local provider to which to add the user"`
	S3Superuser       bool     `json:"s3_superuser,omitempty" yaml:"s3_superuser,omitempty" required:"false" doc:"Set to true to give the user S3 superuser permission. In case of conflict with an S3 identity policy attached to the user or to a relevant group, this setting is overridden."`
}

// -----------------------------------------------------
// MODEL
// -----------------------------------------------------

// UserModel_LocalProvider represents a nested type for model
type UserModel_LocalProvider struct {
	Id   int64  `json:"id,omitempty" yaml:"id,omitempty" required:"false" doc:"ID of the local provider"`
	Name string `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:"Name of the local provider"`
}

// UserModel_S3PoliciesItem represents a nested type for model
type UserModel_S3PoliciesItem struct {
	Id   int64  `json:"id,omitempty" yaml:"id,omitempty" required:"false" doc:"Identity Policy ID"`
	Name string `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:"Identity Policy name"`
}

// UserModel represents the model data for User operations
// Generated from schema: User
type UserModel struct {
	AllowCreateBucket bool                        `json:"allow_create_bucket,omitempty" yaml:"allow_create_bucket,omitempty" required:"false" doc:"If enabled, the user has permission to create S3 buckets. In case of conflict with an S3 identity policy attached to the user or to a elevant group, this setting is overridden."`
	AllowDeleteBucket bool                        `json:"allow_delete_bucket,omitempty" yaml:"allow_delete_bucket,omitempty" required:"false" doc:"If enabled, the user has permission to delete S3 buckets. In case of conflict with an S3 identity policy attached to the user or to a relevant group, this setting is overridden"`
	Gids              *[]int64                    `json:"gids,omitempty" yaml:"gids,omitempty" required:"false" doc:"List of GIDs of groups to which the user belongs"`
	GroupCount        int64                       `json:"group_count,omitempty" yaml:"group_count,omitempty" required:"false" doc:"Group Count"`
	Groups            *[]string                   `json:"groups,omitempty" yaml:"groups,omitempty" required:"false" doc:"List of groups to which the user belongs"`
	Guid              string                      `json:"guid,omitempty" yaml:"guid,omitempty" required:"false" doc:"Global unique ID"`
	Id                int64                       `json:"id,omitempty" yaml:"id,omitempty" required:"false" doc:""`
	LeadingGid        int64                       `json:"leading_gid,omitempty" yaml:"leading_gid,omitempty" required:"false" doc:"Leading GID"`
	LeadingGroupGid   int64                       `json:"leading_group_gid,omitempty" yaml:"leading_group_gid,omitempty" required:"false" doc:"Leading Group GID"`
	LeadingGroupName  string                      `json:"leading_group_name,omitempty" yaml:"leading_group_name,omitempty" required:"false" doc:"Leading Group"`
	Local             bool                        `json:"local,omitempty" yaml:"local,omitempty" required:"false" doc:"not in use"`
	LocalProvider     UserModel_LocalProvider     `json:"local_provider,omitempty" yaml:"local_provider,omitempty" required:"false" doc:""`
	Name              string                      `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:"The name of the user"`
	PrimaryGroupSid   string                      `json:"primary_group_sid,omitempty" yaml:"primary_group_sid,omitempty" required:"false" doc:"Primary group SID"`
	S3Policies        *[]UserModel_S3PoliciesItem `json:"s3_policies,omitempty" yaml:"s3_policies,omitempty" required:"false" doc:""`
	S3PoliciesIds     *[]int64                    `json:"s3_policies_ids,omitempty" yaml:"s3_policies_ids,omitempty" required:"false" doc:"S3 policies IDs, denoting which S3 identity policies are associated with the user. The user is granted and denied S3 permissions according to the associated S3 identity policies"`
	S3Superuser       bool                        `json:"s3_superuser,omitempty" yaml:"s3_superuser,omitempty" required:"false" doc:"If enabled, the user has S3 superuser permission, which overrides S3 ACLs. In case of conflict with an S3 identity policy attached to the user or to a relevant group, this setting is overridden."`
	Sid               string                      `json:"sid,omitempty" yaml:"sid,omitempty" required:"false" doc:"SID"`
	Sids              *[]string                   `json:"sids,omitempty" yaml:"sids,omitempty" required:"false" doc:"SID list"`
	Title             string                      `json:"title,omitempty" yaml:"title,omitempty" required:"false" doc:""`
	Uid               int64                       `json:"uid,omitempty" yaml:"uid,omitempty" required:"false" doc:"UID"`
	Url               string                      `json:"url,omitempty" yaml:"url,omitempty" required:"false" doc:"Endpoint URL for API operations on the user"`
	Vid               int64                       `json:"vid,omitempty" yaml:"vid,omitempty" required:"false" doc:"User's VAST ID"`
}

// -----------------------------------------------------
// RESOURCE METHODS
// -----------------------------------------------------

// User represents a typed resource for user operations
type User struct {
	Untyped *vast_client.VMSRest
}

// Get retrieves a single user with typed request/response
func (r *User) Get(req *UserSearchParams) (*UserModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Users.Get(params)
	if err != nil {
		return nil, err
	}

	var response UserModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// GetWithContext retrieves a single user with typed request/response using provided context
func (r *User) GetWithContext(ctx context.Context, req *UserSearchParams) (*UserModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Users.GetWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response UserModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// GetById retrieves a single user by ID
func (r *User) GetById(id any) (*UserModel, error) {
	record, err := r.Untyped.Users.GetById(id)
	if err != nil {
		return nil, err
	}

	var response UserModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// GetByIdWithContext retrieves a single user by ID using provided context
func (r *User) GetByIdWithContext(ctx context.Context, id any) (*UserModel, error) {
	record, err := r.Untyped.Users.GetByIdWithContext(ctx, id)
	if err != nil {
		return nil, err
	}

	var response UserModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// List retrieves multiple users with typed request/response
func (r *User) List(req *UserSearchParams) ([]*UserModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.Users.List(params)
	if err != nil {
		return nil, err
	}

	var response []*UserModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// ListWithContext retrieves multiple users with typed request/response using provided context
func (r *User) ListWithContext(ctx context.Context, req *UserSearchParams) ([]*UserModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.Users.ListWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response []*UserModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// Create creates a new user with typed request/response
func (r *User) Create(req *UserRequestBody) (*UserModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Users.Create(params)
	if err != nil {
		return nil, err
	}

	var response UserModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// CreateWithContext creates a new user with typed request/response using provided context
func (r *User) CreateWithContext(ctx context.Context, req *UserRequestBody) (*UserModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Users.CreateWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response UserModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Update updates an existing user with typed request/response
func (r *User) Update(id any, req *UserRequestBody) (*UserModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Users.Update(id, params)
	if err != nil {
		return nil, err
	}

	var response UserModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// UpdateWithContext updates an existing user with typed request/response using provided context
func (r *User) UpdateWithContext(ctx context.Context, id any, req *UserRequestBody) (*UserModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Users.UpdateWithContext(ctx, id, params)
	if err != nil {
		return nil, err
	}

	var response UserModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Delete deletes a user with search parameters
func (r *User) Delete(req *UserSearchParams) error {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return err
	}
	_, err = r.Untyped.Users.Delete(params, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteWithContext deletes a user with search parameters using provided context
func (r *User) DeleteWithContext(ctx context.Context, req *UserSearchParams) error {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return err
	}
	_, err = r.Untyped.Users.DeleteWithContext(ctx, params, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteById deletes a user by ID
func (r *User) DeleteById(id any) error {
	_, err := r.Untyped.Users.DeleteById(id, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteByIdWithContext deletes a user by ID using provided context
func (r *User) DeleteByIdWithContext(ctx context.Context, id any) error {
	_, err := r.Untyped.Users.DeleteByIdWithContext(ctx, id, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// Ensure ensures a user exists with typed response
func (r *User) Ensure(searchParams *UserSearchParams, body *UserRequestBody) (*UserModel, error) {
	searchParamsConverted, err := vast_client.NewParamsFromStruct(searchParams)
	if err != nil {
		return nil, err
	}
	bodyConverted, err := vast_client.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Users.Ensure(searchParamsConverted, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response UserModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// EnsureWithContext ensures a user exists with typed response using provided context
func (r *User) EnsureWithContext(ctx context.Context, searchParams *UserSearchParams, body *UserRequestBody) (*UserModel, error) {
	searchParamsConverted, err := vast_client.NewParamsFromStruct(searchParams)
	if err != nil {
		return nil, err
	}
	bodyConverted, err := vast_client.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Users.EnsureWithContext(ctx, searchParamsConverted, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response UserModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// EnsureByName ensures a user exists by name with typed response
func (r *User) EnsureByName(name string, body *UserRequestBody) (*UserModel, error) {
	bodyConverted, err := vast_client.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Users.EnsureByName(name, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response UserModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// EnsureByNameWithContext ensures a user exists by name with typed response using provided context
func (r *User) EnsureByNameWithContext(ctx context.Context, name string, body *UserRequestBody) (*UserModel, error) {
	bodyConverted, err := vast_client.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Users.EnsureByNameWithContext(ctx, name, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response UserModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Exists checks if a user exists
func (r *User) Exists(req *UserSearchParams) (bool, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.Users.Exists(params)
}

// ExistsWithContext checks if a user exists using provided context
func (r *User) ExistsWithContext(ctx context.Context, req *UserSearchParams) (bool, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.Users.ExistsWithContext(ctx, params)
}

// MustExists checks if a user exists and panics if not
func (r *User) MustExists(req *UserSearchParams) bool {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.Users.MustExists(params)
}

// MustExistsWithContext checks if a user exists and panics if not using provided context
func (r *User) MustExistsWithContext(ctx context.Context, req *UserSearchParams) bool {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.Users.MustExistsWithContext(ctx, params)
}

// -----------------------------------------------------
// RENDERABLE INTERFACE METHODS
// -----------------------------------------------------

// PrettyTable returns a formatted table representation of the UserModel
func (m *UserModel) PrettyTable() string {
	return m.toRecord().PrettyTable()
}

// PrettyJson returns a JSON representation of the UserModel
func (m *UserModel) PrettyJson(indent ...string) string {
	return m.toRecord().PrettyJson(indent...)
}

// toRecord converts the UserModel to a Record (map[string]any) with @resourceType
func (m *UserModel) toRecord() vast_client.Record {
	// Convert struct to map using JSON marshaling
	jsonBytes, err := json.Marshal(m)
	if err != nil {
		return vast_client.Record{"error": fmt.Sprintf("failed to marshal struct: %v", err)}
	}

	var record vast_client.Record
	if err := json.Unmarshal(jsonBytes, &record); err != nil {
		return vast_client.Record{"error": fmt.Sprintf("failed to unmarshal to record: %v", err)}
	}

	// Add resource type using reflection
	record["@resourceType"] = reflect.TypeOf(*m).Name()

	return record
}
