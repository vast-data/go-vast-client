// Code generated by generate-typed-resources. DO NOT EDIT.

package typed

import (
	"context"
	"encoding/json"
	"fmt"
	"reflect"

	vast_client "github.com/vast-data/go-vast-client"
)

// -----------------------------------------------------
// SEARCH PARAMS
// -----------------------------------------------------

// TenantSearchParams represents the search parameters for Tenant operations
// Generated from GET query parameters for resource: tenants
type TenantSearchParams struct {
	Guid string `json:"guid,omitempty" yaml:"guid,omitempty" required:"false" doc:"Tenant guid"`
	Name string `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:""`
}

// -----------------------------------------------------
// REQUEST BODY
// -----------------------------------------------------

// TenantRequestBody_CapacityRules represents a nested type for request body
type TenantRequestBody_CapacityRules struct {
	GracePeriod     string `json:"grace_period,omitempty" yaml:"grace_period,omitempty" required:"false" doc:"Quota enforcement grace period for tenant capacity limit, in seconds"`
	HardLimit       int64  `json:"hard_limit,omitempty" yaml:"hard_limit,omitempty" required:"false" doc:"Capacity hard limit for the tenant"`
	HardLimitInodes int64  `json:"hard_limit_inodes,omitempty" yaml:"hard_limit_inodes,omitempty" required:"false" doc:"Hard limit on the number of files or directories for the tenant"`
	NotifyHardLimit bool   `json:"notify_hard_limit,omitempty" yaml:"notify_hard_limit,omitempty" required:"false" doc:"Notify on reaching hard limit"`
	NotifySoftLimit bool   `json:"notify_soft_limit,omitempty" yaml:"notify_soft_limit,omitempty" required:"false" doc:"Notify on reaching soft limit"`
	SoftLimit       int64  `json:"soft_limit,omitempty" yaml:"soft_limit,omitempty" required:"false" doc:"Capacity soft limit for the tenant"`
	SoftLimitInodes int64  `json:"soft_limit_inodes,omitempty" yaml:"soft_limit_inodes,omitempty" required:"false" doc:"Soft limit on the number of files or directories for the tenant"`
}

// TenantRequestBody represents the request body for Tenant operations
// Generated from POST request body for resource: tenants
type TenantRequestBody struct {
	Name                         string                          `json:"name,omitempty" yaml:"name,omitempty" required:"true" doc:"A name for the tenant"`
	AccessIpRanges               *[]string                       `json:"access_ip_ranges,omitempty" yaml:"access_ip_ranges,omitempty" required:"false" doc:"Restricts tenant login access to specified source IP ranges. Enter as single IPs (1.1.1.1), ranges (1.2.3.4 - 1.2.3.6), or CIDR (1.1.1.0/24)."`
	AdProviderId                 int64                           `json:"ad_provider_id,omitempty" yaml:"ad_provider_id,omitempty" required:"false" doc:"The ID of an Active Directory provider configured on the cluster. Enables the specified provider for the tenant."`
	AllowDisabledUsers           bool                            `json:"allow_disabled_users,omitempty" yaml:"allow_disabled_users,omitempty" required:"false" doc:"Allow IO from users whose Active Directory accounts are explicitly disabled."`
	AllowLockedUsers             bool                            `json:"allow_locked_users,omitempty" yaml:"allow_locked_users,omitempty" required:"false" doc:"Allow IO from users whose Active Directory accounts are locked out by lockout policies due to unsuccessful login attempts."`
	CapacityRules                TenantRequestBody_CapacityRules `json:"capacity_rules,omitempty" yaml:"capacity_rules,omitempty" required:"false" doc:""`
	ClientIpRanges               *[]*[]string                    `json:"client_ip_ranges,omitempty" yaml:"client_ip_ranges,omitempty" required:"false" doc:"Array of ranges of client IPs to be served by the tenant. For client requests made to a VIP that belongs to a VIP Pool that is not associated to a specific tenant, the client's source IP is checked against the Client IPs that are defined within each tenant. That check determines access. The client IPs that you associate with each tenant must be unique per tenant."`
	DefaultOthersShareLevelPerm  string                          `json:"default_others_share_level_perm,omitempty" yaml:"default_others_share_level_perm,omitempty" required:"false" doc:"Default Share-level permissions for Others"`
	DomainName                   string                          `json:"domain_name,omitempty" yaml:"domain_name,omitempty" required:"false" doc:"Domain name to incorporate into the VMS tenant login page URL."`
	EncryptionGroup              string                          `json:"encryption_group,omitempty" yaml:"encryption_group,omitempty" required:"false" doc:"Tenant's encryption group unique identifier"`
	IdentityProviderName         string                          `json:"identity_provider_name,omitempty" yaml:"identity_provider_name,omitempty" required:"false" doc:"The ID of a SAML provider configured on the cluster. Connects the specified provider to the tenant."`
	IsNfsv42Supported            bool                            `json:"is_nfsv42_supported,omitempty" yaml:"is_nfsv42_supported,omitempty" required:"false" doc:"Enable NFSv4.2"`
	LdapProviderId               int64                           `json:"ldap_provider_id,omitempty" yaml:"ldap_provider_id,omitempty" required:"false" doc:"The ID of an LDAP provider configured on the cluster. Enables the specified provider for the tenant."`
	LocalProviderId              int64                           `json:"local_provider_id,omitempty" yaml:"local_provider_id,omitempty" required:"false" doc:"The ID of a local provider configured on the cluster. Connects the specified provider to the tenant."`
	LoginNamePrimaryProvider     string                          `json:"login_name_primary_provider,omitempty" yaml:"login_name_primary_provider,omitempty" required:"false" doc:"Login name primary provider type"`
	NisProviderId                int64                           `json:"nis_provider_id,omitempty" yaml:"nis_provider_id,omitempty" required:"false" doc:"The ID of a NIS provider configured on the cluster. Enables the specified provider for the tenant."`
	PosixPrimaryProvider         string                          `json:"posix_primary_provider,omitempty" yaml:"posix_primary_provider,omitempty" required:"false" doc:"Specifies which provider takes precedence over other providers in case of any conflicts between attribute values when user information is retrieved from the providers. Relevant only if more than one provider is enabled for the tenant."`
	PreferredOwningGroup         string                          `json:"preferred_owning_group,omitempty" yaml:"preferred_owning_group,omitempty" required:"false" doc:"Set to prefer GID of the user as the owning group of the file"`
	RequireSmbSigning            bool                            `json:"require_smb_signing,omitempty" yaml:"require_smb_signing,omitempty" required:"false" doc:"Require SMB signing"`
	SmbAdministratorsGroupName   string                          `json:"smb_administrators_group_name,omitempty" yaml:"smb_administrators_group_name,omitempty" required:"false" doc:"Optional custom name to specify a non default privileged group. If not set, privileged group is the Backup Operators domain group."`
	SmbPrivilegedGroupFullAccess bool                            `json:"smb_privileged_group_full_access,omitempty" yaml:"smb_privileged_group_full_access,omitempty" required:"false" doc:"True=The SMB privileged user group has read and write control access. Members of the group can perform backup and restore operations on all files and directories, without requiring read or write access to the specific files and directories. False=the privileged group has read only access."`
	SmbPrivilegedGroupSid        string                          `json:"smb_privileged_group_sid,omitempty" yaml:"smb_privileged_group_sid,omitempty" required:"false" doc:"Optional custom SID to specify a non default SMB privileged group. If not set, SMB privileged group is the Backup Operators domain group."`
	SmbPrivilegedUserName        string                          `json:"smb_privileged_user_name,omitempty" yaml:"smb_privileged_user_name,omitempty" required:"false" doc:"Optional custom username for the SMB privileged user. If not set, the SMB privileged user name is 'vastadmin'"`
	TenantAdminsGroupName        string                          `json:"tenant_admins_group_name,omitempty" yaml:"tenant_admins_group_name,omitempty" required:"false" doc:"Specifies a group on an AD or LDAP provider. Enables users in the group to log into the tenant VMS as Tenant Admin users. In order to be granted permissions to do any configuration, the same users need to belong to groups on the provider that are associated with VMS manager user roles for tenant admin type users on the tenant."`
	TrashGid                     int64                           `json:"trash_gid,omitempty" yaml:"trash_gid,omitempty" required:"false" doc:"GID of group of NFSv3 users to which to grant permission to move files into the trash folder. If not set, the operation of moving files into the trash folder is supported for the root user only."`
	UseSmbNative                 bool                            `json:"use_smb_native,omitempty" yaml:"use_smb_native,omitempty" required:"false" doc:"Use native SMB authentication"`
	UseSmbPrivilegedGroup        bool                            `json:"use_smb_privileged_group,omitempty" yaml:"use_smb_privileged_group,omitempty" required:"false" doc:"Enables SMB privileged user group"`
	UseSmbPrivilegedUser         bool                            `json:"use_smb_privileged_user,omitempty" yaml:"use_smb_privileged_user,omitempty" required:"false" doc:"Enables SMB privileged user"`
	VippoolIds                   *[]int64                        `json:"vippool_ids,omitempty" yaml:"vippool_ids,omitempty" required:"false" doc:"An array of VIP Pool ids to attach to tenant"`
}

// -----------------------------------------------------
// MODEL
// -----------------------------------------------------

// TenantModel_CapacityRules represents a nested type for model
type TenantModel_CapacityRules struct {
	GracePeriod     string `json:"grace_period,omitempty" yaml:"grace_period,omitempty" required:"false" doc:"Quota enforcement grace period for tenant capacity limit, in seconds"`
	HardLimit       int64  `json:"hard_limit,omitempty" yaml:"hard_limit,omitempty" required:"false" doc:"Capacity hard limit for the tenant"`
	HardLimitInodes int64  `json:"hard_limit_inodes,omitempty" yaml:"hard_limit_inodes,omitempty" required:"false" doc:"Hard limit on the number of files or directories for the tenant"`
	NotifyHardLimit bool   `json:"notify_hard_limit,omitempty" yaml:"notify_hard_limit,omitempty" required:"false" doc:"Notify on reaching hard limit"`
	NotifySoftLimit bool   `json:"notify_soft_limit,omitempty" yaml:"notify_soft_limit,omitempty" required:"false" doc:"Notify on reaching soft limit"`
	SoftLimit       int64  `json:"soft_limit,omitempty" yaml:"soft_limit,omitempty" required:"false" doc:"Capacity soft limit for the tenant"`
	SoftLimitInodes int64  `json:"soft_limit_inodes,omitempty" yaml:"soft_limit_inodes,omitempty" required:"false" doc:"Soft limit on the number of files or directories for the tenant"`
}

// TenantModel_VippoolsItem represents a nested type for model
type TenantModel_VippoolsItem struct {
	Id   int64  `json:"id,omitempty" yaml:"id,omitempty" required:"false" doc:""`
	Name string `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:""`
}

// TenantModel represents the model data for Tenant operations
// Generated from schema: Tenant
type TenantModel struct {
	AccessIpRanges               *[]string                   `json:"access_ip_ranges,omitempty" yaml:"access_ip_ranges,omitempty" required:"false" doc:"Restricts tenant login access to specified source IP ranges. Enter as single IPs (1.1.1.1), ranges (1.2.3.4 - 1.2.3.6), or CIDR (1.1.1.0/24)."`
	AdProviderId                 int64                       `json:"ad_provider_id,omitempty" yaml:"ad_provider_id,omitempty" required:"false" doc:"Active Directory provider ID"`
	AdTitle                      string                      `json:"ad_title,omitempty" yaml:"ad_title,omitempty" required:"false" doc:""`
	AllowDisabledUsers           bool                        `json:"allow_disabled_users,omitempty" yaml:"allow_disabled_users,omitempty" required:"false" doc:"Allow IO from users whose Active Directory accounts are explicitly disabled."`
	AllowLockedUsers             bool                        `json:"allow_locked_users,omitempty" yaml:"allow_locked_users,omitempty" required:"false" doc:"Allow IO from users whose Active Directory accounts are locked out by lockout policies due to unsuccessful login attempts."`
	CapacityRules                TenantModel_CapacityRules   `json:"capacity_rules,omitempty" yaml:"capacity_rules,omitempty" required:"false" doc:""`
	ClientIpRanges               *[]*[]string                `json:"client_ip_ranges,omitempty" yaml:"client_ip_ranges,omitempty" required:"false" doc:"Array of source IP ranges to allow for the tenant."`
	ClientIpRangesSummary        string                      `json:"client_ip_ranges_summary,omitempty" yaml:"client_ip_ranges_summary,omitempty" required:"false" doc:""`
	DefaultOthersShareLevelPerm  string                      `json:"default_others_share_level_perm,omitempty" yaml:"default_others_share_level_perm,omitempty" required:"false" doc:"Default Share-level permissions for 'Everyone' Group"`
	Dir                          string                      `json:"dir,omitempty" yaml:"dir,omitempty" required:"false" doc:""`
	DomainName                   string                      `json:"domain_name,omitempty" yaml:"domain_name,omitempty" required:"false" doc:"Domain name to incorporate into the VMS tenant login page URL."`
	EncryptionGroup              string                      `json:"encryption_group,omitempty" yaml:"encryption_group,omitempty" required:"false" doc:"Tenant's encryption group unique identifier"`
	EncryptionGroupId            int64                       `json:"encryption_group_id,omitempty" yaml:"encryption_group_id,omitempty" required:"false" doc:"Encryption Group ID"`
	EncryptionGroupState         string                      `json:"encryption_group_state,omitempty" yaml:"encryption_group_state,omitempty" required:"false" doc:"Tenant's encryption group state"`
	Guid                         string                      `json:"guid,omitempty" yaml:"guid,omitempty" required:"false" doc:"Tenant guid"`
	Id                           int64                       `json:"id,omitempty" yaml:"id,omitempty" required:"false" doc:""`
	IdentityProviderName         string                      `json:"identity_provider_name,omitempty" yaml:"identity_provider_name,omitempty" required:"false" doc:"Sets a configured SAML login provider to enable for the tenant. When set, users defined on the specified SAML provider with relevant roles and user types can login to the tenant VMS."`
	IsNfsv42Supported            bool                        `json:"is_nfsv42_supported,omitempty" yaml:"is_nfsv42_supported,omitempty" required:"false" doc:"Enable NFSv4.2"`
	LdapProviderId               int64                       `json:"ldap_provider_id,omitempty" yaml:"ldap_provider_id,omitempty" required:"false" doc:"Open-LDAP provider ID"`
	LdapTitle                    string                      `json:"ldap_title,omitempty" yaml:"ldap_title,omitempty" required:"false" doc:""`
	LocalProviderId              int64                       `json:"local_provider_id,omitempty" yaml:"local_provider_id,omitempty" required:"false" doc:"Local provider ID"`
	LocalProviderTitle           string                      `json:"local_provider_title,omitempty" yaml:"local_provider_title,omitempty" required:"false" doc:"The local provider associated with the tenant"`
	LoginNamePrimaryProvider     string                      `json:"login_name_primary_provider,omitempty" yaml:"login_name_primary_provider,omitempty" required:"false" doc:"Primary provider for the user's login name"`
	Name                         string                      `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:""`
	NisProviderId                int64                       `json:"nis_provider_id,omitempty" yaml:"nis_provider_id,omitempty" required:"false" doc:"NIS provider ID"`
	NisTitle                     string                      `json:"nis_title,omitempty" yaml:"nis_title,omitempty" required:"false" doc:""`
	PosixPrimaryProvider         string                      `json:"posix_primary_provider,omitempty" yaml:"posix_primary_provider,omitempty" required:"false" doc:"The primary provider that takes precedence for POSIX user attributes in case of conflict between two providers that both have POSIX user attributes"`
	PreferredOwningGroup         string                      `json:"preferred_owning_group,omitempty" yaml:"preferred_owning_group,omitempty" required:"false" doc:"Set to prefer GID of the user as the owning group of the file"`
	RequireSmbSigning            bool                        `json:"require_smb_signing,omitempty" yaml:"require_smb_signing,omitempty" required:"false" doc:"Require SMB clients to perform SMB message signing. SMB messages with invalid or missing signatures will be blocked."`
	SmbAdministratorsGroupName   string                      `json:"smb_administrators_group_name,omitempty" yaml:"smb_administrators_group_name,omitempty" required:"false" doc:"Optional custom name to specify a non default privileged group. If not set, privileged group is the BUILTIN\Administrators group."`
	SmbPrivilegedGroupFullAccess bool                        `json:"smb_privileged_group_full_access,omitempty" yaml:"smb_privileged_group_full_access,omitempty" required:"false" doc:"If true, the privileged group has full access. Otherwise, read only"`
	SmbPrivilegedGroupSid        string                      `json:"smb_privileged_group_sid,omitempty" yaml:"smb_privileged_group_sid,omitempty" required:"false" doc:"Optional custom SID to specify a non default SMB privileged group. If not set, SMB privileged group is the Backup Operators domain group."`
	SmbPrivilegedUserName        string                      `json:"smb_privileged_user_name,omitempty" yaml:"smb_privileged_user_name,omitempty" required:"false" doc:"Optional custom username for the SMB privileged user. If not set, the SMB privileged user name is 'vastadmin'"`
	Sync                         string                      `json:"sync,omitempty" yaml:"sync,omitempty" required:"false" doc:"Synchronization state with leader"`
	SyncTime                     string                      `json:"sync_time,omitempty" yaml:"sync_time,omitempty" required:"false" doc:"Synchronization time with leader"`
	TenantAdminsGroupName        string                      `json:"tenant_admins_group_name,omitempty" yaml:"tenant_admins_group_name,omitempty" required:"false" doc:"Sets a group on an AD or LDAP provider. Enables users in the group to log into the tenant VMS as Tenant Admin users. Tenant Admin is a type of VMS manager user that has management access to a specific tenant's VMS."`
	Title                        string                      `json:"title,omitempty" yaml:"title,omitempty" required:"false" doc:""`
	TrashGid                     int64                       `json:"trash_gid,omitempty" yaml:"trash_gid,omitempty" required:"false" doc:"GID of group of NFSv3 users that have permission to move files into the trash folder. If not set, the operation of moving files into the trash folder is supported for the root user only."`
	Url                          string                      `json:"url,omitempty" yaml:"url,omitempty" required:"false" doc:""`
	UseSmbNative                 bool                        `json:"use_smb_native,omitempty" yaml:"use_smb_native,omitempty" required:"false" doc:"Access check decisions will be made based on user and group information from the Kerberos ticket. Use this if your Active Directory has a one-way trust. This is relevant for SMB only."`
	UseSmbPrivilegedGroup        bool                        `json:"use_smb_privileged_group,omitempty" yaml:"use_smb_privileged_group,omitempty" required:"false" doc:"If true, the privileged group is enabled"`
	UseSmbPrivilegedUser         bool                        `json:"use_smb_privileged_user,omitempty" yaml:"use_smb_privileged_user,omitempty" required:"false" doc:"If true, the privileged user is enabled"`
	VippoolNames                 *[]string                   `json:"vippool_names,omitempty" yaml:"vippool_names,omitempty" required:"false" doc:"Array of VIP Pools that can be used with the tenant."`
	Vippools                     *[]TenantModel_VippoolsItem `json:"vippools,omitempty" yaml:"vippools,omitempty" required:"false" doc:"Array of VIP Pools names and IDs that can be used with the tenant."`
}

// -----------------------------------------------------
// RESOURCE METHODS
// -----------------------------------------------------

// Tenant represents a typed resource for tenant operations
type Tenant struct {
	Untyped *vast_client.VMSRest
}

// Get retrieves a single tenant with typed request/response
func (r *Tenant) Get(req *TenantSearchParams) (*TenantModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Tenants.Get(params)
	if err != nil {
		return nil, err
	}

	var response TenantModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// GetWithContext retrieves a single tenant with typed request/response using provided context
func (r *Tenant) GetWithContext(ctx context.Context, req *TenantSearchParams) (*TenantModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Tenants.GetWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response TenantModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// GetById retrieves a single tenant by ID
func (r *Tenant) GetById(id any) (*TenantModel, error) {
	record, err := r.Untyped.Tenants.GetById(id)
	if err != nil {
		return nil, err
	}

	var response TenantModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// GetByIdWithContext retrieves a single tenant by ID using provided context
func (r *Tenant) GetByIdWithContext(ctx context.Context, id any) (*TenantModel, error) {
	record, err := r.Untyped.Tenants.GetByIdWithContext(ctx, id)
	if err != nil {
		return nil, err
	}

	var response TenantModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// List retrieves multiple tenants with typed request/response
func (r *Tenant) List(req *TenantSearchParams) ([]*TenantModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.Tenants.List(params)
	if err != nil {
		return nil, err
	}

	var response []*TenantModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// ListWithContext retrieves multiple tenants with typed request/response using provided context
func (r *Tenant) ListWithContext(ctx context.Context, req *TenantSearchParams) ([]*TenantModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.Tenants.ListWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response []*TenantModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// Create creates a new tenant with typed request/response
func (r *Tenant) Create(req *TenantRequestBody) (*TenantModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Tenants.Create(params)
	if err != nil {
		return nil, err
	}

	var response TenantModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// CreateWithContext creates a new tenant with typed request/response using provided context
func (r *Tenant) CreateWithContext(ctx context.Context, req *TenantRequestBody) (*TenantModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Tenants.CreateWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response TenantModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Update updates an existing tenant with typed request/response
func (r *Tenant) Update(id any, req *TenantRequestBody) (*TenantModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Tenants.Update(id, params)
	if err != nil {
		return nil, err
	}

	var response TenantModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// UpdateWithContext updates an existing tenant with typed request/response using provided context
func (r *Tenant) UpdateWithContext(ctx context.Context, id any, req *TenantRequestBody) (*TenantModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Tenants.UpdateWithContext(ctx, id, params)
	if err != nil {
		return nil, err
	}

	var response TenantModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Delete deletes a tenant with search parameters
func (r *Tenant) Delete(req *TenantSearchParams) error {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return err
	}
	_, err = r.Untyped.Tenants.Delete(params, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteWithContext deletes a tenant with search parameters using provided context
func (r *Tenant) DeleteWithContext(ctx context.Context, req *TenantSearchParams) error {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return err
	}
	_, err = r.Untyped.Tenants.DeleteWithContext(ctx, params, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteById deletes a tenant by ID
func (r *Tenant) DeleteById(id any) error {
	_, err := r.Untyped.Tenants.DeleteById(id, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteByIdWithContext deletes a tenant by ID using provided context
func (r *Tenant) DeleteByIdWithContext(ctx context.Context, id any) error {
	_, err := r.Untyped.Tenants.DeleteByIdWithContext(ctx, id, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// Ensure ensures a tenant exists with typed response
func (r *Tenant) Ensure(searchParams *TenantSearchParams, body *TenantRequestBody) (*TenantModel, error) {
	searchParamsConverted, err := vast_client.NewParamsFromStruct(searchParams)
	if err != nil {
		return nil, err
	}
	bodyConverted, err := vast_client.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Tenants.Ensure(searchParamsConverted, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response TenantModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// EnsureWithContext ensures a tenant exists with typed response using provided context
func (r *Tenant) EnsureWithContext(ctx context.Context, searchParams *TenantSearchParams, body *TenantRequestBody) (*TenantModel, error) {
	searchParamsConverted, err := vast_client.NewParamsFromStruct(searchParams)
	if err != nil {
		return nil, err
	}
	bodyConverted, err := vast_client.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Tenants.EnsureWithContext(ctx, searchParamsConverted, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response TenantModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// EnsureByName ensures a tenant exists by name with typed response
func (r *Tenant) EnsureByName(name string, body *TenantRequestBody) (*TenantModel, error) {
	bodyConverted, err := vast_client.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Tenants.EnsureByName(name, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response TenantModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// EnsureByNameWithContext ensures a tenant exists by name with typed response using provided context
func (r *Tenant) EnsureByNameWithContext(ctx context.Context, name string, body *TenantRequestBody) (*TenantModel, error) {
	bodyConverted, err := vast_client.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Tenants.EnsureByNameWithContext(ctx, name, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response TenantModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Exists checks if a tenant exists
func (r *Tenant) Exists(req *TenantSearchParams) (bool, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.Tenants.Exists(params)
}

// ExistsWithContext checks if a tenant exists using provided context
func (r *Tenant) ExistsWithContext(ctx context.Context, req *TenantSearchParams) (bool, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.Tenants.ExistsWithContext(ctx, params)
}

// MustExists checks if a tenant exists and panics if not
func (r *Tenant) MustExists(req *TenantSearchParams) bool {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.Tenants.MustExists(params)
}

// MustExistsWithContext checks if a tenant exists and panics if not using provided context
func (r *Tenant) MustExistsWithContext(ctx context.Context, req *TenantSearchParams) bool {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.Tenants.MustExistsWithContext(ctx, params)
}

// -----------------------------------------------------
// RENDERABLE INTERFACE METHODS
// -----------------------------------------------------

// PrettyTable returns a formatted table representation of the TenantModel
func (m *TenantModel) PrettyTable() string {
	return m.toRecord().PrettyTable()
}

// PrettyJson returns a JSON representation of the TenantModel
func (m *TenantModel) PrettyJson(indent ...string) string {
	return m.toRecord().PrettyJson(indent...)
}

// toRecord converts the TenantModel to a Record (map[string]any) with @resourceType
func (m *TenantModel) toRecord() vast_client.Record {
	// Convert struct to map using JSON marshaling
	jsonBytes, err := json.Marshal(m)
	if err != nil {
		return vast_client.Record{"error": fmt.Sprintf("failed to marshal struct: %v", err)}
	}

	var record vast_client.Record
	if err := json.Unmarshal(jsonBytes, &record); err != nil {
		return vast_client.Record{"error": fmt.Sprintf("failed to unmarshal to record: %v", err)}
	}

	// Add resource type using reflection
	record["@resourceType"] = reflect.TypeOf(*m).Name()

	return record
}
