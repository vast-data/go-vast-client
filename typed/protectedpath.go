// Code generated by generate-typed-resources. DO NOT EDIT.

package typed

import (
	"context"
	"encoding/json"
	"fmt"
	"reflect"

	vast_client "github.com/vast-data/go-vast-client"
)

// -----------------------------------------------------
// SEARCH PARAMS
// -----------------------------------------------------

// ProtectedPathSearchParams represents the search parameters for ProtectedPath operations
// Generated from GET query parameters for resource: protectedpaths
type ProtectedPathSearchParams struct {
	Enabled   string `json:"enabled,omitempty" yaml:"enabled,omitempty" required:"false" doc:"start/pause protected path"`
	Guid      string `json:"guid,omitempty" yaml:"guid,omitempty" required:"false" doc:"guid"`
	Name      string `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:""`
	Role      string `json:"role,omitempty" yaml:"role,omitempty" required:"false" doc:""`
	SourceDir string `json:"source_dir,omitempty" yaml:"source_dir,omitempty" required:"false" doc:""`
	State     string `json:"state,omitempty" yaml:"state,omitempty" required:"false" doc:""`
	TenantId  int64  `json:"tenant_id,omitempty" yaml:"tenant_id,omitempty" required:"false" doc:"Local Tenant ID"`
}

// -----------------------------------------------------
// REQUEST BODY
// -----------------------------------------------------

// ProtectedPathRequestBody represents the request body for ProtectedPath operations
// Generated from POST request body for resource: protectedpaths
type ProtectedPathRequestBody struct {
	Name               string `json:"name,omitempty" yaml:"name,omitempty" required:"true" doc:""`
	SourceDir          string `json:"source_dir,omitempty" yaml:"source_dir,omitempty" required:"true" doc:"A path on the local cluster to protect. A snapshot of the specified path will be taken periodically on the schedule configured in the specified protection policy."`
	TargetExportedDir  string `json:"target_exported_dir,omitempty" yaml:"target_exported_dir,omitempty" required:"true" doc:"A path on a remote peer to which to replicate."`
	TenantId           string `json:"tenant_id,omitempty" yaml:"tenant_id,omitempty" required:"true" doc:"Tenant ID of the tenant on the local cluster to which the source_dir belongs."`
	Capabilities       string `json:"capabilities,omitempty" yaml:"capabilities,omitempty" required:"false" doc:"Indicates if the protected path supports global access streams (\"STARED_GLOBAL_NAMESPACE\") or async replication streams (\"ASYNC_REPLICATION\") or a single stream for synchronous replication (\"SYNC_REPLICATION\") or both global access and async replication (\"REPLICATION_AND_GN\")."`
	Enabled            bool   `json:"enabled,omitempty" yaml:"enabled,omitempty" required:"false" doc:"Enables/pauses the protected path"`
	LeaseExpiryTime    int64  `json:"lease_expiry_time,omitempty" yaml:"lease_expiry_time,omitempty" required:"false" doc:"The lease expiry time, in seconds, for a global access protected path. This is the duration for which data that was already requested at the destination path can be read locally from cache without the destination peer requesting it from the source peer. When the lease expires, the cache is invalidated and the next read request for the data is requested again from the source peer."`
	PolicyId           string `json:"policy_id,omitempty" yaml:"policy_id,omitempty" required:"false" doc:"Protection policy ID"`
	ProtectionPolicyId string `json:"protection_policy_id,omitempty" yaml:"protection_policy_id,omitempty" required:"false" doc:"Specifies whcih protection policy to use"`
	RemoteTargetId     int64  `json:"remote_target_id,omitempty" yaml:"remote_target_id,omitempty" required:"false" doc:"Remote target ID for streams with global namespace or synchronous replication capability."`
	RemoteTenantGuid   string `json:"remote_tenant_guid,omitempty" yaml:"remote_tenant_guid,omitempty" required:"false" doc:"Tenant GUID of the remote peer tenant to which to replicate"`
	SyncDisconnectTime int64  `json:"sync_disconnect_time,omitempty" yaml:"sync_disconnect_time,omitempty" required:"false" doc:"A period of time, in seconds, without communication between sync replication peers, after which the peers are disconnected."`
	SyncInterval       int64  `json:"sync_interval,omitempty" yaml:"sync_interval,omitempty" required:"false" doc:"Replication group sync interval"`
}

// -----------------------------------------------------
// MODEL
// -----------------------------------------------------

// ProtectedPathModel represents the model data for ProtectedPath operations
// Generated from schema: ProtectedPath
type ProtectedPathModel struct {
	AggrPhysEstimation                    int64  `json:"aggr_phys_estimation,omitempty" yaml:"aggr_phys_estimation,omitempty" required:"false" doc:"The usable capacity reclaimable by deleting all of its snapshots"`
	BucketName                            string `json:"bucket_name,omitempty" yaml:"bucket_name,omitempty" required:"false" doc:""`
	Bw                                    int64  `json:"bw,omitempty" yaml:"bw,omitempty" required:"false" doc:"Replication Bandwidth"`
	Capabilities                          string `json:"capabilities,omitempty" yaml:"capabilities,omitempty" required:"false" doc:"Indicates if the protected path supports global access streams or async replication streams or sync replication."`
	Enabled                               bool   `json:"enabled,omitempty" yaml:"enabled,omitempty" required:"false" doc:"start/pause replication"`
	EstimatedReadOnlyTime                 string `json:"estimated_read_only_time,omitempty" yaml:"estimated_read_only_time,omitempty" required:"false" doc:""`
	Eta                                   string `json:"eta,omitempty" yaml:"eta,omitempty" required:"false" doc:""`
	FailbackAllowed                       string `json:"failback_allowed,omitempty" yaml:"failback_allowed,omitempty" required:"false" doc:""`
	Failover                              bool   `json:"failover,omitempty" yaml:"failover,omitempty" required:"false" doc:"Trigger failover command"`
	FailureReason                         string `json:"failure_reason,omitempty" yaml:"failure_reason,omitempty" required:"false" doc:""`
	Guid                                  string `json:"guid,omitempty" yaml:"guid,omitempty" required:"false" doc:"guid"`
	Health                                string `json:"health,omitempty" yaml:"health,omitempty" required:"false" doc:""`
	Id                                    int64  `json:"id,omitempty" yaml:"id,omitempty" required:"false" doc:""`
	InodeCount                            string `json:"inode_count,omitempty" yaml:"inode_count,omitempty" required:"false" doc:""`
	Internal                              bool   `json:"internal,omitempty" yaml:"internal,omitempty" required:"false" doc:""`
	IsLocal                               bool   `json:"is_local,omitempty" yaml:"is_local,omitempty" required:"false" doc:""`
	LastRestorePointCreationTime          string `json:"last_restore_point_creation_time,omitempty" yaml:"last_restore_point_creation_time,omitempty" required:"false" doc:""`
	LastRestorePointTime                  string `json:"last_restore_point_time,omitempty" yaml:"last_restore_point_time,omitempty" required:"false" doc:""`
	LastSnapshotCreationTime              string `json:"last_snapshot_creation_time,omitempty" yaml:"last_snapshot_creation_time,omitempty" required:"false" doc:""`
	LastUploadingRestorePointLogicalSize  string `json:"last_uploading_restore_point_logical_size,omitempty" yaml:"last_uploading_restore_point_logical_size,omitempty" required:"false" doc:""`
	LastUploadingRestorePointPhysicalSize string `json:"last_uploading_restore_point_physical_size,omitempty" yaml:"last_uploading_restore_point_physical_size,omitempty" required:"false" doc:""`
	LastUploadingRestorePointProgress     int64  `json:"last_uploading_restore_point_progress,omitempty" yaml:"last_uploading_restore_point_progress,omitempty" required:"false" doc:""`
	LastUploadingRestorePointState        string `json:"last_uploading_restore_point_state,omitempty" yaml:"last_uploading_restore_point_state,omitempty" required:"false" doc:""`
	LeaseExpiryTime                       int64  `json:"lease_expiry_time,omitempty" yaml:"lease_expiry_time,omitempty" required:"false" doc:"The lease expiry time, in seconds, for a global access protected path. This is the duration for which data that was already requested at the destination path can be read locally from cache without the destination peer requesting it from the source peer. When the lease expires, the cache is invalidated and the next read request for the data is requested again from the source peer."`
	LogicalSize                           int64  `json:"logical_size,omitempty" yaml:"logical_size,omitempty" required:"false" doc:""`
	Name                                  string `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:""`
	PeerClusterName                       string `json:"peer_cluster_name,omitempty" yaml:"peer_cluster_name,omitempty" required:"false" doc:""`
	PeerConnectionState                   string `json:"peer_connection_state,omitempty" yaml:"peer_connection_state,omitempty" required:"false" doc:""`
	PhysicalSize                          int64  `json:"physical_size,omitempty" yaml:"physical_size,omitempty" required:"false" doc:""`
	Progress                              string `json:"progress,omitempty" yaml:"progress,omitempty" required:"false" doc:""`
	ProtectionPolicyId                    string `json:"protection_policy_id,omitempty" yaml:"protection_policy_id,omitempty" required:"false" doc:"protection policy id"`
	ProtectionPolicyName                  string `json:"protection_policy_name,omitempty" yaml:"protection_policy_name,omitempty" required:"false" doc:"protection policy name"`
	RemoteTenantGuid                      string `json:"remote_tenant_guid,omitempty" yaml:"remote_tenant_guid,omitempty" required:"false" doc:"remote tenant guid"`
	RemoteTenantName                      string `json:"remote_tenant_name,omitempty" yaml:"remote_tenant_name,omitempty" required:"false" doc:"remote tenant name"`
	ReplicationPolicy                     string `json:"replication_policy,omitempty" yaml:"replication_policy,omitempty" required:"false" doc:"replication policy id"`
	ReplicationTargetName                 string `json:"replication_target_name,omitempty" yaml:"replication_target_name,omitempty" required:"false" doc:""`
	RestoreTask                           string `json:"restore_task,omitempty" yaml:"restore_task,omitempty" required:"false" doc:"link to restore task"`
	Role                                  string `json:"role,omitempty" yaml:"role,omitempty" required:"false" doc:"current role in the replication"`
	RoleChangeEtaSec                      int64  `json:"role_change_eta_sec,omitempty" yaml:"role_change_eta_sec,omitempty" required:"false" doc:""`
	RoleChangeProgressPromil              int64  `json:"role_change_progress_promil,omitempty" yaml:"role_change_progress_promil,omitempty" required:"false" doc:""`
	SourceDir                             string `json:"source_dir,omitempty" yaml:"source_dir,omitempty" required:"false" doc:"path to replicate"`
	State                                 string `json:"state,omitempty" yaml:"state,omitempty" required:"false" doc:"state"`
	StateDescription                      string `json:"state_description,omitempty" yaml:"state_description,omitempty" required:"false" doc:""`
	SyncDisconnectTime                    int64  `json:"sync_disconnect_time,omitempty" yaml:"sync_disconnect_time,omitempty" required:"false" doc:"Replication group sync replication disconnect time, in seconds"`
	SyncInterval                          int64  `json:"sync_interval,omitempty" yaml:"sync_interval,omitempty" required:"false" doc:"sync point assurance in seconds"`
	TargetExportedDir                     string `json:"target_exported_dir,omitempty" yaml:"target_exported_dir,omitempty" required:"false" doc:"where to replicate on the remote"`
	TenantId                              int64  `json:"tenant_id,omitempty" yaml:"tenant_id,omitempty" required:"false" doc:"Local Tenant ID"`
	TenantName                            string `json:"tenant_name,omitempty" yaml:"tenant_name,omitempty" required:"false" doc:"Local Tenant name"`
}

// -----------------------------------------------------
// RESOURCE METHODS
// -----------------------------------------------------

// ProtectedPath represents a typed resource for protectedpath operations
type ProtectedPath struct {
	Untyped *vast_client.VMSRest
}

// Get retrieves a single protectedpath with typed request/response
func (r *ProtectedPath) Get(req *ProtectedPathSearchParams) (*ProtectedPathModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.ProtectedPaths.Get(params)
	if err != nil {
		return nil, err
	}

	var response ProtectedPathModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// GetWithContext retrieves a single protectedpath with typed request/response using provided context
func (r *ProtectedPath) GetWithContext(ctx context.Context, req *ProtectedPathSearchParams) (*ProtectedPathModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.ProtectedPaths.GetWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response ProtectedPathModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// GetById retrieves a single protectedpath by ID
func (r *ProtectedPath) GetById(id any) (*ProtectedPathModel, error) {
	record, err := r.Untyped.ProtectedPaths.GetById(id)
	if err != nil {
		return nil, err
	}

	var response ProtectedPathModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// GetByIdWithContext retrieves a single protectedpath by ID using provided context
func (r *ProtectedPath) GetByIdWithContext(ctx context.Context, id any) (*ProtectedPathModel, error) {
	record, err := r.Untyped.ProtectedPaths.GetByIdWithContext(ctx, id)
	if err != nil {
		return nil, err
	}

	var response ProtectedPathModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// List retrieves multiple protectedpaths with typed request/response
func (r *ProtectedPath) List(req *ProtectedPathSearchParams) ([]*ProtectedPathModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.ProtectedPaths.List(params)
	if err != nil {
		return nil, err
	}

	var response []*ProtectedPathModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// ListWithContext retrieves multiple protectedpaths with typed request/response using provided context
func (r *ProtectedPath) ListWithContext(ctx context.Context, req *ProtectedPathSearchParams) ([]*ProtectedPathModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.ProtectedPaths.ListWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response []*ProtectedPathModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// Create creates a new protectedpath with typed request/response
func (r *ProtectedPath) Create(req *ProtectedPathRequestBody) (*ProtectedPathModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.ProtectedPaths.Create(params)
	if err != nil {
		return nil, err
	}

	var response ProtectedPathModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// CreateWithContext creates a new protectedpath with typed request/response using provided context
func (r *ProtectedPath) CreateWithContext(ctx context.Context, req *ProtectedPathRequestBody) (*ProtectedPathModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.ProtectedPaths.CreateWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response ProtectedPathModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Update updates an existing protectedpath with typed request/response
func (r *ProtectedPath) Update(id any, req *ProtectedPathRequestBody) (*ProtectedPathModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.ProtectedPaths.Update(id, params)
	if err != nil {
		return nil, err
	}

	var response ProtectedPathModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// UpdateWithContext updates an existing protectedpath with typed request/response using provided context
func (r *ProtectedPath) UpdateWithContext(ctx context.Context, id any, req *ProtectedPathRequestBody) (*ProtectedPathModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.ProtectedPaths.UpdateWithContext(ctx, id, params)
	if err != nil {
		return nil, err
	}

	var response ProtectedPathModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Delete deletes a protectedpath with search parameters
func (r *ProtectedPath) Delete(req *ProtectedPathSearchParams) error {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return err
	}
	_, err = r.Untyped.ProtectedPaths.Delete(params, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteWithContext deletes a protectedpath with search parameters using provided context
func (r *ProtectedPath) DeleteWithContext(ctx context.Context, req *ProtectedPathSearchParams) error {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return err
	}
	_, err = r.Untyped.ProtectedPaths.DeleteWithContext(ctx, params, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteById deletes a protectedpath by ID
func (r *ProtectedPath) DeleteById(id any) error {
	_, err := r.Untyped.ProtectedPaths.DeleteById(id, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteByIdWithContext deletes a protectedpath by ID using provided context
func (r *ProtectedPath) DeleteByIdWithContext(ctx context.Context, id any) error {
	_, err := r.Untyped.ProtectedPaths.DeleteByIdWithContext(ctx, id, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// Ensure ensures a protectedpath exists with typed response
func (r *ProtectedPath) Ensure(searchParams *ProtectedPathSearchParams, body *ProtectedPathRequestBody) (*ProtectedPathModel, error) {
	searchParamsConverted, err := vast_client.NewParamsFromStruct(searchParams)
	if err != nil {
		return nil, err
	}
	bodyConverted, err := vast_client.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.ProtectedPaths.Ensure(searchParamsConverted, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response ProtectedPathModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// EnsureWithContext ensures a protectedpath exists with typed response using provided context
func (r *ProtectedPath) EnsureWithContext(ctx context.Context, searchParams *ProtectedPathSearchParams, body *ProtectedPathRequestBody) (*ProtectedPathModel, error) {
	searchParamsConverted, err := vast_client.NewParamsFromStruct(searchParams)
	if err != nil {
		return nil, err
	}
	bodyConverted, err := vast_client.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.ProtectedPaths.EnsureWithContext(ctx, searchParamsConverted, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response ProtectedPathModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// EnsureByName ensures a protectedpath exists by name with typed response
func (r *ProtectedPath) EnsureByName(name string, body *ProtectedPathRequestBody) (*ProtectedPathModel, error) {
	bodyConverted, err := vast_client.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.ProtectedPaths.EnsureByName(name, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response ProtectedPathModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// EnsureByNameWithContext ensures a protectedpath exists by name with typed response using provided context
func (r *ProtectedPath) EnsureByNameWithContext(ctx context.Context, name string, body *ProtectedPathRequestBody) (*ProtectedPathModel, error) {
	bodyConverted, err := vast_client.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.ProtectedPaths.EnsureByNameWithContext(ctx, name, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response ProtectedPathModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Exists checks if a protectedpath exists
func (r *ProtectedPath) Exists(req *ProtectedPathSearchParams) (bool, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.ProtectedPaths.Exists(params)
}

// ExistsWithContext checks if a protectedpath exists using provided context
func (r *ProtectedPath) ExistsWithContext(ctx context.Context, req *ProtectedPathSearchParams) (bool, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.ProtectedPaths.ExistsWithContext(ctx, params)
}

// MustExists checks if a protectedpath exists and panics if not
func (r *ProtectedPath) MustExists(req *ProtectedPathSearchParams) bool {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.ProtectedPaths.MustExists(params)
}

// MustExistsWithContext checks if a protectedpath exists and panics if not using provided context
func (r *ProtectedPath) MustExistsWithContext(ctx context.Context, req *ProtectedPathSearchParams) bool {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.ProtectedPaths.MustExistsWithContext(ctx, params)
}

// -----------------------------------------------------
// RENDERABLE INTERFACE METHODS
// -----------------------------------------------------

// PrettyTable returns a formatted table representation of the ProtectedPathModel
func (m *ProtectedPathModel) PrettyTable() string {
	return m.toRecord().PrettyTable()
}

// PrettyJson returns a JSON representation of the ProtectedPathModel
func (m *ProtectedPathModel) PrettyJson(indent ...string) string {
	return m.toRecord().PrettyJson(indent...)
}

// toRecord converts the ProtectedPathModel to a Record (map[string]any) with @resourceType
func (m *ProtectedPathModel) toRecord() vast_client.Record {
	// Convert struct to map using JSON marshaling
	jsonBytes, err := json.Marshal(m)
	if err != nil {
		return vast_client.Record{"error": fmt.Sprintf("failed to marshal struct: %v", err)}
	}

	var record vast_client.Record
	if err := json.Unmarshal(jsonBytes, &record); err != nil {
		return vast_client.Record{"error": fmt.Sprintf("failed to unmarshal to record: %v", err)}
	}

	// Add resource type using reflection
	record["@resourceType"] = reflect.TypeOf(*m).Name()

	return record
}
