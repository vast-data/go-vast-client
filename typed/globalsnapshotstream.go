// Code generated by generate-typed-resources. DO NOT EDIT.

package typed

import (
	"context"
	"encoding/json"
	"fmt"
	"reflect"

	vast_client "github.com/vast-data/go-vast-client"
)

// -----------------------------------------------------
// SEARCH PARAMS
// -----------------------------------------------------

// GlobalSnapshotStreamSearchParams represents the search parameters for GlobalSnapshotStream operations
// Generated from GET query parameters for resource: globalsnapstreams
type GlobalSnapshotStreamSearchParams struct {
	Guid string `json:"guid,omitempty" yaml:"guid,omitempty" required:"false" doc:"unique identifier"`
	Name string `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:"Filter by Global Snaphot Stream name"`
}

// -----------------------------------------------------
// REQUEST BODY
// -----------------------------------------------------

// GlobalsnapstreamRequestBody_OwnerRootSnapshot represents a nested type for request body
type GlobalsnapstreamRequestBody_OwnerRootSnapshot struct {
	CloneId             int64  `json:"clone_id,omitempty" yaml:"clone_id,omitempty" required:"false" doc:""`
	Name                string `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:"Name of snapshot"`
	ParentHandleEhandle string `json:"parent_handle_ehandle,omitempty" yaml:"parent_handle_ehandle,omitempty" required:"false" doc:""`
}

// GlobalSnapshotStreamRequestBody represents the request body for GlobalSnapshotStream operations
// Generated from POST request body for resource: globalsnapstreams
type GlobalSnapshotStreamRequestBody struct {
	Enabled           bool                                          `json:"enabled,omitempty" yaml:"enabled,omitempty" required:"false" doc:"Enables background sync, in which the snapshot data is copied from the source to the destination after the clone is created. During the copying stage, read requests are directed to the source if the requested data is not yet copied. If false, the snapshot data is not copied to the destination. Requests to read data from the cloned directory continue to read data from the cloned source."`
	Guid              string                                        `json:"guid,omitempty" yaml:"guid,omitempty" required:"false" doc:"Do not specify this parameter."`
	Id                int64                                         `json:"id,omitempty" yaml:"id,omitempty" required:"false" doc:"Do not specify this parameter."`
	LoaneeRootPath    string                                        `json:"loanee_root_path,omitempty" yaml:"loanee_root_path,omitempty" required:"false" doc:"ID of the path you want to clone. Specify only if cloning from a snapshot on the local cluster."`
	LoaneeSnapshot    string                                        `json:"loanee_snapshot,omitempty" yaml:"loanee_snapshot,omitempty" required:"false" doc:"Loanee snapshot name"`
	LoaneeSnapshotId  int64                                         `json:"loanee_snapshot_id,omitempty" yaml:"loanee_snapshot_id,omitempty" required:"false" doc:"ID of local snapshot to clone. Specify only if cloning from a snapshot on the local cluster."`
	LoaneeTenantId    int64                                         `json:"loanee_tenant_id,omitempty" yaml:"loanee_tenant_id,omitempty" required:"false" doc:"The target tenant for the clone, on the local cluster."`
	Name              string                                        `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:"A name for the global snap stream."`
	OwnerRootSnapshot GlobalsnapstreamRequestBody_OwnerRootSnapshot `json:"owner_root_snapshot,omitempty" yaml:"owner_root_snapshot,omitempty" required:"false" doc:"Details of the remote snapshot to clone. To retrieve details of snapshots per path, call /clusters/list_snapshoted_paths_remote/ and clusters/list_clone_snapshoted_paths_remote/. Specify only if cloning from remote."`
	RemoteTarget      string                                        `json:"remote_target,omitempty" yaml:"remote_target,omitempty" required:"false" doc:"The name of a remote replication peer from which to clone a snapshot. Specify only if cloning from remote."`
	RemoteTargetId    int64                                         `json:"remote_target_id,omitempty" yaml:"remote_target_id,omitempty" required:"false" doc:"The ID of the remote replication peer from which to clone a snapshot. Specify only if cloning from remote."`
}

// -----------------------------------------------------
// MODEL
// -----------------------------------------------------

// GlobalSnapStreamModel_LoaneeTenant represents a nested type for model
type GlobalSnapStreamModel_LoaneeTenant struct {
	Guid string `json:"guid,omitempty" yaml:"guid,omitempty" required:"false" doc:"Loanee tenant guid"`
	Name string `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:"Loanee tenant name"`
}

// GlobalSnapStreamModel_OwnerTenant represents a nested type for model
type GlobalSnapStreamModel_OwnerTenant struct {
	Guid string `json:"guid,omitempty" yaml:"guid,omitempty" required:"false" doc:"Owner tenant guid"`
	Name string `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:"Owner tenant name"`
}

// GlobalSnapshotStreamModel represents the model data for GlobalSnapshotStream operations
// Generated from schema: GlobalSnapStream
type GlobalSnapshotStreamModel struct {
	Bw               int64                              `json:"bw,omitempty" yaml:"bw,omitempty" required:"false" doc:"BW"`
	Direction        string                             `json:"direction,omitempty" yaml:"direction,omitempty" required:"false" doc:""`
	Enabled          bool                               `json:"enabled,omitempty" yaml:"enabled,omitempty" required:"false" doc:"Enabled"`
	Eta              string                             `json:"eta,omitempty" yaml:"eta,omitempty" required:"false" doc:"ETA"`
	ExternalState    string                             `json:"external_state,omitempty" yaml:"external_state,omitempty" required:"false" doc:"Global Snapshot Clone state"`
	Guid             string                             `json:"guid,omitempty" yaml:"guid,omitempty" required:"false" doc:"unique identifier"`
	Health           string                             `json:"health,omitempty" yaml:"health,omitempty" required:"false" doc:""`
	Id               int64                              `json:"id,omitempty" yaml:"id,omitempty" required:"false" doc:""`
	LoaneeRootPath   string                             `json:"loanee_root_path,omitempty" yaml:"loanee_root_path,omitempty" required:"false" doc:"Target path"`
	LoaneeSnapshot   string                             `json:"loanee_snapshot,omitempty" yaml:"loanee_snapshot,omitempty" required:"false" doc:"Loanee snapshot name"`
	LoaneeSnapshotId int64                              `json:"loanee_snapshot_id,omitempty" yaml:"loanee_snapshot_id,omitempty" required:"false" doc:""`
	LoaneeTenant     GlobalSnapStreamModel_LoaneeTenant `json:"loanee_tenant,omitempty" yaml:"loanee_tenant,omitempty" required:"false" doc:""`
	Name             string                             `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:""`
	OwnerTenant      GlobalSnapStreamModel_OwnerTenant  `json:"owner_tenant,omitempty" yaml:"owner_tenant,omitempty" required:"false" doc:""`
	RemoteTarget     string                             `json:"remote_target,omitempty" yaml:"remote_target,omitempty" required:"false" doc:"Remote cluster name"`
	RemoteTargetId   int64                              `json:"remote_target_id,omitempty" yaml:"remote_target_id,omitempty" required:"false" doc:""`
	RestoreTask      int64                              `json:"restore_task,omitempty" yaml:"restore_task,omitempty" required:"false" doc:""`
	SourceCluster    string                             `json:"source_cluster,omitempty" yaml:"source_cluster,omitempty" required:"false" doc:"Source cluster"`
	SourcePath       string                             `json:"source_path,omitempty" yaml:"source_path,omitempty" required:"false" doc:"Source path"`
	SourceSnapshot   string                             `json:"source_snapshot,omitempty" yaml:"source_snapshot,omitempty" required:"false" doc:"Source snapshot"`
	State            string                             `json:"state,omitempty" yaml:"state,omitempty" required:"false" doc:""`
	SyncProgress     int64                              `json:"sync_progress,omitempty" yaml:"sync_progress,omitempty" required:"false" doc:""`
	TargetCluster    string                             `json:"target_cluster,omitempty" yaml:"target_cluster,omitempty" required:"false" doc:"Target cluster"`
}

// -----------------------------------------------------
// RESOURCE METHODS
// -----------------------------------------------------

// GlobalSnapshotStream represents a typed resource for globalsnapshotstream operations
type GlobalSnapshotStream struct {
	Untyped *vast_client.VMSRest
}

// Get retrieves a single globalsnapshotstream with typed request/response
func (r *GlobalSnapshotStream) Get(req *GlobalSnapshotStreamSearchParams) (*GlobalSnapshotStreamModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GlobalSnapshotStreams.Get(params)
	if err != nil {
		return nil, err
	}

	var response GlobalSnapshotStreamModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// GetWithContext retrieves a single globalsnapshotstream with typed request/response using provided context
func (r *GlobalSnapshotStream) GetWithContext(ctx context.Context, req *GlobalSnapshotStreamSearchParams) (*GlobalSnapshotStreamModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GlobalSnapshotStreams.GetWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response GlobalSnapshotStreamModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// GetById retrieves a single globalsnapshotstream by ID
func (r *GlobalSnapshotStream) GetById(id any) (*GlobalSnapshotStreamModel, error) {
	record, err := r.Untyped.GlobalSnapshotStreams.GetById(id)
	if err != nil {
		return nil, err
	}

	var response GlobalSnapshotStreamModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// GetByIdWithContext retrieves a single globalsnapshotstream by ID using provided context
func (r *GlobalSnapshotStream) GetByIdWithContext(ctx context.Context, id any) (*GlobalSnapshotStreamModel, error) {
	record, err := r.Untyped.GlobalSnapshotStreams.GetByIdWithContext(ctx, id)
	if err != nil {
		return nil, err
	}

	var response GlobalSnapshotStreamModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// List retrieves multiple globalsnapshotstreams with typed request/response
func (r *GlobalSnapshotStream) List(req *GlobalSnapshotStreamSearchParams) ([]*GlobalSnapshotStreamModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.GlobalSnapshotStreams.List(params)
	if err != nil {
		return nil, err
	}

	var response []*GlobalSnapshotStreamModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// ListWithContext retrieves multiple globalsnapshotstreams with typed request/response using provided context
func (r *GlobalSnapshotStream) ListWithContext(ctx context.Context, req *GlobalSnapshotStreamSearchParams) ([]*GlobalSnapshotStreamModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.GlobalSnapshotStreams.ListWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response []*GlobalSnapshotStreamModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// Create creates a new globalsnapshotstream with typed request/response
func (r *GlobalSnapshotStream) Create(req *GlobalSnapshotStreamRequestBody) (*GlobalSnapshotStreamModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GlobalSnapshotStreams.Create(params)
	if err != nil {
		return nil, err
	}

	var response GlobalSnapshotStreamModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// CreateWithContext creates a new globalsnapshotstream with typed request/response using provided context
func (r *GlobalSnapshotStream) CreateWithContext(ctx context.Context, req *GlobalSnapshotStreamRequestBody) (*GlobalSnapshotStreamModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GlobalSnapshotStreams.CreateWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response GlobalSnapshotStreamModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Update updates an existing globalsnapshotstream with typed request/response
func (r *GlobalSnapshotStream) Update(id any, req *GlobalSnapshotStreamRequestBody) (*GlobalSnapshotStreamModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GlobalSnapshotStreams.Update(id, params)
	if err != nil {
		return nil, err
	}

	var response GlobalSnapshotStreamModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// UpdateWithContext updates an existing globalsnapshotstream with typed request/response using provided context
func (r *GlobalSnapshotStream) UpdateWithContext(ctx context.Context, id any, req *GlobalSnapshotStreamRequestBody) (*GlobalSnapshotStreamModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GlobalSnapshotStreams.UpdateWithContext(ctx, id, params)
	if err != nil {
		return nil, err
	}

	var response GlobalSnapshotStreamModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Delete deletes a globalsnapshotstream with search parameters
func (r *GlobalSnapshotStream) Delete(req *GlobalSnapshotStreamSearchParams) error {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return err
	}
	_, err = r.Untyped.GlobalSnapshotStreams.Delete(params, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteWithContext deletes a globalsnapshotstream with search parameters using provided context
func (r *GlobalSnapshotStream) DeleteWithContext(ctx context.Context, req *GlobalSnapshotStreamSearchParams) error {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return err
	}
	_, err = r.Untyped.GlobalSnapshotStreams.DeleteWithContext(ctx, params, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteById deletes a globalsnapshotstream by ID
func (r *GlobalSnapshotStream) DeleteById(id any) error {
	_, err := r.Untyped.GlobalSnapshotStreams.DeleteById(id, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteByIdWithContext deletes a globalsnapshotstream by ID using provided context
func (r *GlobalSnapshotStream) DeleteByIdWithContext(ctx context.Context, id any) error {
	_, err := r.Untyped.GlobalSnapshotStreams.DeleteByIdWithContext(ctx, id, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// Ensure ensures a globalsnapshotstream exists with typed response
func (r *GlobalSnapshotStream) Ensure(searchParams *GlobalSnapshotStreamSearchParams, body *GlobalSnapshotStreamRequestBody) (*GlobalSnapshotStreamModel, error) {
	searchParamsConverted, err := vast_client.NewParamsFromStruct(searchParams)
	if err != nil {
		return nil, err
	}
	bodyConverted, err := vast_client.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GlobalSnapshotStreams.Ensure(searchParamsConverted, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response GlobalSnapshotStreamModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// EnsureWithContext ensures a globalsnapshotstream exists with typed response using provided context
func (r *GlobalSnapshotStream) EnsureWithContext(ctx context.Context, searchParams *GlobalSnapshotStreamSearchParams, body *GlobalSnapshotStreamRequestBody) (*GlobalSnapshotStreamModel, error) {
	searchParamsConverted, err := vast_client.NewParamsFromStruct(searchParams)
	if err != nil {
		return nil, err
	}
	bodyConverted, err := vast_client.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GlobalSnapshotStreams.EnsureWithContext(ctx, searchParamsConverted, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response GlobalSnapshotStreamModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// EnsureByName ensures a globalsnapshotstream exists by name with typed response
func (r *GlobalSnapshotStream) EnsureByName(name string, body *GlobalSnapshotStreamRequestBody) (*GlobalSnapshotStreamModel, error) {
	bodyConverted, err := vast_client.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GlobalSnapshotStreams.EnsureByName(name, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response GlobalSnapshotStreamModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// EnsureByNameWithContext ensures a globalsnapshotstream exists by name with typed response using provided context
func (r *GlobalSnapshotStream) EnsureByNameWithContext(ctx context.Context, name string, body *GlobalSnapshotStreamRequestBody) (*GlobalSnapshotStreamModel, error) {
	bodyConverted, err := vast_client.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GlobalSnapshotStreams.EnsureByNameWithContext(ctx, name, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response GlobalSnapshotStreamModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Exists checks if a globalsnapshotstream exists
func (r *GlobalSnapshotStream) Exists(req *GlobalSnapshotStreamSearchParams) (bool, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.GlobalSnapshotStreams.Exists(params)
}

// ExistsWithContext checks if a globalsnapshotstream exists using provided context
func (r *GlobalSnapshotStream) ExistsWithContext(ctx context.Context, req *GlobalSnapshotStreamSearchParams) (bool, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.GlobalSnapshotStreams.ExistsWithContext(ctx, params)
}

// MustExists checks if a globalsnapshotstream exists and panics if not
func (r *GlobalSnapshotStream) MustExists(req *GlobalSnapshotStreamSearchParams) bool {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.GlobalSnapshotStreams.MustExists(params)
}

// MustExistsWithContext checks if a globalsnapshotstream exists and panics if not using provided context
func (r *GlobalSnapshotStream) MustExistsWithContext(ctx context.Context, req *GlobalSnapshotStreamSearchParams) bool {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.GlobalSnapshotStreams.MustExistsWithContext(ctx, params)
}

// -----------------------------------------------------
// RENDERABLE INTERFACE METHODS
// -----------------------------------------------------

// PrettyTable returns a formatted table representation of the GlobalSnapshotStreamModel
func (m *GlobalSnapshotStreamModel) PrettyTable() string {
	return m.toRecord().PrettyTable()
}

// PrettyJson returns a JSON representation of the GlobalSnapshotStreamModel
func (m *GlobalSnapshotStreamModel) PrettyJson(indent ...string) string {
	return m.toRecord().PrettyJson(indent...)
}

// toRecord converts the GlobalSnapshotStreamModel to a Record (map[string]any) with @resourceType
func (m *GlobalSnapshotStreamModel) toRecord() vast_client.Record {
	// Convert struct to map using JSON marshaling
	jsonBytes, err := json.Marshal(m)
	if err != nil {
		return vast_client.Record{"error": fmt.Sprintf("failed to marshal struct: %v", err)}
	}

	var record vast_client.Record
	if err := json.Unmarshal(jsonBytes, &record); err != nil {
		return vast_client.Record{"error": fmt.Sprintf("failed to unmarshal to record: %v", err)}
	}

	// Add resource type using reflection
	record["@resourceType"] = reflect.TypeOf(*m).Name()

	return record
}
