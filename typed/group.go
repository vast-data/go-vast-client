// Code generated by generate-typed-resources. DO NOT EDIT.

package typed

import (
	"context"
	"encoding/json"
	"fmt"
	"reflect"

	vast_client "github.com/vast-data/go-vast-client"
)

// -----------------------------------------------------
// SEARCH PARAMS
// -----------------------------------------------------

// GroupSearchParams represents the search parameters for Group operations
// Generated from GET query parameters for resource: groups
type GroupSearchParams struct {
	Gid  int64  `json:"gid,omitempty" yaml:"gid,omitempty" required:"false" doc:""`
	Guid string `json:"guid,omitempty" yaml:"guid,omitempty" required:"false" doc:""`
	Name string `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:""`
}

// -----------------------------------------------------
// REQUEST BODY
// -----------------------------------------------------

// GroupRequestBody represents the request body for Group operations
// Generated from POST request body for resource: groups
type GroupRequestBody struct {
	Name            string `json:"name,omitempty" yaml:"name,omitempty" required:"true" doc:"group name"`
	Gid             int64  `json:"gid,omitempty" yaml:"gid,omitempty" required:"false" doc:"group GID"`
	LocalProviderId int64  `json:"local_provider_id,omitempty" yaml:"local_provider_id,omitempty" required:"false" doc:"Local provider ID"`
	Sid             string `json:"sid,omitempty" yaml:"sid,omitempty" required:"false" doc:"group SID"`
}

// -----------------------------------------------------
// MODEL
// -----------------------------------------------------

// GroupModel_LocalProvider represents a nested type for model
type GroupModel_LocalProvider struct {
	Id   int64  `json:"id,omitempty" yaml:"id,omitempty" required:"false" doc:"ID of the local provider"`
	Name string `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:"Name of the local provider"`
}

// GroupModel_S3PoliciesItem represents a nested type for model
type GroupModel_S3PoliciesItem struct {
	Id   int64  `json:"id,omitempty" yaml:"id,omitempty" required:"false" doc:"Identity Policy ID"`
	Name string `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:"Identity Policy name"`
}

// GroupModel represents the model data for Group operations
// Generated from schema: Group
type GroupModel struct {
	Gid           int64                        `json:"gid,omitempty" yaml:"gid,omitempty" required:"false" doc:""`
	Guid          string                       `json:"guid,omitempty" yaml:"guid,omitempty" required:"false" doc:""`
	Id            int64                        `json:"id,omitempty" yaml:"id,omitempty" required:"false" doc:""`
	LocalProvider GroupModel_LocalProvider     `json:"local_provider,omitempty" yaml:"local_provider,omitempty" required:"false" doc:""`
	Name          string                       `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:""`
	S3Policies    *[]GroupModel_S3PoliciesItem `json:"s3_policies,omitempty" yaml:"s3_policies,omitempty" required:"false" doc:""`
	S3PoliciesIds *[]int64                     `json:"s3_policies_ids,omitempty" yaml:"s3_policies_ids,omitempty" required:"false" doc:"S3 policies IDs"`
	Sid           string                       `json:"sid,omitempty" yaml:"sid,omitempty" required:"false" doc:""`
	Title         string                       `json:"title,omitempty" yaml:"title,omitempty" required:"false" doc:""`
	Url           string                       `json:"url,omitempty" yaml:"url,omitempty" required:"false" doc:""`
}

// -----------------------------------------------------
// RESOURCE METHODS
// -----------------------------------------------------

// Group represents a typed resource for group operations
type Group struct {
	Untyped *vast_client.VMSRest
}

// Get retrieves a single group with typed request/response
func (r *Group) Get(req *GroupSearchParams) (*GroupModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Groups.Get(params)
	if err != nil {
		return nil, err
	}

	var response GroupModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// GetWithContext retrieves a single group with typed request/response using provided context
func (r *Group) GetWithContext(ctx context.Context, req *GroupSearchParams) (*GroupModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Groups.GetWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response GroupModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// GetById retrieves a single group by ID
func (r *Group) GetById(id any) (*GroupModel, error) {
	record, err := r.Untyped.Groups.GetById(id)
	if err != nil {
		return nil, err
	}

	var response GroupModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// GetByIdWithContext retrieves a single group by ID using provided context
func (r *Group) GetByIdWithContext(ctx context.Context, id any) (*GroupModel, error) {
	record, err := r.Untyped.Groups.GetByIdWithContext(ctx, id)
	if err != nil {
		return nil, err
	}

	var response GroupModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// List retrieves multiple groups with typed request/response
func (r *Group) List(req *GroupSearchParams) ([]*GroupModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.Groups.List(params)
	if err != nil {
		return nil, err
	}

	var response []*GroupModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// ListWithContext retrieves multiple groups with typed request/response using provided context
func (r *Group) ListWithContext(ctx context.Context, req *GroupSearchParams) ([]*GroupModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.Groups.ListWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response []*GroupModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// Create creates a new group with typed request/response
func (r *Group) Create(req *GroupRequestBody) (*GroupModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Groups.Create(params)
	if err != nil {
		return nil, err
	}

	var response GroupModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// CreateWithContext creates a new group with typed request/response using provided context
func (r *Group) CreateWithContext(ctx context.Context, req *GroupRequestBody) (*GroupModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Groups.CreateWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response GroupModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Update updates an existing group with typed request/response
func (r *Group) Update(id any, req *GroupRequestBody) (*GroupModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Groups.Update(id, params)
	if err != nil {
		return nil, err
	}

	var response GroupModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// UpdateWithContext updates an existing group with typed request/response using provided context
func (r *Group) UpdateWithContext(ctx context.Context, id any, req *GroupRequestBody) (*GroupModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Groups.UpdateWithContext(ctx, id, params)
	if err != nil {
		return nil, err
	}

	var response GroupModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Delete deletes a group with search parameters
func (r *Group) Delete(req *GroupSearchParams) error {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return err
	}
	_, err = r.Untyped.Groups.Delete(params, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteWithContext deletes a group with search parameters using provided context
func (r *Group) DeleteWithContext(ctx context.Context, req *GroupSearchParams) error {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return err
	}
	_, err = r.Untyped.Groups.DeleteWithContext(ctx, params, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteById deletes a group by ID
func (r *Group) DeleteById(id any) error {
	_, err := r.Untyped.Groups.DeleteById(id, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteByIdWithContext deletes a group by ID using provided context
func (r *Group) DeleteByIdWithContext(ctx context.Context, id any) error {
	_, err := r.Untyped.Groups.DeleteByIdWithContext(ctx, id, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// Ensure ensures a group exists with typed response
func (r *Group) Ensure(searchParams *GroupSearchParams, body *GroupRequestBody) (*GroupModel, error) {
	searchParamsConverted, err := vast_client.NewParamsFromStruct(searchParams)
	if err != nil {
		return nil, err
	}
	bodyConverted, err := vast_client.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Groups.Ensure(searchParamsConverted, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response GroupModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// EnsureWithContext ensures a group exists with typed response using provided context
func (r *Group) EnsureWithContext(ctx context.Context, searchParams *GroupSearchParams, body *GroupRequestBody) (*GroupModel, error) {
	searchParamsConverted, err := vast_client.NewParamsFromStruct(searchParams)
	if err != nil {
		return nil, err
	}
	bodyConverted, err := vast_client.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Groups.EnsureWithContext(ctx, searchParamsConverted, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response GroupModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// EnsureByName ensures a group exists by name with typed response
func (r *Group) EnsureByName(name string, body *GroupRequestBody) (*GroupModel, error) {
	bodyConverted, err := vast_client.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Groups.EnsureByName(name, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response GroupModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// EnsureByNameWithContext ensures a group exists by name with typed response using provided context
func (r *Group) EnsureByNameWithContext(ctx context.Context, name string, body *GroupRequestBody) (*GroupModel, error) {
	bodyConverted, err := vast_client.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Groups.EnsureByNameWithContext(ctx, name, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response GroupModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Exists checks if a group exists
func (r *Group) Exists(req *GroupSearchParams) (bool, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.Groups.Exists(params)
}

// ExistsWithContext checks if a group exists using provided context
func (r *Group) ExistsWithContext(ctx context.Context, req *GroupSearchParams) (bool, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.Groups.ExistsWithContext(ctx, params)
}

// MustExists checks if a group exists and panics if not
func (r *Group) MustExists(req *GroupSearchParams) bool {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.Groups.MustExists(params)
}

// MustExistsWithContext checks if a group exists and panics if not using provided context
func (r *Group) MustExistsWithContext(ctx context.Context, req *GroupSearchParams) bool {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.Groups.MustExistsWithContext(ctx, params)
}

// -----------------------------------------------------
// RENDERABLE INTERFACE METHODS
// -----------------------------------------------------

// PrettyTable returns a formatted table representation of the GroupModel
func (m *GroupModel) PrettyTable() string {
	return m.toRecord().PrettyTable()
}

// PrettyJson returns a JSON representation of the GroupModel
func (m *GroupModel) PrettyJson(indent ...string) string {
	return m.toRecord().PrettyJson(indent...)
}

// toRecord converts the GroupModel to a Record (map[string]any) with @resourceType
func (m *GroupModel) toRecord() vast_client.Record {
	// Convert struct to map using JSON marshaling
	jsonBytes, err := json.Marshal(m)
	if err != nil {
		return vast_client.Record{"error": fmt.Sprintf("failed to marshal struct: %v", err)}
	}

	var record vast_client.Record
	if err := json.Unmarshal(jsonBytes, &record); err != nil {
		return vast_client.Record{"error": fmt.Sprintf("failed to unmarshal to record: %v", err)}
	}

	// Add resource type using reflection
	record["@resourceType"] = reflect.TypeOf(*m).Name()

	return record
}
