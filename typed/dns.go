// Code generated by generate-typed-resources. DO NOT EDIT.

package typed

import (
	"context"
	"encoding/json"
	"fmt"
	"reflect"

	vast_client "github.com/vast-data/go-vast-client"
)

// -----------------------------------------------------
// SEARCH PARAMS
// -----------------------------------------------------

// DnsSearchParams represents the search parameters for Dns operations
// Generated from GET query parameters for resource: dns
type DnsSearchParams struct {
	Guid string `json:"guid,omitempty" yaml:"guid,omitempty" required:"false" doc:""`
	Name string `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:"Specifies a name for the VAST DNS server configuration"`
}

// -----------------------------------------------------
// REQUEST BODY
// -----------------------------------------------------

// DnsRequestBody represents the request body for Dns operations
// Generated from POST request body for resource: dns
type DnsRequestBody struct {
	BgpConfigId         int64  `json:"bgp_config_id,omitempty" yaml:"bgp_config_id,omitempty" required:"false" doc:"The ID of the BGP configuration to use for layer 3 connectivity configuration"`
	CnodeIds            string `json:"cnode_ids,omitempty" yaml:"cnode_ids,omitempty" required:"false" doc:"To dedicate a specific group of CNodes to the DNS, list the IDs of the CNodes."`
	DomainSuffix        string `json:"domain_suffix,omitempty" yaml:"domain_suffix,omitempty" required:"false" doc:"A suffix for domain names. Requests for domain names with this suffix are resolved to the VIPs configured on the cluster."`
	EnableL3            bool   `json:"enable_l3,omitempty" yaml:"enable_l3,omitempty" required:"false" doc:"Enable layer 3 connectivity"`
	Enabled             bool   `json:"enabled,omitempty" yaml:"enabled,omitempty" required:"false" doc:"Set to true to enable the DNS service"`
	InvalidNameResponse string `json:"invalid_name_response,omitempty" yaml:"invalid_name_response,omitempty" required:"false" doc:""`
	InvalidTypeResponse string `json:"invalid_type_response,omitempty" yaml:"invalid_type_response,omitempty" required:"false" doc:""`
	Name                string `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:"A name for the DNS server configuration"`
	NetType             string `json:"net_type,omitempty" yaml:"net_type,omitempty" required:"false" doc:""`
	Ttl                 int64  `json:"ttl,omitempty" yaml:"ttl,omitempty" required:"false" doc:"Specifies the TTL value for the DNS."`
	Vip                 string `json:"vip,omitempty" yaml:"vip,omitempty" required:"false" doc:"A virtual IP to assign to the DNS service. DNS requests from your external DNS server must be delegated to this IP."`
	VipGateway          string `json:"vip_gateway,omitempty" yaml:"vip_gateway,omitempty" required:"false" doc:"If the external DNS server doesn't reside on the same subnet as the DNS VIP, enter the IP of a gateway through which to connect to the DNS server."`
	VipIpv6             string `json:"vip_ipv6,omitempty" yaml:"vip_ipv6,omitempty" required:"false" doc:"Assigns an IPv6 to the DNS service."`
	VipIpv6Gateway      string `json:"vip_ipv6_gateway,omitempty" yaml:"vip_ipv6_gateway,omitempty" required:"false" doc:"Specifies a gateway IPv6 to external DNS server if on different subnet."`
	VipIpv6SubnetCidr   int64  `json:"vip_ipv6_subnet_cidr,omitempty" yaml:"vip_ipv6_subnet_cidr,omitempty" required:"false" doc:"Specifies the subnet, as a CIDR index, on which the DNS resides. [1..128]"`
	VipSubnetCidr       int64  `json:"vip_subnet_cidr,omitempty" yaml:"vip_subnet_cidr,omitempty" required:"false" doc:"The subnet, in CIDR format, on which the DNS VIP resides."`
	VipVlan             int64  `json:"vip_vlan,omitempty" yaml:"vip_vlan,omitempty" required:"false" doc:"If your external DNS server is only exposed to a specific VLAN, you can enter the VLAN here to enable communication with the DNS server."`
}

// -----------------------------------------------------
// MODEL
// -----------------------------------------------------

// DnsModel represents the model data for Dns operations
// Generated from schema: DNS
type DnsModel struct {
	BgpConfigId         int64     `json:"bgp_config_id,omitempty" yaml:"bgp_config_id,omitempty" required:"false" doc:"The ID of the BGP configuration used for L3 connectivity"`
	CnodeIds            *[]int64  `json:"cnode_ids,omitempty" yaml:"cnode_ids,omitempty" required:"false" doc:""`
	Cnodes              *[]string `json:"cnodes,omitempty" yaml:"cnodes,omitempty" required:"false" doc:"CNode names"`
	DomainSuffix        string    `json:"domain_suffix,omitempty" yaml:"domain_suffix,omitempty" required:"false" doc:"Specifies a suffix to append to domain names of each VIP pool. The suffix should complete each domain name to form a valid FQDN for DNS requests to target."`
	EnableL3            bool      `json:"enable_l3,omitempty" yaml:"enable_l3,omitempty" required:"false" doc:"Enable L3 connectivity"`
	Enabled             bool      `json:"enabled,omitempty" yaml:"enabled,omitempty" required:"false" doc:""`
	Guid                string    `json:"guid,omitempty" yaml:"guid,omitempty" required:"false" doc:""`
	Id                  int64     `json:"id,omitempty" yaml:"id,omitempty" required:"false" doc:""`
	InvalidNameResponse string    `json:"invalid_name_response,omitempty" yaml:"invalid_name_response,omitempty" required:"false" doc:""`
	InvalidTypeResponse string    `json:"invalid_type_response,omitempty" yaml:"invalid_type_response,omitempty" required:"false" doc:""`
	Name                string    `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:"Specifies a name for the VAST DNS server configuration"`
	NetType             string    `json:"net_type,omitempty" yaml:"net_type,omitempty" required:"false" doc:""`
	Sync                string    `json:"sync,omitempty" yaml:"sync,omitempty" required:"false" doc:"Synchronization state with leader"`
	SyncTime            string    `json:"sync_time,omitempty" yaml:"sync_time,omitempty" required:"false" doc:"Synchronization time with leader"`
	Title               string    `json:"title,omitempty" yaml:"title,omitempty" required:"false" doc:""`
	Ttl                 int64     `json:"ttl,omitempty" yaml:"ttl,omitempty" required:"false" doc:"Specifies the TTL value for the DNS."`
	Url                 string    `json:"url,omitempty" yaml:"url,omitempty" required:"false" doc:"Endpoint URL for operations on the DNS server configuration"`
	Vip                 string    `json:"vip,omitempty" yaml:"vip,omitempty" required:"false" doc:"Assigns an IP to the DNS service. DNS requests from your external DNS server must be delegated to this IP."`
	VipGateway          string    `json:"vip_gateway,omitempty" yaml:"vip_gateway,omitempty" required:"false" doc:"Specifies a gateway IP to external DNS server if on different subnet. Must be on same subnet as the IP and reachable from the relevant nework interface."`
	VipIpv6             string    `json:"vip_ipv6,omitempty" yaml:"vip_ipv6,omitempty" required:"false" doc:"Assigns an IPv6 to the DNS service."`
	VipIpv6Gateway      string    `json:"vip_ipv6_gateway,omitempty" yaml:"vip_ipv6_gateway,omitempty" required:"false" doc:"Specifies a gateway IPv6 to external DNS server if on different subnet."`
	VipIpv6SubnetCidr   int64     `json:"vip_ipv6_subnet_cidr,omitempty" yaml:"vip_ipv6_subnet_cidr,omitempty" required:"false" doc:"Specifies the subnet, as a CIDR index, on which the DNS resides. [1..128]"`
	VipSubnetCidr       int64     `json:"vip_subnet_cidr,omitempty" yaml:"vip_subnet_cidr,omitempty" required:"false" doc:"Specifies the subnet, as a CIDR index, on which the DNS resides."`
	VipVlan             int64     `json:"vip_vlan,omitempty" yaml:"vip_vlan,omitempty" required:"false" doc:"Specifies a VLAN if needed to enable communication with external DNS server(s)."`
}

// -----------------------------------------------------
// RESOURCE METHODS
// -----------------------------------------------------

// Dns represents a typed resource for dns operations
type Dns struct {
	Untyped *vast_client.VMSRest
}

// Get retrieves a single dns with typed request/response
func (r *Dns) Get(req *DnsSearchParams) (*DnsModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Dns.Get(params)
	if err != nil {
		return nil, err
	}

	var response DnsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// GetWithContext retrieves a single dns with typed request/response using provided context
func (r *Dns) GetWithContext(ctx context.Context, req *DnsSearchParams) (*DnsModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Dns.GetWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response DnsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// GetById retrieves a single dns by ID
func (r *Dns) GetById(id any) (*DnsModel, error) {
	record, err := r.Untyped.Dns.GetById(id)
	if err != nil {
		return nil, err
	}

	var response DnsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// GetByIdWithContext retrieves a single dns by ID using provided context
func (r *Dns) GetByIdWithContext(ctx context.Context, id any) (*DnsModel, error) {
	record, err := r.Untyped.Dns.GetByIdWithContext(ctx, id)
	if err != nil {
		return nil, err
	}

	var response DnsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// List retrieves multiple dnss with typed request/response
func (r *Dns) List(req *DnsSearchParams) ([]*DnsModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.Dns.List(params)
	if err != nil {
		return nil, err
	}

	var response []*DnsModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// ListWithContext retrieves multiple dnss with typed request/response using provided context
func (r *Dns) ListWithContext(ctx context.Context, req *DnsSearchParams) ([]*DnsModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.Dns.ListWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response []*DnsModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// Create creates a new dns with typed request/response
func (r *Dns) Create(req *DnsRequestBody) (*DnsModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Dns.Create(params)
	if err != nil {
		return nil, err
	}

	var response DnsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// CreateWithContext creates a new dns with typed request/response using provided context
func (r *Dns) CreateWithContext(ctx context.Context, req *DnsRequestBody) (*DnsModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Dns.CreateWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response DnsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Update updates an existing dns with typed request/response
func (r *Dns) Update(id any, req *DnsRequestBody) (*DnsModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Dns.Update(id, params)
	if err != nil {
		return nil, err
	}

	var response DnsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// UpdateWithContext updates an existing dns with typed request/response using provided context
func (r *Dns) UpdateWithContext(ctx context.Context, id any, req *DnsRequestBody) (*DnsModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Dns.UpdateWithContext(ctx, id, params)
	if err != nil {
		return nil, err
	}

	var response DnsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Delete deletes a dns with search parameters
func (r *Dns) Delete(req *DnsSearchParams) error {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return err
	}
	_, err = r.Untyped.Dns.Delete(params, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteWithContext deletes a dns with search parameters using provided context
func (r *Dns) DeleteWithContext(ctx context.Context, req *DnsSearchParams) error {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return err
	}
	_, err = r.Untyped.Dns.DeleteWithContext(ctx, params, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteById deletes a dns by ID
func (r *Dns) DeleteById(id any) error {
	_, err := r.Untyped.Dns.DeleteById(id, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteByIdWithContext deletes a dns by ID using provided context
func (r *Dns) DeleteByIdWithContext(ctx context.Context, id any) error {
	_, err := r.Untyped.Dns.DeleteByIdWithContext(ctx, id, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// Ensure ensures a dns exists with typed response
func (r *Dns) Ensure(searchParams *DnsSearchParams, body *DnsRequestBody) (*DnsModel, error) {
	searchParamsConverted, err := vast_client.NewParamsFromStruct(searchParams)
	if err != nil {
		return nil, err
	}
	bodyConverted, err := vast_client.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Dns.Ensure(searchParamsConverted, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response DnsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// EnsureWithContext ensures a dns exists with typed response using provided context
func (r *Dns) EnsureWithContext(ctx context.Context, searchParams *DnsSearchParams, body *DnsRequestBody) (*DnsModel, error) {
	searchParamsConverted, err := vast_client.NewParamsFromStruct(searchParams)
	if err != nil {
		return nil, err
	}
	bodyConverted, err := vast_client.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Dns.EnsureWithContext(ctx, searchParamsConverted, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response DnsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// EnsureByName ensures a dns exists by name with typed response
func (r *Dns) EnsureByName(name string, body *DnsRequestBody) (*DnsModel, error) {
	bodyConverted, err := vast_client.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Dns.EnsureByName(name, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response DnsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// EnsureByNameWithContext ensures a dns exists by name with typed response using provided context
func (r *Dns) EnsureByNameWithContext(ctx context.Context, name string, body *DnsRequestBody) (*DnsModel, error) {
	bodyConverted, err := vast_client.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Dns.EnsureByNameWithContext(ctx, name, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response DnsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Exists checks if a dns exists
func (r *Dns) Exists(req *DnsSearchParams) (bool, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.Dns.Exists(params)
}

// ExistsWithContext checks if a dns exists using provided context
func (r *Dns) ExistsWithContext(ctx context.Context, req *DnsSearchParams) (bool, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.Dns.ExistsWithContext(ctx, params)
}

// MustExists checks if a dns exists and panics if not
func (r *Dns) MustExists(req *DnsSearchParams) bool {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.Dns.MustExists(params)
}

// MustExistsWithContext checks if a dns exists and panics if not using provided context
func (r *Dns) MustExistsWithContext(ctx context.Context, req *DnsSearchParams) bool {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.Dns.MustExistsWithContext(ctx, params)
}

// -----------------------------------------------------
// RENDERABLE INTERFACE METHODS
// -----------------------------------------------------

// PrettyTable returns a formatted table representation of the DnsModel
func (m *DnsModel) PrettyTable() string {
	return m.toRecord().PrettyTable()
}

// PrettyJson returns a JSON representation of the DnsModel
func (m *DnsModel) PrettyJson(indent ...string) string {
	return m.toRecord().PrettyJson(indent...)
}

// toRecord converts the DnsModel to a Record (map[string]any) with @resourceType
func (m *DnsModel) toRecord() vast_client.Record {
	// Convert struct to map using JSON marshaling
	jsonBytes, err := json.Marshal(m)
	if err != nil {
		return vast_client.Record{"error": fmt.Sprintf("failed to marshal struct: %v", err)}
	}

	var record vast_client.Record
	if err := json.Unmarshal(jsonBytes, &record); err != nil {
		return vast_client.Record{"error": fmt.Sprintf("failed to unmarshal to record: %v", err)}
	}

	// Add resource type using reflection
	record["@resourceType"] = reflect.TypeOf(*m).Name()

	return record
}
