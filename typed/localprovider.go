// Code generated by generate-typed-resources. DO NOT EDIT.

package typed

import (
	"context"
	"encoding/json"
	"fmt"
	"reflect"

	vast_client "github.com/vast-data/go-vast-client"
)

// -----------------------------------------------------
// SEARCH PARAMS
// -----------------------------------------------------

// LocalProviderSearchParams represents the search parameters for LocalProvider operations
// Generated from GET query parameters for resource: localproviders
type LocalProviderSearchParams struct {
	Name string `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:"Name of the local provider"`
}

// -----------------------------------------------------
// REQUEST BODY
// -----------------------------------------------------

// LocalProviderRequestBody represents the request body for LocalProvider operations
// Generated from POST request body for resource: localproviders
type LocalProviderRequestBody struct {
	ManagedBy   *[]string `json:"managed_by,omitempty" yaml:"managed_by,omitempty" required:"true" doc:"Manager user types that can manage the provider"`
	Name        string    `json:"name,omitempty" yaml:"name,omitempty" required:"true" doc:"Name of the local provider"`
	Description string    `json:"description,omitempty" yaml:"description,omitempty" required:"false" doc:"Description of the local provider"`
}

// -----------------------------------------------------
// MODEL
// -----------------------------------------------------

// LocalProviderModel represents the model data for LocalProvider operations
// Generated from schema: LocalProvider
type LocalProviderModel struct {
	AssignedTenantsPreview string    `json:"assigned_tenants_preview,omitempty" yaml:"assigned_tenants_preview,omitempty" required:"false" doc:""`
	Description            string    `json:"description,omitempty" yaml:"description,omitempty" required:"false" doc:"Description of the local provider"`
	Id                     int64     `json:"id,omitempty" yaml:"id,omitempty" required:"false" doc:""`
	ManagedBy              *[]string `json:"managed_by,omitempty" yaml:"managed_by,omitempty" required:"false" doc:"Specifies which manager user types have permission to manage users and groups on the provider. SUPER_ADMIN refers to VMS manager users with user type 'cluster admin' who can log into the cluster VMS to manage the cluster. TENANT_ADMIN refers VMS manager users with 'tenant admin' type who can log into a specific tenant's VMS to manage that tenant. Either both or one or the other may be specified."`
	Name                   string    `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:"Name of the local provider"`
}

// -----------------------------------------------------
// RESOURCE METHODS
// -----------------------------------------------------

// LocalProvider represents a typed resource for localprovider operations
type LocalProvider struct {
	Untyped *vast_client.VMSRest
}

// Get retrieves a single localprovider with typed request/response
func (r *LocalProvider) Get(req *LocalProviderSearchParams) (*LocalProviderModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.LocalProviders.Get(params)
	if err != nil {
		return nil, err
	}

	var response LocalProviderModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// GetWithContext retrieves a single localprovider with typed request/response using provided context
func (r *LocalProvider) GetWithContext(ctx context.Context, req *LocalProviderSearchParams) (*LocalProviderModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.LocalProviders.GetWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response LocalProviderModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// GetById retrieves a single localprovider by ID
func (r *LocalProvider) GetById(id any) (*LocalProviderModel, error) {
	record, err := r.Untyped.LocalProviders.GetById(id)
	if err != nil {
		return nil, err
	}

	var response LocalProviderModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// GetByIdWithContext retrieves a single localprovider by ID using provided context
func (r *LocalProvider) GetByIdWithContext(ctx context.Context, id any) (*LocalProviderModel, error) {
	record, err := r.Untyped.LocalProviders.GetByIdWithContext(ctx, id)
	if err != nil {
		return nil, err
	}

	var response LocalProviderModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// List retrieves multiple localproviders with typed request/response
func (r *LocalProvider) List(req *LocalProviderSearchParams) ([]*LocalProviderModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.LocalProviders.List(params)
	if err != nil {
		return nil, err
	}

	var response []*LocalProviderModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// ListWithContext retrieves multiple localproviders with typed request/response using provided context
func (r *LocalProvider) ListWithContext(ctx context.Context, req *LocalProviderSearchParams) ([]*LocalProviderModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.LocalProviders.ListWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response []*LocalProviderModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// Create creates a new localprovider with typed request/response
func (r *LocalProvider) Create(req *LocalProviderRequestBody) (*LocalProviderModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.LocalProviders.Create(params)
	if err != nil {
		return nil, err
	}

	var response LocalProviderModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// CreateWithContext creates a new localprovider with typed request/response using provided context
func (r *LocalProvider) CreateWithContext(ctx context.Context, req *LocalProviderRequestBody) (*LocalProviderModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.LocalProviders.CreateWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response LocalProviderModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Update updates an existing localprovider with typed request/response
func (r *LocalProvider) Update(id any, req *LocalProviderRequestBody) (*LocalProviderModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.LocalProviders.Update(id, params)
	if err != nil {
		return nil, err
	}

	var response LocalProviderModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// UpdateWithContext updates an existing localprovider with typed request/response using provided context
func (r *LocalProvider) UpdateWithContext(ctx context.Context, id any, req *LocalProviderRequestBody) (*LocalProviderModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.LocalProviders.UpdateWithContext(ctx, id, params)
	if err != nil {
		return nil, err
	}

	var response LocalProviderModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Delete deletes a localprovider with search parameters
func (r *LocalProvider) Delete(req *LocalProviderSearchParams) error {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return err
	}
	_, err = r.Untyped.LocalProviders.Delete(params, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteWithContext deletes a localprovider with search parameters using provided context
func (r *LocalProvider) DeleteWithContext(ctx context.Context, req *LocalProviderSearchParams) error {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return err
	}
	_, err = r.Untyped.LocalProviders.DeleteWithContext(ctx, params, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteById deletes a localprovider by ID
func (r *LocalProvider) DeleteById(id any) error {
	_, err := r.Untyped.LocalProviders.DeleteById(id, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteByIdWithContext deletes a localprovider by ID using provided context
func (r *LocalProvider) DeleteByIdWithContext(ctx context.Context, id any) error {
	_, err := r.Untyped.LocalProviders.DeleteByIdWithContext(ctx, id, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// Ensure ensures a localprovider exists with typed response
func (r *LocalProvider) Ensure(searchParams *LocalProviderSearchParams, body *LocalProviderRequestBody) (*LocalProviderModel, error) {
	searchParamsConverted, err := vast_client.NewParamsFromStruct(searchParams)
	if err != nil {
		return nil, err
	}
	bodyConverted, err := vast_client.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.LocalProviders.Ensure(searchParamsConverted, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response LocalProviderModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// EnsureWithContext ensures a localprovider exists with typed response using provided context
func (r *LocalProvider) EnsureWithContext(ctx context.Context, searchParams *LocalProviderSearchParams, body *LocalProviderRequestBody) (*LocalProviderModel, error) {
	searchParamsConverted, err := vast_client.NewParamsFromStruct(searchParams)
	if err != nil {
		return nil, err
	}
	bodyConverted, err := vast_client.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.LocalProviders.EnsureWithContext(ctx, searchParamsConverted, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response LocalProviderModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// EnsureByName ensures a localprovider exists by name with typed response
func (r *LocalProvider) EnsureByName(name string, body *LocalProviderRequestBody) (*LocalProviderModel, error) {
	bodyConverted, err := vast_client.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.LocalProviders.EnsureByName(name, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response LocalProviderModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// EnsureByNameWithContext ensures a localprovider exists by name with typed response using provided context
func (r *LocalProvider) EnsureByNameWithContext(ctx context.Context, name string, body *LocalProviderRequestBody) (*LocalProviderModel, error) {
	bodyConverted, err := vast_client.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.LocalProviders.EnsureByNameWithContext(ctx, name, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response LocalProviderModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Exists checks if a localprovider exists
func (r *LocalProvider) Exists(req *LocalProviderSearchParams) (bool, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.LocalProviders.Exists(params)
}

// ExistsWithContext checks if a localprovider exists using provided context
func (r *LocalProvider) ExistsWithContext(ctx context.Context, req *LocalProviderSearchParams) (bool, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.LocalProviders.ExistsWithContext(ctx, params)
}

// MustExists checks if a localprovider exists and panics if not
func (r *LocalProvider) MustExists(req *LocalProviderSearchParams) bool {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.LocalProviders.MustExists(params)
}

// MustExistsWithContext checks if a localprovider exists and panics if not using provided context
func (r *LocalProvider) MustExistsWithContext(ctx context.Context, req *LocalProviderSearchParams) bool {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.LocalProviders.MustExistsWithContext(ctx, params)
}

// -----------------------------------------------------
// RENDERABLE INTERFACE METHODS
// -----------------------------------------------------

// PrettyTable returns a formatted table representation of the LocalProviderModel
func (m *LocalProviderModel) PrettyTable() string {
	return m.toRecord().PrettyTable()
}

// PrettyJson returns a JSON representation of the LocalProviderModel
func (m *LocalProviderModel) PrettyJson(indent ...string) string {
	return m.toRecord().PrettyJson(indent...)
}

// toRecord converts the LocalProviderModel to a Record (map[string]any) with @resourceType
func (m *LocalProviderModel) toRecord() vast_client.Record {
	// Convert struct to map using JSON marshaling
	jsonBytes, err := json.Marshal(m)
	if err != nil {
		return vast_client.Record{"error": fmt.Sprintf("failed to marshal struct: %v", err)}
	}

	var record vast_client.Record
	if err := json.Unmarshal(jsonBytes, &record); err != nil {
		return vast_client.Record{"error": fmt.Sprintf("failed to unmarshal to record: %v", err)}
	}

	// Add resource type using reflection
	record["@resourceType"] = reflect.TypeOf(*m).Name()

	return record
}
