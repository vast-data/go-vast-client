// Code generated by generate-typed-resources. DO NOT EDIT.

package typed

import (
	"context"
	"encoding/json"
	"fmt"
	"reflect"

	vast_client "github.com/vast-data/go-vast-client"
)

// -----------------------------------------------------
// SEARCH PARAMS
// -----------------------------------------------------

// BGPConfigSearchParams represents the search parameters for BGPConfig operations
// Generated from GET query parameters for resource: bgpconfigs
type BGPConfigSearchParams struct {
	Guid string `json:"guid,omitempty" yaml:"guid,omitempty" required:"false" doc:""`
	Name string `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:"The name of the BGP layer 3 connectivity configuration."`
}

// -----------------------------------------------------
// REQUEST BODY
// -----------------------------------------------------

// BGPConfigRequestBody represents the request body for BGPConfig operations
// Generated from POST request body for resource: bgpconfigs
type BGPConfigRequestBody struct {
}

// -----------------------------------------------------
// MODEL
// -----------------------------------------------------

// BGPConfigModel represents the model data for BGPConfig operations
// Generated from schema: BGPConfig
type BGPConfigModel struct {
	AnyExternalAsn             bool   `json:"any_external_asn,omitempty" yaml:"any_external_asn,omitempty" required:"false" doc:"If true, allow CNodes to peer with any ASN. Supercedes specified external_asn."`
	ExternalAsn                int64  `json:"external_asn,omitempty" yaml:"external_asn,omitempty" required:"false" doc:"The ASN expected to be presented to CNodes by upstream routers."`
	Guid                       string `json:"guid,omitempty" yaml:"guid,omitempty" required:"false" doc:""`
	Id                         int64  `json:"id,omitempty" yaml:"id,omitempty" required:"false" doc:"The ID of the BGP layer 3 connectivity configuration."`
	Md5Password                string `json:"md5_password,omitempty" yaml:"md5_password,omitempty" required:"false" doc:"A password used for BGP and BFD authentication."`
	Name                       string `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:"The name of the BGP layer 3 connectivity configuration."`
	SelfAsn                    int64  `json:"self_asn,omitempty" yaml:"self_asn,omitempty" required:"false" doc:"The Autonomous System number(s) presented by CNodes to the upstream/customer routers."`
	Status                     string `json:"status,omitempty" yaml:"status,omitempty" required:"false" doc:""`
	SubnetBits                 int64  `json:"subnet_bits,omitempty" yaml:"subnet_bits,omitempty" required:"false" doc:"The number of bits in the subnet. For IPv4, this should be 32, for IPv6, 128 (i.e., a single address in the subnet)"`
	VipMigrationGracePeriodSec int64  `json:"vip_migration_grace_period_sec,omitempty" yaml:"vip_migration_grace_period_sec,omitempty" required:"false" doc:"The period of time after a BGP session is dropped before the virtual IPs advertised in the session link are moved to another CNode, in seconds"`
	Vlan                       int64  `json:"vlan,omitempty" yaml:"vlan,omitempty" required:"false" doc:""`
}

// -----------------------------------------------------
// RESOURCE METHODS
// -----------------------------------------------------

// BGPConfig represents a typed resource for bgpconfig operations
type BGPConfig struct {
	Untyped *vast_client.VMSRest
}

// Get retrieves a single bgpconfig with typed request/response
func (r *BGPConfig) Get(req *BGPConfigSearchParams) (*BGPConfigModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.BGPConfigs.Get(params)
	if err != nil {
		return nil, err
	}

	var response BGPConfigModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// GetWithContext retrieves a single bgpconfig with typed request/response using provided context
func (r *BGPConfig) GetWithContext(ctx context.Context, req *BGPConfigSearchParams) (*BGPConfigModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.BGPConfigs.GetWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response BGPConfigModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// GetById retrieves a single bgpconfig by ID
func (r *BGPConfig) GetById(id any) (*BGPConfigModel, error) {
	record, err := r.Untyped.BGPConfigs.GetById(id)
	if err != nil {
		return nil, err
	}

	var response BGPConfigModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// GetByIdWithContext retrieves a single bgpconfig by ID using provided context
func (r *BGPConfig) GetByIdWithContext(ctx context.Context, id any) (*BGPConfigModel, error) {
	record, err := r.Untyped.BGPConfigs.GetByIdWithContext(ctx, id)
	if err != nil {
		return nil, err
	}

	var response BGPConfigModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// List retrieves multiple bgpconfigs with typed request/response
func (r *BGPConfig) List(req *BGPConfigSearchParams) ([]*BGPConfigModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.BGPConfigs.List(params)
	if err != nil {
		return nil, err
	}

	var response []*BGPConfigModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// ListWithContext retrieves multiple bgpconfigs with typed request/response using provided context
func (r *BGPConfig) ListWithContext(ctx context.Context, req *BGPConfigSearchParams) ([]*BGPConfigModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.BGPConfigs.ListWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response []*BGPConfigModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// Create creates a new bgpconfig with typed request/response
func (r *BGPConfig) Create(req *BGPConfigRequestBody) (*BGPConfigModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.BGPConfigs.Create(params)
	if err != nil {
		return nil, err
	}

	var response BGPConfigModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// CreateWithContext creates a new bgpconfig with typed request/response using provided context
func (r *BGPConfig) CreateWithContext(ctx context.Context, req *BGPConfigRequestBody) (*BGPConfigModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.BGPConfigs.CreateWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response BGPConfigModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Update updates an existing bgpconfig with typed request/response
func (r *BGPConfig) Update(id any, req *BGPConfigRequestBody) (*BGPConfigModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.BGPConfigs.Update(id, params)
	if err != nil {
		return nil, err
	}

	var response BGPConfigModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// UpdateWithContext updates an existing bgpconfig with typed request/response using provided context
func (r *BGPConfig) UpdateWithContext(ctx context.Context, id any, req *BGPConfigRequestBody) (*BGPConfigModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.BGPConfigs.UpdateWithContext(ctx, id, params)
	if err != nil {
		return nil, err
	}

	var response BGPConfigModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Delete deletes a bgpconfig with search parameters
func (r *BGPConfig) Delete(req *BGPConfigSearchParams) error {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return err
	}
	_, err = r.Untyped.BGPConfigs.Delete(params, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteWithContext deletes a bgpconfig with search parameters using provided context
func (r *BGPConfig) DeleteWithContext(ctx context.Context, req *BGPConfigSearchParams) error {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return err
	}
	_, err = r.Untyped.BGPConfigs.DeleteWithContext(ctx, params, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteById deletes a bgpconfig by ID
func (r *BGPConfig) DeleteById(id any) error {
	_, err := r.Untyped.BGPConfigs.DeleteById(id, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteByIdWithContext deletes a bgpconfig by ID using provided context
func (r *BGPConfig) DeleteByIdWithContext(ctx context.Context, id any) error {
	_, err := r.Untyped.BGPConfigs.DeleteByIdWithContext(ctx, id, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// Ensure ensures a bgpconfig exists with typed response
func (r *BGPConfig) Ensure(searchParams *BGPConfigSearchParams, body *BGPConfigRequestBody) (*BGPConfigModel, error) {
	searchParamsConverted, err := vast_client.NewParamsFromStruct(searchParams)
	if err != nil {
		return nil, err
	}
	bodyConverted, err := vast_client.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.BGPConfigs.Ensure(searchParamsConverted, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response BGPConfigModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// EnsureWithContext ensures a bgpconfig exists with typed response using provided context
func (r *BGPConfig) EnsureWithContext(ctx context.Context, searchParams *BGPConfigSearchParams, body *BGPConfigRequestBody) (*BGPConfigModel, error) {
	searchParamsConverted, err := vast_client.NewParamsFromStruct(searchParams)
	if err != nil {
		return nil, err
	}
	bodyConverted, err := vast_client.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.BGPConfigs.EnsureWithContext(ctx, searchParamsConverted, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response BGPConfigModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// EnsureByName ensures a bgpconfig exists by name with typed response
func (r *BGPConfig) EnsureByName(name string, body *BGPConfigRequestBody) (*BGPConfigModel, error) {
	bodyConverted, err := vast_client.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.BGPConfigs.EnsureByName(name, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response BGPConfigModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// EnsureByNameWithContext ensures a bgpconfig exists by name with typed response using provided context
func (r *BGPConfig) EnsureByNameWithContext(ctx context.Context, name string, body *BGPConfigRequestBody) (*BGPConfigModel, error) {
	bodyConverted, err := vast_client.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.BGPConfigs.EnsureByNameWithContext(ctx, name, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response BGPConfigModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Exists checks if a bgpconfig exists
func (r *BGPConfig) Exists(req *BGPConfigSearchParams) (bool, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.BGPConfigs.Exists(params)
}

// ExistsWithContext checks if a bgpconfig exists using provided context
func (r *BGPConfig) ExistsWithContext(ctx context.Context, req *BGPConfigSearchParams) (bool, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.BGPConfigs.ExistsWithContext(ctx, params)
}

// MustExists checks if a bgpconfig exists and panics if not
func (r *BGPConfig) MustExists(req *BGPConfigSearchParams) bool {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.BGPConfigs.MustExists(params)
}

// MustExistsWithContext checks if a bgpconfig exists and panics if not using provided context
func (r *BGPConfig) MustExistsWithContext(ctx context.Context, req *BGPConfigSearchParams) bool {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.BGPConfigs.MustExistsWithContext(ctx, params)
}

// -----------------------------------------------------
// RENDERABLE INTERFACE METHODS
// -----------------------------------------------------

// PrettyTable returns a formatted table representation of the BGPConfigModel
func (m *BGPConfigModel) PrettyTable() string {
	return m.toRecord().PrettyTable()
}

// PrettyJson returns a JSON representation of the BGPConfigModel
func (m *BGPConfigModel) PrettyJson(indent ...string) string {
	return m.toRecord().PrettyJson(indent...)
}

// toRecord converts the BGPConfigModel to a Record (map[string]any) with @resourceType
func (m *BGPConfigModel) toRecord() vast_client.Record {
	// Convert struct to map using JSON marshaling
	jsonBytes, err := json.Marshal(m)
	if err != nil {
		return vast_client.Record{"error": fmt.Sprintf("failed to marshal struct: %v", err)}
	}

	var record vast_client.Record
	if err := json.Unmarshal(jsonBytes, &record); err != nil {
		return vast_client.Record{"error": fmt.Sprintf("failed to unmarshal to record: %v", err)}
	}

	// Add resource type using reflection
	record["@resourceType"] = reflect.TypeOf(*m).Name()

	return record
}
