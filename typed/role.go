// Code generated by generate-typed-resources. DO NOT EDIT.

package typed

import (
	"context"
	"encoding/json"
	"fmt"
	"reflect"

	vast_client "github.com/vast-data/go-vast-client"
)

// -----------------------------------------------------
// SEARCH PARAMS
// -----------------------------------------------------

// RoleSearchParams represents the search parameters for Role operations
// Generated from GET query parameters for resource: roles
type RoleSearchParams struct {
	Guid     string `json:"guid,omitempty" yaml:"guid,omitempty" required:"false" doc:""`
	Name     string `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:"The name of the role."`
	TenantId int64  `json:"tenant_id,omitempty" yaml:"tenant_id,omitempty" required:"false" doc:"Tenant ID"`
}

// -----------------------------------------------------
// REQUEST BODY
// -----------------------------------------------------

// RoleRequestBody represents the request body for Role operations
// Generated from POST request body for resource: roles
type RoleRequestBody struct {
	Name            string    `json:"name,omitempty" yaml:"name,omitempty" required:"true" doc:"Role name"`
	LdapGroups      *[]string `json:"ldap_groups,omitempty" yaml:"ldap_groups,omitempty" required:"false" doc:"Optionally specify LDAP group(s) to associate with the role. A group can be any user group on an LDAP-based provider, including Active Directory. The provider must be connected to the cluster. If the role is for tenant admins, the provider must be connected to the specific tenant. Members of the specified groups can access VMS and are granted whichever permissions are included in the role. A group can be associated with multiple roles."`
	ObjectId        int64     `json:"object_id,omitempty" yaml:"object_id,omitempty" required:"false" doc:"Object ID. Used to specify a particular object to limit the role to."`
	ObjectType      string    `json:"object_type,omitempty" yaml:"object_type,omitempty" required:"false" doc:"Object type. Used to specify a particular object to limit the role to."`
	Permissions     string    `json:"permissions,omitempty" yaml:"permissions,omitempty" required:"false" doc:"Permission type. Used to assign all the permissions of given type to a role. Can be used together with 'realm' to narrow resulting permissions list (logical AND). Ignored if provided along with 'permissions_list'. Note, that this is a legacy name, which does not correspond to the output schema's 'permissions'."`
	PermissionsList *[]string `json:"permissions_list,omitempty" yaml:"permissions_list,omitempty" required:"false" doc:"To list permission codenames, run /permissions/get. Takes precedence over 'permissions' or 'realm'."`
	Realm           string    `json:"realm,omitempty" yaml:"realm,omitempty" required:"false" doc:"Realm name. Used to assigned all the permissions of given realm to a role. Can be used together with 'permissions' to narrow resulting permissions list (logical AND). Ignored if provided along with 'permissions_list'."`
	TenantId        int64     `json:"tenant_id,omitempty" yaml:"tenant_id,omitempty" required:"false" doc:"Pass this parameter to create a role for managers with user_type=TENANT_ADMIN (tenant admin users). Specifies the ID of a single tenant to associate with the role. If not specified, the role is a cluster admin role. Corresponds to 'tenant' in the output schema."`
	TenantIds       *[]int64  `json:"tenant_ids,omitempty" yaml:"tenant_ids,omitempty" required:"false" doc:"Specifies IDs of tenants to associate with the role. Corresponds to 'tenants' in the output schema."`
}

// -----------------------------------------------------
// MODEL
// -----------------------------------------------------

// RoleModel_Tenant represents a nested type for model
type RoleModel_Tenant struct {
	Id   int64  `json:"id,omitempty" yaml:"id,omitempty" required:"false" doc:"Tenant ID"`
	Name string `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:"Tenant Name"`
}

// RoleModel represents the model data for Role operations
// Generated from schema: Role
type RoleModel struct {
	Guid        string           `json:"guid,omitempty" yaml:"guid,omitempty" required:"false" doc:""`
	Id          int64            `json:"id,omitempty" yaml:"id,omitempty" required:"false" doc:""`
	IsAdmin     bool             `json:"is_admin,omitempty" yaml:"is_admin,omitempty" required:"false" doc:"Is the role is an admin role"`
	IsDefault   bool             `json:"is_default,omitempty" yaml:"is_default,omitempty" required:"false" doc:"True if default role. Default role cannot be deleted."`
	LdapGroups  *[]string        `json:"ldap_groups,omitempty" yaml:"ldap_groups,omitempty" required:"false" doc:"LDAP group(s) associated with the role. Members of the specified groups on a connected LDAP/Active Directory provider can access VMS and are granted whichever permissions are included in the role. A group can be associated with multiple roles."`
	Name        string           `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:"The name of the role."`
	Permissions *[]string        `json:"permissions,omitempty" yaml:"permissions,omitempty" required:"false" doc:"A list of permission codenames (<permission_type>_<realm>). Note, that this does not correspond to provided in POST/PATCH schema's 'permissions', which is a legacy name."`
	Tenant      RoleModel_Tenant `json:"tenant,omitempty" yaml:"tenant,omitempty" required:"false" doc:""`
	TenantId    int64            `json:"tenant_id,omitempty" yaml:"tenant_id,omitempty" required:"false" doc:"Tenant ID"`
	TenantNames string           `json:"tenant_names,omitempty" yaml:"tenant_names,omitempty" required:"false" doc:"Tenant names for the role"`
	Tenants     *[]int64         `json:"tenants,omitempty" yaml:"tenants,omitempty" required:"false" doc:"Tenants for the role"`
}

// -----------------------------------------------------
// RESOURCE METHODS
// -----------------------------------------------------

// Role represents a typed resource for role operations
type Role struct {
	Untyped *vast_client.VMSRest
}

// Get retrieves a single role with typed request/response
func (r *Role) Get(req *RoleSearchParams) (*RoleModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Roles.Get(params)
	if err != nil {
		return nil, err
	}

	var response RoleModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// GetWithContext retrieves a single role with typed request/response using provided context
func (r *Role) GetWithContext(ctx context.Context, req *RoleSearchParams) (*RoleModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Roles.GetWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response RoleModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// GetById retrieves a single role by ID
func (r *Role) GetById(id any) (*RoleModel, error) {
	record, err := r.Untyped.Roles.GetById(id)
	if err != nil {
		return nil, err
	}

	var response RoleModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// GetByIdWithContext retrieves a single role by ID using provided context
func (r *Role) GetByIdWithContext(ctx context.Context, id any) (*RoleModel, error) {
	record, err := r.Untyped.Roles.GetByIdWithContext(ctx, id)
	if err != nil {
		return nil, err
	}

	var response RoleModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// List retrieves multiple roles with typed request/response
func (r *Role) List(req *RoleSearchParams) ([]*RoleModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.Roles.List(params)
	if err != nil {
		return nil, err
	}

	var response []*RoleModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// ListWithContext retrieves multiple roles with typed request/response using provided context
func (r *Role) ListWithContext(ctx context.Context, req *RoleSearchParams) ([]*RoleModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.Roles.ListWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response []*RoleModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// Create creates a new role with typed request/response
func (r *Role) Create(req *RoleRequestBody) (*RoleModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Roles.Create(params)
	if err != nil {
		return nil, err
	}

	var response RoleModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// CreateWithContext creates a new role with typed request/response using provided context
func (r *Role) CreateWithContext(ctx context.Context, req *RoleRequestBody) (*RoleModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Roles.CreateWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response RoleModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Update updates an existing role with typed request/response
func (r *Role) Update(id any, req *RoleRequestBody) (*RoleModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Roles.Update(id, params)
	if err != nil {
		return nil, err
	}

	var response RoleModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// UpdateWithContext updates an existing role with typed request/response using provided context
func (r *Role) UpdateWithContext(ctx context.Context, id any, req *RoleRequestBody) (*RoleModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Roles.UpdateWithContext(ctx, id, params)
	if err != nil {
		return nil, err
	}

	var response RoleModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Delete deletes a role with search parameters
func (r *Role) Delete(req *RoleSearchParams) error {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return err
	}
	_, err = r.Untyped.Roles.Delete(params, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteWithContext deletes a role with search parameters using provided context
func (r *Role) DeleteWithContext(ctx context.Context, req *RoleSearchParams) error {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return err
	}
	_, err = r.Untyped.Roles.DeleteWithContext(ctx, params, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteById deletes a role by ID
func (r *Role) DeleteById(id any) error {
	_, err := r.Untyped.Roles.DeleteById(id, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteByIdWithContext deletes a role by ID using provided context
func (r *Role) DeleteByIdWithContext(ctx context.Context, id any) error {
	_, err := r.Untyped.Roles.DeleteByIdWithContext(ctx, id, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// Ensure ensures a role exists with typed response
func (r *Role) Ensure(searchParams *RoleSearchParams, body *RoleRequestBody) (*RoleModel, error) {
	searchParamsConverted, err := vast_client.NewParamsFromStruct(searchParams)
	if err != nil {
		return nil, err
	}
	bodyConverted, err := vast_client.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Roles.Ensure(searchParamsConverted, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response RoleModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// EnsureWithContext ensures a role exists with typed response using provided context
func (r *Role) EnsureWithContext(ctx context.Context, searchParams *RoleSearchParams, body *RoleRequestBody) (*RoleModel, error) {
	searchParamsConverted, err := vast_client.NewParamsFromStruct(searchParams)
	if err != nil {
		return nil, err
	}
	bodyConverted, err := vast_client.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Roles.EnsureWithContext(ctx, searchParamsConverted, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response RoleModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// EnsureByName ensures a role exists by name with typed response
func (r *Role) EnsureByName(name string, body *RoleRequestBody) (*RoleModel, error) {
	bodyConverted, err := vast_client.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Roles.EnsureByName(name, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response RoleModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// EnsureByNameWithContext ensures a role exists by name with typed response using provided context
func (r *Role) EnsureByNameWithContext(ctx context.Context, name string, body *RoleRequestBody) (*RoleModel, error) {
	bodyConverted, err := vast_client.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Roles.EnsureByNameWithContext(ctx, name, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response RoleModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Exists checks if a role exists
func (r *Role) Exists(req *RoleSearchParams) (bool, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.Roles.Exists(params)
}

// ExistsWithContext checks if a role exists using provided context
func (r *Role) ExistsWithContext(ctx context.Context, req *RoleSearchParams) (bool, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.Roles.ExistsWithContext(ctx, params)
}

// MustExists checks if a role exists and panics if not
func (r *Role) MustExists(req *RoleSearchParams) bool {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.Roles.MustExists(params)
}

// MustExistsWithContext checks if a role exists and panics if not using provided context
func (r *Role) MustExistsWithContext(ctx context.Context, req *RoleSearchParams) bool {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.Roles.MustExistsWithContext(ctx, params)
}

// -----------------------------------------------------
// RENDERABLE INTERFACE METHODS
// -----------------------------------------------------

// PrettyTable returns a formatted table representation of the RoleModel
func (m *RoleModel) PrettyTable() string {
	return m.toRecord().PrettyTable()
}

// PrettyJson returns a JSON representation of the RoleModel
func (m *RoleModel) PrettyJson(indent ...string) string {
	return m.toRecord().PrettyJson(indent...)
}

// toRecord converts the RoleModel to a Record (map[string]any) with @resourceType
func (m *RoleModel) toRecord() vast_client.Record {
	// Convert struct to map using JSON marshaling
	jsonBytes, err := json.Marshal(m)
	if err != nil {
		return vast_client.Record{"error": fmt.Sprintf("failed to marshal struct: %v", err)}
	}

	var record vast_client.Record
	if err := json.Unmarshal(jsonBytes, &record); err != nil {
		return vast_client.Record{"error": fmt.Sprintf("failed to unmarshal to record: %v", err)}
	}

	// Add resource type using reflection
	record["@resourceType"] = reflect.TypeOf(*m).Name()

	return record
}
