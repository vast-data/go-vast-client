// Code generated by generate-typed-resources. DO NOT EDIT.

package typed

import (
	"context"
	"encoding/json"
	"fmt"
	"reflect"

	vast_client "github.com/vast-data/go-vast-client"
)

// -----------------------------------------------------
// SEARCH PARAMS
// -----------------------------------------------------

// ReplicationPeersSearchParams represents the search parameters for ReplicationPeers operations
// Generated from GET query parameters for resource: nativereplicationremotetargets
type ReplicationPeersSearchParams struct {
	Guid          string `json:"guid,omitempty" yaml:"guid,omitempty" required:"false" doc:"unique identifier"`
	LastHeartBeat string `json:"last_heart_beat,omitempty" yaml:"last_heart_beat,omitempty" required:"false" doc:"Filter by last heartbeat, the time of the last successful message sent, arrived and acknowledged by the peer."`
	LeadingVip    string `json:"leading_vip,omitempty" yaml:"leading_vip,omitempty" required:"false" doc:"Filter by leading remote VIP, a VIP that is specified when creating the peer. It is one of the VIPs in the remote peer's replication VIP Pool."`
	Name          string `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:"Filter by name"`
	Pool          string `json:"pool,omitempty" yaml:"pool,omitempty" required:"false" doc:"Filter by the name of the local cluster's replication VIP pool"`
	RemoteVersion string `json:"remote_version,omitempty" yaml:"remote_version,omitempty" required:"false" doc:"Filter by remote peer's software version"`
	RemoteVips    string `json:"remote_vips,omitempty" yaml:"remote_vips,omitempty" required:"false" doc:"remote vips"`
	SecureMode    string `json:"secure_mode,omitempty" yaml:"secure_mode,omitempty" required:"false" doc:"Filter by secure_mode"`
	SpaceLeft     string `json:"space_left,omitempty" yaml:"space_left,omitempty" required:"false" doc:"Filter by logical capacity remaining available on the remote peer."`
	State         string `json:"state,omitempty" yaml:"state,omitempty" required:"false" doc:"Filter by state"`
	TransportMode string `json:"transport_mode,omitempty" yaml:"transport_mode,omitempty" required:"false" doc:"Filter by transport_mode"`
	Version       string `json:"version,omitempty" yaml:"version,omitempty" required:"false" doc:"Filter by local cluster's software version"`
}

// -----------------------------------------------------
// REQUEST BODY
// -----------------------------------------------------

// ReplicationPeersRequestBody represents the request body for ReplicationPeers operations
// Generated from POST request body for resource: nativereplicationremotetargets
type ReplicationPeersRequestBody struct {
	LeadingVip      string `json:"leading_vip,omitempty" yaml:"leading_vip,omitempty" required:"true" doc:"Any one of the IP addresses that belong to the remote peer's replication VIP pool. This IP is used for the initial connection between the peers. Once the connection is established, the peers share their external network topology and form multiple connections between the VIPs."`
	Name            string `json:"name,omitempty" yaml:"name,omitempty" required:"true" doc:""`
	Password        string `json:"password,omitempty" yaml:"password,omitempty" required:"true" doc:"Not in use"`
	PoolId          int64  `json:"pool_id,omitempty" yaml:"pool_id,omitempty" required:"true" doc:"The ID of the local replication VIP Pool to use for the replication connection with the remote peer."`
	Mss             int64  `json:"mss,omitempty" yaml:"mss,omitempty" required:"false" doc:"Maximum segment size (MSS), in bytes, that the peer can receive in a single TCP segment."`
	PeerCertificate string `json:"peer_certificate,omitempty" yaml:"peer_certificate,omitempty" required:"false" doc:"Not in use"`
	SecureMode      string `json:"secure_mode,omitempty" yaml:"secure_mode,omitempty" required:"false" doc:"Secure mode: NONE=no encryption on the replication connection. SECURE=Replication to this peer will be encrypted over the wire with mTLS. Requires a certificate, key and root certificate to be uploaded to VMS on each peer cluster. Upload mTLS certificates with PATCH /clusters/{id}/."`
	TransportMode   string `json:"transport_mode,omitempty" yaml:"transport_mode,omitempty" required:"false" doc:"Transport mode: TCP for FIPS compliance, QUIC is not FIPS compliance but good for lower latency in high-latency networks."`
}

// -----------------------------------------------------
// MODEL
// -----------------------------------------------------

// ReplicationPeersModel represents the model data for ReplicationPeers operations
// Generated from schema: NativeReplicationRemoteTarget
type ReplicationPeersModel struct {
	AddressCount     int64     `json:"address_count,omitempty" yaml:"address_count,omitempty" required:"false" doc:""`
	Created          string    `json:"created,omitempty" yaml:"created,omitempty" required:"false" doc:""`
	Guid             string    `json:"guid,omitempty" yaml:"guid,omitempty" required:"false" doc:"unique identifier"`
	Health           string    `json:"health,omitempty" yaml:"health,omitempty" required:"false" doc:"Reflects health of connection between peers."`
	Id               int64     `json:"id,omitempty" yaml:"id,omitempty" required:"false" doc:""`
	IsLocal          bool      `json:"is_local,omitempty" yaml:"is_local,omitempty" required:"false" doc:""`
	LastHeartBeat    string    `json:"last_heart_beat,omitempty" yaml:"last_heart_beat,omitempty" required:"false" doc:"The time of the last successful message sent, arrived and acknowledged by the peer."`
	LeadingVip       string    `json:"leading_vip,omitempty" yaml:"leading_vip,omitempty" required:"false" doc:"A VIP belonging to the remote peer's replication VIP Pool, used for connecting to the remote peer."`
	Mss              int64     `json:"mss,omitempty" yaml:"mss,omitempty" required:"false" doc:"Maximum segment size (MSS), in bytes, that the peer can receive in a single TCP segment."`
	Name             string    `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:""`
	Password         string    `json:"password,omitempty" yaml:"password,omitempty" required:"false" doc:"password for authentication"`
	PeerCertificate  string    `json:"peer_certificate,omitempty" yaml:"peer_certificate,omitempty" required:"false" doc:"A certificate to use for authentication with the peer."`
	PeerName         string    `json:"peer_name,omitempty" yaml:"peer_name,omitempty" required:"false" doc:"Name of remote peer"`
	Pool             string    `json:"pool,omitempty" yaml:"pool,omitempty" required:"false" doc:""`
	PoolId           string    `json:"pool_id,omitempty" yaml:"pool_id,omitempty" required:"false" doc:"The ID of the VIP pool on the local cluster configured with the replication role"`
	PoolName         string    `json:"pool_name,omitempty" yaml:"pool_name,omitempty" required:"false" doc:""`
	RemoteVersion    string    `json:"remote_version,omitempty" yaml:"remote_version,omitempty" required:"false" doc:"The VAST software version running on the remote peer."`
	RemoteVipRange   string    `json:"remote_vip_range,omitempty" yaml:"remote_vip_range,omitempty" required:"false" doc:"VIP range of the remote peer's replication VIP Pool"`
	RemoteVips       *[]string `json:"remote_vips,omitempty" yaml:"remote_vips,omitempty" required:"false" doc:""`
	Secret           string    `json:"secret,omitempty" yaml:"secret,omitempty" required:"false" doc:"Not yet implemented"`
	SecureMode       string    `json:"secure_mode,omitempty" yaml:"secure_mode,omitempty" required:"false" doc:"Secure mode"`
	SpaceLeft        string    `json:"space_left,omitempty" yaml:"space_left,omitempty" required:"false" doc:"The logical capacity remaining available on the remote peer."`
	State            string    `json:"state,omitempty" yaml:"state,omitempty" required:"false" doc:"State of peer connectivity"`
	StateDescription string    `json:"state_description,omitempty" yaml:"state_description,omitempty" required:"false" doc:""`
	Status           string    `json:"status,omitempty" yaml:"status,omitempty" required:"false" doc:""`
	SyncState        string    `json:"sync_state,omitempty" yaml:"sync_state,omitempty" required:"false" doc:""`
	TransportMode    string    `json:"transport_mode,omitempty" yaml:"transport_mode,omitempty" required:"false" doc:"Transport mode"`
	Url              string    `json:"url,omitempty" yaml:"url,omitempty" required:"false" doc:""`
	Version          string    `json:"version,omitempty" yaml:"version,omitempty" required:"false" doc:"The VAST software version running on the local peer."`
}

// -----------------------------------------------------
// RESOURCE METHODS
// -----------------------------------------------------

// ReplicationPeers represents a typed resource for replicationpeers operations
type ReplicationPeers struct {
	Untyped *vast_client.VMSRest
}

// Get retrieves a single replicationpeers with typed request/response
func (r *ReplicationPeers) Get(req *ReplicationPeersSearchParams) (*ReplicationPeersModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.ReplicationPeers.Get(params)
	if err != nil {
		return nil, err
	}

	var response ReplicationPeersModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// GetWithContext retrieves a single replicationpeers with typed request/response using provided context
func (r *ReplicationPeers) GetWithContext(ctx context.Context, req *ReplicationPeersSearchParams) (*ReplicationPeersModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.ReplicationPeers.GetWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response ReplicationPeersModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// GetById retrieves a single replicationpeers by ID
func (r *ReplicationPeers) GetById(id any) (*ReplicationPeersModel, error) {
	record, err := r.Untyped.ReplicationPeers.GetById(id)
	if err != nil {
		return nil, err
	}

	var response ReplicationPeersModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// GetByIdWithContext retrieves a single replicationpeers by ID using provided context
func (r *ReplicationPeers) GetByIdWithContext(ctx context.Context, id any) (*ReplicationPeersModel, error) {
	record, err := r.Untyped.ReplicationPeers.GetByIdWithContext(ctx, id)
	if err != nil {
		return nil, err
	}

	var response ReplicationPeersModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// List retrieves multiple replicationpeerss with typed request/response
func (r *ReplicationPeers) List(req *ReplicationPeersSearchParams) ([]*ReplicationPeersModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.ReplicationPeers.List(params)
	if err != nil {
		return nil, err
	}

	var response []*ReplicationPeersModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// ListWithContext retrieves multiple replicationpeerss with typed request/response using provided context
func (r *ReplicationPeers) ListWithContext(ctx context.Context, req *ReplicationPeersSearchParams) ([]*ReplicationPeersModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.ReplicationPeers.ListWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response []*ReplicationPeersModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// Create creates a new replicationpeers with typed request/response
func (r *ReplicationPeers) Create(req *ReplicationPeersRequestBody) (*ReplicationPeersModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.ReplicationPeers.Create(params)
	if err != nil {
		return nil, err
	}

	var response ReplicationPeersModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// CreateWithContext creates a new replicationpeers with typed request/response using provided context
func (r *ReplicationPeers) CreateWithContext(ctx context.Context, req *ReplicationPeersRequestBody) (*ReplicationPeersModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.ReplicationPeers.CreateWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response ReplicationPeersModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Update updates an existing replicationpeers with typed request/response
func (r *ReplicationPeers) Update(id any, req *ReplicationPeersRequestBody) (*ReplicationPeersModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.ReplicationPeers.Update(id, params)
	if err != nil {
		return nil, err
	}

	var response ReplicationPeersModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// UpdateWithContext updates an existing replicationpeers with typed request/response using provided context
func (r *ReplicationPeers) UpdateWithContext(ctx context.Context, id any, req *ReplicationPeersRequestBody) (*ReplicationPeersModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.ReplicationPeers.UpdateWithContext(ctx, id, params)
	if err != nil {
		return nil, err
	}

	var response ReplicationPeersModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Delete deletes a replicationpeers with search parameters
func (r *ReplicationPeers) Delete(req *ReplicationPeersSearchParams) error {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return err
	}
	_, err = r.Untyped.ReplicationPeers.Delete(params, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteWithContext deletes a replicationpeers with search parameters using provided context
func (r *ReplicationPeers) DeleteWithContext(ctx context.Context, req *ReplicationPeersSearchParams) error {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return err
	}
	_, err = r.Untyped.ReplicationPeers.DeleteWithContext(ctx, params, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteById deletes a replicationpeers by ID
func (r *ReplicationPeers) DeleteById(id any) error {
	_, err := r.Untyped.ReplicationPeers.DeleteById(id, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteByIdWithContext deletes a replicationpeers by ID using provided context
func (r *ReplicationPeers) DeleteByIdWithContext(ctx context.Context, id any) error {
	_, err := r.Untyped.ReplicationPeers.DeleteByIdWithContext(ctx, id, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// Ensure ensures a replicationpeers exists with typed response
func (r *ReplicationPeers) Ensure(searchParams *ReplicationPeersSearchParams, body *ReplicationPeersRequestBody) (*ReplicationPeersModel, error) {
	searchParamsConverted, err := vast_client.NewParamsFromStruct(searchParams)
	if err != nil {
		return nil, err
	}
	bodyConverted, err := vast_client.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.ReplicationPeers.Ensure(searchParamsConverted, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response ReplicationPeersModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// EnsureWithContext ensures a replicationpeers exists with typed response using provided context
func (r *ReplicationPeers) EnsureWithContext(ctx context.Context, searchParams *ReplicationPeersSearchParams, body *ReplicationPeersRequestBody) (*ReplicationPeersModel, error) {
	searchParamsConverted, err := vast_client.NewParamsFromStruct(searchParams)
	if err != nil {
		return nil, err
	}
	bodyConverted, err := vast_client.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.ReplicationPeers.EnsureWithContext(ctx, searchParamsConverted, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response ReplicationPeersModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// EnsureByName ensures a replicationpeers exists by name with typed response
func (r *ReplicationPeers) EnsureByName(name string, body *ReplicationPeersRequestBody) (*ReplicationPeersModel, error) {
	bodyConverted, err := vast_client.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.ReplicationPeers.EnsureByName(name, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response ReplicationPeersModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// EnsureByNameWithContext ensures a replicationpeers exists by name with typed response using provided context
func (r *ReplicationPeers) EnsureByNameWithContext(ctx context.Context, name string, body *ReplicationPeersRequestBody) (*ReplicationPeersModel, error) {
	bodyConverted, err := vast_client.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.ReplicationPeers.EnsureByNameWithContext(ctx, name, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response ReplicationPeersModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Exists checks if a replicationpeers exists
func (r *ReplicationPeers) Exists(req *ReplicationPeersSearchParams) (bool, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.ReplicationPeers.Exists(params)
}

// ExistsWithContext checks if a replicationpeers exists using provided context
func (r *ReplicationPeers) ExistsWithContext(ctx context.Context, req *ReplicationPeersSearchParams) (bool, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.ReplicationPeers.ExistsWithContext(ctx, params)
}

// MustExists checks if a replicationpeers exists and panics if not
func (r *ReplicationPeers) MustExists(req *ReplicationPeersSearchParams) bool {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.ReplicationPeers.MustExists(params)
}

// MustExistsWithContext checks if a replicationpeers exists and panics if not using provided context
func (r *ReplicationPeers) MustExistsWithContext(ctx context.Context, req *ReplicationPeersSearchParams) bool {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.ReplicationPeers.MustExistsWithContext(ctx, params)
}

// -----------------------------------------------------
// RENDERABLE INTERFACE METHODS
// -----------------------------------------------------

// PrettyTable returns a formatted table representation of the ReplicationPeersModel
func (m *ReplicationPeersModel) PrettyTable() string {
	return m.toRecord().PrettyTable()
}

// PrettyJson returns a JSON representation of the ReplicationPeersModel
func (m *ReplicationPeersModel) PrettyJson(indent ...string) string {
	return m.toRecord().PrettyJson(indent...)
}

// toRecord converts the ReplicationPeersModel to a Record (map[string]any) with @resourceType
func (m *ReplicationPeersModel) toRecord() vast_client.Record {
	// Convert struct to map using JSON marshaling
	jsonBytes, err := json.Marshal(m)
	if err != nil {
		return vast_client.Record{"error": fmt.Sprintf("failed to marshal struct: %v", err)}
	}

	var record vast_client.Record
	if err := json.Unmarshal(jsonBytes, &record); err != nil {
		return vast_client.Record{"error": fmt.Sprintf("failed to unmarshal to record: %v", err)}
	}

	// Add resource type using reflection
	record["@resourceType"] = reflect.TypeOf(*m).Name()

	return record
}
