// Code generated by generate-typed-resources. DO NOT EDIT.

package typed

import (
	"context"
	"encoding/json"
	"fmt"
	"reflect"

	vast_client "github.com/vast-data/go-vast-client"
)

// -----------------------------------------------------
// SEARCH PARAMS
// -----------------------------------------------------

// S3LifeCycleRuleSearchParams represents the search parameters for S3LifeCycleRule operations
// Generated from GET query parameters for resource: s3lifecyclerules
type S3LifeCycleRuleSearchParams struct {
	Guid string `json:"guid,omitempty" yaml:"guid,omitempty" required:"false" doc:""`
	Name string `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:"A unique name"`
}

// -----------------------------------------------------
// REQUEST BODY
// -----------------------------------------------------

// S3LifeCycleRuleRequestBody represents the request body for S3LifeCycleRule operations
// Generated from POST request body for resource: s3lifecyclerules
type S3LifeCycleRuleRequestBody struct {
	Name                        string `json:"name,omitempty" yaml:"name,omitempty" required:"true" doc:"A name for the rule"`
	ViewId                      string `json:"view_id,omitempty" yaml:"view_id,omitempty" required:"true" doc:"ID of the view on a specific bucket. The rule will apply to objects within that specific bucket."`
	AbortMpuDaysAfterInitiation int64  `json:"abort_mpu_days_after_initiation,omitempty" yaml:"abort_mpu_days_after_initiation,omitempty" required:"false" doc:""`
	Enabled                     bool   `json:"enabled,omitempty" yaml:"enabled,omitempty" required:"false" doc:"True by default. Set to false if you do not want lifestyle actions defined in the rule to become effective immediately after the rule is created."`
	ExpirationDate              string `json:"expiration_date,omitempty" yaml:"expiration_date,omitempty" required:"false" doc:"Expires current versions of objects on a specified date. Alternatively, specify expiration_days instead, which sets a numner of days after creation to expire current versions of objects. If the date is in the past when set, all qualified objects become immediately eligible for expiration. Note also that the policy continues to apply the rule after the date passes. Specify the date value in the ISO 8601 format without the time part. (YYYY-MM-DD). The time of expiration is always midnight UTC. Do not set expired_obj_delete_marker to true in the same rule. To clean up expired object delete markers before they reach age criteria, create a separate rule with expired_obj_delete_marker set to true."`
	ExpirationDays              int64  `json:"expiration_days,omitempty" yaml:"expiration_days,omitempty" required:"false" doc:"Expires current versions of objects after a specified number of days counted from object creation. Alternatively, specify expiration_date instead, which sets a date to expire current versions of objects. In a non-versioned bucket, the expiration action results in permanent removal of affected objects. In a versioned bucket, if the current version of an object is not a delete marker, a delete marker is created and becomes the current version, while the existing current version is retained as a non-current version. Versioned objects where the only version is a delete marker are deleted when they meet the age criteria. Do not set expired_obj_delete_marker to true in the same rule. To clean up expired object delete markers before they reach age criteria, create a separate rule with expired_obj_delete_marker set to true. The time of expiration is the next midnight UTC after the number of days following object creation time."`
	ExpiredObjDeleteMarker      bool   `json:"expired_obj_delete_marker,omitempty" yaml:"expired_obj_delete_marker,omitempty" required:"false" doc:"Set to true to delete versioned objects where the only version is a delete marker. Do not include in the same rule as expiration_days or expiration_date."`
	MaxSize                     int64  `json:"max_size,omitempty" yaml:"max_size,omitempty" required:"false" doc:"Maximum object size. Restricts the rule to objects with the specified maximum size."`
	MinSize                     int64  `json:"min_size,omitempty" yaml:"min_size,omitempty" required:"false" doc:"Minimum object size. Restricts the rule to objects with the specified minimum size."`
	NewerNoncurrentVersions     int64  `json:"newer_noncurrent_versions,omitempty" yaml:"newer_noncurrent_versions,omitempty" required:"false" doc:"A number of newest non-current versions of an object to retain. Specifying this value protects the specified number of non-current versions from being eligible for deletion due to a noncurrent_days setting."`
	NoncurrentDays              int64  `json:"noncurrent_days,omitempty" yaml:"noncurrent_days,omitempty" required:"false" doc:"A number of days after which to permanently delete non-current versions of objects. The number of days is timed from when the object becomes non-current, which is when a versioned object is deleted or overwritten."`
	ObjectAgeAttr               string `json:"object_age_attr,omitempty" yaml:"object_age_attr,omitempty" required:"false" doc:"Defines which time to use for expiration. Default - M_TIME."`
	Prefix                      string `json:"prefix,omitempty" yaml:"prefix,omitempty" required:"false" doc:"A path prefix. The rule will be restricted to objects with the specified prefix. If not specified, the rule will apply to all objects in the bucket."`
}

// -----------------------------------------------------
// MODEL
// -----------------------------------------------------

// S3LifeCycleRuleModel represents the model data for S3LifeCycleRule operations
// Generated from schema: S3LifeCycleRule
type S3LifeCycleRuleModel struct {
	AbortMpuDaysAfterInitiation int64  `json:"abort_mpu_days_after_initiation,omitempty" yaml:"abort_mpu_days_after_initiation,omitempty" required:"false" doc:"The number of days until expiration after an incomplete multipart upload"`
	Enabled                     bool   `json:"enabled,omitempty" yaml:"enabled,omitempty" required:"false" doc:""`
	ExpirationDate              string `json:"expiration_date,omitempty" yaml:"expiration_date,omitempty" required:"false" doc:"The expiration date of the object"`
	ExpirationDays              int64  `json:"expiration_days,omitempty" yaml:"expiration_days,omitempty" required:"false" doc:"The number of days from creation until an object expires"`
	ExpiredObjDeleteMarker      bool   `json:"expired_obj_delete_marker,omitempty" yaml:"expired_obj_delete_marker,omitempty" required:"false" doc:"If true, delete markets of objects are removed when objects expire"`
	Guid                        string `json:"guid,omitempty" yaml:"guid,omitempty" required:"false" doc:""`
	Id                          int64  `json:"id,omitempty" yaml:"id,omitempty" required:"false" doc:"The ID of an S3 Lifecycle rule"`
	MaxSize                     int64  `json:"max_size,omitempty" yaml:"max_size,omitempty" required:"false" doc:"Maximum object size"`
	MinSize                     int64  `json:"min_size,omitempty" yaml:"min_size,omitempty" required:"false" doc:"Minimum object size"`
	Name                        string `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:"A unique name"`
	NewerNoncurrentVersions     int64  `json:"newer_noncurrent_versions,omitempty" yaml:"newer_noncurrent_versions,omitempty" required:"false" doc:"The number of newer versions to retain"`
	NoncurrentDays              int64  `json:"noncurrent_days,omitempty" yaml:"noncurrent_days,omitempty" required:"false" doc:"Number of days at which objects become noncurrent"`
	ObjectAgeAttr               string `json:"object_age_attr,omitempty" yaml:"object_age_attr,omitempty" required:"false" doc:"Defines which time to use for expiration."`
	Prefix                      string `json:"prefix,omitempty" yaml:"prefix,omitempty" required:"false" doc:"Defines a scope of elements (objects, files or directories) by prefix. All objects with keys that begin with the specified prefix are included in the scope. In file and directory nomenclature, a prefix is a file and/or directory path within the view that can include part of the file or directory name. For example, 'sales/jan' would include the file sales/january and the directory sales/jan/week1/. No characters are handled as wildcards."`
	Title                       string `json:"title,omitempty" yaml:"title,omitempty" required:"false" doc:""`
	Url                         string `json:"url,omitempty" yaml:"url,omitempty" required:"false" doc:""`
	ViewId                      int64  `json:"view_id,omitempty" yaml:"view_id,omitempty" required:"false" doc:"The ID of a view, when the rule applies to all objects in a view (bucket)"`
	ViewPath                    string `json:"view_path,omitempty" yaml:"view_path,omitempty" required:"false" doc:"The path of a view, when the rule applies to all objects in a view (bucket)"`
}

// -----------------------------------------------------
// RESOURCE METHODS
// -----------------------------------------------------

// S3LifeCycleRule represents a typed resource for s3lifecyclerule operations
type S3LifeCycleRule struct {
	Untyped *vast_client.VMSRest
}

// Get retrieves a single s3lifecyclerule with typed request/response
func (r *S3LifeCycleRule) Get(req *S3LifeCycleRuleSearchParams) (*S3LifeCycleRuleModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.S3LifeCycleRules.Get(params)
	if err != nil {
		return nil, err
	}

	var response S3LifeCycleRuleModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// GetWithContext retrieves a single s3lifecyclerule with typed request/response using provided context
func (r *S3LifeCycleRule) GetWithContext(ctx context.Context, req *S3LifeCycleRuleSearchParams) (*S3LifeCycleRuleModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.S3LifeCycleRules.GetWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response S3LifeCycleRuleModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// GetById retrieves a single s3lifecyclerule by ID
func (r *S3LifeCycleRule) GetById(id any) (*S3LifeCycleRuleModel, error) {
	record, err := r.Untyped.S3LifeCycleRules.GetById(id)
	if err != nil {
		return nil, err
	}

	var response S3LifeCycleRuleModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// GetByIdWithContext retrieves a single s3lifecyclerule by ID using provided context
func (r *S3LifeCycleRule) GetByIdWithContext(ctx context.Context, id any) (*S3LifeCycleRuleModel, error) {
	record, err := r.Untyped.S3LifeCycleRules.GetByIdWithContext(ctx, id)
	if err != nil {
		return nil, err
	}

	var response S3LifeCycleRuleModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// List retrieves multiple s3lifecyclerules with typed request/response
func (r *S3LifeCycleRule) List(req *S3LifeCycleRuleSearchParams) ([]*S3LifeCycleRuleModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.S3LifeCycleRules.List(params)
	if err != nil {
		return nil, err
	}

	var response []*S3LifeCycleRuleModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// ListWithContext retrieves multiple s3lifecyclerules with typed request/response using provided context
func (r *S3LifeCycleRule) ListWithContext(ctx context.Context, req *S3LifeCycleRuleSearchParams) ([]*S3LifeCycleRuleModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.S3LifeCycleRules.ListWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response []*S3LifeCycleRuleModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// Create creates a new s3lifecyclerule with typed request/response
func (r *S3LifeCycleRule) Create(req *S3LifeCycleRuleRequestBody) (*S3LifeCycleRuleModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.S3LifeCycleRules.Create(params)
	if err != nil {
		return nil, err
	}

	var response S3LifeCycleRuleModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// CreateWithContext creates a new s3lifecyclerule with typed request/response using provided context
func (r *S3LifeCycleRule) CreateWithContext(ctx context.Context, req *S3LifeCycleRuleRequestBody) (*S3LifeCycleRuleModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.S3LifeCycleRules.CreateWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response S3LifeCycleRuleModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Update updates an existing s3lifecyclerule with typed request/response
func (r *S3LifeCycleRule) Update(id any, req *S3LifeCycleRuleRequestBody) (*S3LifeCycleRuleModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.S3LifeCycleRules.Update(id, params)
	if err != nil {
		return nil, err
	}

	var response S3LifeCycleRuleModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// UpdateWithContext updates an existing s3lifecyclerule with typed request/response using provided context
func (r *S3LifeCycleRule) UpdateWithContext(ctx context.Context, id any, req *S3LifeCycleRuleRequestBody) (*S3LifeCycleRuleModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.S3LifeCycleRules.UpdateWithContext(ctx, id, params)
	if err != nil {
		return nil, err
	}

	var response S3LifeCycleRuleModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Delete deletes a s3lifecyclerule with search parameters
func (r *S3LifeCycleRule) Delete(req *S3LifeCycleRuleSearchParams) error {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return err
	}
	_, err = r.Untyped.S3LifeCycleRules.Delete(params, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteWithContext deletes a s3lifecyclerule with search parameters using provided context
func (r *S3LifeCycleRule) DeleteWithContext(ctx context.Context, req *S3LifeCycleRuleSearchParams) error {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return err
	}
	_, err = r.Untyped.S3LifeCycleRules.DeleteWithContext(ctx, params, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteById deletes a s3lifecyclerule by ID
func (r *S3LifeCycleRule) DeleteById(id any) error {
	_, err := r.Untyped.S3LifeCycleRules.DeleteById(id, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteByIdWithContext deletes a s3lifecyclerule by ID using provided context
func (r *S3LifeCycleRule) DeleteByIdWithContext(ctx context.Context, id any) error {
	_, err := r.Untyped.S3LifeCycleRules.DeleteByIdWithContext(ctx, id, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// Ensure ensures a s3lifecyclerule exists with typed response
func (r *S3LifeCycleRule) Ensure(searchParams *S3LifeCycleRuleSearchParams, body *S3LifeCycleRuleRequestBody) (*S3LifeCycleRuleModel, error) {
	searchParamsConverted, err := vast_client.NewParamsFromStruct(searchParams)
	if err != nil {
		return nil, err
	}
	bodyConverted, err := vast_client.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.S3LifeCycleRules.Ensure(searchParamsConverted, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response S3LifeCycleRuleModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// EnsureWithContext ensures a s3lifecyclerule exists with typed response using provided context
func (r *S3LifeCycleRule) EnsureWithContext(ctx context.Context, searchParams *S3LifeCycleRuleSearchParams, body *S3LifeCycleRuleRequestBody) (*S3LifeCycleRuleModel, error) {
	searchParamsConverted, err := vast_client.NewParamsFromStruct(searchParams)
	if err != nil {
		return nil, err
	}
	bodyConverted, err := vast_client.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.S3LifeCycleRules.EnsureWithContext(ctx, searchParamsConverted, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response S3LifeCycleRuleModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// EnsureByName ensures a s3lifecyclerule exists by name with typed response
func (r *S3LifeCycleRule) EnsureByName(name string, body *S3LifeCycleRuleRequestBody) (*S3LifeCycleRuleModel, error) {
	bodyConverted, err := vast_client.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.S3LifeCycleRules.EnsureByName(name, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response S3LifeCycleRuleModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// EnsureByNameWithContext ensures a s3lifecyclerule exists by name with typed response using provided context
func (r *S3LifeCycleRule) EnsureByNameWithContext(ctx context.Context, name string, body *S3LifeCycleRuleRequestBody) (*S3LifeCycleRuleModel, error) {
	bodyConverted, err := vast_client.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.S3LifeCycleRules.EnsureByNameWithContext(ctx, name, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response S3LifeCycleRuleModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Exists checks if a s3lifecyclerule exists
func (r *S3LifeCycleRule) Exists(req *S3LifeCycleRuleSearchParams) (bool, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.S3LifeCycleRules.Exists(params)
}

// ExistsWithContext checks if a s3lifecyclerule exists using provided context
func (r *S3LifeCycleRule) ExistsWithContext(ctx context.Context, req *S3LifeCycleRuleSearchParams) (bool, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.S3LifeCycleRules.ExistsWithContext(ctx, params)
}

// MustExists checks if a s3lifecyclerule exists and panics if not
func (r *S3LifeCycleRule) MustExists(req *S3LifeCycleRuleSearchParams) bool {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.S3LifeCycleRules.MustExists(params)
}

// MustExistsWithContext checks if a s3lifecyclerule exists and panics if not using provided context
func (r *S3LifeCycleRule) MustExistsWithContext(ctx context.Context, req *S3LifeCycleRuleSearchParams) bool {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.S3LifeCycleRules.MustExistsWithContext(ctx, params)
}

// -----------------------------------------------------
// RENDERABLE INTERFACE METHODS
// -----------------------------------------------------

// PrettyTable returns a formatted table representation of the S3LifeCycleRuleModel
func (m *S3LifeCycleRuleModel) PrettyTable() string {
	return m.toRecord().PrettyTable()
}

// PrettyJson returns a JSON representation of the S3LifeCycleRuleModel
func (m *S3LifeCycleRuleModel) PrettyJson(indent ...string) string {
	return m.toRecord().PrettyJson(indent...)
}

// toRecord converts the S3LifeCycleRuleModel to a Record (map[string]any) with @resourceType
func (m *S3LifeCycleRuleModel) toRecord() vast_client.Record {
	// Convert struct to map using JSON marshaling
	jsonBytes, err := json.Marshal(m)
	if err != nil {
		return vast_client.Record{"error": fmt.Sprintf("failed to marshal struct: %v", err)}
	}

	var record vast_client.Record
	if err := json.Unmarshal(jsonBytes, &record); err != nil {
		return vast_client.Record{"error": fmt.Sprintf("failed to unmarshal to record: %v", err)}
	}

	// Add resource type using reflection
	record["@resourceType"] = reflect.TypeOf(*m).Name()

	return record
}
