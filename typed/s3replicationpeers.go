// Code generated by generate-typed-resources. DO NOT EDIT.

package typed

import (
	"context"
	"encoding/json"
	"fmt"
	"reflect"

	vast_client "github.com/vast-data/go-vast-client"
)

// -----------------------------------------------------
// SEARCH PARAMS
// -----------------------------------------------------

// S3replicationPeersSearchParams represents the search parameters for S3replicationPeers operations
// Generated from GET query parameters for resource: replicationtargets
type S3replicationPeersSearchParams struct {
	BucketName      string `json:"bucket_name,omitempty" yaml:"bucket_name,omitempty" required:"false" doc:"Filter by target bucket name"`
	CustomBucketUrl string `json:"custom_bucket_url,omitempty" yaml:"custom_bucket_url,omitempty" required:"false" doc:"Filter by the URL of a custom target bucket"`
	Guid            string `json:"guid,omitempty" yaml:"guid,omitempty" required:"false" doc:"unique identifier"`
	HttpProtocol    string `json:"http_protocol,omitempty" yaml:"http_protocol,omitempty" required:"false" doc:"Filter by protocol used to connect to the bucket (http or https)"`
	Name            string `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:"Filter by name"`
}

// -----------------------------------------------------
// REQUEST BODY
// -----------------------------------------------------

// S3replicationPeersRequestBody represents the request body for S3replicationPeers operations
// Generated from POST request body for resource: replicationtargets
type S3replicationPeersRequestBody struct {
	BucketName      string    `json:"bucket_name,omitempty" yaml:"bucket_name,omitempty" required:"true" doc:"The S3 bucket name of an existing S3 bucket that you want to configure as the replication target"`
	HttpProtocol    string    `json:"http_protocol,omitempty" yaml:"http_protocol,omitempty" required:"true" doc:"For custom S3 buckets (not AWS), specifies which protocol to use to connect to the bucket"`
	Name            string    `json:"name,omitempty" yaml:"name,omitempty" required:"true" doc:""`
	Type            string    `json:"type,omitempty" yaml:"type,omitempty" required:"true" doc:"Specify AWS_S3 for an AWS S3 bucket. Specify CUSTOM_S3 for a custom S3 bucket."`
	AccessKey       string    `json:"access_key,omitempty" yaml:"access_key,omitempty" required:"false" doc:"Access key of a valid key pair for accessing the named S3 bucket"`
	AwsAccountId    string    `json:"aws_account_id,omitempty" yaml:"aws_account_id,omitempty" required:"false" doc:"Not in use"`
	AwsRegion       string    `json:"aws_region,omitempty" yaml:"aws_region,omitempty" required:"false" doc:"If the target is an AWS S3 bucket, use this parameter to specify the AWS region of the bucket"`
	AwsRole         string    `json:"aws_role,omitempty" yaml:"aws_role,omitempty" required:"false" doc:"Not in use"`
	CustomBucketUrl string    `json:"custom_bucket_url,omitempty" yaml:"custom_bucket_url,omitempty" required:"false" doc:"If the target is a custom S3 bucket, use this parameter to specify the URL of the bucket"`
	Proxies         *[]string `json:"proxies,omitempty" yaml:"proxies,omitempty" required:"false" doc:"If configured, replication traffic is routed via proxies. Separate with commas. Format: http://USERNAME:PASSWORD@IP:PORT"`
	SecretKey       string    `json:"secret_key,omitempty" yaml:"secret_key,omitempty" required:"false" doc:"The secret key of a valid key pair for accessing the destination S3 bucket"`
}

// -----------------------------------------------------
// MODEL
// -----------------------------------------------------

// S3replicationPeersModel represents the model data for S3replicationPeers operations
// Generated from schema: ReplicationTarget
type S3replicationPeersModel struct {
	AccessKey        string `json:"access_key,omitempty" yaml:"access_key,omitempty" required:"false" doc:"Authentication access key"`
	AwsAccountId     string `json:"aws_account_id,omitempty" yaml:"aws_account_id,omitempty" required:"false" doc:"Not yet implemented"`
	AwsRegion        string `json:"aws_region,omitempty" yaml:"aws_region,omitempty" required:"false" doc:"Amazon only field for region"`
	AwsRole          string `json:"aws_role,omitempty" yaml:"aws_role,omitempty" required:"false" doc:"Not yet implemented"`
	BucketName       string `json:"bucket_name,omitempty" yaml:"bucket_name,omitempty" required:"false" doc:"Bucket name"`
	Created          string `json:"created,omitempty" yaml:"created,omitempty" required:"false" doc:""`
	CustomBucketUrl  string `json:"custom_bucket_url,omitempty" yaml:"custom_bucket_url,omitempty" required:"false" doc:"Custom bucket url"`
	DecodedAccessKey string `json:"decoded_access_key,omitempty" yaml:"decoded_access_key,omitempty" required:"false" doc:""`
	Guid             string `json:"guid,omitempty" yaml:"guid,omitempty" required:"false" doc:"unique identifier"`
	HttpProtocol     string `json:"http_protocol,omitempty" yaml:"http_protocol,omitempty" required:"false" doc:"http/https"`
	Id               int64  `json:"id,omitempty" yaml:"id,omitempty" required:"false" doc:""`
	Name             string `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:""`
	Proxies          string `json:"proxies,omitempty" yaml:"proxies,omitempty" required:"false" doc:"A list of canonical urls separated by a comma."`
	State            string `json:"state,omitempty" yaml:"state,omitempty" required:"false" doc:""`
	StateDescription string `json:"state_description,omitempty" yaml:"state_description,omitempty" required:"false" doc:""`
	Type             string `json:"type,omitempty" yaml:"type,omitempty" required:"false" doc:""`
	Url              string `json:"url,omitempty" yaml:"url,omitempty" required:"false" doc:""`
}

// -----------------------------------------------------
// RESOURCE METHODS
// -----------------------------------------------------

// S3replicationPeers represents a typed resource for s3replicationpeers operations
type S3replicationPeers struct {
	Untyped *vast_client.VMSRest
}

// Get retrieves a single s3replicationpeers with typed request/response
func (r *S3replicationPeers) Get(req *S3replicationPeersSearchParams) (*S3replicationPeersModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.S3replicationPeers.Get(params)
	if err != nil {
		return nil, err
	}

	var response S3replicationPeersModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// GetWithContext retrieves a single s3replicationpeers with typed request/response using provided context
func (r *S3replicationPeers) GetWithContext(ctx context.Context, req *S3replicationPeersSearchParams) (*S3replicationPeersModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.S3replicationPeers.GetWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response S3replicationPeersModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// GetById retrieves a single s3replicationpeers by ID
func (r *S3replicationPeers) GetById(id any) (*S3replicationPeersModel, error) {
	record, err := r.Untyped.S3replicationPeers.GetById(id)
	if err != nil {
		return nil, err
	}

	var response S3replicationPeersModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// GetByIdWithContext retrieves a single s3replicationpeers by ID using provided context
func (r *S3replicationPeers) GetByIdWithContext(ctx context.Context, id any) (*S3replicationPeersModel, error) {
	record, err := r.Untyped.S3replicationPeers.GetByIdWithContext(ctx, id)
	if err != nil {
		return nil, err
	}

	var response S3replicationPeersModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// List retrieves multiple s3replicationpeerss with typed request/response
func (r *S3replicationPeers) List(req *S3replicationPeersSearchParams) ([]*S3replicationPeersModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.S3replicationPeers.List(params)
	if err != nil {
		return nil, err
	}

	var response []*S3replicationPeersModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// ListWithContext retrieves multiple s3replicationpeerss with typed request/response using provided context
func (r *S3replicationPeers) ListWithContext(ctx context.Context, req *S3replicationPeersSearchParams) ([]*S3replicationPeersModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.S3replicationPeers.ListWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response []*S3replicationPeersModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// Create creates a new s3replicationpeers with typed request/response
func (r *S3replicationPeers) Create(req *S3replicationPeersRequestBody) (*S3replicationPeersModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.S3replicationPeers.Create(params)
	if err != nil {
		return nil, err
	}

	var response S3replicationPeersModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// CreateWithContext creates a new s3replicationpeers with typed request/response using provided context
func (r *S3replicationPeers) CreateWithContext(ctx context.Context, req *S3replicationPeersRequestBody) (*S3replicationPeersModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.S3replicationPeers.CreateWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response S3replicationPeersModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Update updates an existing s3replicationpeers with typed request/response
func (r *S3replicationPeers) Update(id any, req *S3replicationPeersRequestBody) (*S3replicationPeersModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.S3replicationPeers.Update(id, params)
	if err != nil {
		return nil, err
	}

	var response S3replicationPeersModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// UpdateWithContext updates an existing s3replicationpeers with typed request/response using provided context
func (r *S3replicationPeers) UpdateWithContext(ctx context.Context, id any, req *S3replicationPeersRequestBody) (*S3replicationPeersModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.S3replicationPeers.UpdateWithContext(ctx, id, params)
	if err != nil {
		return nil, err
	}

	var response S3replicationPeersModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Delete deletes a s3replicationpeers with search parameters
func (r *S3replicationPeers) Delete(req *S3replicationPeersSearchParams) error {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return err
	}
	_, err = r.Untyped.S3replicationPeers.Delete(params, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteWithContext deletes a s3replicationpeers with search parameters using provided context
func (r *S3replicationPeers) DeleteWithContext(ctx context.Context, req *S3replicationPeersSearchParams) error {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return err
	}
	_, err = r.Untyped.S3replicationPeers.DeleteWithContext(ctx, params, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteById deletes a s3replicationpeers by ID
func (r *S3replicationPeers) DeleteById(id any) error {
	_, err := r.Untyped.S3replicationPeers.DeleteById(id, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteByIdWithContext deletes a s3replicationpeers by ID using provided context
func (r *S3replicationPeers) DeleteByIdWithContext(ctx context.Context, id any) error {
	_, err := r.Untyped.S3replicationPeers.DeleteByIdWithContext(ctx, id, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// Ensure ensures a s3replicationpeers exists with typed response
func (r *S3replicationPeers) Ensure(searchParams *S3replicationPeersSearchParams, body *S3replicationPeersRequestBody) (*S3replicationPeersModel, error) {
	searchParamsConverted, err := vast_client.NewParamsFromStruct(searchParams)
	if err != nil {
		return nil, err
	}
	bodyConverted, err := vast_client.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.S3replicationPeers.Ensure(searchParamsConverted, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response S3replicationPeersModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// EnsureWithContext ensures a s3replicationpeers exists with typed response using provided context
func (r *S3replicationPeers) EnsureWithContext(ctx context.Context, searchParams *S3replicationPeersSearchParams, body *S3replicationPeersRequestBody) (*S3replicationPeersModel, error) {
	searchParamsConverted, err := vast_client.NewParamsFromStruct(searchParams)
	if err != nil {
		return nil, err
	}
	bodyConverted, err := vast_client.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.S3replicationPeers.EnsureWithContext(ctx, searchParamsConverted, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response S3replicationPeersModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// EnsureByName ensures a s3replicationpeers exists by name with typed response
func (r *S3replicationPeers) EnsureByName(name string, body *S3replicationPeersRequestBody) (*S3replicationPeersModel, error) {
	bodyConverted, err := vast_client.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.S3replicationPeers.EnsureByName(name, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response S3replicationPeersModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// EnsureByNameWithContext ensures a s3replicationpeers exists by name with typed response using provided context
func (r *S3replicationPeers) EnsureByNameWithContext(ctx context.Context, name string, body *S3replicationPeersRequestBody) (*S3replicationPeersModel, error) {
	bodyConverted, err := vast_client.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.S3replicationPeers.EnsureByNameWithContext(ctx, name, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response S3replicationPeersModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Exists checks if a s3replicationpeers exists
func (r *S3replicationPeers) Exists(req *S3replicationPeersSearchParams) (bool, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.S3replicationPeers.Exists(params)
}

// ExistsWithContext checks if a s3replicationpeers exists using provided context
func (r *S3replicationPeers) ExistsWithContext(ctx context.Context, req *S3replicationPeersSearchParams) (bool, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.S3replicationPeers.ExistsWithContext(ctx, params)
}

// MustExists checks if a s3replicationpeers exists and panics if not
func (r *S3replicationPeers) MustExists(req *S3replicationPeersSearchParams) bool {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.S3replicationPeers.MustExists(params)
}

// MustExistsWithContext checks if a s3replicationpeers exists and panics if not using provided context
func (r *S3replicationPeers) MustExistsWithContext(ctx context.Context, req *S3replicationPeersSearchParams) bool {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.S3replicationPeers.MustExistsWithContext(ctx, params)
}

// -----------------------------------------------------
// RENDERABLE INTERFACE METHODS
// -----------------------------------------------------

// PrettyTable returns a formatted table representation of the S3replicationPeersModel
func (m *S3replicationPeersModel) PrettyTable() string {
	return m.toRecord().PrettyTable()
}

// PrettyJson returns a JSON representation of the S3replicationPeersModel
func (m *S3replicationPeersModel) PrettyJson(indent ...string) string {
	return m.toRecord().PrettyJson(indent...)
}

// toRecord converts the S3replicationPeersModel to a Record (map[string]any) with @resourceType
func (m *S3replicationPeersModel) toRecord() vast_client.Record {
	// Convert struct to map using JSON marshaling
	jsonBytes, err := json.Marshal(m)
	if err != nil {
		return vast_client.Record{"error": fmt.Sprintf("failed to marshal struct: %v", err)}
	}

	var record vast_client.Record
	if err := json.Unmarshal(jsonBytes, &record); err != nil {
		return vast_client.Record{"error": fmt.Sprintf("failed to unmarshal to record: %v", err)}
	}

	// Add resource type using reflection
	record["@resourceType"] = reflect.TypeOf(*m).Name()

	return record
}
