// Code generated by generate-typed-resources. DO NOT EDIT.

package typed

import (
	"context"
	"encoding/json"
	"fmt"
	"reflect"

	vast_client "github.com/vast-data/go-vast-client"
)

// -----------------------------------------------------
// SEARCH PARAMS
// -----------------------------------------------------

// LocalS3KeySearchParams represents the search parameters for LocalS3Key operations
// Generated from GET query parameters for resource: locals3keys
type LocalS3KeySearchParams struct {
	TenantId int64 `json:"tenant_id,omitempty" yaml:"tenant_id,omitempty" required:"false" doc:"Filter by tenant. Specify tenant ID."`
	UserId   int64 `json:"user_id,omitempty" yaml:"user_id,omitempty" required:"false" doc:"User id to filter by."`
}

// -----------------------------------------------------
// MODEL
// -----------------------------------------------------

// S3KeyModel_Tenant represents a nested type for model
type S3KeyModel_Tenant struct {
	Id   int64  `json:"id,omitempty" yaml:"id,omitempty" required:"false" doc:"Tenant ID"`
	Name string `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:"Tenant Name"`
}

// S3KeyModel_User represents a nested type for model
type S3KeyModel_User struct {
	Id   int64  `json:"id,omitempty" yaml:"id,omitempty" required:"false" doc:"User ID"`
	Name string `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:"User Name"`
}

// LocalS3KeyModel represents the model data for LocalS3Key operations
// Generated from schema: LocalS3Key
type LocalS3KeyModel struct {
	AccessKey    string            `json:"access_key,omitempty" yaml:"access_key,omitempty" required:"false" doc:"S3 access key"`
	CreationTime string            `json:"creation_time,omitempty" yaml:"creation_time,omitempty" required:"false" doc:"The time at which the access key pair was created"`
	Enabled      bool              `json:"enabled,omitempty" yaml:"enabled,omitempty" required:"false" doc:"If true, the access key pair to which the access key belongs is enabled"`
	Id           int64             `json:"id,omitempty" yaml:"id,omitempty" required:"false" doc:""`
	Tenant       S3KeyModel_Tenant `json:"tenant,omitempty" yaml:"tenant,omitempty" required:"false" doc:""`
	User         S3KeyModel_User   `json:"user,omitempty" yaml:"user,omitempty" required:"false" doc:""`
}

// -----------------------------------------------------
// RESOURCE METHODS (READ-ONLY)
// -----------------------------------------------------

// LocalS3Key provides typed access to LocalS3Key resources (read-only)
type LocalS3Key struct {
	Untyped *vast_client.VMSRest
}

// Get retrieves a single locals3key with typed request/response
func (r *LocalS3Key) Get(req *LocalS3KeySearchParams) (*LocalS3KeyModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.LocalS3Keys.Get(params)
	if err != nil {
		return nil, err
	}

	var response LocalS3KeyModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// GetWithContext retrieves a single locals3key with typed request/response using provided context
func (r *LocalS3Key) GetWithContext(ctx context.Context, req *LocalS3KeySearchParams) (*LocalS3KeyModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.LocalS3Keys.GetWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response LocalS3KeyModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// GetById retrieves a single locals3key by ID with typed response
func (r *LocalS3Key) GetById(id any) (*LocalS3KeyModel, error) {
	record, err := r.Untyped.LocalS3Keys.GetById(id)
	if err != nil {
		return nil, err
	}

	var response LocalS3KeyModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// GetByIdWithContext retrieves a single locals3key by ID with typed response using provided context
func (r *LocalS3Key) GetByIdWithContext(ctx context.Context, id any) (*LocalS3KeyModel, error) {
	record, err := r.Untyped.LocalS3Keys.GetByIdWithContext(ctx, id)
	if err != nil {
		return nil, err
	}

	var response LocalS3KeyModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// List retrieves multiple locals3keys with typed request/response
func (r *LocalS3Key) List(req *LocalS3KeySearchParams) ([]*LocalS3KeyModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.LocalS3Keys.List(params)
	if err != nil {
		return nil, err
	}

	var response []*LocalS3KeyModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// ListWithContext retrieves multiple locals3keys with typed request/response using provided context
func (r *LocalS3Key) ListWithContext(ctx context.Context, req *LocalS3KeySearchParams) ([]*LocalS3KeyModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.LocalS3Keys.ListWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response []*LocalS3KeyModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// Exists checks if a locals3key exists with the given search parameters
func (r *LocalS3Key) Exists(req *LocalS3KeySearchParams) (bool, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}

	return r.Untyped.LocalS3Keys.Exists(params)
}

// ExistsWithContext checks if a locals3key exists with the given search parameters using provided context
func (r *LocalS3Key) ExistsWithContext(ctx context.Context, req *LocalS3KeySearchParams) (bool, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}

	return r.Untyped.LocalS3Keys.ExistsWithContext(ctx, params)
}

// MustExists checks if a locals3key exists with the given search parameters, panics on error
func (r *LocalS3Key) MustExists(req *LocalS3KeySearchParams) bool {
	exists, err := r.Exists(req)
	if err != nil {
		panic(err)
	}
	return exists
}

// MustExistsWithContext checks if a locals3key exists with the given search parameters using provided context, panics on error
func (r *LocalS3Key) MustExistsWithContext(ctx context.Context, req *LocalS3KeySearchParams) bool {
	exists, err := r.ExistsWithContext(ctx, req)
	if err != nil {
		panic(err)
	}
	return exists
}

// -----------------------------------------------------
// RENDERABLE INTERFACE METHODS
// -----------------------------------------------------

// PrettyTable returns a formatted table representation of the LocalS3KeyModel
func (m *LocalS3KeyModel) PrettyTable() string {
	return m.toRecord().PrettyTable()
}

// PrettyJson returns a JSON representation of the LocalS3KeyModel
func (m *LocalS3KeyModel) PrettyJson(indent ...string) string {
	return m.toRecord().PrettyJson(indent...)
}

// toRecord converts the LocalS3KeyModel to a Record (map[string]any) with @resourceType
func (m *LocalS3KeyModel) toRecord() vast_client.Record {
	// Convert struct to map using JSON marshaling
	jsonBytes, err := json.Marshal(m)
	if err != nil {
		return vast_client.Record{"error": fmt.Sprintf("failed to marshal struct: %v", err)}
	}

	var record vast_client.Record
	if err := json.Unmarshal(jsonBytes, &record); err != nil {
		return vast_client.Record{"error": fmt.Sprintf("failed to unmarshal to record: %v", err)}
	}

	// Add resource type using reflection
	record["@resourceType"] = reflect.TypeOf(*m).Name()

	return record
}
