// Code generated by generate-typed-resources. DO NOT EDIT.

package typed

import (
	"context"
	"encoding/json"
	"fmt"
	"reflect"

	vast_client "github.com/vast-data/go-vast-client"
)

// -----------------------------------------------------
// SEARCH PARAMS
// -----------------------------------------------------

// ManagerSearchParams represents the search parameters for Manager operations
// Generated from GET query parameters for resource: managers
type ManagerSearchParams struct {
	Guid     string `json:"guid,omitempty" yaml:"guid,omitempty" required:"false" doc:""`
	TenantId int64  `json:"tenant_id,omitempty" yaml:"tenant_id,omitempty" required:"false" doc:"Tenant ID"`
	Username string `json:"username,omitempty" yaml:"username,omitempty" required:"false" doc:"Filter by username"`
}

// -----------------------------------------------------
// REQUEST BODY
// -----------------------------------------------------

// ManagerRequestBody represents the request body for Manager operations
// Generated from POST request body for resource: managers
type ManagerRequestBody struct {
	Password                   string   `json:"password,omitempty" yaml:"password,omitempty" required:"true" doc:"Manager's password"`
	Username                   string   `json:"username,omitempty" yaml:"username,omitempty" required:"true" doc:"Manager's user name"`
	FirstName                  string   `json:"first_name,omitempty" yaml:"first_name,omitempty" required:"false" doc:"Manager's first name"`
	IsTemporaryPassword        bool     `json:"is_temporary_password,omitempty" yaml:"is_temporary_password,omitempty" required:"false" doc:"Sets the password to be temporary. Expiration of temporary passwords is controlled by the tmp_pwd_expiration_timeout setting, which you can modify and retrieve through the /vms/{id}/pwd_settings/ path."`
	LastName                   string   `json:"last_name,omitempty" yaml:"last_name,omitempty" required:"false" doc:"Manager's last name"`
	PasswordExpirationDisabled bool     `json:"password_expiration_disabled,omitempty" yaml:"password_expiration_disabled,omitempty" required:"false" doc:"Password expiration is disabled"`
	Roles                      *[]int64 `json:"roles,omitempty" yaml:"roles,omitempty" required:"false" doc:"Joins manager to specified roles. Specify as an array of role IDs, separated by commas."`
	TenantId                   int64    `json:"tenant_id,omitempty" yaml:"tenant_id,omitempty" required:"false" doc:"Tenant ID. If user_type is TENANT_ADMIN, specify the ID of the tenant to which to grant admin access."`
	UserType                   string   `json:"user_type,omitempty" yaml:"user_type,omitempty" required:"false" doc:"Manager user type. SUPER_ADMIN aka 'cluster admin' = VMS manager users who can log into the cluster VMS to manage the cluster. TENANT_ADMIN=VMS manager users who can log into a specific tenant's VMS to manage that tenant."`
}

// -----------------------------------------------------
// MODEL
// -----------------------------------------------------

// ManagerModel_Tenant represents a nested type for model
type ManagerModel_Tenant struct {
	Id   int64  `json:"id,omitempty" yaml:"id,omitempty" required:"false" doc:"Tenant ID"`
	Name string `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:"Tenant Name"`
}

// ManagerModel represents the model data for Manager operations
// Generated from schema: Manager
type ManagerModel struct {
	FailedLogins               int64               `json:"failed_logins,omitempty" yaml:"failed_logins,omitempty" required:"false" doc:"Number of failed logins"`
	FirstName                  string              `json:"first_name,omitempty" yaml:"first_name,omitempty" required:"false" doc:"Manager's first name"`
	FullName                   string              `json:"full_name,omitempty" yaml:"full_name,omitempty" required:"false" doc:"First and last name"`
	Guid                       string              `json:"guid,omitempty" yaml:"guid,omitempty" required:"false" doc:""`
	Id                         int64               `json:"id,omitempty" yaml:"id,omitempty" required:"false" doc:""`
	IsActive                   bool                `json:"is_active,omitempty" yaml:"is_active,omitempty" required:"false" doc:"True if manager is active"`
	IsDefault                  bool                `json:"is_default,omitempty" yaml:"is_default,omitempty" required:"false" doc:"Sets the manager to be the default manager"`
	IsTemporaryPassword        bool                `json:"is_temporary_password,omitempty" yaml:"is_temporary_password,omitempty" required:"false" doc:"Sets the password to be temporary. Expiration of temporary passwords is controlled by the tmp_pwd_expiration_timeout setting, which you can modify and retrieve through the /vms/{id}/pwd_settings/ path."`
	LastLogin                  string              `json:"last_login,omitempty" yaml:"last_login,omitempty" required:"false" doc:"Last login time"`
	LastName                   string              `json:"last_name,omitempty" yaml:"last_name,omitempty" required:"false" doc:"Manager's first name"`
	Password                   string              `json:"password,omitempty" yaml:"password,omitempty" required:"false" doc:"Password for VMS login"`
	PasswordExpiration         string              `json:"password_expiration,omitempty" yaml:"password_expiration,omitempty" required:"false" doc:"Password expiration"`
	PasswordExpirationDisabled bool                `json:"password_expiration_disabled,omitempty" yaml:"password_expiration_disabled,omitempty" required:"false" doc:"Password expiration is disabled"`
	PasswordRetype             string              `json:"password_retype,omitempty" yaml:"password_retype,omitempty" required:"false" doc:"Retype the password"`
	Tenant                     ManagerModel_Tenant `json:"tenant,omitempty" yaml:"tenant,omitempty" required:"false" doc:""`
	TenantId                   int64               `json:"tenant_id,omitempty" yaml:"tenant_id,omitempty" required:"false" doc:"Tenant ID"`
	UserType                   string              `json:"user_type,omitempty" yaml:"user_type,omitempty" required:"false" doc:"Manager user type. SUPER_ADMIN aka 'cluster admin' = VMS manager users who can log into the cluster VMS to manage the cluster. TENANT_ADMIN=VMS manager users who can log into a specific tenant's VMS to manage that tenant."`
	Username                   string              `json:"username,omitempty" yaml:"username,omitempty" required:"false" doc:"Username for VMS login"`
}

// -----------------------------------------------------
// RESOURCE METHODS
// -----------------------------------------------------

// Manager represents a typed resource for manager operations
type Manager struct {
	Untyped *vast_client.VMSRest
}

// Get retrieves a single manager with typed request/response
func (r *Manager) Get(req *ManagerSearchParams) (*ManagerModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Managers.Get(params)
	if err != nil {
		return nil, err
	}

	var response ManagerModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// GetWithContext retrieves a single manager with typed request/response using provided context
func (r *Manager) GetWithContext(ctx context.Context, req *ManagerSearchParams) (*ManagerModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Managers.GetWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response ManagerModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// GetById retrieves a single manager by ID
func (r *Manager) GetById(id any) (*ManagerModel, error) {
	record, err := r.Untyped.Managers.GetById(id)
	if err != nil {
		return nil, err
	}

	var response ManagerModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// GetByIdWithContext retrieves a single manager by ID using provided context
func (r *Manager) GetByIdWithContext(ctx context.Context, id any) (*ManagerModel, error) {
	record, err := r.Untyped.Managers.GetByIdWithContext(ctx, id)
	if err != nil {
		return nil, err
	}

	var response ManagerModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// List retrieves multiple managers with typed request/response
func (r *Manager) List(req *ManagerSearchParams) ([]*ManagerModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.Managers.List(params)
	if err != nil {
		return nil, err
	}

	var response []*ManagerModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// ListWithContext retrieves multiple managers with typed request/response using provided context
func (r *Manager) ListWithContext(ctx context.Context, req *ManagerSearchParams) ([]*ManagerModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.Managers.ListWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response []*ManagerModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// Create creates a new manager with typed request/response
func (r *Manager) Create(req *ManagerRequestBody) (*ManagerModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Managers.Create(params)
	if err != nil {
		return nil, err
	}

	var response ManagerModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// CreateWithContext creates a new manager with typed request/response using provided context
func (r *Manager) CreateWithContext(ctx context.Context, req *ManagerRequestBody) (*ManagerModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Managers.CreateWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response ManagerModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Update updates an existing manager with typed request/response
func (r *Manager) Update(id any, req *ManagerRequestBody) (*ManagerModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Managers.Update(id, params)
	if err != nil {
		return nil, err
	}

	var response ManagerModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// UpdateWithContext updates an existing manager with typed request/response using provided context
func (r *Manager) UpdateWithContext(ctx context.Context, id any, req *ManagerRequestBody) (*ManagerModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Managers.UpdateWithContext(ctx, id, params)
	if err != nil {
		return nil, err
	}

	var response ManagerModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Delete deletes a manager with search parameters
func (r *Manager) Delete(req *ManagerSearchParams) error {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return err
	}
	_, err = r.Untyped.Managers.Delete(params, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteWithContext deletes a manager with search parameters using provided context
func (r *Manager) DeleteWithContext(ctx context.Context, req *ManagerSearchParams) error {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return err
	}
	_, err = r.Untyped.Managers.DeleteWithContext(ctx, params, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteById deletes a manager by ID
func (r *Manager) DeleteById(id any) error {
	_, err := r.Untyped.Managers.DeleteById(id, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteByIdWithContext deletes a manager by ID using provided context
func (r *Manager) DeleteByIdWithContext(ctx context.Context, id any) error {
	_, err := r.Untyped.Managers.DeleteByIdWithContext(ctx, id, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// Ensure ensures a manager exists with typed response
func (r *Manager) Ensure(searchParams *ManagerSearchParams, body *ManagerRequestBody) (*ManagerModel, error) {
	searchParamsConverted, err := vast_client.NewParamsFromStruct(searchParams)
	if err != nil {
		return nil, err
	}
	bodyConverted, err := vast_client.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Managers.Ensure(searchParamsConverted, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response ManagerModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// EnsureWithContext ensures a manager exists with typed response using provided context
func (r *Manager) EnsureWithContext(ctx context.Context, searchParams *ManagerSearchParams, body *ManagerRequestBody) (*ManagerModel, error) {
	searchParamsConverted, err := vast_client.NewParamsFromStruct(searchParams)
	if err != nil {
		return nil, err
	}
	bodyConverted, err := vast_client.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Managers.EnsureWithContext(ctx, searchParamsConverted, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response ManagerModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// EnsureByName ensures a manager exists by name with typed response
func (r *Manager) EnsureByName(name string, body *ManagerRequestBody) (*ManagerModel, error) {
	bodyConverted, err := vast_client.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Managers.EnsureByName(name, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response ManagerModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// EnsureByNameWithContext ensures a manager exists by name with typed response using provided context
func (r *Manager) EnsureByNameWithContext(ctx context.Context, name string, body *ManagerRequestBody) (*ManagerModel, error) {
	bodyConverted, err := vast_client.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Managers.EnsureByNameWithContext(ctx, name, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response ManagerModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Exists checks if a manager exists
func (r *Manager) Exists(req *ManagerSearchParams) (bool, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.Managers.Exists(params)
}

// ExistsWithContext checks if a manager exists using provided context
func (r *Manager) ExistsWithContext(ctx context.Context, req *ManagerSearchParams) (bool, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.Managers.ExistsWithContext(ctx, params)
}

// MustExists checks if a manager exists and panics if not
func (r *Manager) MustExists(req *ManagerSearchParams) bool {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.Managers.MustExists(params)
}

// MustExistsWithContext checks if a manager exists and panics if not using provided context
func (r *Manager) MustExistsWithContext(ctx context.Context, req *ManagerSearchParams) bool {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.Managers.MustExistsWithContext(ctx, params)
}

// -----------------------------------------------------
// RENDERABLE INTERFACE METHODS
// -----------------------------------------------------

// PrettyTable returns a formatted table representation of the ManagerModel
func (m *ManagerModel) PrettyTable() string {
	return m.toRecord().PrettyTable()
}

// PrettyJson returns a JSON representation of the ManagerModel
func (m *ManagerModel) PrettyJson(indent ...string) string {
	return m.toRecord().PrettyJson(indent...)
}

// toRecord converts the ManagerModel to a Record (map[string]any) with @resourceType
func (m *ManagerModel) toRecord() vast_client.Record {
	// Convert struct to map using JSON marshaling
	jsonBytes, err := json.Marshal(m)
	if err != nil {
		return vast_client.Record{"error": fmt.Sprintf("failed to marshal struct: %v", err)}
	}

	var record vast_client.Record
	if err := json.Unmarshal(jsonBytes, &record); err != nil {
		return vast_client.Record{"error": fmt.Sprintf("failed to unmarshal to record: %v", err)}
	}

	// Add resource type using reflection
	record["@resourceType"] = reflect.TypeOf(*m).Name()

	return record
}
