// Code generated by generate-typed-resources. DO NOT EDIT.

package typed

import (
	"context"
	"encoding/json"
	"fmt"
	"reflect"

	vast_client "github.com/vast-data/go-vast-client"
)

// -----------------------------------------------------
// SEARCH PARAMS
// -----------------------------------------------------

// ViewPolicySearchParams represents the search parameters for ViewPolicy operations
// Generated from GET query parameters for resource: viewpolicies
type ViewPolicySearchParams struct {
	AppleSid                 bool   `json:"apple_sid,omitempty" yaml:"apple_sid,omitempty" required:"false" doc:"apple sid"`
	AtimeFrequency           string `json:"atime_frequency,omitempty" yaml:"atime_frequency,omitempty" required:"false" doc:"Filter by atime frequency."`
	Guid                     string `json:"guid,omitempty" yaml:"guid,omitempty" required:"false" doc:"Globally unique identifier"`
	Name                     string `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:"Filter by name."`
	NfsReturnOpenPermissions bool   `json:"nfs_return_open_permissions,omitempty" yaml:"nfs_return_open_permissions,omitempty" required:"false" doc:"Filter by enabled nfs-return-open-permissions flag"`
	ServesTenant             string `json:"serves_tenant,omitempty" yaml:"serves_tenant,omitempty" required:"false" doc:"Filter by served tenants. Accepts tenant ID or \"all\" for all served tenants."`
	SmbDirectoryMode         int64  `json:"smb_directory_mode,omitempty" yaml:"smb_directory_mode,omitempty" required:"false" doc:"Filter by smb_directory_mode. smb_directory_mode is the default unix permission bits applied to directories created by SMB clients. It is relevant only to views that are exposed to both SMB and NFS access protocols and have NFS security flavor."`
	SmbFileMode              int64  `json:"smb_file_mode,omitempty" yaml:"smb_file_mode,omitempty" required:"false" doc:"Filter by smb_file_mode. smb_file_mode is the default unix permission bits applied to files created by SMB clients. It is relevant only to views that are exposed to both SMB and NFS access protocols and have NFS security flavor."`
	TenantId                 int64  `json:"tenant_id,omitempty" yaml:"tenant_id,omitempty" required:"false" doc:"Filter by tenant. Specify tenant ID."`
}

// -----------------------------------------------------
// REQUEST BODY
// -----------------------------------------------------

// ViewpolicieRequestBody_ProtocolsAudit represents a nested type for request body
type ViewpolicieRequestBody_ProtocolsAudit struct {
	CreateDeleteFilesDirsObjects bool `json:"create_delete_files_dirs_objects,omitempty" yaml:"create_delete_files_dirs_objects,omitempty" required:"false" doc:"Audit operations that create or delete files, directories, or objects"`
	LogDeletedFilesDirs          bool `json:"log_deleted_files_dirs,omitempty" yaml:"log_deleted_files_dirs,omitempty" required:"false" doc:"Log deleted files and directories"`
	LogFullPath                  bool `json:"log_full_path,omitempty" yaml:"log_full_path,omitempty" required:"false" doc:"Log full Element Store path to the requested resource. Enabled by default. May affect performance. When disabled, the view path is recorded."`
	LogUsername                  bool `json:"log_username,omitempty" yaml:"log_username,omitempty" required:"false" doc:"Log username of requesting user. Disabled by default"`
	ModifyDataMd                 bool `json:"modify_data_md,omitempty" yaml:"modify_data_md,omitempty" required:"false" doc:"Audit operations that modify data (including operations that change the file size) and metadata"`
	ReadData                     bool `json:"read_data,omitempty" yaml:"read_data,omitempty" required:"false" doc:"Audit operations that read data and metadata"`
	SessionCreateClose           bool `json:"session_create_close,omitempty" yaml:"session_create_close,omitempty" required:"false" doc:"Audit session creation and closing operations for sessions that use Kerberos 5 authentication (krb5, krb5i, or krb5p)"`
}

// ViewPolicyRequestBody represents the request body for ViewPolicy operations
// Generated from POST request body for resource: viewpolicies
type ViewPolicyRequestBody struct {
	Name                               string                                `json:"name,omitempty" yaml:"name,omitempty" required:"true" doc:""`
	AccessFlavor                       string                                `json:"access_flavor,omitempty" yaml:"access_flavor,omitempty" required:"false" doc:"Applicable with MIXED_LAST_WINS security flavor (Access can be set via NFSv3 regardless of this option)"`
	AllowedCharacters                  string                                `json:"allowed_characters,omitempty" yaml:"allowed_characters,omitempty" required:"false" doc:"Specifies the policy for which characters are allowed in file names."`
	AppleSid                           bool                                  `json:"apple_sid,omitempty" yaml:"apple_sid,omitempty" required:"false" doc:"For use when connecting from Mac clients to SMB shares, this option enables Security IDs (SIDs) to be returned in Apple compatible representation."`
	AtimeFrequency                     string                                `json:"atime_frequency,omitempty" yaml:"atime_frequency,omitempty" required:"false" doc:"Frequency for updating the atime attribute of NFS files. atime is updated on read operations if the difference between the current time and the file's atime value is greater than the atime frequency. For example: 300 or 00:00:30 seconds is supported. Zero value is not supported. Default: 3600"`
	AuthSource                         string                                `json:"auth_source,omitempty" yaml:"auth_source,omitempty" required:"false" doc:"Specifies which source is trusted for the user's group memberships, when users' access to the view is authorized."`
	ClusterId                          int64                                 `json:"cluster_id,omitempty" yaml:"cluster_id,omitempty" required:"false" doc:""`
	DisableHandleLease                 bool                                  `json:"disable_handle_lease,omitempty" yaml:"disable_handle_lease,omitempty" required:"false" doc:""`
	DisableReadLease                   bool                                  `json:"disable_read_lease,omitempty" yaml:"disable_read_lease,omitempty" required:"false" doc:""`
	DisableWriteLease                  bool                                  `json:"disable_write_lease,omitempty" yaml:"disable_write_lease,omitempty" required:"false" doc:""`
	EnableAccessToSnapshotDirInSubdirs bool                                  `json:"enable_access_to_snapshot_dir_in_subdirs,omitempty" yaml:"enable_access_to_snapshot_dir_in_subdirs,omitempty" required:"false" doc:"Specifies whether to make the .snapshot directory accessible in subdirectories of the View."`
	EnableVisibilityOfSnapshotDir      bool                                  `json:"enable_visibility_of_snapshot_dir,omitempty" yaml:"enable_visibility_of_snapshot_dir,omitempty" required:"false" doc:"Specifies whether to make the .snapshot directory visible in subdirectories of the View."`
	ExposeIdInFsid                     bool                                  `json:"expose_id_in_fsid,omitempty" yaml:"expose_id_in_fsid,omitempty" required:"false" doc:""`
	Flavor                             string                                `json:"flavor,omitempty" yaml:"flavor,omitempty" required:"false" doc:"Specifies the security flavor, which determines how file and directory permissions are applied in multiprotocol views."`
	GidInheritance                     string                                `json:"gid_inheritance,omitempty" yaml:"gid_inheritance,omitempty" required:"false" doc:"Specifies how files receive their owning group when they are created."`
	InheritParentModeBits              bool                                  `json:"inherit_parent_mode_bits,omitempty" yaml:"inherit_parent_mode_bits,omitempty" required:"false" doc:"Enable NFS behavior of inheriting posix settings from the parent directory versus configured values"`
	IsS3DefaultPolicy                  bool                                  `json:"is_s3_default_policy,omitempty" yaml:"is_s3_default_policy,omitempty" required:"false" doc:"Specifies whether to make the view policy the default policy used for S3 endpoint views."`
	NfsAllSquash                       *[]string                             `json:"nfs_all_squash,omitempty" yaml:"nfs_all_squash,omitempty" required:"false" doc:"Specify which NFS client hosts have all squash. With all squash, all client users are mapped to nobody for all file and folder management operations on the export. Specify array of hosts separated by commas. Each host can be specified as an IP address, a netgroup key beginning with @, a CIDR subnet or a range of IPs indicated by an IP address with a * as a wildcard in place of any of the 8-bit fields in the IP address."`
	NfsCaseInsensitive                 bool                                  `json:"nfs_case_insensitive,omitempty" yaml:"nfs_case_insensitive,omitempty" required:"false" doc:"Force case insensitivity for NFSv3 and NFSv4"`
	NfsEnforceTls                      bool                                  `json:"nfs_enforce_tls,omitempty" yaml:"nfs_enforce_tls,omitempty" required:"false" doc:"Accept NFSv3 and NFSv4 client mounts only if they are TLS-encrypted. Use only with Minimal Protection Level set to System or None."`
	NfsMinimalProtectionLevel          string                                `json:"nfs_minimal_protection_level,omitempty" yaml:"nfs_minimal_protection_level,omitempty" required:"false" doc:"For a policy intended for use with NFSv4-enabled views, sets the Minimal Protection Level for NFSv4 client mounts: 'KRB_AUTH_ONLY' allows client mounts with Kerberos authentication only (using the RPCSEC_GSS authentication service), 'SYSTEM' allows client mounts using either the AUTH_SYS RCP security flavor (the traditional default NFS authentication scheme) or with Kerberos authentication, 'NONE' (default) allows client mounts with the AUTH_NONE (anonymous access), or AUTH_SYS RCP security flavors, or with Kerberos authentication."`
	NfsNoSquash                        *[]string                             `json:"nfs_no_squash,omitempty" yaml:"nfs_no_squash,omitempty" required:"false" doc:"Specify which NFS client hosts have no squash. With no squash, all operations are supported. Use this option if you trust the root user not to perform operations that will corrupt data. Specify array of hosts separated by commas. Each host can be specified as an IP address, a netgroup key beginning with @, a CIDR subnet or a range of IPs indicated by an IP address with a * as a wildcard in place of any of the 8-bit fields in the IP address."`
	NfsPosixAcl                        bool                                  `json:"nfs_posix_acl,omitempty" yaml:"nfs_posix_acl,omitempty" required:"false" doc:"Enables full support of extended POSIX Access Control Lists (ACL)."`
	NfsReadOnly                        *[]string                             `json:"nfs_read_only,omitempty" yaml:"nfs_read_only,omitempty" required:"false" doc:"Specify which NFS client hosts can access the view with read-only access. Specify array of hosts separated by commas. Each host can be specified as an IP address, a netgroup key beginning with @, a CIDR subnet or a range of IPs indicated by an IP address with a * as a wildcard in place of any of the 8-bit fields in the IP address."`
	NfsReadWrite                       *[]string                             `json:"nfs_read_write,omitempty" yaml:"nfs_read_write,omitempty" required:"false" doc:"Specify which NFS client hosts can access the view with read-write access. Specify array of hosts separated by commas. Each host can be specified as an IP address, a netgroup key beginning with @, a CIDR subnet or a range of IPs indicated by an IP address with a * as a wildcard in place of any of the 8-bit fields in the IP address."`
	NfsReturnOpenPermissions           bool                                  `json:"nfs_return_open_permissions,omitempty" yaml:"nfs_return_open_permissions,omitempty" required:"false" doc:"If enabled for NFS-exposed views, the NFS server unilaterally returns open (777) permission for all files and directories when responding to client side access checks."`
	NfsRootSquash                      *[]string                             `json:"nfs_root_squash,omitempty" yaml:"nfs_root_squash,omitempty" required:"false" doc:"Specify which NFS client hosts have root squash. With root squash, the root user is mapped to nobody for all file and folder management operations on the export. This enables you to prevent the strongest super user from corrupting all user data on the VAST Cluster. Specify array of hosts separated by commas. Each host can be specified as an IP address, a netgroup key beginning with @, a CIDR subnet or a range of IPs indicated by an IP address with a * as a wildcard in place of any of the 8-bit fields in the IP address."`
	PathLength                         string                                `json:"path_length,omitempty" yaml:"path_length,omitempty" required:"false" doc:"Specifies the policy for limiting file path component name length."`
	Protocols                          *[]string                             `json:"protocols,omitempty" yaml:"protocols,omitempty" required:"false" doc:"Array of protocols to audit"`
	ProtocolsAudit                     ViewpolicieRequestBody_ProtocolsAudit `json:"protocols_audit,omitempty" yaml:"protocols_audit,omitempty" required:"false" doc:"Specify audit options to enable them for all attached views in addition to auditing options that are enabled globably on the cluster."`
	ReadOnly                           *[]string                             `json:"read_only,omitempty" yaml:"read_only,omitempty" required:"false" doc:"Specify which NFS client hosts can access the view with read-only access. Specify array of hosts separated by commas. Each host can be specified as an IP address, a netgroup key beginning with @, a CIDR subnet or a range of IPs indicated by an IP address with a * as a wildcard in place of any of the 8-bit fields in the IP address."`
	ReadWrite                          *[]string                             `json:"read_write,omitempty" yaml:"read_write,omitempty" required:"false" doc:"Specify which NFS client hosts can access the view with read-write access. Specify array of hosts separated by commas. Each host can be specified as an IP address, a netgroup key beginning with @, a CIDR subnet or a range of IPs indicated by an IP address with a * as a wildcard in place of any of the 8-bit fields in the IP address."`
	S3ReadOnly                         *[]string                             `json:"s3_read_only,omitempty" yaml:"s3_read_only,omitempty" required:"false" doc:"Specify which S3 client hosts can access the view with read-only access. Specify array of hosts separated by commas. Each host can be specified as an IP address, a CIDR subnet or a range of IPs indicated by an IP address with a * as a wildcard in place of any of the 8-bit fields in the IP address."`
	S3ReadWrite                        *[]string                             `json:"s3_read_write,omitempty" yaml:"s3_read_write,omitempty" required:"false" doc:"Specify which S3 client hosts can access the view with read-write access. Specify array of hosts separated by commas. Each host can be specified as an IP address, a CIDR subnet or a range of IPs indicated by an IP address with a * as a wildcard in place of any of the 8-bit fields in the IP address."`
	S3SpecialCharsSupport              bool                                  `json:"s3_special_chars_support,omitempty" yaml:"s3_special_chars_support,omitempty" required:"false" doc:"This will enable object names that contain “//“ or “/../“ and are incompatible with other protocols"`
	S3Visibility                       *[]string                             `json:"s3_visibility,omitempty" yaml:"s3_visibility,omitempty" required:"false" doc:"Users with permission to list buckets that are created using this policy even if they do not have permission to access those buckets."`
	S3VisibilityGroups                 *[]string                             `json:"s3_visibility_groups,omitempty" yaml:"s3_visibility_groups,omitempty" required:"false" doc:"Users with permission to list buckets that are created using this policy even if they do not have permission to access those buckets."`
	SmbDirectoryMode                   int64                                 `json:"smb_directory_mode,omitempty" yaml:"smb_directory_mode,omitempty" required:"false" doc:"For multiprotocol views, if the security flavor is NFS, this parameter sets default unix permission bits for directories created by SMB clients. Use three digit numeric notation, each digit representing the user, group and others compontents of the permissions, in that order. Each digit is the sum of the read bit, write bit and execute bit. If reading is permitted, the read bit adds 4 to the component. If writing is permitted, the write bit adds 2 to the component. If execution is permitted, the execute bit adds 1 to the component."`
	SmbFileMode                        int64                                 `json:"smb_file_mode,omitempty" yaml:"smb_file_mode,omitempty" required:"false" doc:"For multiprotocol views, if the security flavor is NFS, this parameter sets default unix permission bits for files created by SMB clients. Use three digit numeric notation, each digit representing the user, group and others compontents of the permissions, in that order. Each digit is the sum of the read bit, write bit and execute bit. If reading is permitted, the read bit adds 4 to the component. If writing is permitted, the write bit adds 2 to the component. If execution is permitted, the execute bit adds 1 to the component."`
	SmbIsCa                            bool                                  `json:"smb_is_ca,omitempty" yaml:"smb_is_ca,omitempty" required:"false" doc:"When enabled, the SMB share exposed by the view is set as continuously available, which allows SMB3 clients to request use of persistent file handles and keep their connections to this share in case of a failover event."`
	SmbReadOnly                        *[]string                             `json:"smb_read_only,omitempty" yaml:"smb_read_only,omitempty" required:"false" doc:"Specify which SMB client hosts can access the view with read-only access. Specify array of hosts separated by commas. Each host can be specified as an IP address, a CIDR subnet or a range of IPs indicated by an IP address with a * as a wildcard in place of any of the 8-bit fields in the IP address."`
	SmbReadWrite                       *[]string                             `json:"smb_read_write,omitempty" yaml:"smb_read_write,omitempty" required:"false" doc:"Specify which SMB client hosts can access the view with read-write access. Specify array of hosts separated by commas. Each host can be specified as an IP address, a netgroup key beginning with @, a CIDR subnet or a range of IPs indicated by an IP address with a * as a wildcard in place of any of the 8-bit fields in the IP address."`
	TenantId                           int64                                 `json:"tenant_id,omitempty" yaml:"tenant_id,omitempty" required:"false" doc:"Tenant ID"`
	TrashAccess                        *[]string                             `json:"trash_access,omitempty" yaml:"trash_access,omitempty" required:"false" doc:"Specify which NFS client hosts can access the trash folder. Specify array of hosts separated by commas. Each host can be specified as an IP address, a CIDR subnet or a range of IPs indicated by an IP address with a * as a wildcard in place of any of the 8-bit fields in the IP address. Trash folder access must also be enabled for the cluster."`
	Use32bitFileid                     bool                                  `json:"use_32bit_fileid,omitempty" yaml:"use_32bit_fileid,omitempty" required:"false" doc:"Sets the VAST Cluster's NFS server to use 32bit file IDs. This setting supports legacy 32-bit applications running over NFS."`
	UseAuthProvider                    bool                                  `json:"use_auth_provider,omitempty" yaml:"use_auth_provider,omitempty" required:"false" doc:"Not in use"`
	VipPools                           *[]int64                              `json:"vip_pools,omitempty" yaml:"vip_pools,omitempty" required:"false" doc:"Dedicate VIP Pools to the view policy. Specify VIP Pool IDs in a comma separated list."`
}

// -----------------------------------------------------
// MODEL
// -----------------------------------------------------

// ViewPolicyModel_ProtocolsAudit represents a nested type for model
type ViewPolicyModel_ProtocolsAudit struct {
	CreateDeleteFilesDirsObjects bool `json:"create_delete_files_dirs_objects,omitempty" yaml:"create_delete_files_dirs_objects,omitempty" required:"false" doc:"Audit operations that create or delete files, directories, or objects"`
	LogDeletedFilesDirs          bool `json:"log_deleted_files_dirs,omitempty" yaml:"log_deleted_files_dirs,omitempty" required:"false" doc:"Log deleted files and directories"`
	LogFullPath                  bool `json:"log_full_path,omitempty" yaml:"log_full_path,omitempty" required:"false" doc:"Log full Element Store path to the requested resource. Enabled by default. May affect performance. When disabled, the view path is recorded."`
	LogUsername                  bool `json:"log_username,omitempty" yaml:"log_username,omitempty" required:"false" doc:"Log username of requesting user. Disabled by default"`
	ModifyDataMd                 bool `json:"modify_data_md,omitempty" yaml:"modify_data_md,omitempty" required:"false" doc:"Audit operations that modify data (including operations that change the file size) and metadata"`
	ReadData                     bool `json:"read_data,omitempty" yaml:"read_data,omitempty" required:"false" doc:"Audit operations that read data and metadata"`
	SessionCreateClose           bool `json:"session_create_close,omitempty" yaml:"session_create_close,omitempty" required:"false" doc:"Audit session creation and closing operations for sessions that use Kerberos 5 authentication (krb5, krb5i, or krb5p)"`
}

// ViewPolicyModel represents the model data for ViewPolicy operations
// Generated from schema: ViewPolicy
type ViewPolicyModel struct {
	Name                               string                         `json:"name,omitempty" yaml:"name,omitempty" required:"true" doc:"Name of the policy"`
	AccessFlavor                       string                         `json:"access_flavor,omitempty" yaml:"access_flavor,omitempty" required:"false" doc:"Applicable with MIXED_LAST_WINS security flavor (Access can be set via NFSv3 regardless of this option)"`
	AllowedCharacters                  string                         `json:"allowed_characters,omitempty" yaml:"allowed_characters,omitempty" required:"false" doc:"How to determine which characters are allowed in file names. 'LCD' (default): Allows only characters allowed by all VAST Cluster-supported protocols, regardless of the specific protocol enabled on a specific view. With this (default) option, the limitation on the length of a single component of the path is 255 characters. 'YOYO': Imposes no limitation beyond that of the client protocol."`
	AppleSid                           bool                           `json:"apple_sid,omitempty" yaml:"apple_sid,omitempty" required:"false" doc:"For use when connecting from Mac clients to SMB shares, this option enables Security IDs (SIDs) to be returned in Apple compatible representation."`
	AtimeFrequency                     string                         `json:"atime_frequency,omitempty" yaml:"atime_frequency,omitempty" required:"false" doc:"Frequency for updating the atime attribute of NFS files. atime is updated on read operations if the difference between the current time and the file's atime value is greater than the atime frequency. Default: 3600"`
	AuthSource                         string                         `json:"auth_source,omitempty" yaml:"auth_source,omitempty" required:"false" doc:"Specifies which source is trusted for the user's group memberships, when users' access to the view is authorized."`
	Change                             *[]string                      `json:"change,omitempty" yaml:"change,omitempty" required:"false" doc:""`
	Cluster                            string                         `json:"cluster,omitempty" yaml:"cluster,omitempty" required:"false" doc:"Parent Cluster"`
	ClusterId                          int64                          `json:"cluster_id,omitempty" yaml:"cluster_id,omitempty" required:"false" doc:"Parent Cluster ID"`
	CountViews                         int64                          `json:"count_views,omitempty" yaml:"count_views,omitempty" required:"false" doc:"Number of Policy related Views"`
	Created                            string                         `json:"created,omitempty" yaml:"created,omitempty" required:"false" doc:""`
	DataCreateDelete                   bool                           `json:"data_create_delete,omitempty" yaml:"data_create_delete,omitempty" required:"false" doc:"Create/Delete Files/Directories/Objects"`
	DataModify                         bool                           `json:"data_modify,omitempty" yaml:"data_modify,omitempty" required:"false" doc:"Modify data/MD"`
	DataRead                           bool                           `json:"data_read,omitempty" yaml:"data_read,omitempty" required:"false" doc:"Read data"`
	DisableHandleLease                 bool                           `json:"disable_handle_lease,omitempty" yaml:"disable_handle_lease,omitempty" required:"false" doc:""`
	DisableReadLease                   bool                           `json:"disable_read_lease,omitempty" yaml:"disable_read_lease,omitempty" required:"false" doc:""`
	DisableWriteLease                  bool                           `json:"disable_write_lease,omitempty" yaml:"disable_write_lease,omitempty" required:"false" doc:""`
	EnableAccessToSnapshotDirInSubdirs bool                           `json:"enable_access_to_snapshot_dir_in_subdirs,omitempty" yaml:"enable_access_to_snapshot_dir_in_subdirs,omitempty" required:"false" doc:"Specifies whether to make the .snapshot directory visible in subdirectories of the View."`
	EnableListingOfSnapshotDir         bool                           `json:"enable_listing_of_snapshot_dir,omitempty" yaml:"enable_listing_of_snapshot_dir,omitempty" required:"false" doc:"Specifies whether to make the .snapshot directory visible in subdirectories of the View."`
	EnableSnapshotLookup               bool                           `json:"enable_snapshot_lookup,omitempty" yaml:"enable_snapshot_lookup,omitempty" required:"false" doc:"Specifies whether to make the .snapshot directory accessible in subdirectories of the View."`
	EnableVisibilityOfSnapshotDir      bool                           `json:"enable_visibility_of_snapshot_dir,omitempty" yaml:"enable_visibility_of_snapshot_dir,omitempty" required:"false" doc:"Specifies whether to make the .snapshot directory visible in subdirectories of the View."`
	ExposeIdInFsid                     bool                           `json:"expose_id_in_fsid,omitempty" yaml:"expose_id_in_fsid,omitempty" required:"false" doc:""`
	Flavor                             string                         `json:"flavor,omitempty" yaml:"flavor,omitempty" required:"false" doc:"Security flavor, which determines how file and directory permissions are applied in multiprotocol views."`
	Full                               *[]string                      `json:"full,omitempty" yaml:"full,omitempty" required:"false" doc:""`
	GidInheritance                     string                         `json:"gid_inheritance,omitempty" yaml:"gid_inheritance,omitempty" required:"false" doc:"Specifies how files receive their owning group when they are created. 'LINUX' (default): Each new file inherits its owning group from the group ID of the user who creates the file. 'BSD': Each new file inherits its owning group from the group ID of the parent directory."`
	Guid                               string                         `json:"guid,omitempty" yaml:"guid,omitempty" required:"false" doc:"Globally unique identifier"`
	Id                                 int64                          `json:"id,omitempty" yaml:"id,omitempty" required:"false" doc:"ID"`
	InheritParentModeBits              bool                           `json:"inherit_parent_mode_bits,omitempty" yaml:"inherit_parent_mode_bits,omitempty" required:"false" doc:"Enable NFS behavior of inheriting posix settings from the parent directory versus configured values"`
	Internal                           bool                           `json:"internal,omitempty" yaml:"internal,omitempty" required:"false" doc:""`
	IsS3DefaultPolicy                  bool                           `json:"is_s3_default_policy,omitempty" yaml:"is_s3_default_policy,omitempty" required:"false" doc:"Specifies whether to make this View Policy default for S3"`
	LogDeleted                         bool                           `json:"log_deleted,omitempty" yaml:"log_deleted,omitempty" required:"false" doc:"Log deleted files/dirs from trash dir"`
	LogFullPath                        bool                           `json:"log_full_path,omitempty" yaml:"log_full_path,omitempty" required:"false" doc:"Log full path"`
	LogHostname                        bool                           `json:"log_hostname,omitempty" yaml:"log_hostname,omitempty" required:"false" doc:"Log hostname"`
	LogUsername                        bool                           `json:"log_username,omitempty" yaml:"log_username,omitempty" required:"false" doc:"Log username"`
	NfsAllSquash                       *[]string                      `json:"nfs_all_squash,omitempty" yaml:"nfs_all_squash,omitempty" required:"false" doc:"Hosts with all squash policy"`
	NfsCaseInsensitive                 bool                           `json:"nfs_case_insensitive,omitempty" yaml:"nfs_case_insensitive,omitempty" required:"false" doc:"Force case insensitivity for NFSv3 and NFSv4"`
	NfsEnforceTls                      bool                           `json:"nfs_enforce_tls,omitempty" yaml:"nfs_enforce_tls,omitempty" required:"false" doc:"Accept NFSv3 and NFSv4 client mounts only if they are TLS-encrypted. Use only with Minimal Protection Level set to System or None."`
	NfsMinimalProtectionLevel          string                         `json:"nfs_minimal_protection_level,omitempty" yaml:"nfs_minimal_protection_level,omitempty" required:"false" doc:"Minimal Protection Level for NFSv4 client mounts: 'KRB_AUTH_ONLY' allows client mounts with Kerberos authentication only (using the RPCSEC_GSS authentication service), 'SYSTEM' allows client mounts using either the AUTH_SYS RCP security flavor (the traditional default NFS authentication scheme) or with Kerberos authentication, 'NONE' (default) allows client mounts with the AUTH_NONE (anonymous access), or AUTH_SYS RCP security flavors, or with Kerberos authentication."`
	NfsNoSquash                        *[]string                      `json:"nfs_no_squash,omitempty" yaml:"nfs_no_squash,omitempty" required:"false" doc:"Hosts with no squash policy"`
	NfsPosixAcl                        bool                           `json:"nfs_posix_acl,omitempty" yaml:"nfs_posix_acl,omitempty" required:"false" doc:"True if support is enabled for extended POSIX Access Control Lists (ACL) for NFSv3 clients."`
	NfsReadOnly                        string                         `json:"nfs_read_only,omitempty" yaml:"nfs_read_only,omitempty" required:"false" doc:"Hosts with NFS read only permissions"`
	NfsReadWrite                       *[]string                      `json:"nfs_read_write,omitempty" yaml:"nfs_read_write,omitempty" required:"false" doc:"Hosts with NFS read/write permissions"`
	NfsReturnOpenPermissions           bool                           `json:"nfs_return_open_permissions,omitempty" yaml:"nfs_return_open_permissions,omitempty" required:"false" doc:"when using smb use open permissions for files"`
	NfsRootSquash                      *[]string                      `json:"nfs_root_squash,omitempty" yaml:"nfs_root_squash,omitempty" required:"false" doc:"Hosts with root squash policy"`
	PathLength                         string                         `json:"path_length,omitempty" yaml:"path_length,omitempty" required:"false" doc:"How to determine the maximum allowed path component name length. 'LCD' (default): Imposes the lowest common denominator file length limit of all VAST Cluster-supported protocols, regardless of the specific protocol enabled on a specific view. 'YOYO': Imposes no limitation beyond that of the client protocol."`
	PrettyAtimeFrequency               string                         `json:"pretty_atime_frequency,omitempty" yaml:"pretty_atime_frequency,omitempty" required:"false" doc:""`
	PrettyAuthSource                   string                         `json:"pretty_auth_source,omitempty" yaml:"pretty_auth_source,omitempty" required:"false" doc:""`
	Protocols                          *[]string                      `json:"protocols,omitempty" yaml:"protocols,omitempty" required:"false" doc:"Array of protocols to audit"`
	ProtocolsAudit                     ViewPolicyModel_ProtocolsAudit `json:"protocols_audit,omitempty" yaml:"protocols_audit,omitempty" required:"false" doc:"Audit settings. Any settings enabled here apply to attached views, in addition to any audit settings enabled on the cluster."`
	Read                               *[]string                      `json:"read,omitempty" yaml:"read,omitempty" required:"false" doc:"Hosts with read permissions"`
	ReadOnly                           *[]string                      `json:"read_only,omitempty" yaml:"read_only,omitempty" required:"false" doc:"Hosts with NFS read only permissions"`
	ReadWrite                          *[]string                      `json:"read_write,omitempty" yaml:"read_write,omitempty" required:"false" doc:"Hosts with NFS read/write permissions"`
	S3FlavorAllowFreeListing           bool                           `json:"s3_flavor_allow_free_listing,omitempty" yaml:"s3_flavor_allow_free_listing,omitempty" required:"false" doc:"Allow NFS clients freely list bucket views and their subdirectories, regardless of individual object permissions."`
	S3FlavorDetectFullPathname         bool                           `json:"s3_flavor_detect_full_pathname,omitempty" yaml:"s3_flavor_detect_full_pathname,omitempty" required:"false" doc:"When this flag is enabled in S3 flavor, NFS access to objects is determined based on the full resource names specified in the identity policies. When disabled, only the bucket name is compared to the identity policy."`
	S3ReadOnly                         *[]string                      `json:"s3_read_only,omitempty" yaml:"s3_read_only,omitempty" required:"false" doc:"Hosts with S3 read only permissions"`
	S3ReadWrite                        *[]string                      `json:"s3_read_write,omitempty" yaml:"s3_read_write,omitempty" required:"false" doc:"Hosts with S3 read/write permissions"`
	S3SpecialCharsSupport              bool                           `json:"s3_special_chars_support,omitempty" yaml:"s3_special_chars_support,omitempty" required:"false" doc:"This will enable object names that contain “//“ or “/../“ and are incompatible with other protocols"`
	S3Visibility                       *[]string                      `json:"s3_visibility,omitempty" yaml:"s3_visibility,omitempty" required:"false" doc:"Users with permission to list buckets that are created using this policy even if they do not have permission to access those buckets."`
	S3VisibilityGroups                 *[]string                      `json:"s3_visibility_groups,omitempty" yaml:"s3_visibility_groups,omitempty" required:"false" doc:"Groups with permission to list buckets that are created using this policy even if they do not have permission to access those buckets."`
	SmbDirectoryMode                   int64                          `json:"smb_directory_mode,omitempty" yaml:"smb_directory_mode,omitempty" required:"false" doc:"Default unix type permissions on new folder"`
	SmbDirectoryModePadded             string                         `json:"smb_directory_mode_padded,omitempty" yaml:"smb_directory_mode_padded,omitempty" required:"false" doc:"Default unix type permissions on new folder"`
	SmbFileMode                        int64                          `json:"smb_file_mode,omitempty" yaml:"smb_file_mode,omitempty" required:"false" doc:"Default unix type permissions on new file"`
	SmbFileModePadded                  string                         `json:"smb_file_mode_padded,omitempty" yaml:"smb_file_mode_padded,omitempty" required:"false" doc:"Default unix type permissions on new file"`
	SmbIsCa                            bool                           `json:"smb_is_ca,omitempty" yaml:"smb_is_ca,omitempty" required:"false" doc:"When enabled, the SMB share exposed by the view is set as continuously available, which allows SMB3 clients to request use of persistent file handles and keep their connections to this share in case of a failover event."`
	SmbReadOnly                        *[]string                      `json:"smb_read_only,omitempty" yaml:"smb_read_only,omitempty" required:"false" doc:"Hosts with SMB read only permissions"`
	SmbReadWrite                       *[]string                      `json:"smb_read_write,omitempty" yaml:"smb_read_write,omitempty" required:"false" doc:"Hosts with SMB read/write permissions"`
	Sync                               string                         `json:"sync,omitempty" yaml:"sync,omitempty" required:"false" doc:"Synchronization state with leader"`
	SyncTime                           string                         `json:"sync_time,omitempty" yaml:"sync_time,omitempty" required:"false" doc:"Synchronization time with leader"`
	TenantId                           int64                          `json:"tenant_id,omitempty" yaml:"tenant_id,omitempty" required:"false" doc:"Tenant ID"`
	TenantName                         string                         `json:"tenant_name,omitempty" yaml:"tenant_name,omitempty" required:"false" doc:"Tenant Name"`
	Title                              string                         `json:"title,omitempty" yaml:"title,omitempty" required:"false" doc:""`
	TrashAccess                        *[]string                      `json:"trash_access,omitempty" yaml:"trash_access,omitempty" required:"false" doc:"Hosts with trash access permission"`
	Url                                string                         `json:"url,omitempty" yaml:"url,omitempty" required:"false" doc:"Endpoint URL for API operations on the view policy object"`
	Use32bitFileid                     bool                           `json:"use_32bit_fileid,omitempty" yaml:"use_32bit_fileid,omitempty" required:"false" doc:"If true, the VAST Cluster's NFS server uses 32bit file IDs. This setting supports legacy 32-bit applications running over NFS."`
	UseAuthProvider                    bool                           `json:"use_auth_provider,omitempty" yaml:"use_auth_provider,omitempty" required:"false" doc:"Not in use"`
	VipPools                           *[]int64                       `json:"vip_pools,omitempty" yaml:"vip_pools,omitempty" required:"false" doc:"Comma separated vip pool ids. Restricts view access to specified VIP pools."`
}

// -----------------------------------------------------
// RESOURCE METHODS
// -----------------------------------------------------

// ViewPolicy represents a typed resource for viewpolicy operations
type ViewPolicy struct {
	Untyped *vast_client.VMSRest
}

// Get retrieves a single viewpolicy with typed request/response
func (r *ViewPolicy) Get(req *ViewPolicySearchParams) (*ViewPolicyModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.ViewPolies.Get(params)
	if err != nil {
		return nil, err
	}

	var response ViewPolicyModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// GetWithContext retrieves a single viewpolicy with typed request/response using provided context
func (r *ViewPolicy) GetWithContext(ctx context.Context, req *ViewPolicySearchParams) (*ViewPolicyModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.ViewPolies.GetWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response ViewPolicyModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// GetById retrieves a single viewpolicy by ID
func (r *ViewPolicy) GetById(id any) (*ViewPolicyModel, error) {
	record, err := r.Untyped.ViewPolies.GetById(id)
	if err != nil {
		return nil, err
	}

	var response ViewPolicyModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// GetByIdWithContext retrieves a single viewpolicy by ID using provided context
func (r *ViewPolicy) GetByIdWithContext(ctx context.Context, id any) (*ViewPolicyModel, error) {
	record, err := r.Untyped.ViewPolies.GetByIdWithContext(ctx, id)
	if err != nil {
		return nil, err
	}

	var response ViewPolicyModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// List retrieves multiple viewpolicys with typed request/response
func (r *ViewPolicy) List(req *ViewPolicySearchParams) ([]*ViewPolicyModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.ViewPolies.List(params)
	if err != nil {
		return nil, err
	}

	var response []*ViewPolicyModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// ListWithContext retrieves multiple viewpolicys with typed request/response using provided context
func (r *ViewPolicy) ListWithContext(ctx context.Context, req *ViewPolicySearchParams) ([]*ViewPolicyModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.ViewPolies.ListWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response []*ViewPolicyModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// Create creates a new viewpolicy with typed request/response
func (r *ViewPolicy) Create(req *ViewPolicyRequestBody) (*ViewPolicyModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.ViewPolies.Create(params)
	if err != nil {
		return nil, err
	}

	var response ViewPolicyModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// CreateWithContext creates a new viewpolicy with typed request/response using provided context
func (r *ViewPolicy) CreateWithContext(ctx context.Context, req *ViewPolicyRequestBody) (*ViewPolicyModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.ViewPolies.CreateWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response ViewPolicyModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Update updates an existing viewpolicy with typed request/response
func (r *ViewPolicy) Update(id any, req *ViewPolicyRequestBody) (*ViewPolicyModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.ViewPolies.Update(id, params)
	if err != nil {
		return nil, err
	}

	var response ViewPolicyModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// UpdateWithContext updates an existing viewpolicy with typed request/response using provided context
func (r *ViewPolicy) UpdateWithContext(ctx context.Context, id any, req *ViewPolicyRequestBody) (*ViewPolicyModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.ViewPolies.UpdateWithContext(ctx, id, params)
	if err != nil {
		return nil, err
	}

	var response ViewPolicyModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Delete deletes a viewpolicy with search parameters
func (r *ViewPolicy) Delete(req *ViewPolicySearchParams) error {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return err
	}
	_, err = r.Untyped.ViewPolies.Delete(params, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteWithContext deletes a viewpolicy with search parameters using provided context
func (r *ViewPolicy) DeleteWithContext(ctx context.Context, req *ViewPolicySearchParams) error {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return err
	}
	_, err = r.Untyped.ViewPolies.DeleteWithContext(ctx, params, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteById deletes a viewpolicy by ID
func (r *ViewPolicy) DeleteById(id any) error {
	_, err := r.Untyped.ViewPolies.DeleteById(id, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteByIdWithContext deletes a viewpolicy by ID using provided context
func (r *ViewPolicy) DeleteByIdWithContext(ctx context.Context, id any) error {
	_, err := r.Untyped.ViewPolies.DeleteByIdWithContext(ctx, id, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// Ensure ensures a viewpolicy exists with typed response
func (r *ViewPolicy) Ensure(searchParams *ViewPolicySearchParams, body *ViewPolicyRequestBody) (*ViewPolicyModel, error) {
	searchParamsConverted, err := vast_client.NewParamsFromStruct(searchParams)
	if err != nil {
		return nil, err
	}
	bodyConverted, err := vast_client.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.ViewPolies.Ensure(searchParamsConverted, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response ViewPolicyModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// EnsureWithContext ensures a viewpolicy exists with typed response using provided context
func (r *ViewPolicy) EnsureWithContext(ctx context.Context, searchParams *ViewPolicySearchParams, body *ViewPolicyRequestBody) (*ViewPolicyModel, error) {
	searchParamsConverted, err := vast_client.NewParamsFromStruct(searchParams)
	if err != nil {
		return nil, err
	}
	bodyConverted, err := vast_client.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.ViewPolies.EnsureWithContext(ctx, searchParamsConverted, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response ViewPolicyModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// EnsureByName ensures a viewpolicy exists by name with typed response
func (r *ViewPolicy) EnsureByName(name string, body *ViewPolicyRequestBody) (*ViewPolicyModel, error) {
	bodyConverted, err := vast_client.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.ViewPolies.EnsureByName(name, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response ViewPolicyModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// EnsureByNameWithContext ensures a viewpolicy exists by name with typed response using provided context
func (r *ViewPolicy) EnsureByNameWithContext(ctx context.Context, name string, body *ViewPolicyRequestBody) (*ViewPolicyModel, error) {
	bodyConverted, err := vast_client.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.ViewPolies.EnsureByNameWithContext(ctx, name, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response ViewPolicyModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Exists checks if a viewpolicy exists
func (r *ViewPolicy) Exists(req *ViewPolicySearchParams) (bool, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.ViewPolies.Exists(params)
}

// ExistsWithContext checks if a viewpolicy exists using provided context
func (r *ViewPolicy) ExistsWithContext(ctx context.Context, req *ViewPolicySearchParams) (bool, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.ViewPolies.ExistsWithContext(ctx, params)
}

// MustExists checks if a viewpolicy exists and panics if not
func (r *ViewPolicy) MustExists(req *ViewPolicySearchParams) bool {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.ViewPolies.MustExists(params)
}

// MustExistsWithContext checks if a viewpolicy exists and panics if not using provided context
func (r *ViewPolicy) MustExistsWithContext(ctx context.Context, req *ViewPolicySearchParams) bool {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.ViewPolies.MustExistsWithContext(ctx, params)
}

// -----------------------------------------------------
// RENDERABLE INTERFACE METHODS
// -----------------------------------------------------

// PrettyTable returns a formatted table representation of the ViewPolicyModel
func (m *ViewPolicyModel) PrettyTable() string {
	return m.toRecord().PrettyTable()
}

// PrettyJson returns a JSON representation of the ViewPolicyModel
func (m *ViewPolicyModel) PrettyJson(indent ...string) string {
	return m.toRecord().PrettyJson(indent...)
}

// toRecord converts the ViewPolicyModel to a Record (map[string]any) with @resourceType
func (m *ViewPolicyModel) toRecord() vast_client.Record {
	// Convert struct to map using JSON marshaling
	jsonBytes, err := json.Marshal(m)
	if err != nil {
		return vast_client.Record{"error": fmt.Sprintf("failed to marshal struct: %v", err)}
	}

	var record vast_client.Record
	if err := json.Unmarshal(jsonBytes, &record); err != nil {
		return vast_client.Record{"error": fmt.Sprintf("failed to unmarshal to record: %v", err)}
	}

	// Add resource type using reflection
	record["@resourceType"] = reflect.TypeOf(*m).Name()

	return record
}
