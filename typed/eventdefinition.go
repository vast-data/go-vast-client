// Code generated by generate-typed-resources. DO NOT EDIT.

package typed

import (
	"context"
	"encoding/json"
	"fmt"
	"reflect"

	vast_client "github.com/vast-data/go-vast-client"
)

// -----------------------------------------------------
// SEARCH PARAMS
// -----------------------------------------------------

// EventDefinitionSearchParams represents the search parameters for EventDefinition operations
// Generated from GET query parameters for resource: eventdefinitions
type EventDefinitionSearchParams struct {
	EventType  string `json:"event_type,omitempty" yaml:"event_type,omitempty" required:"false" doc:""`
	Name       string `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:""`
	ObjectType string `json:"object_type,omitempty" yaml:"object_type,omitempty" required:"false" doc:""`
}

// -----------------------------------------------------
// MODEL
// -----------------------------------------------------

// EventDefinitionModel represents the model data for EventDefinition operations
// Generated from schema: EventDefinition
type EventDefinitionModel struct {
	ActionDefinitions string    `json:"action_definitions,omitempty" yaml:"action_definitions,omitempty" required:"false" doc:"Actions triggered by the event"`
	AlarmDefinitions  string    `json:"alarm_definitions,omitempty" yaml:"alarm_definitions,omitempty" required:"false" doc:"A collection of properties of the alarm definition associated with the event."`
	AlarmOnly         bool      `json:"alarm_only,omitempty" yaml:"alarm_only,omitempty" required:"false" doc:"When this is enabled, only alarms will lead to email and webhook actions"`
	Cooldown          int64     `json:"cooldown,omitempty" yaml:"cooldown,omitempty" required:"false" doc:"Minimal time to wait between two consecutive events"`
	DisableActions    bool      `json:"disable_actions,omitempty" yaml:"disable_actions,omitempty" required:"false" doc:"If true, actions are disabled."`
	EmailRecipients   *[]string `json:"email_recipients,omitempty" yaml:"email_recipients,omitempty" required:"false" doc:"List of emails you want to notify in case this event occurs"`
	Enabled           bool      `json:"enabled,omitempty" yaml:"enabled,omitempty" required:"false" doc:"If true, the event definition is enabled."`
	EventMessage      string    `json:"event_message,omitempty" yaml:"event_message,omitempty" required:"false" doc:"Message text."`
	EventType         string    `json:"event_type,omitempty" yaml:"event_type,omitempty" required:"false" doc:""`
	Id                int64     `json:"id,omitempty" yaml:"id,omitempty" required:"false" doc:""`
	Internal          bool      `json:"internal,omitempty" yaml:"internal,omitempty" required:"false" doc:""`
	Name              string    `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:""`
	ObjectType        string    `json:"object_type,omitempty" yaml:"object_type,omitempty" required:"false" doc:""`
	Property          string    `json:"property,omitempty" yaml:"property,omitempty" required:"false" doc:"Monitored property"`
	RaiseAtCount      int64     `json:"raise_at_count,omitempty" yaml:"raise_at_count,omitempty" required:"false" doc:"Raise an alarm after a specific number of recurrences"`
	Severity          string    `json:"severity,omitempty" yaml:"severity,omitempty" required:"false" doc:"The severity of the alarm"`
	TriggerOff        string    `json:"trigger_off,omitempty" yaml:"trigger_off,omitempty" required:"false" doc:"For 'Object Modified' alarms: a list of values"`
	TriggerOn         string    `json:"trigger_on,omitempty" yaml:"trigger_on,omitempty" required:"false" doc:"For 'Object Modified' alarms: a list of values | For 'Threshold/Rate' alarms: a list of 2 members. The first is an operator like gt/ge/lte and the second is a number"`
	UserModified      bool      `json:"user_modified,omitempty" yaml:"user_modified,omitempty" required:"false" doc:"Did a user modify this event definition"`
	Webhooks          *[]int64  `json:"webhooks,omitempty" yaml:"webhooks,omitempty" required:"false" doc:"List of IDs of webhooks to be triggered by the event."`
}

// -----------------------------------------------------
// RESOURCE METHODS (READ-ONLY)
// -----------------------------------------------------

// EventDefinition provides typed access to EventDefinition resources (read-only)
type EventDefinition struct {
	Untyped *vast_client.VMSRest
}

// Get retrieves a single eventdefinition with typed request/response
func (r *EventDefinition) Get(req *EventDefinitionSearchParams) (*EventDefinitionModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.EventDefinitions.Get(params)
	if err != nil {
		return nil, err
	}

	var response EventDefinitionModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// GetWithContext retrieves a single eventdefinition with typed request/response using provided context
func (r *EventDefinition) GetWithContext(ctx context.Context, req *EventDefinitionSearchParams) (*EventDefinitionModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.EventDefinitions.GetWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response EventDefinitionModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// GetById retrieves a single eventdefinition by ID with typed response
func (r *EventDefinition) GetById(id any) (*EventDefinitionModel, error) {
	record, err := r.Untyped.EventDefinitions.GetById(id)
	if err != nil {
		return nil, err
	}

	var response EventDefinitionModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// GetByIdWithContext retrieves a single eventdefinition by ID with typed response using provided context
func (r *EventDefinition) GetByIdWithContext(ctx context.Context, id any) (*EventDefinitionModel, error) {
	record, err := r.Untyped.EventDefinitions.GetByIdWithContext(ctx, id)
	if err != nil {
		return nil, err
	}

	var response EventDefinitionModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// List retrieves multiple eventdefinitions with typed request/response
func (r *EventDefinition) List(req *EventDefinitionSearchParams) ([]*EventDefinitionModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.EventDefinitions.List(params)
	if err != nil {
		return nil, err
	}

	var response []*EventDefinitionModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// ListWithContext retrieves multiple eventdefinitions with typed request/response using provided context
func (r *EventDefinition) ListWithContext(ctx context.Context, req *EventDefinitionSearchParams) ([]*EventDefinitionModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.EventDefinitions.ListWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response []*EventDefinitionModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// Exists checks if a eventdefinition exists with the given search parameters
func (r *EventDefinition) Exists(req *EventDefinitionSearchParams) (bool, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}

	return r.Untyped.EventDefinitions.Exists(params)
}

// ExistsWithContext checks if a eventdefinition exists with the given search parameters using provided context
func (r *EventDefinition) ExistsWithContext(ctx context.Context, req *EventDefinitionSearchParams) (bool, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}

	return r.Untyped.EventDefinitions.ExistsWithContext(ctx, params)
}

// MustExists checks if a eventdefinition exists with the given search parameters, panics on error
func (r *EventDefinition) MustExists(req *EventDefinitionSearchParams) bool {
	exists, err := r.Exists(req)
	if err != nil {
		panic(err)
	}
	return exists
}

// MustExistsWithContext checks if a eventdefinition exists with the given search parameters using provided context, panics on error
func (r *EventDefinition) MustExistsWithContext(ctx context.Context, req *EventDefinitionSearchParams) bool {
	exists, err := r.ExistsWithContext(ctx, req)
	if err != nil {
		panic(err)
	}
	return exists
}

// -----------------------------------------------------
// RENDERABLE INTERFACE METHODS
// -----------------------------------------------------

// PrettyTable returns a formatted table representation of the EventDefinitionModel
func (m *EventDefinitionModel) PrettyTable() string {
	return m.toRecord().PrettyTable()
}

// PrettyJson returns a JSON representation of the EventDefinitionModel
func (m *EventDefinitionModel) PrettyJson(indent ...string) string {
	return m.toRecord().PrettyJson(indent...)
}

// toRecord converts the EventDefinitionModel to a Record (map[string]any) with @resourceType
func (m *EventDefinitionModel) toRecord() vast_client.Record {
	// Convert struct to map using JSON marshaling
	jsonBytes, err := json.Marshal(m)
	if err != nil {
		return vast_client.Record{"error": fmt.Sprintf("failed to marshal struct: %v", err)}
	}

	var record vast_client.Record
	if err := json.Unmarshal(jsonBytes, &record); err != nil {
		return vast_client.Record{"error": fmt.Sprintf("failed to unmarshal to record: %v", err)}
	}

	// Add resource type using reflection
	record["@resourceType"] = reflect.TypeOf(*m).Name()

	return record
}
