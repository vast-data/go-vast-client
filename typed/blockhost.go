// Code generated by generate-typed-resources. DO NOT EDIT.

package typed

import (
	"context"
	"encoding/json"
	"fmt"
	"reflect"

	vast_client "github.com/vast-data/go-vast-client"
)

// -----------------------------------------------------
// SEARCH PARAMS
// -----------------------------------------------------

// BlockHostSearchParams represents the search parameters for BlockHost operations
// Generated from GET query parameters for resource: blockhosts
type BlockHostSearchParams struct {
	Name     string `json:"name,omitempty" yaml:"name,omitempty" required:"true" doc:"The name of the block host, which is unique per tenant."`
	TenantId int64  `json:"tenant_id,omitempty" yaml:"tenant_id,omitempty" required:"false" doc:"Filter by tenant. Specify tenant ID."`
}

// -----------------------------------------------------
// REQUEST BODY
// -----------------------------------------------------

// BlockHostRequestBody represents the request body for BlockHost operations
// Generated from POST request body for resource: blockhosts
type BlockHostRequestBody struct {
	Name     string `json:"name,omitempty" yaml:"name,omitempty" required:"true" doc:"The name of the block host. Must be unique on the tenant. Can be duplicated on multiple tenants."`
	Nqn      string `json:"nqn,omitempty" yaml:"nqn,omitempty" required:"true" doc:"The host's NVMe Qualified Name (NQN), a unique identifier used to identify the host in NVMe operations. Retrieve the NQN from the host."`
	TenantId int64  `json:"tenant_id,omitempty" yaml:"tenant_id,omitempty" required:"true" doc:"The ID of the tenant to which to add the block host. Add the host separately as needed to each tenant."`
}

// -----------------------------------------------------
// MODEL
// -----------------------------------------------------

// BlockHostModel represents the model data for BlockHost operations
// Generated from schema: BlockHost
type BlockHostModel struct {
	Id                      int64  `json:"id,omitempty" yaml:"id,omitempty" required:"true" doc:""`
	Name                    string `json:"name,omitempty" yaml:"name,omitempty" required:"true" doc:"The name of the block host, which is unique per tenant."`
	Nqn                     string `json:"nqn,omitempty" yaml:"nqn,omitempty" required:"true" doc:"The NVMe Qualified Name of the host."`
	TenantId                int64  `json:"tenant_id,omitempty" yaml:"tenant_id,omitempty" required:"true" doc:"ID of the tenant to which the block host belongs."`
	MappedBlockHostCount    int64  `json:"mapped_block_host_count,omitempty" yaml:"mapped_block_host_count,omitempty" required:"false" doc:"The number of block hosts mapped to the volume."`
	MappedBlockHostsPreview string `json:"mapped_block_hosts_preview,omitempty" yaml:"mapped_block_hosts_preview,omitempty" required:"false" doc:"Mapped block hosts preview."`
	TenantName              string `json:"tenant_name,omitempty" yaml:"tenant_name,omitempty" required:"false" doc:"The name of the tenant to which the block host belongs."`
}

// -----------------------------------------------------
// RESOURCE METHODS
// -----------------------------------------------------

// BlockHost represents a typed resource for blockhost operations
type BlockHost struct {
	Untyped *vast_client.VMSRest
}

// Get retrieves a single blockhost with typed request/response
func (r *BlockHost) Get(req *BlockHostSearchParams) (*BlockHostModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.BlockHosts.Get(params)
	if err != nil {
		return nil, err
	}

	var response BlockHostModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// GetWithContext retrieves a single blockhost with typed request/response using provided context
func (r *BlockHost) GetWithContext(ctx context.Context, req *BlockHostSearchParams) (*BlockHostModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.BlockHosts.GetWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response BlockHostModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// GetById retrieves a single blockhost by ID
func (r *BlockHost) GetById(id any) (*BlockHostModel, error) {
	record, err := r.Untyped.BlockHosts.GetById(id)
	if err != nil {
		return nil, err
	}

	var response BlockHostModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// GetByIdWithContext retrieves a single blockhost by ID using provided context
func (r *BlockHost) GetByIdWithContext(ctx context.Context, id any) (*BlockHostModel, error) {
	record, err := r.Untyped.BlockHosts.GetByIdWithContext(ctx, id)
	if err != nil {
		return nil, err
	}

	var response BlockHostModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// List retrieves multiple blockhosts with typed request/response
func (r *BlockHost) List(req *BlockHostSearchParams) ([]*BlockHostModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.BlockHosts.List(params)
	if err != nil {
		return nil, err
	}

	var response []*BlockHostModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// ListWithContext retrieves multiple blockhosts with typed request/response using provided context
func (r *BlockHost) ListWithContext(ctx context.Context, req *BlockHostSearchParams) ([]*BlockHostModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.BlockHosts.ListWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response []*BlockHostModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// Create creates a new blockhost with typed request/response
func (r *BlockHost) Create(req *BlockHostRequestBody) (*BlockHostModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.BlockHosts.Create(params)
	if err != nil {
		return nil, err
	}

	var response BlockHostModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// CreateWithContext creates a new blockhost with typed request/response using provided context
func (r *BlockHost) CreateWithContext(ctx context.Context, req *BlockHostRequestBody) (*BlockHostModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.BlockHosts.CreateWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response BlockHostModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Update updates an existing blockhost with typed request/response
func (r *BlockHost) Update(id any, req *BlockHostRequestBody) (*BlockHostModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.BlockHosts.Update(id, params)
	if err != nil {
		return nil, err
	}

	var response BlockHostModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// UpdateWithContext updates an existing blockhost with typed request/response using provided context
func (r *BlockHost) UpdateWithContext(ctx context.Context, id any, req *BlockHostRequestBody) (*BlockHostModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.BlockHosts.UpdateWithContext(ctx, id, params)
	if err != nil {
		return nil, err
	}

	var response BlockHostModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Delete deletes a blockhost with search parameters
func (r *BlockHost) Delete(req *BlockHostSearchParams) error {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return err
	}
	_, err = r.Untyped.BlockHosts.Delete(params, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteWithContext deletes a blockhost with search parameters using provided context
func (r *BlockHost) DeleteWithContext(ctx context.Context, req *BlockHostSearchParams) error {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return err
	}
	_, err = r.Untyped.BlockHosts.DeleteWithContext(ctx, params, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteById deletes a blockhost by ID
func (r *BlockHost) DeleteById(id any) error {
	_, err := r.Untyped.BlockHosts.DeleteById(id, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// DeleteByIdWithContext deletes a blockhost by ID using provided context
func (r *BlockHost) DeleteByIdWithContext(ctx context.Context, id any) error {
	_, err := r.Untyped.BlockHosts.DeleteByIdWithContext(ctx, id, nil, nil)
	if err != nil {
		return err
	}
	return nil
}

// Ensure ensures a blockhost exists with typed response
func (r *BlockHost) Ensure(searchParams *BlockHostSearchParams, body *BlockHostRequestBody) (*BlockHostModel, error) {
	searchParamsConverted, err := vast_client.NewParamsFromStruct(searchParams)
	if err != nil {
		return nil, err
	}
	bodyConverted, err := vast_client.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.BlockHosts.Ensure(searchParamsConverted, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response BlockHostModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// EnsureWithContext ensures a blockhost exists with typed response using provided context
func (r *BlockHost) EnsureWithContext(ctx context.Context, searchParams *BlockHostSearchParams, body *BlockHostRequestBody) (*BlockHostModel, error) {
	searchParamsConverted, err := vast_client.NewParamsFromStruct(searchParams)
	if err != nil {
		return nil, err
	}
	bodyConverted, err := vast_client.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.BlockHosts.EnsureWithContext(ctx, searchParamsConverted, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response BlockHostModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// EnsureByName ensures a blockhost exists by name with typed response
func (r *BlockHost) EnsureByName(name string, body *BlockHostRequestBody) (*BlockHostModel, error) {
	bodyConverted, err := vast_client.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.BlockHosts.EnsureByName(name, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response BlockHostModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// EnsureByNameWithContext ensures a blockhost exists by name with typed response using provided context
func (r *BlockHost) EnsureByNameWithContext(ctx context.Context, name string, body *BlockHostRequestBody) (*BlockHostModel, error) {
	bodyConverted, err := vast_client.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.BlockHosts.EnsureByNameWithContext(ctx, name, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response BlockHostModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// Exists checks if a blockhost exists
func (r *BlockHost) Exists(req *BlockHostSearchParams) (bool, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.BlockHosts.Exists(params)
}

// ExistsWithContext checks if a blockhost exists using provided context
func (r *BlockHost) ExistsWithContext(ctx context.Context, req *BlockHostSearchParams) (bool, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.BlockHosts.ExistsWithContext(ctx, params)
}

// MustExists checks if a blockhost exists and panics if not
func (r *BlockHost) MustExists(req *BlockHostSearchParams) bool {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.BlockHosts.MustExists(params)
}

// MustExistsWithContext checks if a blockhost exists and panics if not using provided context
func (r *BlockHost) MustExistsWithContext(ctx context.Context, req *BlockHostSearchParams) bool {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.BlockHosts.MustExistsWithContext(ctx, params)
}

// -----------------------------------------------------
// RENDERABLE INTERFACE METHODS
// -----------------------------------------------------

// PrettyTable returns a formatted table representation of the BlockHostModel
func (m *BlockHostModel) PrettyTable() string {
	return m.toRecord().PrettyTable()
}

// PrettyJson returns a JSON representation of the BlockHostModel
func (m *BlockHostModel) PrettyJson(indent ...string) string {
	return m.toRecord().PrettyJson(indent...)
}

// toRecord converts the BlockHostModel to a Record (map[string]any) with @resourceType
func (m *BlockHostModel) toRecord() vast_client.Record {
	// Convert struct to map using JSON marshaling
	jsonBytes, err := json.Marshal(m)
	if err != nil {
		return vast_client.Record{"error": fmt.Sprintf("failed to marshal struct: %v", err)}
	}

	var record vast_client.Record
	if err := json.Unmarshal(jsonBytes, &record); err != nil {
		return vast_client.Record{"error": fmt.Sprintf("failed to unmarshal to record: %v", err)}
	}

	// Add resource type using reflection
	record["@resourceType"] = reflect.TypeOf(*m).Name()

	return record
}
