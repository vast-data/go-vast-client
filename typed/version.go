// Code generated by generate-typed-resources. DO NOT EDIT.

package typed

import (
	"context"
	"encoding/json"
	"fmt"
	"reflect"

	vast_client "github.com/vast-data/go-vast-client"
)

// -----------------------------------------------------
// SEARCH PARAMS
// -----------------------------------------------------

// VersionSearchParams represents the search parameters for Version operations
// Generated from GET query parameters for resource: versions
type VersionSearchParams struct {
	Guid string `json:"guid,omitempty" yaml:"guid,omitempty" required:"false" doc:""`
	Name string `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:""`
}

// -----------------------------------------------------
// MODEL
// -----------------------------------------------------

// VersionModel represents the model data for Version operations
// Generated from schema: Version
type VersionModel struct {
	Build             string `json:"build,omitempty" yaml:"build,omitempty" required:"false" doc:""`
	CarriersFwVersion string `json:"carriers_fw_version,omitempty" yaml:"carriers_fw_version,omitempty" required:"false" doc:""`
	Cluster           string `json:"cluster,omitempty" yaml:"cluster,omitempty" required:"false" doc:""`
	Created           string `json:"created,omitempty" yaml:"created,omitempty" required:"false" doc:""`
	EnableDr          bool   `json:"enable_dr,omitempty" yaml:"enable_dr,omitempty" required:"false" doc:""`
	Force             bool   `json:"force,omitempty" yaml:"force,omitempty" required:"false" doc:""`
	Guid              string `json:"guid,omitempty" yaml:"guid,omitempty" required:"false" doc:""`
	Id                int64  `json:"id,omitempty" yaml:"id,omitempty" required:"false" doc:""`
	Name              string `json:"name,omitempty" yaml:"name,omitempty" required:"false" doc:""`
	OsVersion         string `json:"os_version,omitempty" yaml:"os_version,omitempty" required:"false" doc:""`
	SkipHwCheck       bool   `json:"skip_hw_check,omitempty" yaml:"skip_hw_check,omitempty" required:"false" doc:""`
	Status            string `json:"status,omitempty" yaml:"status,omitempty" required:"false" doc:""`
	SysVersion        string `json:"sys_version,omitempty" yaml:"sys_version,omitempty" required:"false" doc:""`
	Title             string `json:"title,omitempty" yaml:"title,omitempty" required:"false" doc:""`
	Url               string `json:"url,omitempty" yaml:"url,omitempty" required:"false" doc:""`
}

// -----------------------------------------------------
// RESOURCE METHODS (READ-ONLY)
// -----------------------------------------------------

// Version provides typed access to Version resources (read-only)
type Version struct {
	Untyped *vast_client.VMSRest
}

// Get retrieves a single version with typed request/response
func (r *Version) Get(req *VersionSearchParams) (*VersionModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Versions.Get(params)
	if err != nil {
		return nil, err
	}

	var response VersionModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// GetWithContext retrieves a single version with typed request/response using provided context
func (r *Version) GetWithContext(ctx context.Context, req *VersionSearchParams) (*VersionModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.Versions.GetWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response VersionModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// GetById retrieves a single version by ID with typed response
func (r *Version) GetById(id any) (*VersionModel, error) {
	record, err := r.Untyped.Versions.GetById(id)
	if err != nil {
		return nil, err
	}

	var response VersionModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// GetByIdWithContext retrieves a single version by ID with typed response using provided context
func (r *Version) GetByIdWithContext(ctx context.Context, id any) (*VersionModel, error) {
	record, err := r.Untyped.Versions.GetByIdWithContext(ctx, id)
	if err != nil {
		return nil, err
	}

	var response VersionModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// List retrieves multiple versions with typed request/response
func (r *Version) List(req *VersionSearchParams) ([]*VersionModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.Versions.List(params)
	if err != nil {
		return nil, err
	}

	var response []*VersionModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// ListWithContext retrieves multiple versions with typed request/response using provided context
func (r *Version) ListWithContext(ctx context.Context, req *VersionSearchParams) ([]*VersionModel, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.Versions.ListWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response []*VersionModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// Exists checks if a version exists with the given search parameters
func (r *Version) Exists(req *VersionSearchParams) (bool, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}

	return r.Untyped.Versions.Exists(params)
}

// ExistsWithContext checks if a version exists with the given search parameters using provided context
func (r *Version) ExistsWithContext(ctx context.Context, req *VersionSearchParams) (bool, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}

	return r.Untyped.Versions.ExistsWithContext(ctx, params)
}

// MustExists checks if a version exists with the given search parameters, panics on error
func (r *Version) MustExists(req *VersionSearchParams) bool {
	exists, err := r.Exists(req)
	if err != nil {
		panic(err)
	}
	return exists
}

// MustExistsWithContext checks if a version exists with the given search parameters using provided context, panics on error
func (r *Version) MustExistsWithContext(ctx context.Context, req *VersionSearchParams) bool {
	exists, err := r.ExistsWithContext(ctx, req)
	if err != nil {
		panic(err)
	}
	return exists
}

// -----------------------------------------------------
// RENDERABLE INTERFACE METHODS
// -----------------------------------------------------

// PrettyTable returns a formatted table representation of the VersionModel
func (m *VersionModel) PrettyTable() string {
	return m.toRecord().PrettyTable()
}

// PrettyJson returns a JSON representation of the VersionModel
func (m *VersionModel) PrettyJson(indent ...string) string {
	return m.toRecord().PrettyJson(indent...)
}

// toRecord converts the VersionModel to a Record (map[string]any) with @resourceType
func (m *VersionModel) toRecord() vast_client.Record {
	// Convert struct to map using JSON marshaling
	jsonBytes, err := json.Marshal(m)
	if err != nil {
		return vast_client.Record{"error": fmt.Sprintf("failed to marshal struct: %v", err)}
	}

	var record vast_client.Record
	if err := json.Unmarshal(jsonBytes, &record); err != nil {
		return vast_client.Record{"error": fmt.Sprintf("failed to unmarshal to record: %v", err)}
	}

	// Add resource type using reflection
	record["@resourceType"] = reflect.TypeOf(*m).Name()

	return record
}
