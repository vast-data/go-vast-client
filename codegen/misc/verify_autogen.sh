#!/bin/bash
# verify_autogen.sh - Verify autogenerated typed resources for common issues
#
# This script checks all autogenerated typed resources (*_autogen.go) for:
#   1. Empty structs (structs with no fields)
#   2. core.Params in function signatures (untyped parameters)
#   3. core.Record in function return types (untyped records)
#   4. core.RecordSet in function return types (untyped record sets)
#   5. core.EmptyRecord in function return types (untyped empty records)
#
# Usage: ./verify_autogen.sh [path_to_typed_resources]
#
# Exit codes:
#   0 - All checks passed
#   1 - One or more checks failed

set -e

# Default to resources/typed if no path provided
TYPED_DIR="${1:-resources/typed}"

# Check if directory exists
if [ ! -d "$TYPED_DIR" ]; then
    echo "Error: Directory '$TYPED_DIR' not found"
    exit 1
fi

# Check if there are any autogen files
if ! ls "$TYPED_DIR"/*_autogen.go >/dev/null 2>&1; then
    echo "Error: No *_autogen.go files found in '$TYPED_DIR'"
    exit 1
fi

echo "========================================="
echo "Verifying autogenerated typed resources..."
echo "========================================="
echo ""

errors=0

# Check 1: Empty structs
echo "Checking for empty structs..."
empty_structs=$(grep -n "^type.*struct {$" "$TYPED_DIR"/*_autogen.go 2>/dev/null | while read line; do
    file=$(echo "$line" | cut -d: -f1)
    linenum=$(echo "$line" | cut -d: -f2)
    nextline=$((linenum + 1))
    if sed -n "${nextline}p" "$file" | grep -q "^}$"; then
        echo "  $file:$linenum - Empty struct found"
    fi
done)

if [ -n "$empty_structs" ]; then
    echo "$empty_structs"
    errors=$((errors + 1))
else
    echo "No empty structs found"
fi
echo ""

# Check 2: core.Params in function signatures
echo "Checking for core.Params in function signatures..."
core_params=$(grep -n "func.*core\.Params" "$TYPED_DIR"/*_autogen.go 2>/dev/null | grep -v "// " | grep -v "//" || true)
if [ -n "$core_params" ]; then
    echo "$core_params" | while read line; do echo "  $line"; done
    errors=$((errors + 1))
else
    echo "No core.Params found in function signatures"
fi
echo ""

# Check 3: core.Record in function return types
echo "Checking for core.Record in function return types..."
core_record=$(grep -n "func.*core\.Record" "$TYPED_DIR"/*_autogen.go 2>/dev/null | grep -v "// " | grep -v "//" || true)
if [ -n "$core_record" ]; then
    echo "$core_record" | while read line; do echo "  $line"; done
    errors=$((errors + 1))
else
    echo "No core.Record found in function return types"
fi
echo ""

# Check 4: core.RecordSet in function return types
echo "Checking for core.RecordSet in function return types..."
core_recordset=$(grep -n "func.*core\.RecordSet" "$TYPED_DIR"/*_autogen.go 2>/dev/null | grep -v "// " | grep -v "//" || true)
if [ -n "$core_recordset" ]; then
    echo "$core_recordset" | while read line; do echo "  $line"; done
    errors=$((errors + 1))
else
    echo "No core.RecordSet found in function return types"
fi
echo ""

# Check 5: core.EmptyRecord in function return types
echo "Checking for core.EmptyRecord in function return types..."
core_emptyrecord=$(grep -n "func.*core\.EmptyRecord" "$TYPED_DIR"/*_autogen.go 2>/dev/null | grep -v "// " | grep -v "//" || true)
if [ -n "$core_emptyrecord" ]; then
    echo "$core_emptyrecord" | while read line; do echo "  $line"; done
    errors=$((errors + 1))
else
    echo "No core.EmptyRecord found in function return types"
fi
echo ""

# Summary
echo "========================================="
if [ $errors -eq 0 ]; then
    echo "All checks passed! Autogenerated code is clean."
    echo "========================================="
    exit 0
else
    echo "Verification failed with $errors issue(s)."
    echo "========================================="
    exit 1
fi
