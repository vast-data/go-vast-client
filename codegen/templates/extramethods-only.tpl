// Code generated by generate-typed-resources. DO NOT EDIT.
// Template: {{.TemplateOps}}

package typed

import (
	"context"
	{{if or .HasTextPlainMethods .ReturnsTextPlain .HasPrimitiveMethods .HasArrayMethods}}"fmt"
	{{end}}{{if .ExtraMethods}}"net/http"
	{{end}}{{if .HasAsyncMethods}}"time"
	{{end}}
{{if or .HasAsyncMethods .ExtraMethods .HasTextPlainMethods .ReturnsTextPlain .HasArrayMethods}}
	{{end}}"github.com/vast-data/go-vast-client/core"
	{{if .HasAsyncMethods}}"github.com/vast-data/go-vast-client/resources/untyped"
	{{end}}
)

// {{.Name}} provides typed access to {{.Name}} extra methods
type {{.Name}} struct {
	*core.TypedVastResource
}

{{if .ExtraMethods}}
// -----------------------------------------------------
// EXTRA METHODS
// -----------------------------------------------------

{{range .NestedTypes}}{{if eq .Section "EXTRA_METHOD_BODY"}}
// {{.Name}} represents a nested type for {{$.Name}} extra method body
type {{.Name}} struct {
	{{range .Fields}}{{.Name}} {{.Type}} `json:"{{.JSONTag}}{{if or (ne .Type "bool") (eq .RequiredTag "false")}},omitempty{{end}}" yaml:"{{.YAMLTag}}{{if or (ne .Type "bool") (eq .RequiredTag "false")}},omitempty{{end}}" required:"{{.RequiredTag}}"{{if .DocTag}} doc:"{{.DocTag}}"{{else}} doc:""{{end}}`
	{{end}}
}

{{end}}{{end}}
{{range .NestedTypes}}{{if eq .Section "EXTRA_METHOD_RESPONSE"}}
// {{.Name}} represents a nested type for {{$.Name}} extra method response
type {{.Name}} struct {
	{{range .Fields}}{{.Name}} {{.Type}} `json:"{{.JSONTag}},omitempty" yaml:"{{.YAMLTag}},omitempty" required:"{{.RequiredTag}}"{{if .DocTag}} doc:"{{.DocTag}}"{{else}} doc:""{{end}}`
	{{end}}
}

{{end}}{{end}}
{{range .ExtraMethods}}
{{$method := .}}
{{if and .BodyFields (not .SimplifiedBody)}}
// {{.BodyTypeName}} represents the request body for {{.Name}}
type {{.BodyTypeName}} struct {
	{{range .BodyFields}}{{.Name}} {{.Type}} `json:"{{.JSONTag}}{{if or (ne .Type "bool") (eq .RequiredTag "false")}},omitempty{{end}}" yaml:"{{.YAMLTag}}{{if or (ne .Type "bool") (eq .RequiredTag "false")}},omitempty{{end}}" required:"{{.RequiredTag}}"{{if .DocTag}} doc:"{{.DocTag}}"{{else}} doc:""{{end}}`
	{{end}}
}

{{end}}
{{if .ResponseFields}}
// {{.ResponseTypeName}} represents the response model for {{.Name}}
type {{.ResponseTypeName}} struct {
	{{range .ResponseFields}}{{.Name}} {{.Type}} `json:"{{.JSONTag}},omitempty" yaml:"{{.YAMLTag}},omitempty" required:"{{.RequiredTag}}"{{if .DocTag}} doc:"{{.DocTag}}"{{else}} doc:""{{end}}`
	{{end}}
}

{{end}}
// {{.Name}}WithContext_{{.HTTPMethod}}
// method: {{.HTTPMethod}}
// url: {{.Path}}{{if .Summary}}
// summary: {{.Summary}}{{end}}{{if or .SimplifiedBody .IsAsyncTask}}
//
// Parameters:{{range .SimplifiedParams}}
//   - {{.Name}} (body): {{if .Description}}{{.Description}}{{else}}Request parameter{{end}}{{end}}{{if .IsAsyncTask}}
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.{{end}}{{end}}
func (r *{{$.Name}}) {{.Name}}WithContext_{{.HTTPMethod}}(ctx context.Context{{if .HasID}}, id any{{end}}{{if and .HasParams .BodyFields}}, params *{{.BodyTypeName}}{{end}}{{if .SimplifiedBody}}{{range $i, $p := .SimplifiedParams}}, {{$p.Name}} {{$p.Type}}{{end}}{{else}}{{if .HasBody}}{{if .BodyFields}}, body *{{.BodyTypeName}}{{else}}, body core.Params{{end}}{{end}}{{end}}{{if .IsAsyncTask}}, waitTimeout time.Duration{{end}}) ({{if .IsAsyncTask}}*untyped.AsyncResult, error{{else}}{{if .ReturnsNoContent}}error{{else}}{{if .ReturnsPrimitive}}{{.PrimitiveType}}, error{{else}}{{if .ReturnsTextPlain}}string, error{{else}}{{if .ReturnsArray}}[]{{.ArrayItemType}}, error{{else}}{{if .ResponseFields}}*{{.ResponseTypeName}}, error{{else}}core.Record, error{{end}}{{end}}{{end}}{{end}}{{end}}{{end}}) {
	{{if .HasID}}resourcePath := core.BuildResourcePathWithID("{{.ResourcePath}}", id{{if .SubPath}}, "{{.SubPath}}"{{end}})
	{{else}}resourcePath := "{{.Path}}"
	{{end}}
	{{if and .HasParams .BodyFields}}reqParams, err := core.NewParamsFromStruct(params)
	if err != nil {
		return {{if .IsAsyncTask}}nil, err{{else if .ReturnsNoContent}}err{{else if .ReturnsPrimitive}}{{if eq .PrimitiveType "string"}}"", err{{else if or (eq .PrimitiveType "int64") (eq .PrimitiveType "int32") (eq .PrimitiveType "int")}}0, err{{else if or (eq .PrimitiveType "float64") (eq .PrimitiveType "float32")}}0.0, err{{else if eq .PrimitiveType "bool"}}false, err{{else}}nil, err{{end}}{{else if .ReturnsTextPlain}}"", err{{else}}nil, err{{end}}
	}{{else}}var reqParams core.Params{{end}}
	{{if .SimplifiedBody}}reqBody := core.Params{}
	{{range .SimplifiedParams}}{{if .Required}}reqBody["{{.BodyField}}"] = {{.Name}}
	{{else}}{{if eq .Type "string"}}if {{.Name}} != "" {
		reqBody["{{.BodyField}}"] = {{.Name}}
	}
	{{else if eq .Type "bool"}}if {{.Name}} {
		reqBody["{{.BodyField}}"] = {{.Name}}
	}
	{{else if or (eq .Type "int") (eq .Type "int32") (eq .Type "int64") (eq .Type "uint") (eq .Type "uint32") (eq .Type "uint64") (eq .Type "float32") (eq .Type "float64")}}if {{.Name}} != 0 {
		reqBody["{{.BodyField}}"] = {{.Name}}
	}
	{{else}}if {{.Name}} != nil {
		reqBody["{{.BodyField}}"] = {{.Name}}
	}
	{{end}}{{end}}{{end}}	{{else}}{{if .HasBody}}{{if .BodyFields}}reqBody, err := core.NewParamsFromStruct(body)
	if err != nil {
		return {{if .IsAsyncTask}}nil, err{{else if .ReturnsNoContent}}err{{else if .ReturnsPrimitive}}{{if eq .PrimitiveType "string"}}"", err{{else if or (eq .PrimitiveType "int64") (eq .PrimitiveType "int32") (eq .PrimitiveType "int")}}0, err{{else if or (eq .PrimitiveType "float64") (eq .PrimitiveType "float32")}}0.0, err{{else if eq .PrimitiveType "bool"}}false, err{{else}}nil, err{{end}}{{else if .ReturnsTextPlain}}"", err{{else}}nil, err{{end}}
	}{{else}}reqBody := body{{end}}{{else}}var reqBody core.Params{{end}}{{end}}
	
	{{if .IsAsyncTask}}result, err := core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.{{.GoHTTPMethod}}, resourcePath, reqParams, reqBody)
	if err != nil {
		return nil, err
	}

	return untyped.MaybeWaitAsyncResultWithContext(ctx, result, r.Untyped, waitTimeout)
	{{else}}{{if .ReturnsNoContent}}{{if and (or (and .HasParams .BodyFields) (and .HasBody .BodyFields)) (not .SimplifiedBody)}}_, err = core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.{{.GoHTTPMethod}}, resourcePath, reqParams, reqBody)
	return err{{else}}_, err := core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.{{.GoHTTPMethod}}, resourcePath, reqParams, reqBody)
	return err{{end}}
	{{else}}{{if .ReturnsTextPlain}}record, err := core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.{{.GoHTTPMethod}}, resourcePath, reqParams, reqBody)
	if err != nil {
		return "", err
	}
	// Extract text/plain response from @raw key
	if rawVal, ok := record["@raw"]; ok {
		if rawBytes, ok := rawVal.([]byte); ok {
			return string(rawBytes), nil
		}
		return fmt.Sprintf("%v", rawVal), nil
	}
	return "", fmt.Errorf("@raw key not found in response")
	{{else}}{{if .ReturnsPrimitive}}record, err := core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.{{.GoHTTPMethod}}, resourcePath, reqParams, reqBody)
	if err != nil {
		return {{if eq .PrimitiveType "string"}}"", err{{else if or (eq .PrimitiveType "int64") (eq .PrimitiveType "int32") (eq .PrimitiveType "int")}}0, err{{else if or (eq .PrimitiveType "float64") (eq .PrimitiveType "float32")}}0.0, err{{else if eq .PrimitiveType "bool"}}false, err{{end}}
	}
	// Extract primitive response from @raw key
	if rawVal, ok := record["@raw"]; ok {
		{{if eq .PrimitiveType "string"}}if rawBytes, ok := rawVal.([]byte); ok {
			return string(rawBytes), nil
		}
		return fmt.Sprintf("%v", rawVal), nil{{else if or (eq .PrimitiveType "int64") (eq .PrimitiveType "int32") (eq .PrimitiveType "int")}}if v, ok := rawVal.(float64); ok {
			return {{.PrimitiveType}}(v), nil
		}
		if v, ok := rawVal.(int64); ok {
			return {{.PrimitiveType}}(v), nil
		}
		if v, ok := rawVal.(int); ok {
			return {{.PrimitiveType}}(v), nil
		}
		return 0, fmt.Errorf("unexpected type for integer response: %T", rawVal){{else if or (eq .PrimitiveType "float64") (eq .PrimitiveType "float32")}}if v, ok := rawVal.(float64); ok {
			return {{.PrimitiveType}}(v), nil
		}
		if v, ok := rawVal.(float32); ok {
			return {{.PrimitiveType}}(v), nil
		}
		return 0.0, fmt.Errorf("unexpected type for float response: %T", rawVal){{else if eq .PrimitiveType "bool"}}if v, ok := rawVal.(bool); ok {
			return v, nil
		}
		return false, fmt.Errorf("unexpected type for boolean response: %T", rawVal){{end}}
	}
	return {{if eq .PrimitiveType "string"}}""{{else if or (eq .PrimitiveType "int64") (eq .PrimitiveType "int32") (eq .PrimitiveType "int")}}0{{else if or (eq .PrimitiveType "float64") (eq .PrimitiveType "float32")}}0.0{{else if eq .PrimitiveType "bool"}}false{{end}}, fmt.Errorf("@raw key not found in response")
	{{else}}{{if .ReturnsArray}}record, err := core.Request[core.RecordSet](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.{{.GoHTTPMethod}}, resourcePath, reqParams, reqBody)
	if err != nil {
		return nil, err
	}
	// Convert RecordSet ([]core.Record) to typed array ([]{{.ArrayItemType}})
	result := make([]{{.ArrayItemType}}, len(record))
	for i, item := range record {
		if err := item.Fill(&result[i]); err != nil {
			return nil, fmt.Errorf("failed to unmarshal array item %d: %w", i, err)
		}
	}
	return result, nil
	{{else}}record, err := core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.{{.GoHTTPMethod}}, resourcePath, reqParams, reqBody)
	if err != nil {
		return nil, err
	}
	{{if .ResponseFields}}
	var response {{.ResponseTypeName}}
	if err := record.Fill(&response); err != nil {
		return nil, err
	}
	return &response, nil
	{{else}}
	return record, nil
	{{end}}{{end}}{{end}}{{end}}{{end}}{{end}}
}

// {{.Name}}_{{.HTTPMethod}}
// method: {{.HTTPMethod}}
// url: {{.Path}}{{if .Summary}}
// summary: {{.Summary}}{{end}}{{if or .SimplifiedBody .IsAsyncTask}}
//
// Parameters:{{range .SimplifiedParams}}
//   - {{.Name}} (body): {{if .Description}}{{.Description}}{{else}}Request parameter{{end}}{{end}}{{if .IsAsyncTask}}
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.{{end}}{{end}}
func (r *{{$.Name}}) {{.Name}}_{{.HTTPMethod}}({{if .HasID}}id any, {{end}}{{if and .HasParams .BodyFields}}params *{{.BodyTypeName}}, {{end}}{{if .SimplifiedBody}}{{range $i, $p := .SimplifiedParams}}{{if gt $i 0}}, {{end}}{{$p.Name}} {{$p.Type}}{{end}}{{if .IsAsyncTask}}, {{end}}{{else}}{{if .HasBody}}{{if .BodyFields}}body *{{.BodyTypeName}}{{if .IsAsyncTask}}, {{end}}{{else}}body core.Params{{if .IsAsyncTask}}, {{end}}{{end}}{{else}}{{if .IsAsyncTask}}{{end}}{{end}}{{end}}{{if .IsAsyncTask}}waitTimeout time.Duration{{end}}) ({{if .IsAsyncTask}}*untyped.AsyncResult, error{{else}}{{if .ReturnsNoContent}}error{{else}}{{if .ReturnsPrimitive}}{{.PrimitiveType}}, error{{else}}{{if .ReturnsTextPlain}}string, error{{else}}{{if .ReturnsArray}}[]{{.ArrayItemType}}, error{{else}}{{if .ResponseFields}}*{{.ResponseTypeName}}, error{{else}}core.Record, error{{end}}{{end}}{{end}}{{end}}{{end}}{{end}}) {
	return r.{{.Name}}WithContext_{{.HTTPMethod}}(r.Untyped.GetCtx(){{if .HasID}}, id{{end}}{{if and .HasParams .BodyFields}}, params{{end}}{{if .SimplifiedBody}}{{range .SimplifiedParams}}, {{.Name}}{{end}}{{else}}{{if .HasBody}}, body{{end}}{{end}}{{if .IsAsyncTask}}, waitTimeout{{end}})
}

{{end}}
{{end}}
{{if .GenerationIssues}}
// -----------------------------------------------------
// GENERATION ISSUES
// -----------------------------------------------------
{{range .GenerationIssues}}//   - {{.}}
{{end}}{{end}}

