// Code generated by generate-typed-resources. DO NOT EDIT.
// Template: {{.TemplateOps}}

package typed

import (
	"context"
{{if or .HasTextPlainMethods .ReturnsTextPlain .HasPrimitiveMethods .HasArrayMethods}}	"fmt"
{{end}}{{if .ExtraMethods}}	"net/http"
{{end}}{{if .HasAsyncMethods}}	"time"
{{end}}
{{if or .HasAsyncMethods .ExtraMethods .HasTextPlainMethods .ReturnsTextPlain .HasArrayMethods}}
{{end}}	"github.com/vast-data/go-vast-client/core"
{{if .HasAsyncMethods}}	"github.com/vast-data/go-vast-client/resources/untyped"
{{end}}
)

// -----------------------------------------------------
// RESOURCE TYPE
// -----------------------------------------------------

// {{.Name}} represents a typed resource for {{.LowerName}} operations
type {{.Name}} struct {
	*core.TypedVastResource
}

// -----------------------------------------------------
// SEARCH PARAMS
// -----------------------------------------------------

// {{.Name}}SearchParams represents the search parameters for {{.Name}} operations
{{if .Resource.HasDetails "GET"}}// Generated from GET query parameters for resource: {{.Resource.GetDetails "GET"}}
{{else if .Resource.HasDetails "PATCH"}}// Generated from PATCH query parameters for resource: {{.Resource.GetDetails "PATCH"}}
{{end}}type {{.Name}}SearchParams struct {
	{{range .SearchParamsFields}}{{.Name}} {{.Type}} `json:"{{.JSONTag}},omitempty" yaml:"{{.YAMLTag}},omitempty" required:"{{.RequiredTag}}"{{if .DocTag}} doc:"{{.DocTag}}"{{else}} doc:""{{end}}`
	{{end}}
	// RawData allows passing arbitrary search parameters as key-value pairs.
	//
	// Use this field when you need query parameters that are not covered by the typed fields above.
	// This is particularly useful for:
	//   - Dynamic filter operations (e.g., "path__contains", "name__icontains")
	//   - Django-style query filters
	//   - Custom backend-specific parameters
	//
	// Example:
	//   params := &{{.Name}}SearchParams{
	//       RawData: core.Params{"path__contains": "/foo", "name__icontains": "bar"},
	//   }
	//
	// Note: You can use either the typed fields or RawData, or combine both.
	RawData core.Params `json:"-" yaml:"-"`
}
{{if and (or .HasCreate .HasUpdate) .HasRequestBodyContent}}
// -----------------------------------------------------
// REQUEST BODY
// -----------------------------------------------------

{{range .NestedTypes}}{{if eq .Section "REQUEST BODY"}}
// {{.Name}} represents a nested type for request body
type {{.Name}} struct {
	{{range .Fields}}{{.Name}} {{.Type}} `json:"{{.JSONTag}},omitempty" yaml:"{{.YAMLTag}},omitempty" required:"{{.RequiredTag}}"{{if .DocTag}} doc:"{{.DocTag}}"{{else}} doc:""{{end}}`
	{{end}}
}

{{end}}{{end}}
{{if and (not .HasUpdateInlineParams) .RequestBodyFields}}// {{.Name}}RequestBody represents the request body for {{.Name}} operations
{{if .Resource.HasUpsert "POST"}}// Generated from POST request body for resource: {{.Resource.GetUpsert "POST"}}
{{else if .Resource.HasUpsert "PUT"}}// Generated from PUT request body for resource: {{.Resource.GetUpsert "PUT"}}
{{else if .Resource.HasUpsert "PATCH"}}// Generated from PATCH request body for resource: {{.Resource.GetUpsert "PATCH"}}
{{end}}type {{.Name}}RequestBody struct {
	{{range .RequestBodyFields}}{{.Name}} {{.Type}} `json:"{{.JSONTag}},omitempty" yaml:"{{.YAMLTag}},omitempty" required:"{{.RequiredTag}}"{{if .DocTag}} doc:"{{.DocTag}}"{{else}} doc:""{{end}}`
	{{end}}
}
{{end}}{{end}}
{{if or .HasList .HasRead .HasCreate .HasUpdate}}
// -----------------------------------------------------
// MODELS
// -----------------------------------------------------

{{range .NestedTypes}}{{if eq .Section "MODEL"}}
// {{.Name}} represents a nested type for model
type {{.Name}} struct {
	{{range .Fields}}{{.Name}} {{.Type}} `json:"{{.JSONTag}},omitempty" yaml:"{{.YAMLTag}},omitempty" required:"{{.RequiredTag}}"{{if .DocTag}} doc:"{{.DocTag}}"{{else}} doc:""{{end}}`
	{{end}}
}

{{end}}{{end}}
{{end}}
{{if or .HasList .HasRead}}{{if or .DetailsModelIsAlias .DetailsModelFields}}// {{.Name}}DetailsModel represents the detailed model returned by GET/List operations
{{if .DetailsModelIsAlias}}// Type alias to component definition: {{.DetailsModelComponentRef}}
type {{.Name}}DetailsModel = {{.DetailsModelAlias}}
{{else}}{{if .Resource.HasDetails "GET"}}// Generated from GET response for resource: {{.Resource.GetDetails "GET"}}
{{else if .Resource.HasDetails "PATCH"}}// Generated from PATCH response for resource: {{.Resource.GetDetails "PATCH"}}
{{end}}type {{.Name}}DetailsModel struct {
	{{range .DetailsModelFields}}{{.Name}} {{.Type}} `json:"{{.JSONTag}},omitempty" yaml:"{{.YAMLTag}},omitempty" required:"{{.RequiredTag}}"{{if .DocTag}} doc:"{{.DocTag}}"{{else}} doc:""{{end}}`
	{{end}}
}
{{end}}
{{end}}{{end}}
{{if or .HasCreate .HasUpdate}}{{if or .UpsertModelIsAlias .UpsertModelFields}}
{{if .UseEditModel}}// {{.Name}}EditModel represents the model returned by Update operations
{{if .UpsertModelIsAlias}}// Type alias to component definition: {{.UpsertModelComponentRef}}
type {{.Name}}EditModel = {{.UpsertModelAlias}}
{{else}}{{if .Resource.HasUpsert "PUT"}}// Generated from PUT response for resource: {{.Resource.GetUpsert "PUT"}}
{{else if .Resource.HasUpsert "PATCH"}}// Generated from PATCH response for resource: {{.Resource.GetUpsert "PATCH"}}
{{end}}type {{.Name}}EditModel struct {
	{{range .UpsertModelFields}}{{.Name}} {{.Type}} `json:"{{.JSONTag}},omitempty" yaml:"{{.YAMLTag}},omitempty" required:"{{.RequiredTag}}"{{if .DocTag}} doc:"{{.DocTag}}"{{else}} doc:""{{end}}`
	{{end}}
}
{{end}}
{{else}}// {{.Name}}UpsertModel represents the model returned by Create/Update operations
{{if .UpsertModelIsAlias}}// Type alias to component definition: {{.UpsertModelComponentRef}}
type {{.Name}}UpsertModel = {{.UpsertModelAlias}}
{{else}}{{if .Resource.HasUpsert "POST"}}// Generated from POST response for resource: {{.Resource.GetUpsert "POST"}}
{{else if .Resource.HasUpsert "PUT"}}// Generated from PUT response for resource: {{.Resource.GetUpsert "PUT"}}
{{else if .Resource.HasUpsert "PATCH"}}// Generated from PATCH response for resource: {{.Resource.GetUpsert "PATCH"}}
{{end}}type {{.Name}}UpsertModel struct {
	{{range .UpsertModelFields}}{{.Name}} {{.Type}} `json:"{{.JSONTag}},omitempty" yaml:"{{.YAMLTag}},omitempty" required:"{{.RequiredTag}}"{{if .DocTag}} doc:"{{.DocTag}}"{{else}} doc:""{{end}}`
	{{end}}
}
{{end}}
{{end}}
{{end}}{{end}}
{{if .HasList}}

// -----------------------------------------------------
// LIST
// -----------------------------------------------------

// List retrieves multiple {{.LowerName}}s with typed request/response{{if .GetSummary}}
// summary: {{.GetSummary}}{{end}}
func (r *{{.Name}}) List(req *{{.Name}}SearchParams) ([]*{{.Name}}DetailsModel, error) {
	return r.ListWithContext(r.Untyped.GetCtx(), req)
}

// ListWithContext retrieves multiple {{.LowerName}}s with typed request/response using provided context{{if .GetSummary}}
// summary: {{.GetSummary}}{{end}}
func (r *{{.Name}}) ListWithContext(ctx context.Context, req *{{.Name}}SearchParams) ([]*{{.Name}}DetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.GetResourceMap()[r.GetResourceType()].ListWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response []*{{.Name}}DetailsModel
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// Get retrieves a single {{.LowerName}} with typed request/response{{if .GetSummary}}
// summary: {{.GetSummary}}{{end}}
func (r *{{.Name}}) Get(req *{{.Name}}SearchParams) (*{{.Name}}DetailsModel, error) {
	return r.GetWithContext(r.Untyped.GetCtx(), req)
}

// GetWithContext retrieves a single {{.LowerName}} with typed request/response using provided context{{if .GetSummary}}
// summary: {{.GetSummary}}{{end}}
func (r *{{.Name}}) GetWithContext(ctx context.Context, req *{{.Name}}SearchParams) (*{{.Name}}DetailsModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response {{.Name}}DetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}
{{end}}
{{if .HasRead}}

// -----------------------------------------------------
// READ
// -----------------------------------------------------

// GetById retrieves a single {{.LowerName}} by ID{{if .GetByIdSummary}}
// summary: {{.GetByIdSummary}}{{end}}
func (r *{{.Name}}) GetById(id any) (*{{.Name}}DetailsModel, error) {
	return r.GetByIdWithContext(r.Untyped.GetCtx(), id)
}

// GetByIdWithContext retrieves a single {{.LowerName}} by ID using provided context{{if .GetByIdSummary}}
// summary: {{.GetByIdSummary}}{{end}}
func (r *{{.Name}}) GetByIdWithContext(ctx context.Context, id any) (*{{.Name}}DetailsModel, error) {
	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetByIdWithContext(ctx, id)
	if err != nil {
		return nil, err
	}

	var response {{.Name}}DetailsModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}
{{end}}
{{if .HasCreate}}

// -----------------------------------------------------
// CREATE
// -----------------------------------------------------

// Create creates a new {{.LowerName}} with typed request/response{{if .CreateSummary}}
// summary: {{.CreateSummary}}{{end}}
func (r *{{.Name}}) Create(req *{{.Name}}RequestBody) (*{{.Name}}UpsertModel, error) {
	return r.CreateWithContext(r.Untyped.GetCtx(), req)
}

// CreateWithContext creates a new {{.LowerName}} with typed request/response using provided context{{if .CreateSummary}}
// summary: {{.CreateSummary}}{{end}}
func (r *{{.Name}}) CreateWithContext(ctx context.Context, req *{{.Name}}RequestBody) (*{{.Name}}UpsertModel, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].CreateWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response {{.Name}}UpsertModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}
{{end}}
{{if .HasUpdate}}

// -----------------------------------------------------
// UPDATE
// -----------------------------------------------------
{{if .UpdateIsAsync}}
{{if .HasUpdateInlineParams}}
// Update updates an existing {{.LowerName}} and returns an async task{{if .UpdateSummary}}
// summary: {{.UpdateSummary}}{{end}}
//
// Parameters:{{range .UpdateInlineParams}}
//   - {{.Name}}: {{if .Description}}{{.Description}}{{else}}Update parameter{{end}}{{end}}
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (r *{{.Name}}) Update(id any{{range .UpdateInlineParams}}, {{.Name}} {{.Type}}{{end}}, waitTimeout time.Duration) (*untyped.AsyncResult, error) {
	return r.UpdateWithContext(r.Untyped.GetCtx(), id{{range .UpdateInlineParams}}, {{.Name}}{{end}}, waitTimeout)
}

// UpdateWithContext updates an existing {{.LowerName}} and returns an async task using provided context{{if .UpdateSummary}}
// summary: {{.UpdateSummary}}{{end}}
//
// Parameters:{{range .UpdateInlineParams}}
//   - {{.Name}}: {{if .Description}}{{.Description}}{{else}}Update parameter{{end}}{{end}}
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (r *{{.Name}}) UpdateWithContext(ctx context.Context, id any{{range .UpdateInlineParams}}, {{.Name}} {{.Type}}{{end}}, waitTimeout time.Duration) (*untyped.AsyncResult, error) {
	params := core.Params{
		{{range .UpdateInlineParams}}"{{.BodyField}}": {{.Name}},
		{{end}}
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].UpdateWithContext(ctx, id, params)
	if err != nil {
		return nil, err
	}

	return untyped.MaybeWaitAsyncResultWithContext(ctx, record, r.Untyped, waitTimeout)
}
{{else}}
// Update updates an existing {{.LowerName}} and returns an async task{{if .UpdateSummary}}
// summary: {{.UpdateSummary}}{{end}}
//
// Parameters:
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (r *{{.Name}}) Update(id any, req *{{.Name}}RequestBody, waitTimeout time.Duration) (*untyped.AsyncResult, error) {
	return r.UpdateWithContext(r.Untyped.GetCtx(), id, req, waitTimeout)
}

// UpdateWithContext updates an existing {{.LowerName}} and returns an async task using provided context{{if .UpdateSummary}}
// summary: {{.UpdateSummary}}{{end}}
//
// Parameters:
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.
func (r *{{.Name}}) UpdateWithContext(ctx context.Context, id any, req *{{.Name}}RequestBody, waitTimeout time.Duration) (*untyped.AsyncResult, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].UpdateWithContext(ctx, id, params)
	if err != nil {
		return nil, err
	}

	return untyped.MaybeWaitAsyncResultWithContext(ctx, record, r.Untyped, waitTimeout)
}
{{end}}
{{else}}
{{if .HasUpdateInlineParams}}
// Update updates an existing {{.LowerName}} with typed request/response{{if .UpdateSummary}}
// summary: {{.UpdateSummary}}{{end}}
//
// Parameters:{{range .UpdateInlineParams}}
//   - {{.Name}}: {{if .Description}}{{.Description}}{{else}}Update parameter{{end}}{{end}}
func (r *{{.Name}}) Update(id any{{range .UpdateInlineParams}}, {{.Name}} {{.Type}}{{end}}) (*{{if .UseEditModel}}{{.Name}}EditModel{{else}}{{.Name}}UpsertModel{{end}}, error) {
	return r.UpdateWithContext(r.Untyped.GetCtx(), id{{range .UpdateInlineParams}}, {{.Name}}{{end}})
}

// UpdateWithContext updates an existing {{.LowerName}} with typed request/response using provided context{{if .UpdateSummary}}
// summary: {{.UpdateSummary}}{{end}}
//
// Parameters:{{range .UpdateInlineParams}}
//   - {{.Name}}: {{if .Description}}{{.Description}}{{else}}Update parameter{{end}}{{end}}
func (r *{{.Name}}) UpdateWithContext(ctx context.Context, id any{{range .UpdateInlineParams}}, {{.Name}} {{.Type}}{{end}}) (*{{if .UseEditModel}}{{.Name}}EditModel{{else}}{{.Name}}UpsertModel{{end}}, error) {
	params := core.Params{
		{{range .UpdateInlineParams}}"{{.BodyField}}": {{.Name}},
		{{end}}
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].UpdateWithContext(ctx, id, params)
	if err != nil {
		return nil, err
	}

	var response {{if .UseEditModel}}{{.Name}}EditModel{{else}}{{.Name}}UpsertModel{{end}}
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}
{{else}}
// Update updates an existing {{.LowerName}} with typed request/response{{if .UpdateSummary}}
// summary: {{.UpdateSummary}}{{end}}
func (r *{{.Name}}) Update(id any, req *{{.Name}}RequestBody) (*{{if .UseEditModel}}{{.Name}}EditModel{{else}}{{.Name}}UpsertModel{{end}}, error) {
	return r.UpdateWithContext(r.Untyped.GetCtx(), id, req)
}

// UpdateWithContext updates an existing {{.LowerName}} with typed request/response using provided context{{if .UpdateSummary}}
// summary: {{.UpdateSummary}}{{end}}
func (r *{{.Name}}) UpdateWithContext(ctx context.Context, id any, req *{{.Name}}RequestBody) (*{{if .UseEditModel}}{{.Name}}EditModel{{else}}{{.Name}}UpsertModel{{end}}, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].UpdateWithContext(ctx, id, params)
	if err != nil {
		return nil, err
	}

	var response {{if .UseEditModel}}{{.Name}}EditModel{{else}}{{.Name}}UpsertModel{{end}}
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}
{{end}}
{{end}}
{{end}}
{{if .HasDelete}}

// -----------------------------------------------------
// DELETE
// -----------------------------------------------------
{{if .DeleteIsAsync}}
// Delete deletes a {{.LowerName}} and returns an async task{{if or .DeleteQueryParams .DeleteBodyParams}}
//
// Parameters:{{range .DeleteQueryParams}}
//   - {{.Name}}: {{if .Description}}{{.Description}}{{else}}Query parameter{{end}}{{end}}{{range .DeleteBodyParams}}
//   - {{.Name}}: {{if .Description}}{{.Description}}{{else}}Body parameter{{end}}{{end}}
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.{{end}}
func (r *{{.Name}}) Delete(req *{{.Name}}SearchParams{{range .DeleteQueryParams}}, {{.Name}} {{.Type}}{{end}}{{range .DeleteBodyParams}}, {{.Name}} {{.Type}}{{end}}, waitTimeout time.Duration) (*untyped.AsyncResult, error) {
	return r.DeleteWithContext(r.Untyped.GetCtx(), req{{range .DeleteQueryParams}}, {{.Name}}{{end}}{{range .DeleteBodyParams}}, {{.Name}}{{end}}, waitTimeout)
}

// DeleteWithContext deletes a {{.LowerName}} and returns an async task using provided context{{if or .DeleteQueryParams .DeleteBodyParams}}
//
// Parameters:{{range .DeleteQueryParams}}
//   - {{.Name}}: {{if .Description}}{{.Description}}{{else}}Query parameter{{end}}{{end}}{{range .DeleteBodyParams}}
//   - {{.Name}}: {{if .Description}}{{.Description}}{{else}}Body parameter{{end}}{{end}}
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.{{end}}
func (r *{{.Name}}) DeleteWithContext(ctx context.Context, req *{{.Name}}SearchParams{{range .DeleteQueryParams}}, {{.Name}} {{.Type}}{{end}}{{range .DeleteBodyParams}}, {{.Name}} {{.Type}}{{end}}, waitTimeout time.Duration) (*untyped.AsyncResult, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}
	// For async DELETE, first get the resource ID, then call DELETE with core.Request
	result, err := r.Untyped.GetResourceMap()[r.GetResourceType()].GetWithContext(ctx, params)
	if err != nil {
		return nil, err
	}
	idVal, ok := result["id"]
	if !ok {
		return nil, fmt.Errorf("resource '%s' does not have id field and cannot be deleted by id", r.GetResourceType())
	}
	
	path := core.BuildResourcePathWithID(r.Untyped.GetResourceMap()[r.GetResourceType()].GetResourcePath(), idVal)
	{{if or .DeleteQueryParams .DeleteBodyParams}}
	// Build DELETE query params
	{{if .DeleteQueryParams}}deleteQueryParams := core.Params{ {{range .DeleteQueryParams}}"{{.BodyField}}": {{.Name}}, {{end}} }{{else}}var deleteQueryParams core.Params{{end}}
	// Build DELETE body params
	{{if .DeleteBodyParams}}deleteBody := core.Params{ {{range .DeleteBodyParams}}"{{.BodyField}}": {{.Name}}, {{end}} }{{else}}var deleteBody core.Params{{end}}
	record, err := core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodDelete, path, deleteQueryParams, deleteBody)
	{{else}}record, err := core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodDelete, path, nil, nil)
	{{end}}if err != nil {
		return nil, err
	}

	return untyped.MaybeWaitAsyncResultWithContext(ctx, record, r.Untyped, waitTimeout)
}
{{else}}
// Delete deletes a {{.LowerName}} with search parameters{{if or .DeleteQueryParams .DeleteBodyParams}}
//
// Parameters:{{range .DeleteQueryParams}}
//   - {{.Name}}: {{if .Description}}{{.Description}}{{else}}Query parameter{{end}}{{end}}{{range .DeleteBodyParams}}
//   - {{.Name}}: {{if .Description}}{{.Description}}{{else}}Body parameter{{end}}{{end}}{{end}}
func (r *{{.Name}}) Delete(req *{{.Name}}SearchParams{{range .DeleteQueryParams}}, {{.Name}} {{.Type}}{{end}}{{range .DeleteBodyParams}}, {{.Name}} {{.Type}}{{end}}) error {
	return r.DeleteWithContext(r.Untyped.GetCtx(), req{{range .DeleteQueryParams}}, {{.Name}}{{end}}{{range .DeleteBodyParams}}, {{.Name}}{{end}})
}

// DeleteWithContext deletes a {{.LowerName}} with search parameters using provided context{{if or .DeleteQueryParams .DeleteBodyParams}}
//
// Parameters:{{range .DeleteQueryParams}}
//   - {{.Name}}: {{if .Description}}{{.Description}}{{else}}Query parameter{{end}}{{end}}{{range .DeleteBodyParams}}
//   - {{.Name}}: {{if .Description}}{{.Description}}{{else}}Body parameter{{end}}{{end}}{{end}}
func (r *{{.Name}}) DeleteWithContext(ctx context.Context, req *{{.Name}}SearchParams{{range .DeleteQueryParams}}, {{.Name}} {{.Type}}{{end}}{{range .DeleteBodyParams}}, {{.Name}} {{.Type}}{{end}}) error {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return err
	}
	{{if or .DeleteQueryParams .DeleteBodyParams}}
	// Build DELETE query params
	{{if .DeleteQueryParams}}deleteQueryParams := core.Params{ {{range .DeleteQueryParams}}"{{.BodyField}}": {{.Name}}, {{end}} }{{else}}var deleteQueryParams core.Params{{end}}
	// Build DELETE body params
	{{if .DeleteBodyParams}}deleteBody := core.Params{ {{range .DeleteBodyParams}}"{{.BodyField}}": {{.Name}}, {{end}} }{{else}}var deleteBody core.Params{{end}}
	_, err = r.Untyped.GetResourceMap()[r.GetResourceType()].DeleteWithContext(ctx, params, deleteQueryParams, deleteBody)
	{{else}}_, err = r.Untyped.GetResourceMap()[r.GetResourceType()].DeleteWithContext(ctx, params, nil, nil)
	{{end}}if err != nil {
		return err
	}
	return nil
}
{{end}}
{{if .DeleteByIdIsAsync}}
// DeleteById deletes a {{.LowerName}} by ID and returns an async task{{if .DeleteSummary}}
// summary: {{.DeleteSummary}}{{end}}{{if or .DeleteIdDescription .DeleteQueryParams .DeleteBodyParams}}
//
// Parameters:{{if .DeleteIdDescription}}
//   - id: {{.DeleteIdDescription}}{{end}}{{range .DeleteQueryParams}}
//   - {{.Name}}: {{if .Description}}{{.Description}}{{else}}Query parameter{{end}}{{end}}{{range .DeleteBodyParams}}
//   - {{.Name}}: {{if .Description}}{{.Description}}{{else}}Body parameter{{end}}{{end}}
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.{{end}}
func (r *{{.Name}}) DeleteById(id any{{range .DeleteQueryParams}}, {{.Name}} {{.Type}}{{end}}{{range .DeleteBodyParams}}, {{.Name}} {{.Type}}{{end}}, waitTimeout time.Duration) (*untyped.AsyncResult, error) {
	return r.DeleteByIdWithContext(r.Untyped.GetCtx(), id{{range .DeleteQueryParams}}, {{.Name}}{{end}}{{range .DeleteBodyParams}}, {{.Name}}{{end}}, waitTimeout)
}

// DeleteByIdWithContext deletes a {{.LowerName}} by ID and returns an async task using provided context{{if .DeleteSummary}}
// summary: {{.DeleteSummary}}{{end}}{{if or .DeleteIdDescription .DeleteQueryParams .DeleteBodyParams}}
//
// Parameters:{{if .DeleteIdDescription}}
//   - id: {{.DeleteIdDescription}}{{end}}{{range .DeleteQueryParams}}
//   - {{.Name}}: {{if .Description}}{{.Description}}{{else}}Query parameter{{end}}{{end}}{{range .DeleteBodyParams}}
//   - {{.Name}}: {{if .Description}}{{.Description}}{{else}}Body parameter{{end}}{{end}}
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.{{end}}
func (r *{{.Name}}) DeleteByIdWithContext(ctx context.Context, id any{{range .DeleteQueryParams}}, {{.Name}} {{.Type}}{{end}}{{range .DeleteBodyParams}}, {{.Name}} {{.Type}}{{end}}, waitTimeout time.Duration) (*untyped.AsyncResult, error) {
	// For async DELETE, call core.Request directly to get the task response
	path := core.BuildResourcePathWithID(r.Untyped.GetResourceMap()[r.GetResourceType()].GetResourcePath(), id)
	{{if or .DeleteQueryParams .DeleteBodyParams}}
	// Build DELETE query params
	{{if .DeleteQueryParams}}deleteQueryParams := core.Params{ {{range .DeleteQueryParams}}"{{.BodyField}}": {{.Name}}, {{end}} }{{else}}var deleteQueryParams core.Params{{end}}
	// Build DELETE body params
	{{if .DeleteBodyParams}}deleteBody := core.Params{ {{range .DeleteBodyParams}}"{{.BodyField}}": {{.Name}}, {{end}} }{{else}}var deleteBody core.Params{{end}}
	record, err := core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodDelete, path, deleteQueryParams, deleteBody)
	{{else}}record, err := core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.MethodDelete, path, nil, nil)
	{{end}}if err != nil {
		return nil, err
	}

	return untyped.MaybeWaitAsyncResultWithContext(ctx, record, r.Untyped, waitTimeout)
}
{{else}}
// DeleteById deletes a {{.LowerName}} by ID{{if .DeleteSummary}}
// summary: {{.DeleteSummary}}{{end}}{{if or .DeleteIdDescription .DeleteQueryParams .DeleteBodyParams}}
//
// Parameters:{{if .DeleteIdDescription}}
//   - id: {{.DeleteIdDescription}}{{end}}{{range .DeleteQueryParams}}
//   - {{.Name}}: {{if .Description}}{{.Description}}{{else}}Query parameter{{end}}{{end}}{{range .DeleteBodyParams}}
//   - {{.Name}}: {{if .Description}}{{.Description}}{{else}}Body parameter{{end}}{{end}}{{end}}
func (r *{{.Name}}) DeleteById(id any{{range .DeleteQueryParams}}, {{.Name}} {{.Type}}{{end}}{{range .DeleteBodyParams}}, {{.Name}} {{.Type}}{{end}}) error {
	return r.DeleteByIdWithContext(r.Untyped.GetCtx(), id{{range .DeleteQueryParams}}, {{.Name}}{{end}}{{range .DeleteBodyParams}}, {{.Name}}{{end}})
}

// DeleteByIdWithContext deletes a {{.LowerName}} by ID using provided context{{if .DeleteSummary}}
// summary: {{.DeleteSummary}}{{end}}{{if or .DeleteIdDescription .DeleteQueryParams .DeleteBodyParams}}
//
// Parameters:{{if .DeleteIdDescription}}
//   - id: {{.DeleteIdDescription}}{{end}}{{range .DeleteQueryParams}}
//   - {{.Name}}: {{if .Description}}{{.Description}}{{else}}Query parameter{{end}}{{end}}{{range .DeleteBodyParams}}
//   - {{.Name}}: {{if .Description}}{{.Description}}{{else}}Body parameter{{end}}{{end}}{{end}}
func (r *{{.Name}}) DeleteByIdWithContext(ctx context.Context, id any{{range .DeleteQueryParams}}, {{.Name}} {{.Type}}{{end}}{{range .DeleteBodyParams}}, {{.Name}} {{.Type}}{{end}}) error {
	{{if or .DeleteQueryParams .DeleteBodyParams}}
	// Build DELETE query params
	{{if .DeleteQueryParams}}deleteQueryParams := core.Params{ {{range .DeleteQueryParams}}"{{.BodyField}}": {{.Name}}, {{end}} }{{else}}var deleteQueryParams core.Params{{end}}
	// Build DELETE body params
	{{if .DeleteBodyParams}}deleteBody := core.Params{ {{range .DeleteBodyParams}}"{{.BodyField}}": {{.Name}}, {{end}} }{{else}}var deleteBody core.Params{{end}}
	_, err := r.Untyped.GetResourceMap()[r.GetResourceType()].DeleteByIdWithContext(ctx, id, deleteQueryParams, deleteBody)
	{{else}}_, err := r.Untyped.GetResourceMap()[r.GetResourceType()].DeleteByIdWithContext(ctx, id, nil, nil)
	{{end}}if err != nil {
		return err
	}
	return nil
}
{{end}}
{{end}}
{{if and .HasList .HasCreate}}

// -----------------------------------------------------
// ENSURE
// -----------------------------------------------------

// Ensure ensures a {{.LowerName}} exists with typed response
func (r *{{.Name}}) Ensure(searchParams *{{.Name}}SearchParams, body *{{.Name}}RequestBody) (*{{.Name}}UpsertModel, error) {
	return r.EnsureWithContext(r.Untyped.GetCtx(), searchParams, body)
}

// EnsureWithContext ensures a {{.LowerName}} exists with typed response using provided context
func (r *{{.Name}}) EnsureWithContext(ctx context.Context, searchParams *{{.Name}}SearchParams, body *{{.Name}}RequestBody) (*{{.Name}}UpsertModel, error) {
	searchParamsConverted, err := core.NewParamsFromStruct(searchParams)
	if err != nil {
		return nil, err
	}
	bodyConverted, err := core.NewParamsFromStruct(body)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.GetResourceMap()[r.GetResourceType()].EnsureWithContext(ctx, searchParamsConverted, bodyConverted)
	if err != nil {
		return nil, err
	}

	var response {{.Name}}UpsertModel
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}
{{end}}
{{if .HasList}}

// Exists checks if a {{.LowerName}} exists
func (r *{{.Name}}) Exists(req *{{.Name}}SearchParams) (bool, error) {
	return r.ExistsWithContext(r.Untyped.GetCtx(), req)
}

// ExistsWithContext checks if a {{.LowerName}} exists using provided context
func (r *{{.Name}}) ExistsWithContext(ctx context.Context, req *{{.Name}}SearchParams) (bool, error) {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].ExistsWithContext(ctx, params)
}

// MustExists checks if a {{.LowerName}} exists and panics if not
func (r *{{.Name}}) MustExists(req *{{.Name}}SearchParams) bool {
	return r.MustExistsWithContext(r.Untyped.GetCtx(), req)
}

// MustExistsWithContext checks if a {{.LowerName}} exists and panics if not using provided context
func (r *{{.Name}}) MustExistsWithContext(ctx context.Context, req *{{.Name}}SearchParams) bool {
	params, err := core.NewParamsFromStruct(req)
	if err != nil {
		panic(err)
	}
	return r.Untyped.GetResourceMap()[r.GetResourceType()].MustExistsWithContext(ctx, params)
}
{{end}}

{{if .ExtraMethods}}
// -----------------------------------------------------
// EXTRA METHODS
// -----------------------------------------------------

{{range .NestedTypes}}{{if eq .Section "EXTRA_METHOD_BODY"}}
// {{.Name}} represents a nested type for {{$.Name}} extra method body
type {{.Name}} struct {
	{{range .Fields}}{{.Name}} {{.Type}} `json:"{{.JSONTag}}{{if or (ne .Type "bool") (eq .RequiredTag "false")}},omitempty{{end}}" yaml:"{{.YAMLTag}}{{if or (ne .Type "bool") (eq .RequiredTag "false")}},omitempty{{end}}" required:"{{.RequiredTag}}"{{if .DocTag}} doc:"{{.DocTag}}"{{else}} doc:""{{end}}`
	{{end}}
}

{{end}}{{end}}
{{range .NestedTypes}}{{if eq .Section "EXTRA_METHOD_RESPONSE"}}
// {{.Name}} represents a nested type for {{$.Name}} extra method response
type {{.Name}} struct {
	{{range .Fields}}{{.Name}} {{.Type}} `json:"{{.JSONTag}},omitempty" yaml:"{{.YAMLTag}},omitempty" required:"{{.RequiredTag}}"{{if .DocTag}} doc:"{{.DocTag}}"{{else}} doc:""{{end}}`
	{{end}}
}

{{end}}{{end}}
{{range .ExtraMethods}}
{{$method := .}}
{{if and .BodyFields (not .SimplifiedBody)}}
// {{.BodyTypeName}} represents the request body for {{.Name}}
type {{.BodyTypeName}} struct {
	{{range .BodyFields}}{{.Name}} {{.Type}} `json:"{{.JSONTag}}{{if or (ne .Type "bool") (eq .RequiredTag "false")}},omitempty{{end}}" yaml:"{{.YAMLTag}}{{if or (ne .Type "bool") (eq .RequiredTag "false")}},omitempty{{end}}" required:"{{.RequiredTag}}"{{if .DocTag}} doc:"{{.DocTag}}"{{else}} doc:""{{end}}`
	{{end}}
}

{{end}}
{{if .ResponseFields}}
// {{.ResponseTypeName}} represents the response model for {{.Name}}
type {{.ResponseTypeName}} struct {
	{{range .ResponseFields}}{{.Name}} {{.Type}} `json:"{{.JSONTag}},omitempty" yaml:"{{.YAMLTag}},omitempty" required:"{{.RequiredTag}}"{{if .DocTag}} doc:"{{.DocTag}}"{{else}} doc:""{{end}}`
	{{end}}
}

{{end}}
// {{.Name}}WithContext_{{.HTTPMethod}}
// method: {{.HTTPMethod}}
// url: {{.Path}}{{if .Summary}}
// summary: {{.Summary}}{{end}}{{if or .SimplifiedBody .IsAsyncTask}}
//
// Parameters:{{range .SimplifiedParams}}
//   - {{.Name}} (body): {{if .Description}}{{.Description}}{{else}}Request parameter{{end}}{{end}}{{if .IsAsyncTask}}
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.{{end}}{{end}}
func (r *{{$.Name}}) {{.Name}}WithContext_{{.HTTPMethod}}(ctx context.Context{{if .HasID}}, id any{{end}}{{if and .HasParams .BodyFields}}, params *{{.BodyTypeName}}{{end}}{{if .SimplifiedBody}}{{range $i, $p := .SimplifiedParams}}, {{$p.Name}} {{$p.Type}}{{end}}{{else}}{{if .HasBody}}{{if .BodyFields}}, body *{{.BodyTypeName}}{{else}}, body core.Params{{end}}{{end}}{{end}}{{if .IsAsyncTask}}, waitTimeout time.Duration{{end}}) ({{if .IsAsyncTask}}*untyped.AsyncResult, error{{else}}{{if .ReturnsNoContent}}error{{else}}{{if .ReturnsPrimitive}}{{.PrimitiveType}}, error{{else}}{{if .ReturnsTextPlain}}string, error{{else}}{{if .ReturnsArray}}[]{{.ArrayItemType}}, error{{else}}{{if .ResponseFields}}*{{.ResponseTypeName}}, error{{else}}core.Record, error{{end}}{{end}}{{end}}{{end}}{{end}}{{end}}) {
	{{if .HasID}}resourcePath := core.BuildResourcePathWithID("{{.ResourcePath}}", id{{if .SubPath}}, "{{.SubPath}}"{{end}})
	{{else}}resourcePath := "{{.Path}}"
	{{end}}
	{{if and .HasParams .BodyFields}}reqParams, err := core.NewParamsFromStruct(params)
	if err != nil {
		return {{if .IsAsyncTask}}nil, err{{else if .ReturnsNoContent}}err{{else if .ReturnsPrimitive}}{{if eq .PrimitiveType "string"}}"", err{{else if or (eq .PrimitiveType "int64") (eq .PrimitiveType "int32") (eq .PrimitiveType "int")}}0, err{{else if or (eq .PrimitiveType "float64") (eq .PrimitiveType "float32")}}0.0, err{{else if eq .PrimitiveType "bool"}}false, err{{else}}nil, err{{end}}{{else if .ReturnsTextPlain}}"", err{{else}}nil, err{{end}}
	}{{else}}var reqParams core.Params{{end}}
	{{if .SimplifiedBody}}reqBody := core.Params{}
	{{range .SimplifiedParams}}{{if .Required}}reqBody["{{.BodyField}}"] = {{.Name}}
	{{else}}{{if eq .Type "string"}}if {{.Name}} != "" {
		reqBody["{{.BodyField}}"] = {{.Name}}
	}
	{{else if eq .Type "bool"}}if {{.Name}} {
		reqBody["{{.BodyField}}"] = {{.Name}}
	}
	{{else if or (eq .Type "int") (eq .Type "int32") (eq .Type "int64") (eq .Type "uint") (eq .Type "uint32") (eq .Type "uint64") (eq .Type "float32") (eq .Type "float64")}}if {{.Name}} != 0 {
		reqBody["{{.BodyField}}"] = {{.Name}}
	}
	{{else}}if {{.Name}} != nil {
		reqBody["{{.BodyField}}"] = {{.Name}}
	}
	{{end}}{{end}}{{end}}	{{else}}{{if .HasBody}}{{if .BodyFields}}reqBody, err := core.NewParamsFromStruct(body)
	if err != nil {
		return {{if .IsAsyncTask}}nil, err{{else if .ReturnsNoContent}}err{{else if .ReturnsPrimitive}}{{if eq .PrimitiveType "string"}}"", err{{else if or (eq .PrimitiveType "int64") (eq .PrimitiveType "int32") (eq .PrimitiveType "int")}}0, err{{else if or (eq .PrimitiveType "float64") (eq .PrimitiveType "float32")}}0.0, err{{else if eq .PrimitiveType "bool"}}false, err{{else}}nil, err{{end}}{{else if .ReturnsTextPlain}}"", err{{else}}nil, err{{end}}
	}{{else}}reqBody := body{{end}}{{else}}var reqBody core.Params{{end}}{{end}}
	
	{{if .IsAsyncTask}}result, err := core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.{{.GoHTTPMethod}}, resourcePath, reqParams, reqBody)
	if err != nil {
		return nil, err
	}

	return untyped.MaybeWaitAsyncResultWithContext(ctx, result, r.Untyped, waitTimeout)
	{{else}}{{if .ReturnsNoContent}}{{if and (or (and .HasParams .BodyFields) (and .HasBody .BodyFields)) (not .SimplifiedBody)}}_, err = core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.{{.GoHTTPMethod}}, resourcePath, reqParams, reqBody)
	return err{{else}}_, err := core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.{{.GoHTTPMethod}}, resourcePath, reqParams, reqBody)
	return err{{end}}
	{{else}}{{if .ReturnsTextPlain}}record, err := core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.{{.GoHTTPMethod}}, resourcePath, reqParams, reqBody)
	if err != nil {
		return "", err
	}
	// Extract text/plain response from @raw key
	if rawVal, ok := record["@raw"]; ok {
		if rawBytes, ok := rawVal.([]byte); ok {
			return string(rawBytes), nil
		}
		return fmt.Sprintf("%v", rawVal), nil
	}
	return "", fmt.Errorf("@raw key not found in response")
	{{else}}{{if .ReturnsPrimitive}}record, err := core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.{{.GoHTTPMethod}}, resourcePath, reqParams, reqBody)
	if err != nil {
		return {{if eq .PrimitiveType "string"}}"", err{{else if or (eq .PrimitiveType "int64") (eq .PrimitiveType "int32") (eq .PrimitiveType "int")}}0, err{{else if or (eq .PrimitiveType "float64") (eq .PrimitiveType "float32")}}0.0, err{{else if eq .PrimitiveType "bool"}}false, err{{end}}
	}
	// Extract primitive response from @raw key
	if rawVal, ok := record["@raw"]; ok {
		{{if eq .PrimitiveType "string"}}if rawBytes, ok := rawVal.([]byte); ok {
			return string(rawBytes), nil
		}
		return fmt.Sprintf("%v", rawVal), nil{{else if or (eq .PrimitiveType "int64") (eq .PrimitiveType "int32") (eq .PrimitiveType "int")}}if v, ok := rawVal.(float64); ok {
			return {{.PrimitiveType}}(v), nil
		}
		if v, ok := rawVal.(int64); ok {
			return {{.PrimitiveType}}(v), nil
		}
		if v, ok := rawVal.(int); ok {
			return {{.PrimitiveType}}(v), nil
		}
		return 0, fmt.Errorf("unexpected type for integer response: %T", rawVal){{else if or (eq .PrimitiveType "float64") (eq .PrimitiveType "float32")}}if v, ok := rawVal.(float64); ok {
			return {{.PrimitiveType}}(v), nil
		}
		if v, ok := rawVal.(float32); ok {
			return {{.PrimitiveType}}(v), nil
		}
		return 0.0, fmt.Errorf("unexpected type for float response: %T", rawVal){{else if eq .PrimitiveType "bool"}}if v, ok := rawVal.(bool); ok {
			return v, nil
		}
		return false, fmt.Errorf("unexpected type for boolean response: %T", rawVal){{end}}
	}
	return {{if eq .PrimitiveType "string"}}""{{else if or (eq .PrimitiveType "int64") (eq .PrimitiveType "int32") (eq .PrimitiveType "int")}}0{{else if or (eq .PrimitiveType "float64") (eq .PrimitiveType "float32")}}0.0{{else if eq .PrimitiveType "bool"}}false{{end}}, fmt.Errorf("@raw key not found in response")
	{{else}}{{if .ReturnsArray}}record, err := core.Request[core.RecordSet](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.{{.GoHTTPMethod}}, resourcePath, reqParams, reqBody)
	if err != nil {
		return nil, err
	}
	// Convert RecordSet ([]core.Record) to typed array ([]{{.ArrayItemType}})
	result := make([]{{.ArrayItemType}}, len(record))
	for i, item := range record {
		if err := item.Fill(&result[i]); err != nil {
			return nil, fmt.Errorf("failed to unmarshal array item %d: %w", i, err)
		}
	}
	return result, nil
	{{else}}record, err := core.Request[core.Record](ctx, r.Untyped.GetResourceMap()[r.GetResourceType()], http.{{.GoHTTPMethod}}, resourcePath, reqParams, reqBody)
	if err != nil {
		return nil, err
	}
	{{if .ResponseFields}}
	var response {{.ResponseTypeName}}
	if err := record.Fill(&response); err != nil {
		return nil, err
	}
	return &response, nil
	{{else}}
	return record, nil
	{{end}}{{end}}{{end}}{{end}}{{end}}{{end}}
}

// {{.Name}}_{{.HTTPMethod}}
// method: {{.HTTPMethod}}
// url: {{.Path}}{{if .Summary}}
// summary: {{.Summary}}{{end}}{{if or .SimplifiedBody .IsAsyncTask}}
//
// Parameters:{{range .SimplifiedParams}}
//   - {{.Name}} (body): {{if .Description}}{{.Description}}{{else}}Request parameter{{end}}{{end}}{{if .IsAsyncTask}}
//   - waitTimeout: If 0, returns immediately without waiting (async). Otherwise, waits for task completion with the specified timeout.{{end}}{{end}}
func (r *{{$.Name}}) {{.Name}}_{{.HTTPMethod}}({{if .HasID}}id any, {{end}}{{if and .HasParams .BodyFields}}params *{{.BodyTypeName}}, {{end}}{{if .SimplifiedBody}}{{range $i, $p := .SimplifiedParams}}{{if gt $i 0}}, {{end}}{{$p.Name}} {{$p.Type}}{{end}}{{if .IsAsyncTask}}, {{end}}{{else}}{{if .HasBody}}{{if .BodyFields}}body *{{.BodyTypeName}}{{if .IsAsyncTask}}, {{end}}{{else}}body core.Params{{if .IsAsyncTask}}, {{end}}{{end}}{{else}}{{if .IsAsyncTask}}{{end}}{{end}}{{end}}{{if .IsAsyncTask}}waitTimeout time.Duration{{end}}) ({{if .IsAsyncTask}}*untyped.AsyncResult, error{{else}}{{if .ReturnsNoContent}}error{{else}}{{if .ReturnsPrimitive}}{{.PrimitiveType}}, error{{else}}{{if .ReturnsTextPlain}}string, error{{else}}{{if .ReturnsArray}}[]{{.ArrayItemType}}, error{{else}}{{if .ResponseFields}}*{{.ResponseTypeName}}, error{{else}}core.Record, error{{end}}{{end}}{{end}}{{end}}{{end}}{{end}}) {
	return r.{{.Name}}WithContext_{{.HTTPMethod}}(r.Untyped.GetCtx(){{if .HasID}}, id{{end}}{{if and .HasParams .BodyFields}}, params{{end}}{{if .SimplifiedBody}}{{range .SimplifiedParams}}, {{.Name}}{{end}}{{else}}{{if .HasBody}}, body{{end}}{{end}}{{if .IsAsyncTask}}, waitTimeout{{end}})
}

{{end}}
{{end}}
{{if .GenerationIssues}}
// -----------------------------------------------------
// GENERATION ISSUES
// -----------------------------------------------------
{{range .GenerationIssues}}//   - {{.}}
{{end}}{{end}}
