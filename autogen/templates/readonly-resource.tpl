// Code generated by generate-typed-resources. DO NOT EDIT.

package typed

import (
	"context"

	vast_client "github.com/vast-data/go-vast-client"
)

// -----------------------------------------------------
// SEARCH PARAMS
// -----------------------------------------------------

{{range .NestedTypes}}
{{if eq .Section "SEARCH PARAMS"}}
// {{.Name}} represents a nested type for search params
type {{.Name}} struct {
{{range .Fields}}	{{.Name}} {{.Type}} `json:"{{.JSONTag}},omitempty" yaml:"{{.YAMLTag}},omitempty" required:"{{.RequiredTag}}" doc:"{{.DocTag}}"`
{{end}}
}

{{end}}
{{end}}

// {{.Name}}SearchParams represents the search parameters for {{.Name}} operations
// Generated from GET query parameters for resource: {{.LowerName}}s
type {{.Name}}SearchParams struct {
{{range .SearchParamsFields}}	{{.Name}} {{.Type}} `json:"{{.JSONTag}},omitempty" yaml:"{{.YAMLTag}},omitempty" required:"{{.RequiredTag}}" doc:"{{.DocTag}}"`
{{end}}
}

// -----------------------------------------------------
// MODEL
// -----------------------------------------------------

{{range .NestedTypes}}
{{if eq .Section "MODEL"}}
// {{.Name}} represents a nested type for model
type {{.Name}} struct {
{{range .Fields}}	{{.Name}} {{.Type}} `json:"{{.JSONTag}},omitempty" yaml:"{{.YAMLTag}},omitempty" required:"{{.RequiredTag}}" doc:"{{.DocTag}}"`
{{end}}

}

{{end}}
{{end}}

// {{.Name}}Model represents the model data for {{.Name}} operations
// Generated from schema: {{.Name}}
type {{.Name}}Model struct {
{{range .ModelFields}}	{{.Name}} {{.Type}} `json:"{{.JSONTag}},omitempty" yaml:"{{.YAMLTag}},omitempty" required:"{{.RequiredTag}}" doc:"{{.DocTag}}"`
{{end}}
}

// -----------------------------------------------------
// RESOURCE METHODS (READ-ONLY)
// -----------------------------------------------------

// {{.Name}} provides typed access to {{.Name}} resources (read-only)
type {{.Name}} struct {
	Untyped *vast_client.VMSRest
}

// Get retrieves a single {{.LowerName}} with typed request/response
func (r *{{.Name}}) Get(req *{{.Name}}SearchParams) (*{{.Name}}Model, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.{{.PluralName}}.Get(params)
	if err != nil {
		return nil, err
	}

	var response {{.Name}}Model
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// GetWithContext retrieves a single {{.LowerName}} with typed request/response using provided context
func (r *{{.Name}}) GetWithContext(ctx context.Context, req *{{.Name}}SearchParams) (*{{.Name}}Model, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	record, err := r.Untyped.{{.PluralName}}.GetWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response {{.Name}}Model
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// GetById retrieves a single {{.LowerName}} by ID with typed response
func (r *{{.Name}}) GetById(id any) (*{{.Name}}Model, error) {
	record, err := r.Untyped.{{.PluralName}}.GetById(id)
	if err != nil {
		return nil, err
	}

	var response {{.Name}}Model
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// GetByIdWithContext retrieves a single {{.LowerName}} by ID with typed response using provided context
func (r *{{.Name}}) GetByIdWithContext(ctx context.Context, id any) (*{{.Name}}Model, error) {
	record, err := r.Untyped.{{.PluralName}}.GetByIdWithContext(ctx, id)
	if err != nil {
		return nil, err
	}

	var response {{.Name}}Model
	if err := record.Fill(&response); err != nil {
		return nil, err
	}

	return &response, nil
}

// List retrieves multiple {{.LowerName}}s with typed request/response
func (r *{{.Name}}) List(req *{{.Name}}SearchParams) ([]*{{.Name}}Model, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.{{.PluralName}}.List(params)
	if err != nil {
		return nil, err
	}

	var response []*{{.Name}}Model
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// ListWithContext retrieves multiple {{.LowerName}}s with typed request/response using provided context
func (r *{{.Name}}) ListWithContext(ctx context.Context, req *{{.Name}}SearchParams) ([]*{{.Name}}Model, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return nil, err
	}

	recordSet, err := r.Untyped.{{.PluralName}}.ListWithContext(ctx, params)
	if err != nil {
		return nil, err
	}

	var response []*{{.Name}}Model
	if err := recordSet.Fill(&response); err != nil {
		return nil, err
	}

	return response, nil
}

// Exists checks if a {{.LowerName}} exists with the given search parameters
func (r *{{.Name}}) Exists(req *{{.Name}}SearchParams) (bool, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}

	return r.Untyped.{{.PluralName}}.Exists(params)
}

// ExistsWithContext checks if a {{.LowerName}} exists with the given search parameters using provided context
func (r *{{.Name}}) ExistsWithContext(ctx context.Context, req *{{.Name}}SearchParams) (bool, error) {
	params, err := vast_client.NewParamsFromStruct(req)
	if err != nil {
		return false, err
	}

	return r.Untyped.{{.PluralName}}.ExistsWithContext(ctx, params)
}

// MustExists checks if a {{.LowerName}} exists with the given search parameters, panics on error
func (r *{{.Name}}) MustExists(req *{{.Name}}SearchParams) bool {
	exists, err := r.Exists(req)
	if err != nil {
		panic(err)
	}
	return exists
}

// MustExistsWithContext checks if a {{.LowerName}} exists with the given search parameters using provided context, panics on error
func (r *{{.Name}}) MustExistsWithContext(ctx context.Context, req *{{.Name}}SearchParams) bool {
	exists, err := r.ExistsWithContext(ctx, req)
	if err != nil {
		panic(err)
	}
	return exists
}
